<Events startTimestamp="1650324058609" logVersion="1.0.0.202111260825">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="3747" date="Mon Apr 18 19:20:59 EDT 2022" docOffset="5233" starttimestamp="1650324058609" timestamp="1226" />
  <Command __id="3" _type="PauseCommand" date="Mon Apr 18 19:21:08 EDT 2022" range="5s-10s" starttimestamp="1650324058609" timestamp="9967">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8737]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Mon Apr 18 19:21:08 EDT 2022" starttimestamp="1650324058609" timestamp="9963" />
  <Command __id="4" _type="EclipseCommand" commandID="" date="Mon Apr 18 19:21:08 EDT 2022" starttimestamp="1650324058609" timestamp="10389" />
  <Command __id="5" _type="EclipseCommand" commandID="" date="Mon Apr 18 19:21:09 EDT 2022" starttimestamp="1650324058609" timestamp="10542" />
  <Command __id="7" _type="PauseCommand" date="Mon Apr 18 19:21:46 EDT 2022" range="30s-1m" starttimestamp="1650324058609" timestamp="47569">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[37027]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6" _type="ShellCommand" date="Mon Apr 18 19:21:46 EDT 2022" starttimestamp="1650324058609" timestamp="47569" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9" _type="PauseCommand" date="Mon Apr 18 19:22:02 EDT 2022" range="10s-20s" starttimestamp="1650324058609" timestamp="64094">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16524]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Mon Apr 18 19:22:06 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650324058609" timestamp="67862" type="Run" />
  <Command __id="12" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Mon Apr 18 19:22:06 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650324058609" timestamp="67862" type="Run" />
  <Command __id="14" _type="PauseCommand" date="Mon Apr 18 19:22:09 EDT 2022" range="2s-5s" starttimestamp="1650324058609" timestamp="70828">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2966]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="13" _type="ShellCommand" date="Mon Apr 18 19:22:09 EDT 2022" starttimestamp="1650324058609" timestamp="70828" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="16" _type="PauseCommand" date="Mon Apr 18 19:22:17 EDT 2022" range="5s-10s" starttimestamp="1650324058609" timestamp="78628">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7800]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="15" _type="ShellCommand" date="Mon Apr 18 19:22:17 EDT 2022" starttimestamp="1650324058609" timestamp="78628" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Mon Apr 18 19:20:59 EDT 2022" docASTNodeCount="761" docActiveCodeLength="5441" docExpressionCount="557" docLength="6553" projectName="A6" starttimestamp="1650324058609" timestamp="572">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposalMade;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.port.consensus.communication.CommunicationStateNames;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		//TODO NEED TO PARSE THE PROPOSAL NUMBER
		String aMessageString = new String(copy.array());
		System.out.println(aMessageString);
		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
		System.out.println("CLIENT COMMAND: "+aMessageString);
		//int aProposalNumber = 0;
		
		//ByteBuffer bufferCommand = ByteBuffer.wrap(aMessageString.getBytes());
		//boundedBuffer.add(bufferCommand);
		
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		//RemoteProposeRequestReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {
		String originalCommand = aCommand;
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());


		aProposalNumber = 1 + aProposalNumber;
		System.out.println("A PROPOSAL NUMBER: "+aProposalNumber);
		
		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME, true);
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		commandProcessor.setInputString(originalCommand); // all commands go to the first command window
		
		aCommand = aCommand.concat(String.valueOf(aProposalNumber));
		System.out.println("COMMAND + PROPOSAL NUMBER:"+aCommand);
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		ProposalMade.newCase(this, CommunicationStateNames.COMMAND, -1, originalCommand);
		nioManager.write(socketChannel, bufferCommand, this);
	

		
		
		
		//commandProcessor.setInputString(originalCommand); // all commands go to the first command window
		
		//commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		


}
]]></snapshot>
  </Command>
  <Command __id="18" _type="PauseCommand" date="Mon Apr 18 19:22:46 EDT 2022" range="20s-30s" starttimestamp="1650324058609" timestamp="107429">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[28801]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="19" _type="MoveCaretCommand" caretOffset="2575" date="Mon Apr 18 19:22:46 EDT 2022" docOffset="3894" starttimestamp="1650324058609" timestamp="107996" />
  <Command __id="17" _type="DiffBasedFileOpenCommand" date="Mon Apr 18 19:22:46 EDT 2022" docASTNodeCount="719" docActiveCodeLength="5117" docExpressionCount="520" docLength="5504" projectName="A6" starttimestamp="1650324058609" timestamp="107429">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
			
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		int aProposalNumber = Integer.parseInt( aMessageString.substring(aMessageString.length()-1) );
		aMessageString =  aMessageString.substring(0, aMessageString.length()-1);
		System.out.println("COMMAND IN SERVER: "+ aMessageString);
		
		System.out.println("PROPOSAL NUMBER: "+aProposalNumber);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aMessageString);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <Command __id="21" _type="PauseCommand" date="Mon Apr 18 19:23:09 EDT 2022" range="20s-30s" starttimestamp="1650324058609" timestamp="131020">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[23024]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="22" _type="MoveCaretCommand" caretOffset="8912" date="Mon Apr 18 19:23:09 EDT 2022" docOffset="10603" starttimestamp="1650324058609" timestamp="131307" />
  <Command __id="24" _type="PauseCommand" date="Mon Apr 18 19:23:20 EDT 2022" range="10s-20s" starttimestamp="1650324058609" timestamp="141527">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10220]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="23" _type="ConsoleOutput" date="Mon Apr 18 19:23:20 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="141527" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):67664
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="26" _type="PauseCommand" date="Mon Apr 18 19:23:38 EDT 2022" range="10s-20s" starttimestamp="1650324058609" timestamp="160162">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18635]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="25" _type="ShellCommand" date="Mon Apr 18 19:23:38 EDT 2022" starttimestamp="1650324058609" timestamp="160162" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="28" _type="PauseCommand" date="Mon Apr 18 19:24:05 EDT 2022" range="20s-30s" starttimestamp="1650324058609" timestamp="186610">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26448]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="27" _type="ShellCommand" date="Mon Apr 18 19:24:05 EDT 2022" starttimestamp="1650324058609" timestamp="186610" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="20" _type="DiffBasedFileOpenCommand" date="Mon Apr 18 19:23:09 EDT 2022" docASTNodeCount="1310" docActiveCodeLength="9564" docExpressionCount="920" docLength="10769" projectName="A6" starttimestamp="1650324058609" timestamp="131020">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import client.ClientRemoteObject;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	protected static String SERVER_NAME;
	private static int NIO_SERVER_PORT;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		

		// Make sure you set this property when processing args
		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));
		

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);
		// ClientArgsProcessor.getServerHost(args);
		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);
		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);
		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);
		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);
		

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			System.out.println("Broadcasting IPC mechanism: "+mechanism);
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism, aProposalNumber);
					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
		System.out.println("ADDED CONNECTION LISTENER");
	}

	@Override
	public void ipcMechanism(IPCMechanism mechanism) {
		setIPCMechanism(mechanism);
		
		if(this.broadcastMetaState) {
			int aProposalNumber = -1;
			ClientRemoteInterfaceGIPC fake = new ClientRemoteObject();
			broadcastIPCMechanism(mechanism, fake, aProposalNumber , this.broadcastMetaState);
		}
	}

}
]]></snapshot>
  </Command>
  <Command __id="30" _type="PauseCommand" date="Mon Apr 18 19:24:07 EDT 2022" range="2s-5s" starttimestamp="1650324058609" timestamp="189320">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2710]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="31" _type="MoveCaretCommand" caretOffset="3747" date="Mon Apr 18 19:24:08 EDT 2022" docOffset="5233" starttimestamp="1650324058609" timestamp="189639" />
  <Command __id="33" _type="PauseCommand" date="Mon Apr 18 19:24:14 EDT 2022" range="5s-10s" starttimestamp="1650324058609" timestamp="195890">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6251]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="32" _type="ShellCommand" date="Mon Apr 18 19:24:14 EDT 2022" starttimestamp="1650324058609" timestamp="195890" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="35" _type="PauseCommand" date="Mon Apr 18 19:25:01 EDT 2022" range="30s-1m" starttimestamp="1650324058609" timestamp="243301">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[47411]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="34" _type="ShellCommand" date="Mon Apr 18 19:25:01 EDT 2022" starttimestamp="1650324058609" timestamp="243301" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="37" _type="PauseCommand" date="Mon Apr 18 19:25:12 EDT 2022" range="10s-20s" starttimestamp="1650324058609" timestamp="254215">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10914]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="36" _type="ConsoleOutput" date="Mon Apr 18 19:25:12 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="254215" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOTwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via NIO, no line found matching regex: .*?\{Read Thread\}.*?SocketChannelWriteRequested.*
GIPC is not checked because RMI failed%0.25Steps traced since last test:


Test execution time (ms):112622
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMINIOTwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via NIO, no line found matching regex: .*?\{Read Thread\}.*?SocketChannelWriteRequested.*¶GIPC is not checked because RMI failed%0.25Steps traced since last test:¶¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"67664"), Diff(INSERT,"112622"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="39" _type="PauseCommand" date="Mon Apr 18 19:25:30 EDT 2022" range="10s-20s" starttimestamp="1650324058609" timestamp="272102">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[17887]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="38" _type="ShellCommand" date="Mon Apr 18 19:25:30 EDT 2022" starttimestamp="1650324058609" timestamp="272102" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="41" _type="PauseCommand" date="Mon Apr 18 19:25:35 EDT 2022" range="2s-5s" starttimestamp="1650324058609" timestamp="276800">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4698]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="40" _type="ConsoleOutput" date="Mon Apr 18 19:25:35 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="276800" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22607
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOTwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via NIO, no line found matching regex: .*?\{Read Thread\}.*?SocketChannelWriteRequested.*¶GIPC is not checked because RMI failed%0.25Steps traced since last test:¶¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"112622"), Diff(INSERT,"22607"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="43" _type="PauseCommand" date="Mon Apr 18 19:25:58 EDT 2022" range="20s-30s" starttimestamp="1650324058609" timestamp="299434">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22634]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="42" _type="ConsoleOutput" date="Mon Apr 18 19:25:58 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="299434" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22576
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):22"), Diff(DELETE,"607"), Diff(INSERT,"576"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="45" _type="PauseCommand" date="Mon Apr 18 19:26:20 EDT 2022" range="20s-30s" starttimestamp="1650324058609" timestamp="321965">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22531]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="44" _type="ConsoleOutput" date="Mon Apr 18 19:26:20 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="321965" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22578
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):2257"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="47" _type="PauseCommand" date="Mon Apr 18 19:26:43 EDT 2022" range="20s-30s" starttimestamp="1650324058609" timestamp="344611">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22646]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="46" _type="ConsoleOutput" date="Mon Apr 18 19:26:43 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="344611" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22589
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):225"), Diff(DELETE,"7"), Diff(EQUAL,"8"), Diff(INSERT,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="49" _type="PauseCommand" date="Mon Apr 18 19:26:52 EDT 2022" range="5s-10s" starttimestamp="1650324058609" timestamp="353571">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8960]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="48" _type="ConsoleOutput" date="Mon Apr 18 19:26:52 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="353571" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientReadWriteNonAtomic@38e3ffce . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):22589"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientReadWriteNonAtomic@38e3ffce . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="51" _type="PauseCommand" date="Mon Apr 18 19:27:20 EDT 2022" range="20s-30s" starttimestamp="1650324058609" timestamp="381610">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[28039]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="50" _type="ConsoleOutput" date="Mon Apr 18 19:27:20 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="381610" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):21347
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientReadWriteNonAtomic@38e3ffce . Results may change."), Diff(INSERT,"Test execution time (ms):21347"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="53" _type="PauseCommand" date="Mon Apr 18 19:27:33 EDT 2022" range="10s-20s" starttimestamp="1650324058609" timestamp="395384">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13774]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="52" _type="ConsoleOutput" date="Mon Apr 18 19:27:33 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="395384" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13812
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"2"), Diff(EQUAL,"13"), Diff(DELETE,"47"), Diff(INSERT,"812"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="55" _type="PauseCommand" date="Mon Apr 18 19:27:47 EDT 2022" range="10s-20s" starttimestamp="1650324058609" timestamp="409350">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13966]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="54" _type="ConsoleOutput" date="Mon Apr 18 19:27:47 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="409350" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13908
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):13"), Diff(DELETE,"812"), Diff(INSERT,"908"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="57" _type="PauseCommand" date="Mon Apr 18 19:47:12 EDT 2022" range="10m-20m" starttimestamp="1650324058609" timestamp="1574098">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1164748]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="56" _type="ConsoleOutput" date="Mon Apr 18 19:47:12 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="1574098" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Mon Apr 18 19:47:12 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):13908"), Diff(INSERT,"Building symbol table and running first pass checks:Mon Apr 18 19:47:12 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="59" _type="PauseCommand" date="Mon Apr 18 19:47:16 EDT 2022" range="2s-5s" starttimestamp="1650324058609" timestamp="1577723">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3625]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="58" _type="ConsoleOutput" date="Mon Apr 18 19:47:16 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="1577723" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:127
Running second pass checks Mon Apr 18 19:47:16 EDT 2022
Start O(n2) inter- and intra class method calls:Mon Apr 18 19:47:16 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and r"), Diff(INSERT,"size:127¶R"), Diff(EQUAL,"unning "), Diff(DELETE,"first"), Diff(INSERT,"second"), Diff(EQUAL," pass checks"), Diff(DELETE,":"), Diff(INSERT," "), Diff(EQUAL,"Mon Apr 18 19:47:1"), Diff(DELETE,"2"), Diff(INSERT,"6 EDT 2022¶Start O(n2) inter- and intra class method calls:Mon Apr 18 19:47:16"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="60" _type="ConsoleOutput" date="Mon Apr 18 19:47:16 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="1577811" type="ConsoleOutput">
    <outputString><![CDATA[End O(n2) inter- and intra class method calls:Mon Apr 18 19:47:16 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:127¶Running second pass checks Mon Apr 18 19:47:16 EDT 2022¶Start"), Diff(INSERT,"End"), Diff(EQUAL," O(n2) inter- and intra class method calls:Mon Apr 18 19:47:16 EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="62" _type="PauseCommand" date="Mon Apr 18 19:47:17 EDT 2022" range="1s-2s" starttimestamp="1650324058609" timestamp="1579388">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1577]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="61" _type="ShellCommand" date="Mon Apr 18 19:47:17 EDT 2022" starttimestamp="1650324058609" timestamp="1579388" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="63" _type="ConsoleOutput" date="Mon Apr 18 19:47:18 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="1579682" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Mon Apr 18 19:47:18 EDT 2022
Generating checks:Mon Apr 18 19:47:18 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"End O(n2) inter- and intra class method call"), Diff(INSERT,"Finished second pass checks:Mon Apr 18 19:47:18 EDT 2022¶Generating check"), Diff(EQUAL,"s:Mon Apr 18 19:47:1"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="64" _type="ConsoleOutput" date="Mon Apr 18 19:47:18 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="1579749" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating checks:Mon Apr 18 19:47:18 EDT 2022
Generating externals:Mon Apr 18 19:47:18 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass"), Diff(INSERT,"Generating"), Diff(EQUAL," checks:Mon Apr 18 19:47:18 EDT 2022¶Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Mon Apr 18 19:47:18 EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="65" _type="EclipseCommand" commandID="" date="Mon Apr 18 19:47:18 EDT 2022" starttimestamp="1650324058609" timestamp="1580233" />
  <Command __id="66" _type="EclipseCommand" commandID="" date="Mon Apr 18 19:47:18 EDT 2022" starttimestamp="1650324058609" timestamp="1580244" />
  <Command __id="67" _type="ConsoleOutput" date="Mon Apr 18 19:47:19 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="1581128" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Mon Apr 18 19:47:19 EDT 2022
A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):7042
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Mon Apr 18 19:47:1"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating externals:Mon Apr 18 19:47:18 EDT 202"), Diff(INSERT,"A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):704"), Diff(EQUAL,"2¶")]]]></diff>
  </Command>
  <Command __id="68" _type="EclipseCommand" commandID="" date="Mon Apr 18 19:47:20 EDT 2022" starttimestamp="1650324058609" timestamp="1581729" />
  <Command __id="69" _type="EclipseCommand" commandID="" date="Mon Apr 18 19:47:20 EDT 2022" starttimestamp="1650324058609" timestamp="1581746" />
  <Command __id="70" _type="ShellCommand" date="Mon Apr 18 19:47:20 EDT 2022" starttimestamp="1650324058609" timestamp="1582324" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="71" _type="ConsoleOutput" date="Mon Apr 18 19:47:21 EDT 2022" overflow="false" starttimestamp="1650324058609" timestamp="1582690" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):39

Test execution time (ms):29
A6PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.9285714285714286

A6InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.9428571428571428
Test execution time (ms):53
Test execution time (ms):32
A6AccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.23529411764705882

Test execution time (ms):37
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Mon Apr 18 19:47:19 EDT 2022¶A6NoCheckstyleWarnings did not pass completely:Warn"), Diff(INSERT,"Test execution time (ms):39¶¶Test execution time (ms):29¶A6PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.9285714285714286¶¶A6InterfaceAsType did not pass completely:See console trace about l"), Diff(EQUAL,"in"), Diff(DELETE,"g"), Diff(INSERT,"e"), Diff(EQUAL,"s f"), Diff(DELETE,"ound in checkstyle text, see traced console output%0.0"), Diff(INSERT,"ailing  this check%0.9428571428571428¶Test execution time (ms):53¶Test execution time (ms):32¶A6AccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.23529411764705882"), Diff(EQUAL,"¶¶Test execution time (ms):"), Diff(INSERT,"3"), Diff(EQUAL,"7"), Diff(DELETE,"042"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="73" _type="PauseCommand" date="Mon Apr 18 19:47:24 EDT 2022" range="2s-5s" starttimestamp="1650324058609" timestamp="1585507">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2817]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
