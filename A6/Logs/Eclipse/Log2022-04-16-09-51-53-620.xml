<Events startTimestamp="1650117113620" logVersion="1.0.0.202111260825">
  <Command __id="1" _type="EclipseCommand" commandID="" date="Sat Apr 16 09:51:56 EDT 2022" starttimestamp="1650117113620" timestamp="2724" />
  <Command __id="4" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Sat Apr 16 09:52:00 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="6690" type="Run" />
  <Command __id="6" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Sat Apr 16 09:52:00 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="6691" type="Run" />
  <Command __id="7" _type="MoveCaretCommand" caretOffset="0" date="Sat Apr 16 09:52:00 EDT 2022" docOffset="0" starttimestamp="1650117113620" timestamp="6727" />
  <Command __id="9" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 09:52:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="7786" type="Run" />
  <Command __id="10" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 09:52:01 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="7870" type="Run" />
  <Command __id="11" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 09:52:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="7877" type="Run" />
  <Command __id="12" _type="SelectTextCommand" caretOffset="3688" date="Sat Apr 16 09:52:02 EDT 2022" end="3688" start="161" starttimestamp="1650117113620" timestamp="8515" />
  <Command __id="14" _type="PauseCommand" date="Sat Apr 16 09:52:14 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="20662">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[12147]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="43" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 09:52:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="58661" type="Run" />
  <Command __id="45" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 09:52:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="58668" type="Run" />
  <Command __id="46" _type="ConsoleOutput" date="Sat Apr 16 09:52:52 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="59222" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):13587"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="48" _type="PauseCommand" date="Sat Apr 16 09:53:49 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="115774">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[56552]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="123" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 09:59:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="474879" type="Run" />
  <Command __id="125" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 09:59:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="474881" type="Run" />
  <Command __id="127" _type="PauseCommand" date="Sat Apr 16 10:01:33 EDT 2022" range="1m-2m" starttimestamp="1650117113620" timestamp="580004">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[105123]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="126" _type="ConsoleOutput" date="Sat Apr 16 10:01:33 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="580004" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOServerMetaStateBroadcast did not pass completely:When giving 'i nio' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;
When giving 'i rmi' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;
When giving 'i gipc' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification%0.0

Test execution time (ms):112614
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMINIOServerMetaStateBroadcast did not pass completely:When giving 'i nio' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;¶When giving 'i rmi' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;¶When giving 'i gipc' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"22586"), Diff(INSERT,"112614"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="129" _type="PauseCommand" date="Sat Apr 16 10:02:21 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="627603">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[47599]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="128" _type="ConsoleOutput" date="Sat Apr 16 10:02:21 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="627603" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Sat Apr 16 10:02:21 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOServerMetaStateBroadcast did not pass completely:When giving 'i nio' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;¶When giving 'i rmi' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;¶When giving 'i gipc' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification%0.0¶¶Test execution time (ms):112614"), Diff(INSERT,"Building symbol table and running first pass checks:Sat Apr 16 10:02:21 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="131" _type="PauseCommand" date="Sat Apr 16 10:02:24 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="630606">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3003]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="133" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:02:25 EDT 2022" starttimestamp="1650117113620" timestamp="632043" />
  <Command __id="135" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:02:25 EDT 2022" starttimestamp="1650117113620" timestamp="632053" />
  <Command __id="136" _type="ShellCommand" date="Sat Apr 16 10:02:26 EDT 2022" starttimestamp="1650117113620" timestamp="632847" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="137" _type="ConsoleOutput" date="Sat Apr 16 10:02:26 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="633040" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Sat Apr 16 10:02:26 EDT 2022
Generating checks:Sat Apr 16 10:02:26 EDT 2022
Finished Generating checks:Sat Apr 16 10:02:26 EDT 2022
Generating externals:Sat Apr 16 10:02:26 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:125¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Sat Apr 16 10:02:2"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Sat Apr 16 10:02:26 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Sat Apr 16 10:02:2"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Sat Apr 16 10:02:2"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="138" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:02:27 EDT 2022" starttimestamp="1650117113620" timestamp="633497" />
  <Command __id="139" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:02:27 EDT 2022" starttimestamp="1650117113620" timestamp="633505" />
  <Command __id="140" _type="ConsoleOutput" date="Sat Apr 16 10:02:27 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="633887" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Sat Apr 16 10:02:27 EDT 2022
A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):6300
Test execution time (ms):33
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Sat Apr 16 10:02:2"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating checks:Sat Apr 16 10:02:26 EDT 2022¶Finished Generating checks:Sat Apr 16 10:02:26 EDT 2022¶Generating externals:Sat Apr 16 10:02:26 EDT 2022"), Diff(INSERT,"A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):6300¶Test execution time (ms):33"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="141" _type="ConsoleOutput" date="Sat Apr 16 10:02:27 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="633967" type="ConsoleOutput">
    <outputString><![CDATA[A6PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.9285714285714286

Test execution time (ms):17

A6InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.9420289855072463
Test execution time (ms):26
Test execution time (ms):17
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Sat Apr 16 10:02:27 EDT 2022¶A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶"), Diff(INSERT,"A6PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.9285714285714286¶¶Test execution time (ms):17¶¶A6InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.9420289855072463"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(INSERT,"2"), Diff(EQUAL,"6"), Diff(DELETE,"300"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"33"), Diff(INSERT,"17"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="142" _type="ConsoleOutput" date="Sat Apr 16 10:02:27 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="634031" type="ConsoleOutput">
    <outputString><![CDATA[
A6AccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.23529411764705882
Test execution time (ms):26
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A6PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.9285714285714286¶¶Test execution time (ms):17¶¶A6InterfaceAsType"), Diff(INSERT,"¶A6AccessModifiersMatched"), Diff(EQUAL," did not pass completely:See console trace about lines failing  this check%0."), Diff(DELETE,"9420289855072463"), Diff(INSERT,"23529411764705882"), Diff(EQUAL,"¶Test execution time (ms):26¶"), Diff(DELETE,"Test execution time (ms):17¶")]]]></diff>
  </Command>
  <Command __id="143" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:02:28 EDT 2022" starttimestamp="1650117113620" timestamp="634920" />
  <Command __id="144" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:02:28 EDT 2022" starttimestamp="1650117113620" timestamp="634932" />
  <Command __id="146" _type="PauseCommand" date="Sat Apr 16 10:02:32 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="638587">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3655]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="145" _type="ConsoleOutput" date="Sat Apr 16 10:02:32 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="638587" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):4
Test execution time (ms):13
A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.7586206896551724

Test execution time (ms):15
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶A6AccessModifiersMatched"), Diff(INSERT,"Test execution time (ms):4¶Test execution time (ms):13¶A6ExpectedCalls"), Diff(EQUAL," did not pass completely:See console trace about lines failing  this check%0."), Diff(DELETE,"23529411764705882"), Diff(INSERT,"7586206896551724¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"26"), Diff(INSERT,"15"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="147" _type="ConsoleOutput" date="Sat Apr 16 10:02:32 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="638704" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (37)
 |- checks (1)
  |~ Checks.java (36)
 |- client (8)
  |~ Client.java (23)
  |~ ClientConfigure.java (431)
  |~ ClientOutCoupler.java (57)
  |~ ClientRemoteInterfaceGIPC.java (33)
  |~ ClientRemoteInterfaceNIO.java (21)
  |~ ClientRemoteInterfaceRMI.java (29)
  |~ ClientRemoteObject.java (294)
  |~ ClientRemoteObjectNIO.java (170)
 |- nioExample (8)
  |~ AnNIOManagerPrintClient.java (125)
  |~ AnNIOManagerPrintServer.java (138)
  |~ exampleClientReadThread.java (67)
  |~ exampleServerReadThread.java (70)
  |~ FakeClientInterface.java (12)
  |~ NIOManagerPrintClientLauncherNoFactory.java (10)
  |~ NIOManagerPrintServer.java (20)
  |~ NIOManagerPrintServerLauncherNoFactory.java (10)
 |- readThread (3)
  |~ ClientReadThread.java (82)
  |~ ReadThreadInterface.java (13)
  |~ ServerReadThread.java (76)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (10)
  |~ OriginalSimulation.java (9)
  |~ Server.java (33)
  |~ ServerConfigure.java (469)
  |- remote (6)
   |~ ServerRemoteInterfaceGIPC.java (44)
   |~ ServerRemoteInterfaceNIO.java (23)
   |~ ServerRemoteInterfaceRMI.java (40)
   |~ ServerRemoteObjectGIPC.java (335)
   |~ ServerRemoteObjectNIO.java (159)
   |~ ServerRemoteObjectRMI.java (245)

Attempting to match to the structure:
|- .* (23)
 |- [a-z]?.*[Cc]lient.* (10)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"4¶Test execution time (ms):13¶A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.7586206896551724¶¶Test execution time (ms):15"), Diff(INSERT,"13¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (431)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (21)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (294)¶  |~ ClientRemoteObjectNIO.java (170)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (82)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (469)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (335)¶   |~ ServerRemoteObjectNIO.java (159)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* (23)¶ |- [a-z]?.*[Cc]lient.* (10)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="149" _type="PauseCommand" date="Sat Apr 16 10:02:41 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="648187">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9483]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="148" _type="ConsoleOutput" date="Sat Apr 16 10:02:41 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="648187" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6PublicMethodsOverride@66557938 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):13¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (431)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (21)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (294)¶  |~ ClientRemoteObjectNIO.java (170)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (82)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (469)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (335)¶   |~ ServerRemoteObjectNIO.java (159)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* (23)¶ |- [a-z]?.*[Cc]lient.* (10)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment6.style.A6PublicMethodsOverride@66557938 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="151" _type="PauseCommand" date="Sat Apr 16 10:02:43 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="649586">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1399]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="150" _type="ConsoleOutput" date="Sat Apr 16 10:02:43 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="649586" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6PublicMethodsOverride@66557938 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6PublicMethodsOverride@66557938 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="153" _type="PauseCommand" date="Sat Apr 16 10:02:44 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="650873">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1287]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="152" _type="ConsoleOutput" date="Sat Apr 16 10:02:44 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="650873" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6InterfaceAsType@16c1b807 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6"), Diff(DELETE,"PublicMethodsOverride@66557938"), Diff(INSERT,"InterfaceAsType@16c1b807"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="155" _type="PauseCommand" date="Sat Apr 16 10:02:45 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="652266">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1393]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="154" _type="ConsoleOutput" date="Sat Apr 16 10:02:45 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="652266" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6InterfaceAsType@16c1b807 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6InterfaceAsType@16c1b807 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="157" _type="PauseCommand" date="Sat Apr 16 10:02:47 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="653882">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1616]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="156" _type="ConsoleOutput" date="Sat Apr 16 10:02:47 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="653882" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6AccessModifiersMatched@783c1339 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6"), Diff(DELETE,"InterfaceAsType@16c1b807"), Diff(INSERT,"AccessModifiersMatched@783c1339"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="159" _type="PauseCommand" date="Sat Apr 16 10:02:49 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="655450">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1568]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="158" _type="ConsoleOutput" date="Sat Apr 16 10:02:49 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="655450" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6AccessModifiersMatched@783c1339 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6AccessModifiersMatched@783c1339 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="161" _type="PauseCommand" date="Sat Apr 16 10:02:51 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="657675">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2225]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="160" _type="ConsoleOutput" date="Sat Apr 16 10:02:51 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="657675" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@5d836a03 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6"), Diff(DELETE,"AccessModifiersMatched@783c1339"), Diff(INSERT,"ExpectedCalls@5d836a03"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="163" _type="PauseCommand" date="Sat Apr 16 10:03:03 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="670097">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[12422]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="162" _type="ConsoleOutput" date="Sat Apr 16 10:03:03 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="670097" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6PublicMethodsOverride@66557938 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6"), Diff(DELETE,"ExpectedCalls@5d836a03"), Diff(INSERT,"PublicMethodsOverride@66557938"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="165" _type="PauseCommand" date="Sat Apr 16 10:03:05 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="671449">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1352]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="164" _type="ConsoleOutput" date="Sat Apr 16 10:03:05 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="671449" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6PublicMethodsOverride@66557938 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6PublicMethodsOverride@66557938 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="167" _type="PauseCommand" date="Sat Apr 16 10:04:32 EDT 2022" range="1m-2m" starttimestamp="1650117113620" timestamp="758521">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[87072]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="166" _type="ShellCommand" date="Sat Apr 16 10:04:32 EDT 2022" starttimestamp="1650117113620" timestamp="758521" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 09:51:58 EDT 2022" docASTNodeCount="117" docActiveCodeLength="878" docExpressionCount="75" docLength="1269" projectName="A6" starttimestamp="1650117113620" timestamp="4546">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\checks\Checks.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment6.S22Assignment6Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
import util.trace.Tracer;

public class Checks {
	public static void main(final String[] args) {
		Tracer.showInfo(true);
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		final int traces = 8000;
		Tracer.setMaxTraces(traces);
		
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		// Change this number if a test trace gets longer than 600 and is clipped
		
		final int length = 600;
		GraderBasicsTraceUtility.setMaxPrintedTraces(length);
		// Change this number if all traces together are longer than 600
		
		final int time = 4000;
		GraderBasicsTraceUtility.setMaxTraces(time);
		// Change this number if your process times out prematurely
		
		final int timer = 50;
		BasicProjectExecution.setProcessTimeOut(timer);
		// You need to always call such a method
		S22Assignment6Suite.main(args);
	}
}
]]></snapshot>
  </Command>
  <Command __id="8" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 09:52:01 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4496" docExpressionCount="449" docLength="4883" projectName="A6" starttimestamp="1650117113620" timestamp="7702">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
			
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <Command __id="169" _type="PauseCommand" date="Sat Apr 16 10:04:41 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="767709">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9187]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="171" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:04:42 EDT 2022" starttimestamp="1650117113620" timestamp="768946" />
  <Command __id="173" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:04:42 EDT 2022" starttimestamp="1650117113620" timestamp="768951" />
  <Command __id="175" _type="PauseCommand" date="Sat Apr 16 10:04:49 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="775816">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6865]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="174" _type="MoveCaretCommand" caretOffset="3378" date="Sat Apr 16 10:04:49 EDT 2022" docOffset="5765" starttimestamp="1650117113620" timestamp="775816" />
  <Command __id="177" _type="ShellCommand" date="Sat Apr 16 10:04:50 EDT 2022" starttimestamp="1650117113620" timestamp="776689" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="179" _type="PauseCommand" date="Sat Apr 16 10:04:51 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="777717">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1028]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="178" _type="ShellCommand" date="Sat Apr 16 10:04:51 EDT 2022" starttimestamp="1650117113620" timestamp="777717" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="181" _type="InsertStringCommand" date="Sat Apr 16 10:04:51 EDT 2022" starttimestamp="1650117113620" timestamp="777953" timestamp2="777953">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="182" _type="MoveCaretCommand" caretOffset="3379" date="Sat Apr 16 10:04:51 EDT 2022" docOffset="5766" starttimestamp="1650117113620" timestamp="777954" />
  <Command __id="184" _type="InsertStringCommand" date="Sat Apr 16 10:04:51 EDT 2022" starttimestamp="1650117113620" timestamp="778105" timestamp2="778105">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="186" _type="InsertStringCommand" date="Sat Apr 16 10:04:51 EDT 2022" starttimestamp="1650117113620" timestamp="778160" timestamp2="778160">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="188" _type="InsertStringCommand" date="Sat Apr 16 10:04:51 EDT 2022" starttimestamp="1650117113620" timestamp="778322" timestamp2="778322">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="190" _type="UndoCommand" date="Sat Apr 16 10:04:52 EDT 2022" starttimestamp="1650117113620" timestamp="779278" />
  <Command __id="193" _type="PauseCommand" date="Sat Apr 16 10:04:54 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="781311">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2033]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="192" _type="ShellCommand" date="Sat Apr 16 10:04:54 EDT 2022" starttimestamp="1650117113620" timestamp="781311" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="195" _type="PauseCommand" date="Sat Apr 16 10:04:56 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="782521">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1210]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="194" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:04:56 EDT 2022" forward="false" matchWord="false" offset="5765" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="782521" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="197" _type="PauseCommand" date="Sat Apr 16 10:04:57 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="783800">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1279]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="196" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:04:57 EDT 2022" forward="false" matchWord="false" offset="8107" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="783800" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="198" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:04:57 EDT 2022" forward="false" matchWord="false" offset="8107" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="784095" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="200" _type="PauseCommand" date="Sat Apr 16 10:05:00 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="786969">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2874]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="199" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:00 EDT 2022" forward="true" matchWord="false" offset="8107" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="786969" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="202" _type="PauseCommand" date="Sat Apr 16 10:05:03 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="789731">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2762]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="201" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:03 EDT 2022" forward="true" matchWord="false" offset="11223" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="789731" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="203" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:04 EDT 2022" forward="true" matchWord="false" offset="13948" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="790402" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="204" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:04 EDT 2022" forward="true" matchWord="false" offset="1183" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="791039" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="205" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:05 EDT 2022" forward="true" matchWord="false" offset="1194" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="791609" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="206" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:05 EDT 2022" forward="true" matchWord="false" offset="1223" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="791976" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="207" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:05 EDT 2022" forward="true" matchWord="false" offset="1240" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="792356" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="208" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:06 EDT 2022" forward="true" matchWord="false" offset="1619" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="792975" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="209" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:06 EDT 2022" forward="true" matchWord="false" offset="1785" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="793287" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="210" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:07 EDT 2022" forward="true" matchWord="false" offset="4757" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="794142" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="212" _type="PauseCommand" date="Sat Apr 16 10:05:08 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="795319">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1177]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="211" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:08 EDT 2022" forward="true" matchWord="false" offset="6694" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="795319" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="213" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:09 EDT 2022" forward="true" matchWord="false" offset="7818" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="795949" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="214" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:10 EDT 2022" forward="true" matchWord="false" offset="8107" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="796501" wrapSearch="false">
    <searchString><![CDATA[Thread]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="216" _type="PauseCommand" date="Sat Apr 16 10:05:12 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="799024">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2523]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="215" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:12 EDT 2022" forward="true" matchWord="false" offset="11223" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="799024" wrapSearch="false">
    <searchString><![CDATA[reader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="217" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:05:13 EDT 2022" forward="true" matchWord="false" offset="11239" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="799595" wrapSearch="false">
    <searchString><![CDATA[reader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="219" _type="PauseCommand" date="Sat Apr 16 10:05:16 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="803147">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3552]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="218" _type="ShellCommand" date="Sat Apr 16 10:05:16 EDT 2022" starttimestamp="1650117113620" timestamp="803147" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="220" _type="MoveCaretCommand" caretOffset="12278" date="Sat Apr 16 10:05:17 EDT 2022" docOffset="12278" starttimestamp="1650117113620" timestamp="804080" />
  <Command __id="222" _type="InsertStringCommand" date="Sat Apr 16 10:05:18 EDT 2022" starttimestamp="1650117113620" timestamp="804467" timestamp2="804467">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="224" _type="InsertStringCommand" date="Sat Apr 16 10:05:18 EDT 2022" starttimestamp="1650117113620" timestamp="804540" timestamp2="804540">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="226" _type="InsertStringCommand" date="Sat Apr 16 10:05:18 EDT 2022" starttimestamp="1650117113620" timestamp="804631" timestamp2="804631">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="228" _type="InsertStringCommand" date="Sat Apr 16 10:05:18 EDT 2022" starttimestamp="1650117113620" timestamp="804808" timestamp2="804808">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="230" _type="InsertStringCommand" date="Sat Apr 16 10:05:18 EDT 2022" starttimestamp="1650117113620" timestamp="805229" timestamp2="805229">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="232" _type="InsertStringCommand" date="Sat Apr 16 10:05:19 EDT 2022" starttimestamp="1650117113620" timestamp="805423" timestamp2="805423">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="234" _type="InsertStringCommand" date="Sat Apr 16 10:05:19 EDT 2022" starttimestamp="1650117113620" timestamp="805474" timestamp2="805474">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="236" _type="InsertStringCommand" date="Sat Apr 16 10:05:19 EDT 2022" starttimestamp="1650117113620" timestamp="805576" timestamp2="805576">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="238" _type="InsertStringCommand" date="Sat Apr 16 10:05:19 EDT 2022" starttimestamp="1650117113620" timestamp="805620" timestamp2="805620">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="240" _type="InsertStringCommand" date="Sat Apr 16 10:05:19 EDT 2022" starttimestamp="1650117113620" timestamp="805818" timestamp2="805818">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="242" _type="InsertStringCommand" date="Sat Apr 16 10:05:19 EDT 2022" starttimestamp="1650117113620" timestamp="806053" timestamp2="806053">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="243" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Apr 16 10:05:20 EDT 2022" start_end="START" starttimestamp="1650117113620" timestamp="806519" />
  <Command __id="249" _type="PauseCommand" date="Sat Apr 16 10:05:23 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="809499">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2980]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="248" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Apr 16 10:05:23 EDT 2022" start_end="END" starttimestamp="1650117113620" timestamp="809499" />
  <Command __id="251" _type="InsertStringCommand" date="Sat Apr 16 10:05:23 EDT 2022" starttimestamp="1650117113620" timestamp="809599" timestamp2="809599">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="253" _type="InsertStringCommand" date="Sat Apr 16 10:05:23 EDT 2022" starttimestamp="1650117113620" timestamp="810297" timestamp2="810297">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:05:24 EDT 2022" starttimestamp="1650117113620" timestamp="811095" />
  <Command __id="257" _type="PauseCommand" date="Sat Apr 16 10:05:27 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="813562">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2467]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="168" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:04:41 EDT 2022" docASTNodeCount="1770" docActiveCodeLength="12969" docExpressionCount="1227" docLength="14515" projectName="A6" starttimestamp="1650117113620" timestamp="767708">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\ServerConfigure.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import server.remote.ServerRemoteInterfaceNIO;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteObjectRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.SERVER_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO})
public class ServerConfigure extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber)
			throws RemoteException {
		// TODO Auto-generated method stub
		
	}
	
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	//@Override
	protected void initServer(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
			
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		//reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	//@Override
	protected void setTracingFake() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="180" _type="Insert" date="Sat Apr 16 10:04:51 EDT 2022" docASTNodeCount="1770" docActiveCodeLength="12973" docExpressionCount="1227" docLength="14519" length="4" offset="5765" repeat="4" starttimestamp="1650117113620" timestamp="777940" timestamp2="778313">
    <text><![CDATA[Thre]]></text>
  </DocumentChange>
  <DocumentChange __id="189" _type="Delete" date="Sat Apr 16 10:04:52 EDT 2022" docASTNodeCount="1770" docActiveCodeLength="12969" docExpressionCount="1227" docLength="14515" endLine="149" length="4" offset="5765" startLine="149" starttimestamp="1650117113620" timestamp="779263">
    <text><![CDATA[Thre]]></text>
  </DocumentChange>
  <DocumentChange __id="221" _type="Insert" date="Sat Apr 16 10:05:18 EDT 2022" docASTNodeCount="1776" docActiveCodeLength="12984" docExpressionCount="1230" docLength="14530" length="15" offset="12278" repeat="15" starttimestamp="1650117113620" timestamp="804462" timestamp2="808494">
    <text><![CDATA[readThread.setN]]></text>
  </DocumentChange>
  <DocumentChange __id="250" _type="Replace" date="Sat Apr 16 10:05:23 EDT 2022" docASTNodeCount="1775" docActiveCodeLength="12994" docExpressionCount="1231" docLength="14540" endLine="377" insertionLength="14" int_docASTNodeCount="1772" int_docActiveCodeLength="12980" int_docExpressionCount="1229" int_docLength="14526" length="4" offset="12289" startLine="377" starttimestamp="1650117113620" timestamp="809508">
    <deletedText><![CDATA[setN]]></deletedText>
    <insertedText><![CDATA[setName(name);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="252" _type="Replace" date="Sat Apr 16 10:05:23 EDT 2022" docASTNodeCount="1774" docActiveCodeLength="12991" docExpressionCount="1230" docLength="14537" endLine="377" insertionLength="1" int_docASTNodeCount="1774" int_docActiveCodeLength="12990" int_docExpressionCount="1230" int_docLength="14536" length="4" offset="12297" startLine="377" starttimestamp="1650117113620" timestamp="810288">
    <deletedText><![CDATA[name]]></deletedText>
    <insertedText><![CDATA[:]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="254" _type="Delete" date="Sat Apr 16 10:05:24 EDT 2022" docASTNodeCount="1774" docActiveCodeLength="12990" docExpressionCount="1230" docLength="14536" endLine="377" length="1" offset="12297" startLine="377" starttimestamp="1650117113620" timestamp="811086">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="256" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Apr 16 10:05:27 EDT 2022" start_end="END" starttimestamp="1650117113620" timestamp="813562" />
  <Command __id="258" _type="MoveCaretCommand" caretOffset="12274" date="Sat Apr 16 10:05:27 EDT 2022" docOffset="12274" starttimestamp="1650117113620" timestamp="813654" />
  <DocumentChange __id="259" _type="Insert" date="Sat Apr 16 10:05:27 EDT 2022" docASTNodeCount="1776" docActiveCodeLength="13008" docExpressionCount="1232" docLength="14554" length="18" offset="12274" repeat="15" starttimestamp="1650117113620" timestamp="813883" timestamp2="819068">
    <text><![CDATA[
		final String +]]></text>
  </DocumentChange>
  <Command __id="260" _type="InsertStringCommand" date="Sat Apr 16 10:05:27 EDT 2022" starttimestamp="1650117113620" timestamp="813893" timestamp2="813893">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="262" _type="InsertStringCommand" date="Sat Apr 16 10:05:28 EDT 2022" starttimestamp="1650117113620" timestamp="814532" timestamp2="814532">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="264" _type="InsertStringCommand" date="Sat Apr 16 10:05:28 EDT 2022" starttimestamp="1650117113620" timestamp="814614" timestamp2="814614">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="266" _type="InsertStringCommand" date="Sat Apr 16 10:05:28 EDT 2022" starttimestamp="1650117113620" timestamp="814801" timestamp2="814801">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="268" _type="InsertStringCommand" date="Sat Apr 16 10:05:29 EDT 2022" starttimestamp="1650117113620" timestamp="815654" timestamp2="815654">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="270" _type="InsertStringCommand" date="Sat Apr 16 10:05:29 EDT 2022" starttimestamp="1650117113620" timestamp="815773" timestamp2="815773">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="272" _type="InsertStringCommand" date="Sat Apr 16 10:05:29 EDT 2022" starttimestamp="1650117113620" timestamp="815892" timestamp2="815892">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="275" _type="PauseCommand" date="Sat Apr 16 10:05:31 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="817381">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1489]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="274" _type="InsertStringCommand" date="Sat Apr 16 10:05:31 EDT 2022" starttimestamp="1650117113620" timestamp="817381" timestamp2="817381">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="277" _type="InsertStringCommand" date="Sat Apr 16 10:05:31 EDT 2022" starttimestamp="1650117113620" timestamp="817596" timestamp2="817596">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="279" _type="InsertStringCommand" date="Sat Apr 16 10:05:31 EDT 2022" starttimestamp="1650117113620" timestamp="817791" timestamp2="817791">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="281" _type="InsertStringCommand" date="Sat Apr 16 10:05:31 EDT 2022" starttimestamp="1650117113620" timestamp="817941" timestamp2="817941">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="283" _type="InsertStringCommand" date="Sat Apr 16 10:05:31 EDT 2022" starttimestamp="1650117113620" timestamp="818008" timestamp2="818008">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="285" _type="InsertStringCommand" date="Sat Apr 16 10:05:31 EDT 2022" starttimestamp="1650117113620" timestamp="818063" timestamp2="818063">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="287" _type="InsertStringCommand" date="Sat Apr 16 10:05:31 EDT 2022" starttimestamp="1650117113620" timestamp="818207" timestamp2="818207">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="289" _type="InsertStringCommand" date="Sat Apr 16 10:05:32 EDT 2022" starttimestamp="1650117113620" timestamp="819073" timestamp2="819073">
    <data><![CDATA[+]]></data>
  </Command>
  <DocumentChange __id="290" _type="Delete" date="Sat Apr 16 10:05:33 EDT 2022" docASTNodeCount="1779" docActiveCodeLength="13007" docExpressionCount="1231" docLength="14553" endLine="377" length="1" offset="12291" startLine="377" starttimestamp="1650117113620" timestamp="819513">
    <text><![CDATA[+]]></text>
  </DocumentChange>
  <Command __id="291" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:05:33 EDT 2022" starttimestamp="1650117113620" timestamp="819516" />
  <Command __id="293" _type="InsertStringCommand" date="Sat Apr 16 10:05:33 EDT 2022" starttimestamp="1650117113620" timestamp="819769" timestamp2="819769">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="295" _type="InsertStringCommand" date="Sat Apr 16 10:05:34 EDT 2022" starttimestamp="1650117113620" timestamp="820637" timestamp2="820637">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="297" _type="InsertStringCommand" date="Sat Apr 16 10:05:34 EDT 2022" starttimestamp="1650117113620" timestamp="820784" timestamp2="820784">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="299" _type="InsertStringCommand" date="Sat Apr 16 10:05:34 EDT 2022" starttimestamp="1650117113620" timestamp="821297" timestamp2="821297">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="301" _type="InsertStringCommand" date="Sat Apr 16 10:05:35 EDT 2022" starttimestamp="1650117113620" timestamp="821451" timestamp2="821451">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="303" _type="InsertStringCommand" date="Sat Apr 16 10:05:35 EDT 2022" starttimestamp="1650117113620" timestamp="821590" timestamp2="821590">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="305" _type="InsertStringCommand" date="Sat Apr 16 10:05:35 EDT 2022" starttimestamp="1650117113620" timestamp="821674" timestamp2="821674">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="307" _type="InsertStringCommand" date="Sat Apr 16 10:05:35 EDT 2022" starttimestamp="1650117113620" timestamp="821827" timestamp2="821827">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="309" _type="InsertStringCommand" date="Sat Apr 16 10:05:35 EDT 2022" starttimestamp="1650117113620" timestamp="821931" timestamp2="821931">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="311" _type="InsertStringCommand" date="Sat Apr 16 10:05:35 EDT 2022" starttimestamp="1650117113620" timestamp="822374" timestamp2="822374">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="313" _type="InsertStringCommand" date="Sat Apr 16 10:05:36 EDT 2022" starttimestamp="1650117113620" timestamp="822606" timestamp2="822606">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="315" _type="InsertStringCommand" date="Sat Apr 16 10:05:36 EDT 2022" starttimestamp="1650117113620" timestamp="822729" timestamp2="822729">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="317" _type="InsertStringCommand" date="Sat Apr 16 10:05:36 EDT 2022" starttimestamp="1650117113620" timestamp="822971" timestamp2="822971">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="319" _type="InsertStringCommand" date="Sat Apr 16 10:05:36 EDT 2022" starttimestamp="1650117113620" timestamp="823241" timestamp2="823241">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="321" _type="InsertStringCommand" date="Sat Apr 16 10:05:37 EDT 2022" starttimestamp="1650117113620" timestamp="823404" timestamp2="823404">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="323" _type="InsertStringCommand" date="Sat Apr 16 10:05:37 EDT 2022" starttimestamp="1650117113620" timestamp="823508" timestamp2="823508">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="324" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Apr 16 10:05:37 EDT 2022" starttimestamp="1650117113620" timestamp="823710" />
  <Command __id="326" _type="InsertStringCommand" date="Sat Apr 16 10:05:37 EDT 2022" starttimestamp="1650117113620" timestamp="824323" timestamp2="824323">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="327" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="824552" />
  <Command __id="328" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="825057" />
  <Command __id="329" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="825085" />
  <Command __id="330" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="825117" />
  <Command __id="331" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="825146" />
  <Command __id="332" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="825178" />
  <Command __id="333" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="825208" />
  <Command __id="334" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="825238" />
  <Command __id="335" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:38 EDT 2022" starttimestamp="1650117113620" timestamp="825268" />
  <Command __id="336" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:39 EDT 2022" starttimestamp="1650117113620" timestamp="825429" />
  <Command __id="337" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:39 EDT 2022" starttimestamp="1650117113620" timestamp="825582" />
  <Command __id="338" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Sat Apr 16 10:05:39 EDT 2022" starttimestamp="1650117113620" timestamp="825719" />
  <Command __id="340" _type="InsertStringCommand" date="Sat Apr 16 10:05:40 EDT 2022" starttimestamp="1650117113620" timestamp="826391" timestamp2="826391">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="342" _type="InsertStringCommand" date="Sat Apr 16 10:05:40 EDT 2022" starttimestamp="1650117113620" timestamp="826630" timestamp2="826630">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="344" _type="InsertStringCommand" date="Sat Apr 16 10:05:40 EDT 2022" starttimestamp="1650117113620" timestamp="826730" timestamp2="826730">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="346" _type="InsertStringCommand" date="Sat Apr 16 10:05:40 EDT 2022" starttimestamp="1650117113620" timestamp="826818" timestamp2="826818">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="348" _type="PauseCommand" date="Sat Apr 16 10:05:42 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="828542">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1724]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="347" _type="MoveCaretCommand" caretOffset="12336" date="Sat Apr 16 10:05:42 EDT 2022" docOffset="12336" starttimestamp="1650117113620" timestamp="828542" />
  <Command __id="350" _type="InsertStringCommand" date="Sat Apr 16 10:05:42 EDT 2022" starttimestamp="1650117113620" timestamp="828699" timestamp2="828699">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="352" _type="InsertStringCommand" date="Sat Apr 16 10:05:42 EDT 2022" starttimestamp="1650117113620" timestamp="828817" timestamp2="828817">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="354" _type="InsertStringCommand" date="Sat Apr 16 10:05:42 EDT 2022" starttimestamp="1650117113620" timestamp="828909" timestamp2="828909">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="356" _type="InsertStringCommand" date="Sat Apr 16 10:05:42 EDT 2022" starttimestamp="1650117113620" timestamp="829164" timestamp2="829164">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="358" _type="InsertStringCommand" date="Sat Apr 16 10:05:42 EDT 2022" starttimestamp="1650117113620" timestamp="829331" timestamp2="829331">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="360" _type="InsertStringCommand" date="Sat Apr 16 10:05:43 EDT 2022" starttimestamp="1650117113620" timestamp="829410" timestamp2="829410">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="362" _type="InsertStringCommand" date="Sat Apr 16 10:05:43 EDT 2022" starttimestamp="1650117113620" timestamp="829724" timestamp2="829724">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="364" _type="InsertStringCommand" date="Sat Apr 16 10:05:43 EDT 2022" starttimestamp="1650117113620" timestamp="829865" timestamp2="829865">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="366" _type="InsertStringCommand" date="Sat Apr 16 10:05:43 EDT 2022" starttimestamp="1650117113620" timestamp="829946" timestamp2="829946">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="368" _type="InsertStringCommand" date="Sat Apr 16 10:05:43 EDT 2022" starttimestamp="1650117113620" timestamp="830045" timestamp2="830045">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="370" _type="PauseCommand" date="Sat Apr 16 10:05:44 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="831137">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1092]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="369" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:05:44 EDT 2022" starttimestamp="1650117113620" timestamp="831137" />
  <Command __id="371" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:05:44 EDT 2022" starttimestamp="1650117113620" timestamp="831228" />
  <Command __id="372" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:05:44 EDT 2022" starttimestamp="1650117113620" timestamp="831329" />
  <Command __id="374" _type="PauseCommand" date="Sat Apr 16 10:05:48 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="834693">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3363]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="373" _type="SelectTextCommand" caretOffset="12278" date="Sat Apr 16 10:05:48 EDT 2022" end="12348" start="12278" starttimestamp="1650117113620" timestamp="834692" />
  <Command __id="375" _type="CopyCommand" date="Sat Apr 16 10:05:48 EDT 2022" starttimestamp="1650117113620" timestamp="834960" />
  <DocumentChange __id="292" _type="Insert" date="Sat Apr 16 10:05:33 EDT 2022" docASTNodeCount="1781" docActiveCodeLength="13025" docExpressionCount="1233" docLength="14571" length="18" offset="12291" repeat="17" starttimestamp="1650117113620" timestamp="819763" timestamp2="824319">
    <text><![CDATA[server = "server";]]></text>
  </DocumentChange>
  <DocumentChange __id="339" _type="Insert" date="Sat Apr 16 10:05:40 EDT 2022" docASTNodeCount="1781" docActiveCodeLength="13029" docExpressionCount="1233" docLength="14575" length="4" offset="12297" repeat="4" starttimestamp="1650117113620" timestamp="826386" timestamp2="826812">
    <text><![CDATA[Name]]></text>
  </DocumentChange>
  <DocumentChange __id="349" _type="Insert" date="Sat Apr 16 10:05:42 EDT 2022" docASTNodeCount="1782" docActiveCodeLength="13039" docExpressionCount="1234" docLength="14585" length="10" offset="12336" repeat="10" starttimestamp="1650117113620" timestamp="828692" timestamp2="830039">
    <text><![CDATA[serverName]]></text>
  </DocumentChange>
  <Command __id="377" _type="PauseCommand" date="Sat Apr 16 10:05:58 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="844573">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[9613]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="378" _type="MoveCaretCommand" caretOffset="8627" date="Sat Apr 16 10:05:58 EDT 2022" docOffset="11053" starttimestamp="1650117113620" timestamp="844856" />
  <Command __id="380" _type="PauseCommand" date="Sat Apr 16 10:05:59 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="846279">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1423]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="379" _type="MoveCaretCommand" caretOffset="10248" date="Sat Apr 16 10:05:59 EDT 2022" docOffset="12674" starttimestamp="1650117113620" timestamp="846279" />
  <Command __id="383" _type="PauseCommand" date="Sat Apr 16 10:06:02 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="848472">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2193]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="382" _type="ShellCommand" date="Sat Apr 16 10:06:02 EDT 2022" starttimestamp="1650117113620" timestamp="848472" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="385" _type="PauseCommand" date="Sat Apr 16 10:06:03 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="849690">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1218]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="384" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:06:03 EDT 2022" forward="true" matchWord="false" offset="12674" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="849690" wrapSearch="false">
    <searchString><![CDATA[reader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="386" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:06:03 EDT 2022" forward="true" matchWord="false" offset="10978" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="850282" wrapSearch="false">
    <searchString><![CDATA[reader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="388" _type="PauseCommand" date="Sat Apr 16 10:06:07 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="854168">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3886]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="387" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:06:07 EDT 2022" forward="false" matchWord="false" offset="10978" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="854168" wrapSearch="false">
    <searchString><![CDATA[reader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="390" _type="PauseCommand" date="Sat Apr 16 10:06:10 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="857332">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3164]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="389" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:06:10 EDT 2022" forward="false" matchWord="false" offset="13063" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="857332" wrapSearch="false">
    <searchString><![CDATA[reader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="391" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:06:11 EDT 2022" forward="false" matchWord="false" offset="13063" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="857919" wrapSearch="false">
    <searchString><![CDATA[reader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="392" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:06:11 EDT 2022" forward="false" matchWord="false" offset="13063" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="858212" wrapSearch="false">
    <searchString><![CDATA[reader]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="394" _type="PauseCommand" date="Sat Apr 16 10:06:12 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="859348">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1136]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="393" _type="ShellCommand" date="Sat Apr 16 10:06:12 EDT 2022" starttimestamp="1650117113620" timestamp="859348" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="396" _type="PauseCommand" date="Sat Apr 16 10:06:21 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="867961">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8613]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="395" _type="MoveCaretCommand" caretOffset="9307" date="Sat Apr 16 10:06:21 EDT 2022" docOffset="11733" starttimestamp="1650117113620" timestamp="867961" />
  <Command __id="398" _type="InsertStringCommand" date="Sat Apr 16 10:06:22 EDT 2022" starttimestamp="1650117113620" timestamp="868534" timestamp2="868534">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="400" _type="PasteCommand" date="Sat Apr 16 10:06:22 EDT 2022" starttimestamp="1650117113620" timestamp="869033" />
  <Command __id="376" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:05:58 EDT 2022" docASTNodeCount="1708" docActiveCodeLength="12917" docExpressionCount="1196" docLength="14509" projectName="A6" starttimestamp="1650117113620" timestamp="844573">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientConfigure.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteObjectRMI;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.Tracer;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PerformanceExperimentEnded;
import util.trace.port.PerformanceExperimentStarted;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.CLIENT_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO})
public class ClientConfigure  extends ClientRemoteObject implements ClientRemoteInterfaceNIO {
	
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	public void atomicBroadcast(boolean fake) {
		return;
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC((ClientRemoteInterfaceGIPC) this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI((ClientRemoteInterfaceGIPC) this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	//@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand1(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, (ClientRemoteInterfaceGIPC) this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}
	
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism1 = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	//@Override
	public void nioInit(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		//reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {

			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		nioManager.write(socketChannel, bufferCommand, this);

		
		
		
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		aProposalNumber = 1 + aProposalNumber;
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="397" _type="Insert" date="Sat Apr 16 10:06:22 EDT 2022" docASTNodeCount="1708" docActiveCodeLength="12921" docExpressionCount="1196" docLength="14513" length="4" offset="11733" starttimestamp="1650117113620" timestamp="868528">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="399" _type="Replace" date="Sat Apr 16 10:06:22 EDT 2022" docASTNodeCount="1720" docActiveCodeLength="12991" docExpressionCount="1203" docLength="14583" endLine="331" insertionLength="72" int_docASTNodeCount="1708" int_docActiveCodeLength="12919" int_docExpressionCount="1196" int_docLength="14511" length="2" offset="11735" startLine="331" starttimestamp="1650117113620" timestamp="868904">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		final String serverName = "server";
		readThread.setName(serverName);]]></insertedText>
  </DocumentChange>
  <Command __id="402" _type="PauseCommand" date="Sat Apr 16 10:06:25 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="872333">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3300]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="403" _type="InsertStringCommand" date="Sat Apr 16 10:06:25 EDT 2022" starttimestamp="1650117113620" timestamp="872338" timestamp2="872338">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="405" _type="PauseCommand" date="Sat Apr 16 10:06:27 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="874351">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2013]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="404" _type="SelectTextCommand" caretOffset="9324" date="Sat Apr 16 10:06:27 EDT 2022" end="9330" start="9324" starttimestamp="1650117113620" timestamp="874351" />
  <Command __id="407" _type="InsertStringCommand" date="Sat Apr 16 10:06:28 EDT 2022" starttimestamp="1650117113620" timestamp="874577" timestamp2="874577">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="409" _type="InsertStringCommand" date="Sat Apr 16 10:06:28 EDT 2022" starttimestamp="1650117113620" timestamp="874708" timestamp2="874708">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="411" _type="InsertStringCommand" date="Sat Apr 16 10:06:28 EDT 2022" starttimestamp="1650117113620" timestamp="874839" timestamp2="874839">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="413" _type="InsertStringCommand" date="Sat Apr 16 10:06:28 EDT 2022" starttimestamp="1650117113620" timestamp="874928" timestamp2="874928">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="415" _type="InsertStringCommand" date="Sat Apr 16 10:06:28 EDT 2022" starttimestamp="1650117113620" timestamp="875070" timestamp2="875070">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="417" _type="InsertStringCommand" date="Sat Apr 16 10:06:28 EDT 2022" starttimestamp="1650117113620" timestamp="875178" timestamp2="875178">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="419" _type="PauseCommand" date="Sat Apr 16 10:06:30 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="877316">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2138]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="418" _type="SelectTextCommand" caretOffset="9338" date="Sat Apr 16 10:06:30 EDT 2022" end="9344" start="9338" starttimestamp="1650117113620" timestamp="877316" />
  <Command __id="421" _type="InsertStringCommand" date="Sat Apr 16 10:06:31 EDT 2022" starttimestamp="1650117113620" timestamp="877510" timestamp2="877510">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="423" _type="InsertStringCommand" date="Sat Apr 16 10:06:31 EDT 2022" starttimestamp="1650117113620" timestamp="877695" timestamp2="877695">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="425" _type="InsertStringCommand" date="Sat Apr 16 10:06:31 EDT 2022" starttimestamp="1650117113620" timestamp="877808" timestamp2="877808">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="427" _type="InsertStringCommand" date="Sat Apr 16 10:06:31 EDT 2022" starttimestamp="1650117113620" timestamp="877885" timestamp2="877885">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="429" _type="InsertStringCommand" date="Sat Apr 16 10:06:31 EDT 2022" starttimestamp="1650117113620" timestamp="878015" timestamp2="878015">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="431" _type="InsertStringCommand" date="Sat Apr 16 10:06:31 EDT 2022" starttimestamp="1650117113620" timestamp="878113" timestamp2="878113">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="432" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:06:32 EDT 2022" starttimestamp="1650117113620" timestamp="878625" />
  <Command __id="433" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:06:32 EDT 2022" starttimestamp="1650117113620" timestamp="878765" />
  <Command __id="434" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:06:32 EDT 2022" starttimestamp="1650117113620" timestamp="878837" />
  <Command __id="436" _type="PauseCommand" date="Sat Apr 16 10:06:34 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="880648">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1811]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="452" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:06:39 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="886103" type="Run" />
  <Command __id="454" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:06:39 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="886333" type="Run" />
  <Command __id="455" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:06:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="886336" type="Run" />
  <Command __id="457" _type="PauseCommand" date="Sat Apr 16 10:06:42 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="888860">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2524]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="458" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:06:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="891493" type="Run" />
  <Command __id="460" _type="ConsoleOutput" date="Sat Apr 16 10:06:45 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="891589" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Sat Apr 16 10:06:45 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment6.style.A6PublicMethodsOverride@66557938 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Sat Apr 16 10:06:45 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="462" _type="PauseCommand" date="Sat Apr 16 10:06:48 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="894638">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3049]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="461" _type="ConsoleOutput" date="Sat Apr 16 10:06:48 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="894638" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:125
Running second pass checks Sat Apr 16 10:06:48 EDT 2022
Start O(n2) inter- and intra class method calls:Sat Apr 16 10:06:48 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and r"), Diff(INSERT,"size:125¶R"), Diff(EQUAL,"unning "), Diff(DELETE,"first"), Diff(INSERT,"second"), Diff(EQUAL," pass checks"), Diff(INSERT," Sat Apr 16 10:06:48 EDT 2022¶Start O(n2) inter- and intra class method calls"), Diff(EQUAL,":Sat Apr 16 10:06:4"), Diff(DELETE,"5"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="463" _type="ConsoleOutput" date="Sat Apr 16 10:06:48 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="894742" type="ConsoleOutput">
    <outputString><![CDATA[End O(n2) inter- and intra class method calls:Sat Apr 16 10:06:48 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:125¶Running second pass checks Sat Apr 16 10:06:48 EDT 2022¶Start"), Diff(INSERT,"End"), Diff(EQUAL," O(n2) inter- and intra class method calls:Sat Apr 16 10:06:48 EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="465" _type="PauseCommand" date="Sat Apr 16 10:06:50 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="896593">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1851]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="464" _type="ConsoleOutput" date="Sat Apr 16 10:06:50 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="896593" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Sat Apr 16 10:06:50 EDT 2022
Generating checks:Sat Apr 16 10:06:50 EDT 2022
Finished Generating checks:Sat Apr 16 10:06:50 EDT 2022
Generating externals:Sat Apr 16 10:06:50 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Finished second pass checks:Sat Apr 16 10:06:50 EDT 2022¶Generating checks:Sat Apr 16 10:06:50 EDT 2022¶Finished Generating checks:Sat Apr 16 10:06:50 EDT 2022¶Generating externa"), Diff(EQUAL,"ls:Sat Apr 16 10:06:"), Diff(DELETE,"48"), Diff(INSERT,"50"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="466" _type="ConsoleOutput" date="Sat Apr 16 10:06:50 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="897223" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Sat Apr 16 10:06:50 EDT 2022
Test execution time (ms):5664
Test execution time (ms):23
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Sat Apr 16 10:06:50 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Sat Apr 16 10:06:50 EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Sat Apr 16 10:06:50 EDT 2022¶Generating externals:Sat Apr 16 10:06:50 EDT 2022"), Diff(INSERT,"Test execution time (ms):5664¶Test execution time (ms):23"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="467" _type="ConsoleOutput" date="Sat Apr 16 10:06:50 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="897306" type="ConsoleOutput">
    <outputString><![CDATA[A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.8275862068965517

Test execution time (ms):15
Test execution time (ms):14

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (37)
 |- checks (1)
  |~ Checks.java (36)
 |- client (8)
  |~ Client.java (23)
  |~ ClientConfigure.java (434)
  |~ ClientOutCoupler.java (57)
  |~ ClientRemoteInterfaceGIPC.java (33)
  |~ ClientRemoteInterfaceNIO.java (21)
  |~ ClientRemoteInterfaceRMI.java (29)
  |~ ClientRemoteObject.java (294)
  |~ ClientRemoteObjectNIO.java (170)
 |- nioExample (8)
  |~ AnNIOManagerPrintClient.java (125)
  |~ AnNIOManagerPrintServer.java (138)
  |~ exampleClientReadThread.java (67)
  |~ exampleServerReadThread.java (70)
  |~ FakeClientInterface.java (12)
  |~ NIOManagerPrintClientLauncherNoFactory.java (10)
  |~ NIOManagerPrintServer.java (20)
  |~ NIOManagerPrintServerLauncherNoFactory.java (10)
 |- readThread (3)
  |~ ClientReadThread.java (82)
  |~ ReadThreadInterface.java (13)
  |~ ServerReadThread.java (76)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (10)
  |~ OriginalSimulation.java (9)
  |~ Server.java (33)
  |~ ServerConfigure.java (470)
  |- remote (6)
   |~ ServerRemoteInterfaceGIPC.java (44)
   |~ ServerRemoteInterfaceNIO.java (23)
   |~ ServerRemoteInterfaceRMI.java (40)
   |~ ServerRemoteObjectGIPC.java (335)
   |~ ServerRemoteObjectNIO.java (159)
   |~ ServerRemoteObjectRMI.java (245)

Attempting to match to the structure:
|- .* (23)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Sat Apr 16 10:06:50 EDT 2022¶Test execution time (ms):5664¶Test execution time (ms):"), Diff(INSERT,"A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.8275862068965517¶¶Test execution time (ms):15¶Test execution time (ms):14¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (434)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (21)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (294)¶  |~ ClientRemoteObjectNIO.java (170)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (82)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (470)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (335)¶   |~ ServerRemoteObjectNIO.java (159)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* ("), Diff(EQUAL,"23"), Diff(INSERT,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="468" _type="ConsoleOutput" date="Sat Apr 16 10:06:50 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="897362" type="ConsoleOutput">
    <outputString><![CDATA[A6ProjectOrganization did not pass completely:View console for more information%0.0

Test execution time (ms):41
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"A6"), Diff(DELETE,"ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.8275862068965517¶¶Test execution time (ms):15¶Test execution time (ms):14¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (434)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (21)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (294)¶  |~ ClientRemoteObjectNIO.java (170)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (82)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (470)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (335)¶   |~ ServerRemoteObjectNIO.java (159)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* (23)"), Diff(INSERT,"ProjectOrganization did not pass completely:View console for more information%0.0¶¶Test execution time (ms):41"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="470" _type="PauseCommand" date="Sat Apr 16 10:06:55 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="902293">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4931]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="469" _type="ConsoleOutput" date="Sat Apr 16 10:06:55 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="902293" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@7e7f9a32 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A6ProjectOrganization did not pass completely:View console for more information%0.0¶¶Test execution time (ms):41"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@7e7f9a32 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="472" _type="PauseCommand" date="Sat Apr 16 10:07:03 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="910316">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8023]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="473" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:07:25 EDT 2022" starttimestamp="1650117113620" timestamp="931584" />
  <Command __id="475" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:07:25 EDT 2022" starttimestamp="1650117113620" timestamp="931592" />
  <Command __id="476" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:07:25 EDT 2022" starttimestamp="1650117113620" timestamp="931592" />
  <Command __id="477" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:07:25 EDT 2022" starttimestamp="1650117113620" timestamp="931597" />
  <DocumentChange __id="401" _type="Insert" date="Sat Apr 16 10:06:25 EDT 2022" docASTNodeCount="1720" docActiveCodeLength="12995" docExpressionCount="1203" docLength="14587" length="4" offset="11807" starttimestamp="1650117113620" timestamp="872333">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="406" _type="Replace" date="Sat Apr 16 10:06:28 EDT 2022" docASTNodeCount="1720" docActiveCodeLength="12990" docExpressionCount="1203" docLength="14582" endLine="331" insertionLength="1" int_docASTNodeCount="1720" int_docActiveCodeLength="12989" int_docExpressionCount="1203" int_docLength="14581" length="6" offset="11750" startLine="331" starttimestamp="1650117113620" timestamp="874572">
    <deletedText><![CDATA[server]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="408" _type="Insert" date="Sat Apr 16 10:06:28 EDT 2022" docASTNodeCount="1720" docActiveCodeLength="12995" docExpressionCount="1203" docLength="14587" length="5" offset="11751" repeat="5" starttimestamp="1650117113620" timestamp="874705" timestamp2="875172">
    <text><![CDATA[lient]]></text>
  </DocumentChange>
  <DocumentChange __id="420" _type="Replace" date="Sat Apr 16 10:06:31 EDT 2022" docASTNodeCount="1720" docActiveCodeLength="12990" docExpressionCount="1203" docLength="14582" endLine="331" insertionLength="1" int_docASTNodeCount="1720" int_docActiveCodeLength="12989" int_docExpressionCount="1203" int_docLength="14581" length="6" offset="11764" startLine="331" starttimestamp="1650117113620" timestamp="877505">
    <deletedText><![CDATA[server]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="422" _type="Insert" date="Sat Apr 16 10:06:31 EDT 2022" docASTNodeCount="1720" docActiveCodeLength="12995" docExpressionCount="1203" docLength="14587" length="5" offset="11765" repeat="5" starttimestamp="1650117113620" timestamp="877690" timestamp2="878107">
    <text><![CDATA[lient]]></text>
  </DocumentChange>
  <DocumentChange __id="437" _type="Replace" date="Sat Apr 16 10:06:34 EDT 2022" docASTNodeCount="1720" docActiveCodeLength="12990" docExpressionCount="1203" docLength="14582" endLine="332" insertionLength="1" int_docASTNodeCount="1720" int_docActiveCodeLength="12989" int_docExpressionCount="1203" int_docLength="14581" length="6" offset="11795" startLine="332" starttimestamp="1650117113620" timestamp="880869">
    <deletedText><![CDATA[server]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="439" _type="Insert" date="Sat Apr 16 10:06:34 EDT 2022" docASTNodeCount="1720" docActiveCodeLength="12995" docExpressionCount="1203" docLength="14587" length="5" offset="11796" repeat="5" starttimestamp="1650117113620" timestamp="881097" timestamp2="881468">
    <text><![CDATA[lient]]></text>
  </DocumentChange>
  <Command __id="479" _type="PauseCommand" date="Sat Apr 16 10:07:29 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="935763">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4165]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="480" _type="SelectTextCommand" caretOffset="3688" date="Sat Apr 16 10:07:29 EDT 2022" end="3688" start="161" starttimestamp="1650117113620" timestamp="935948" />
  <Command __id="482" _type="PauseCommand" date="Sat Apr 16 10:07:30 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="937139">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1191]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="481" _type="MoveCaretCommand" caretOffset="248" date="Sat Apr 16 10:07:30 EDT 2022" docOffset="1436" starttimestamp="1650117113620" timestamp="937139" />
  <Command __id="483" _type="MoveCaretCommand" caretOffset="248" date="Sat Apr 16 10:07:30 EDT 2022" docOffset="1436" starttimestamp="1650117113620" timestamp="937139" />
  <Command __id="478" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:07:29 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4496" docExpressionCount="449" docLength="4883" projectName="A6" starttimestamp="1650117113620" timestamp="935762">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶			¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="485" _type="PauseCommand" date="Sat Apr 16 10:07:58 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="965344">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[28205]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="486" _type="MoveCaretCommand" caretOffset="0" date="Sat Apr 16 10:07:59 EDT 2022" docOffset="0" starttimestamp="1650117113620" timestamp="965523" />
  <Command __id="488" _type="PauseCommand" date="Sat Apr 16 10:08:00 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="966555">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1032]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="487" _type="MoveCaretCommand" caretOffset="127" date="Sat Apr 16 10:08:00 EDT 2022" docOffset="1288" starttimestamp="1650117113620" timestamp="966555" />
  <Command __id="490" _type="ShellCommand" date="Sat Apr 16 10:08:00 EDT 2022" starttimestamp="1650117113620" timestamp="966856" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="492" _type="PauseCommand" date="Sat Apr 16 10:08:01 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="968178">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1322]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="491" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:08:01 EDT 2022" forward="false" matchWord="false" offset="1288" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="968178" wrapSearch="false">
    <searchString><![CDATA[write]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="493" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:08:02 EDT 2022" forward="false" matchWord="false" offset="1006" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="969033" wrapSearch="false">
    <searchString><![CDATA[write]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="495" _type="PauseCommand" date="Sat Apr 16 10:08:05 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="971516">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2483]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="494" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:08:05 EDT 2022" forward="true" matchWord="false" offset="1006" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="971516" wrapSearch="false">
    <searchString><![CDATA[write]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="497" _type="PauseCommand" date="Sat Apr 16 10:08:06 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="973037">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1521]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="496" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:08:06 EDT 2022" forward="true" matchWord="false" offset="2461" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="973037" wrapSearch="false">
    <searchString><![CDATA[write]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="498" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:08:07 EDT 2022" forward="true" matchWord="false" offset="3833" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="973663" wrapSearch="false">
    <searchString><![CDATA[write]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="500" _type="PauseCommand" date="Sat Apr 16 10:08:11 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="978259">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[4596]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="499" _type="ShellCommand" date="Sat Apr 16 10:08:11 EDT 2022" starttimestamp="1650117113620" timestamp="978259" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="502" _type="PauseCommand" date="Sat Apr 16 10:08:13 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="979928">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1669]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="501" _type="SelectTextCommand" caretOffset="3817" date="Sat Apr 16 10:08:13 EDT 2022" end="3865" start="3817" starttimestamp="1650117113620" timestamp="979928" />
  <Command __id="503" _type="CopyCommand" date="Sat Apr 16 10:08:14 EDT 2022" starttimestamp="1650117113620" timestamp="980515" />
  <Command __id="505" _type="PauseCommand" date="Sat Apr 16 10:08:29 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="995460">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[14945]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="504" _type="ShellCommand" date="Sat Apr 16 10:08:29 EDT 2022" starttimestamp="1650117113620" timestamp="995460" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="506" _type="ShellCommand" date="Sat Apr 16 10:08:29 EDT 2022" starttimestamp="1650117113620" timestamp="995666" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="484" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:07:58 EDT 2022" docASTNodeCount="564" docActiveCodeLength="3986" docExpressionCount="391" docLength="4607" projectName="A6" starttimestamp="1650117113620" timestamp="965344">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import assignments.util.MiscAssignmentUtils;

import client.ClientRemoteInterfaceGIPC;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import inputport.nio.manager.listeners.WriteBoundedBufferListener;
import readThread.ReadThreadInterface;
import util.trace.factories.FactoryTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;

public class AnNIOManagerPrintServer implements NIOManagerPrintServer {

	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();

	public AnNIOManagerPrintServer(int aServerPort) {
		setTracing();
		setFactories();
		initialize(aServerPort);
	}

	protected void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	protected void setTracing() {
		FactoryTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
	}

	protected void initialize(int aServerPort) {
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		/*
		// Pop value off the bounded buffer
		ByteBuffer originalMessage = null;
		try {
			originalMessage = boundedBuffer.take();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		// Echo recieve message to all clients (except original message sender)
		for (SocketChannel socket : socketList) {
			if (!socket.equals(aSocketChannel)) {
				nioManager.write(socket, originalMessage, this);
			}
		}
		*/
		System.out.println("notifying reader!!");
		reader.notifyThread();
		System.out.println("thread has completed action and is now waiting");

	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){
		return boundedBuffer;
		
	}
	
	@Override
	public List<SocketChannel> getSocketList(){
		return socketList;
	}
	
	@Override
	public SocketChannel getSocketChannel() {
		return currentSocket;
	}

	@Override
	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {
		// TODO Auto-generated method stub
		String aMessageString = new String(aMessage.array());
		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);
	}

}
]]></snapshot>
  </Command>
  <Command __id="508" _type="PauseCommand" date="Sat Apr 16 10:08:46 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1012518">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16852]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="509" _type="SelectTextCommand" caretOffset="12278" date="Sat Apr 16 10:08:46 EDT 2022" end="12348" start="12278" starttimestamp="1650117113620" timestamp="1012687" />
  <Command __id="511" _type="PauseCommand" date="Sat Apr 16 10:08:53 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="1020028">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7341]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="510" _type="MoveCaretCommand" caretOffset="12806" date="Sat Apr 16 10:08:53 EDT 2022" docOffset="12806" starttimestamp="1650117113620" timestamp="1020028" />
  <Command __id="513" _type="InsertStringCommand" date="Sat Apr 16 10:08:53 EDT 2022" starttimestamp="1650117113620" timestamp="1020331" timestamp2="1020331">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="507" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:08:46 EDT 2022" docASTNodeCount="1782" docActiveCodeLength="13039" docExpressionCount="1234" docLength="14585" projectName="A6" starttimestamp="1650117113620" timestamp="1012518">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\ServerConfigure.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import server.remote.ServerRemoteInterfaceNIO;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteObjectRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({DistributedTags.SERVER_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO})¶public class ServerConfigure extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	//@Override¶	protected void initServer(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶			¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		//reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		"), Diff(INSERT,"final String serverName = "server";¶		readThread.setName(serverName);"), Diff(EQUAL,"¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	//@Override¶	protected void setTracingFake() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import server.remote.ServerRemoteInterfaceNIO;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteObjectRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.SERVER_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO})
public class ServerConfigure extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber)
			throws RemoteException {
		// TODO Auto-generated method stub
		
	}
	
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	//@Override
	protected void initServer(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
			
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		//reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		final String serverName = "server";
		readThread.setName(serverName);
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	//@Override
	protected void setTracingFake() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="512" _type="Insert" date="Sat Apr 16 10:08:53 EDT 2022" docASTNodeCount="1782" docActiveCodeLength="13043" docExpressionCount="1234" docLength="14589" length="4" offset="12806" starttimestamp="1650117113620" timestamp="1020325">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="515" _type="PauseCommand" date="Sat Apr 16 10:09:00 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="1026836">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[6505]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="514" _type="Insert" date="Sat Apr 16 10:09:00 EDT 2022" docASTNodeCount="1782" docActiveCodeLength="13047" docExpressionCount="1234" docLength="14593" length="4" offset="12810" starttimestamp="1650117113620" timestamp="1026836">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="516" _type="InsertStringCommand" date="Sat Apr 16 10:09:00 EDT 2022" starttimestamp="1650117113620" timestamp="1026841" timestamp2="1026841">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="518" _type="PasteCommand" date="Sat Apr 16 10:09:00 EDT 2022" starttimestamp="1650117113620" timestamp="1027125" />
  <Command __id="520" _type="PauseCommand" date="Sat Apr 16 10:09:06 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="1032640">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[5515]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="519" _type="SelectTextCommand" caretOffset="12831" date="Sat Apr 16 10:09:06 EDT 2022" end="12837" start="12831" starttimestamp="1650117113620" timestamp="1032640" />
  <Command __id="522" _type="InsertStringCommand" date="Sat Apr 16 10:09:06 EDT 2022" starttimestamp="1650117113620" timestamp="1032833" timestamp2="1032833">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="517" _type="Replace" date="Sat Apr 16 10:09:00 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13095" docExpressionCount="1240" docLength="14641" endLine="397" insertionLength="50" int_docASTNodeCount="1782" int_docActiveCodeLength="13045" int_docExpressionCount="1234" int_docLength="14591" length="2" offset="12812" startLine="397" starttimestamp="1650117113620" timestamp="1027121">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		nioManager.write(socket, originalMessage, this);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="521" _type="Replace" date="Sat Apr 16 10:09:06 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13090" docExpressionCount="1240" docLength="14636" endLine="397" insertionLength="1" int_docASTNodeCount="1788" int_docActiveCodeLength="13089" int_docExpressionCount="1239" int_docLength="14635" length="6" offset="12831" startLine="397" starttimestamp="1650117113620" timestamp="1032827">
    <deletedText><![CDATA[socket]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <Command __id="524" _type="PauseCommand" date="Sat Apr 16 10:09:07 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1034001">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1167]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="523" _type="Insert" date="Sat Apr 16 10:09:07 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13091" docExpressionCount="1240" docLength="14637" length="1" offset="12832" starttimestamp="1650117113620" timestamp="1034000">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="525" _type="InsertStringCommand" date="Sat Apr 16 10:09:07 EDT 2022" starttimestamp="1650117113620" timestamp="1034007" timestamp2="1034007">
    <data><![CDATA[:]]></data>
  </Command>
  <DocumentChange __id="526" _type="Delete" date="Sat Apr 16 10:09:08 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13090" docExpressionCount="1240" docLength="14636" endLine="397" length="1" offset="12832" startLine="397" starttimestamp="1650117113620" timestamp="1034496">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="527" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:09:08 EDT 2022" starttimestamp="1650117113620" timestamp="1034499" />
  <Command __id="529" _type="InsertStringCommand" date="Sat Apr 16 10:09:08 EDT 2022" starttimestamp="1650117113620" timestamp="1034696" timestamp2="1034696">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="531" _type="InsertStringCommand" date="Sat Apr 16 10:09:08 EDT 2022" starttimestamp="1650117113620" timestamp="1034909" timestamp2="1034909">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="533" _type="InsertStringCommand" date="Sat Apr 16 10:09:08 EDT 2022" starttimestamp="1650117113620" timestamp="1035012" timestamp2="1035012">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="535" _type="InsertStringCommand" date="Sat Apr 16 10:09:08 EDT 2022" starttimestamp="1650117113620" timestamp="1035104" timestamp2="1035104">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="537" _type="InsertStringCommand" date="Sat Apr 16 10:09:08 EDT 2022" starttimestamp="1650117113620" timestamp="1035248" timestamp2="1035248">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="539" _type="InsertStringCommand" date="Sat Apr 16 10:09:09 EDT 2022" starttimestamp="1650117113620" timestamp="1035380" timestamp2="1035380">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="541" _type="InsertStringCommand" date="Sat Apr 16 10:09:09 EDT 2022" starttimestamp="1650117113620" timestamp="1035760" timestamp2="1035760">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="543" _type="InsertStringCommand" date="Sat Apr 16 10:09:09 EDT 2022" starttimestamp="1650117113620" timestamp="1036069" timestamp2="1036069">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="545" _type="InsertStringCommand" date="Sat Apr 16 10:09:09 EDT 2022" starttimestamp="1650117113620" timestamp="1036153" timestamp2="1036153">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="547" _type="InsertStringCommand" date="Sat Apr 16 10:09:09 EDT 2022" starttimestamp="1650117113620" timestamp="1036331" timestamp2="1036331">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="549" _type="InsertStringCommand" date="Sat Apr 16 10:09:10 EDT 2022" starttimestamp="1650117113620" timestamp="1037008" timestamp2="1037008">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="551" _type="InsertStringCommand" date="Sat Apr 16 10:09:10 EDT 2022" starttimestamp="1650117113620" timestamp="1037139" timestamp2="1037139">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="553" _type="InsertStringCommand" date="Sat Apr 16 10:09:10 EDT 2022" starttimestamp="1650117113620" timestamp="1037248" timestamp2="1037248">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="555" _type="PauseCommand" date="Sat Apr 16 10:09:12 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1039163">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1915]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="554" _type="MoveCaretCommand" caretOffset="12810" date="Sat Apr 16 10:09:12 EDT 2022" docOffset="12810" starttimestamp="1650117113620" timestamp="1039163" />
  <Command __id="557" _type="InsertStringCommand" date="Sat Apr 16 10:09:13 EDT 2022" starttimestamp="1650117113620" timestamp="1039406" timestamp2="1039406">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="559" _type="InsertStringCommand" date="Sat Apr 16 10:09:13 EDT 2022" starttimestamp="1650117113620" timestamp="1039584" timestamp2="1039584">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="561" _type="InsertStringCommand" date="Sat Apr 16 10:09:13 EDT 2022" starttimestamp="1650117113620" timestamp="1039742" timestamp2="1039742">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="563" _type="InsertStringCommand" date="Sat Apr 16 10:09:13 EDT 2022" starttimestamp="1650117113620" timestamp="1039847" timestamp2="1039847">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="565" _type="InsertStringCommand" date="Sat Apr 16 10:09:13 EDT 2022" starttimestamp="1650117113620" timestamp="1039910" timestamp2="1039910">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="567" _type="InsertStringCommand" date="Sat Apr 16 10:09:13 EDT 2022" starttimestamp="1650117113620" timestamp="1040069" timestamp2="1040069">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="569" _type="InsertStringCommand" date="Sat Apr 16 10:09:13 EDT 2022" starttimestamp="1650117113620" timestamp="1040200" timestamp2="1040200">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="571" _type="InsertStringCommand" date="Sat Apr 16 10:09:14 EDT 2022" starttimestamp="1650117113620" timestamp="1041063" timestamp2="1041063">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="573" _type="InsertStringCommand" date="Sat Apr 16 10:09:14 EDT 2022" starttimestamp="1650117113620" timestamp="1041253" timestamp2="1041253">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="575" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1041453" timestamp2="1041453">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="577" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1041528" timestamp2="1041528">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="579" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1041606" timestamp2="1041606">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="581" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1041688" timestamp2="1041688">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="583" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1041813" timestamp2="1041813">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="585" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1041885" timestamp2="1041885">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="587" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1041950" timestamp2="1041950">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="589" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1042081" timestamp2="1042081">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="591" _type="InsertStringCommand" date="Sat Apr 16 10:09:15 EDT 2022" starttimestamp="1650117113620" timestamp="1042179" timestamp2="1042179">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="593" _type="InsertStringCommand" date="Sat Apr 16 10:09:16 EDT 2022" starttimestamp="1650117113620" timestamp="1042824" timestamp2="1042824">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="595" _type="InsertStringCommand" date="Sat Apr 16 10:09:16 EDT 2022" starttimestamp="1650117113620" timestamp="1043023" timestamp2="1043023">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="597" _type="InsertStringCommand" date="Sat Apr 16 10:09:16 EDT 2022" starttimestamp="1650117113620" timestamp="1043137" timestamp2="1043137">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="599" _type="InsertStringCommand" date="Sat Apr 16 10:09:17 EDT 2022" starttimestamp="1650117113620" timestamp="1043421" timestamp2="1043421">
    <data><![CDATA["]]></data>
  </Command>
  <DocumentChange __id="528" _type="Insert" date="Sat Apr 16 10:09:08 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13103" docExpressionCount="1240" docLength="14649" length="13" offset="12832" repeat="13" starttimestamp="1650117113620" timestamp="1034693" timestamp2="1037244">
    <text><![CDATA[SocketChannel]]></text>
  </DocumentChange>
  <DocumentChange __id="556" _type="Insert" date="Sat Apr 16 10:09:13 EDT 2022" docASTNodeCount="1796" docActiveCodeLength="13129" docExpressionCount="1243" docLength="14675" length="26" offset="12810" repeat="22" starttimestamp="1650117113620" timestamp="1039401" timestamp2="1043416">
    <text><![CDATA[
		final String fake = ""]]></text>
  </DocumentChange>
  <Command __id="601" _type="PauseCommand" date="Sat Apr 16 10:09:19 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1045600">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2179]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="602" _type="InsertStringCommand" date="Sat Apr 16 10:09:19 EDT 2022" starttimestamp="1650117113620" timestamp="1045604" timestamp2="1045604">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="604" _type="InsertStringCommand" date="Sat Apr 16 10:09:19 EDT 2022" starttimestamp="1650117113620" timestamp="1045693" timestamp2="1045693">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="606" _type="PauseCommand" date="Sat Apr 16 10:09:21 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1047696">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2003]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="605" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Sat Apr 16 10:09:21 EDT 2022" starttimestamp="1650117113620" timestamp="1047696" />
  <Command __id="608" _type="InsertStringCommand" date="Sat Apr 16 10:09:21 EDT 2022" starttimestamp="1650117113620" timestamp="1048209" timestamp2="1048209">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="610" _type="PauseCommand" date="Sat Apr 16 10:09:24 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1051096">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2887]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="609" _type="SelectTextCommand" caretOffset="12876" date="Sat Apr 16 10:09:24 EDT 2022" end="12891" start="12876" starttimestamp="1650117113620" timestamp="1051096" />
  <Command __id="612" _type="InsertStringCommand" date="Sat Apr 16 10:09:24 EDT 2022" starttimestamp="1650117113620" timestamp="1051142" timestamp2="1051142">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="614" _type="InsertStringCommand" date="Sat Apr 16 10:09:24 EDT 2022" starttimestamp="1650117113620" timestamp="1051199" timestamp2="1051199">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="616" _type="InsertStringCommand" date="Sat Apr 16 10:09:25 EDT 2022" starttimestamp="1650117113620" timestamp="1051438" timestamp2="1051438">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="618" _type="InsertStringCommand" date="Sat Apr 16 10:09:25 EDT 2022" starttimestamp="1650117113620" timestamp="1051586" timestamp2="1051586">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="620" _type="PauseCommand" date="Sat Apr 16 10:09:26 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1052829">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1243]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="619" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:09:26 EDT 2022" starttimestamp="1650117113620" timestamp="1052829" />
  <Command __id="621" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:09:26 EDT 2022" starttimestamp="1650117113620" timestamp="1052971" />
  <Command __id="622" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:09:26 EDT 2022" starttimestamp="1650117113620" timestamp="1053018" />
  <Command __id="624" _type="PauseCommand" date="Sat Apr 16 10:09:40 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1067203">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[14185]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="623" _type="SelectTextCommand" caretOffset="12814" date="Sat Apr 16 10:09:40 EDT 2022" end="12888" start="12814" starttimestamp="1650117113620" timestamp="1067203" />
  <Command __id="626" _type="CutCommand" date="Sat Apr 16 10:09:41 EDT 2022" starttimestamp="1650117113620" timestamp="1067594" />
  <Command __id="628" _type="PauseCommand" date="Sat Apr 16 10:09:43 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1069978">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[2384]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="627" _type="MoveCaretCommand" caretOffset="13248" date="Sat Apr 16 10:09:43 EDT 2022" docOffset="13248" starttimestamp="1650117113620" timestamp="1069978" />
  <Command __id="630" _type="InsertStringCommand" date="Sat Apr 16 10:09:43 EDT 2022" starttimestamp="1650117113620" timestamp="1070234" timestamp2="1070234">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="632" _type="InsertStringCommand" date="Sat Apr 16 10:09:44 EDT 2022" starttimestamp="1650117113620" timestamp="1070385" timestamp2="1070385">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="634" _type="PasteCommand" date="Sat Apr 16 10:09:44 EDT 2022" starttimestamp="1650117113620" timestamp="1070597" />
  <Command __id="636" _type="PauseCommand" date="Sat Apr 16 10:09:47 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1073613">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3016]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="635" _type="SelectTextCommand" caretOffset="13257" date="Sat Apr 16 10:09:47 EDT 2022" end="13281" start="13257" starttimestamp="1650117113620" timestamp="1073613" />
  <Command __id="638" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:09:47 EDT 2022" starttimestamp="1650117113620" timestamp="1073948" />
  <Command __id="640" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:09:47 EDT 2022" starttimestamp="1650117113620" timestamp="1074319" />
  <DocumentChange __id="600" _type="Insert" date="Sat Apr 16 10:09:19 EDT 2022" docASTNodeCount="1796" docActiveCodeLength="13131" docExpressionCount="1243" docLength="14677" length="2" offset="12835" repeat="2" starttimestamp="1650117113620" timestamp="1045600" timestamp2="1045687">
    <text><![CDATA[hi]]></text>
  </DocumentChange>
  <DocumentChange __id="607" _type="Insert" date="Sat Apr 16 10:09:21 EDT 2022" docASTNodeCount="1796" docActiveCodeLength="13132" docExpressionCount="1243" docLength="14678" length="1" offset="12838" starttimestamp="1650117113620" timestamp="1048203">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="611" _type="Replace" date="Sat Apr 16 10:09:24 EDT 2022" docASTNodeCount="1796" docActiveCodeLength="13118" docExpressionCount="1243" docLength="14664" endLine="398" insertionLength="1" int_docASTNodeCount="1795" int_docActiveCodeLength="13117" int_docExpressionCount="1242" int_docLength="14663" length="15" offset="12876" startLine="398" starttimestamp="1650117113620" timestamp="1051135">
    <deletedText><![CDATA[originalMessage]]></deletedText>
    <insertedText><![CDATA[f]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="613" _type="Insert" date="Sat Apr 16 10:09:24 EDT 2022" docASTNodeCount="1796" docActiveCodeLength="13121" docExpressionCount="1243" docLength="14667" length="3" offset="12877" repeat="3" starttimestamp="1650117113620" timestamp="1051193" timestamp2="1051581">
    <text><![CDATA[ake]]></text>
  </DocumentChange>
  <DocumentChange __id="625" _type="Delete" date="Sat Apr 16 10:09:41 EDT 2022" docASTNodeCount="1782" docActiveCodeLength="13047" docExpressionCount="1234" docLength="14593" endLine="398" length="74" offset="12814" startLine="397" starttimestamp="1650117113620" timestamp="1067582">
    <text><![CDATA[final String fake = "hi";
		nioManager.write(aSocketChannel, fake, this);]]></text>
  </DocumentChange>
  <DocumentChange __id="629" _type="Insert" date="Sat Apr 16 10:09:43 EDT 2022" docASTNodeCount="1782" docActiveCodeLength="13055" docExpressionCount="1234" docLength="14601" length="8" offset="13248" repeat="2" starttimestamp="1650117113620" timestamp="1070229" timestamp2="1070380">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <DocumentChange __id="633" _type="Replace" date="Sat Apr 16 10:09:44 EDT 2022" docASTNodeCount="1796" docActiveCodeLength="13129" docExpressionCount="1243" docLength="14675" endLine="413" insertionLength="76" int_docASTNodeCount="1782" int_docActiveCodeLength="13053" int_docExpressionCount="1234" int_docLength="14599" length="2" offset="13254" startLine="413" starttimestamp="1650117113620" timestamp="1070591">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		final String fake = "hi";
		nioManager.write(aSocketChannel, fake, this);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="637" _type="Delete" date="Sat Apr 16 10:09:47 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13104" docExpressionCount="1240" docLength="14650" endLine="413" length="25" offset="13256" repeat="2" startLine="413" starttimestamp="1650117113620" timestamp="1073945" timestamp2="1074316">
    <text><![CDATA[final String fake = "hi";]]></text>
  </DocumentChange>
  <Command __id="642" _type="PauseCommand" date="Sat Apr 16 10:09:49 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1075396">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1077]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="641" _type="Insert" date="Sat Apr 16 10:09:49 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13104" docExpressionCount="1240" docLength="14659" length="9" offset="13256" repeat="9" starttimestamp="1650117113620" timestamp="1075396" timestamp2="1077233">
    <text><![CDATA[//Fake cl]]></text>
  </DocumentChange>
  <Command __id="643" _type="InsertStringCommand" date="Sat Apr 16 10:09:49 EDT 2022" starttimestamp="1650117113620" timestamp="1075411" timestamp2="1075411">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="645" _type="InsertStringCommand" date="Sat Apr 16 10:09:49 EDT 2022" starttimestamp="1650117113620" timestamp="1075521" timestamp2="1075521">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="647" _type="InsertStringCommand" date="Sat Apr 16 10:09:49 EDT 2022" starttimestamp="1650117113620" timestamp="1076345" timestamp2="1076345">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="649" _type="InsertStringCommand" date="Sat Apr 16 10:09:50 EDT 2022" starttimestamp="1650117113620" timestamp="1076573" timestamp2="1076573">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="651" _type="InsertStringCommand" date="Sat Apr 16 10:09:50 EDT 2022" starttimestamp="1650117113620" timestamp="1076674" timestamp2="1076674">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="653" _type="InsertStringCommand" date="Sat Apr 16 10:09:50 EDT 2022" starttimestamp="1650117113620" timestamp="1076802" timestamp2="1076802">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="655" _type="InsertStringCommand" date="Sat Apr 16 10:09:50 EDT 2022" starttimestamp="1650117113620" timestamp="1076914" timestamp2="1076914">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="657" _type="InsertStringCommand" date="Sat Apr 16 10:09:50 EDT 2022" starttimestamp="1650117113620" timestamp="1077027" timestamp2="1077027">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="659" _type="InsertStringCommand" date="Sat Apr 16 10:09:50 EDT 2022" starttimestamp="1650117113620" timestamp="1077238" timestamp2="1077238">
    <data><![CDATA[l]]></data>
  </Command>
  <DocumentChange __id="660" _type="Delete" date="Sat Apr 16 10:09:51 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13104" docExpressionCount="1240" docLength="14658" endLine="413" length="1" offset="13264" startLine="413" starttimestamp="1650117113620" timestamp="1077586">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <Command __id="661" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:09:51 EDT 2022" starttimestamp="1650117113620" timestamp="1077587" />
  <Command __id="663" _type="InsertStringCommand" date="Sat Apr 16 10:09:51 EDT 2022" starttimestamp="1650117113620" timestamp="1077674" timestamp2="1077674">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="665" _type="InsertStringCommand" date="Sat Apr 16 10:09:51 EDT 2022" starttimestamp="1650117113620" timestamp="1077835" timestamp2="1077835">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="667" _type="InsertStringCommand" date="Sat Apr 16 10:09:51 EDT 2022" starttimestamp="1650117113620" timestamp="1077976" timestamp2="1077976">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="669" _type="InsertStringCommand" date="Sat Apr 16 10:09:51 EDT 2022" starttimestamp="1650117113620" timestamp="1078033" timestamp2="1078033">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="671" _type="InsertStringCommand" date="Sat Apr 16 10:09:51 EDT 2022" starttimestamp="1650117113620" timestamp="1078155" timestamp2="1078155">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="673" _type="InsertStringCommand" date="Sat Apr 16 10:09:51 EDT 2022" starttimestamp="1650117113620" timestamp="1078243" timestamp2="1078243">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="675" _type="InsertStringCommand" date="Sat Apr 16 10:09:51 EDT 2022" starttimestamp="1650117113620" timestamp="1078351" timestamp2="1078351">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="677" _type="InsertStringCommand" date="Sat Apr 16 10:09:52 EDT 2022" starttimestamp="1650117113620" timestamp="1078447" timestamp2="1078447">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="679" _type="InsertStringCommand" date="Sat Apr 16 10:09:52 EDT 2022" starttimestamp="1650117113620" timestamp="1078879" timestamp2="1078879">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="681" _type="InsertStringCommand" date="Sat Apr 16 10:09:52 EDT 2022" starttimestamp="1650117113620" timestamp="1079046" timestamp2="1079046">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="683" _type="InsertStringCommand" date="Sat Apr 16 10:09:52 EDT 2022" starttimestamp="1650117113620" timestamp="1079165" timestamp2="1079165">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="685" _type="InsertStringCommand" date="Sat Apr 16 10:09:52 EDT 2022" starttimestamp="1650117113620" timestamp="1079291" timestamp2="1079291">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="687" _type="InsertStringCommand" date="Sat Apr 16 10:09:53 EDT 2022" starttimestamp="1650117113620" timestamp="1079565" timestamp2="1079565">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="689" _type="InsertStringCommand" date="Sat Apr 16 10:09:53 EDT 2022" starttimestamp="1650117113620" timestamp="1079721" timestamp2="1079721">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="691" _type="InsertStringCommand" date="Sat Apr 16 10:09:53 EDT 2022" starttimestamp="1650117113620" timestamp="1079763" timestamp2="1079763">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="693" _type="InsertStringCommand" date="Sat Apr 16 10:09:53 EDT 2022" starttimestamp="1650117113620" timestamp="1079927" timestamp2="1079927">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="695" _type="InsertStringCommand" date="Sat Apr 16 10:09:53 EDT 2022" starttimestamp="1650117113620" timestamp="1080089" timestamp2="1080089">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="697" _type="InsertStringCommand" date="Sat Apr 16 10:09:53 EDT 2022" starttimestamp="1650117113620" timestamp="1080174" timestamp2="1080174">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="698" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:09:54 EDT 2022" starttimestamp="1650117113620" timestamp="1080648" />
  <Command __id="699" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:09:54 EDT 2022" starttimestamp="1650117113620" timestamp="1080735" />
  <Command __id="700" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:09:54 EDT 2022" starttimestamp="1650117113620" timestamp="1080795" />
  <Command __id="702" _type="PauseCommand" date="Sat Apr 16 10:09:58 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1084518">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3723]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="731" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:10:11 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="1098076" type="Run" />
  <Command __id="733" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:10:11 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="1098076" type="Run" />
  <Command __id="734" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:10:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1098280" type="Run" />
  <Command __id="735" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:10:11 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1098294" type="Run" />
  <Command __id="736" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:10:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1098298" type="Run" />
  <Command __id="738" _type="PauseCommand" date="Sat Apr 16 10:10:14 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1100699">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2401]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="739" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:10:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1102918" type="Run" />
  <Command __id="741" _type="ConsoleOutput" date="Sat Apr 16 10:10:16 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="1103015" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Sat Apr 16 10:10:16 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@7e7f9a32 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Sat Apr 16 10:10:16 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="743" _type="PauseCommand" date="Sat Apr 16 10:10:19 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1106036">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3021]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="742" _type="ConsoleOutput" date="Sat Apr 16 10:10:19 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="1106036" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:125
Running second pass checks Sat Apr 16 10:10:19 EDT 2022
Start O(n2) inter- and intra class method calls:Sat Apr 16 10:10:19 EDT 2022
End O(n2) inter- and intra class method calls:Sat Apr 16 10:10:19 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and r"), Diff(INSERT,"size:125¶R"), Diff(EQUAL,"unning "), Diff(DELETE,"first"), Diff(INSERT,"second"), Diff(EQUAL," pass checks"), Diff(DELETE,":Sat Apr 16 10:10:16"), Diff(INSERT," Sat Apr 16 10:10:19 EDT 2022¶Start O(n2) inter- and intra class method calls:Sat Apr 16 10:10:19 EDT 2022¶End O(n2) inter- and intra class method calls:Sat Apr 16 10:10:19"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="745" _type="PauseCommand" date="Sat Apr 16 10:10:21 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1107752">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1716]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="744" _type="ConsoleOutput" date="Sat Apr 16 10:10:21 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="1107752" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Sat Apr 16 10:10:21 EDT 2022
Generating checks:Sat Apr 16 10:10:21 EDT 2022
Finished Generating checks:Sat Apr 16 10:10:21 EDT 2022
Generating externals:Sat Apr 16 10:10:21 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:125¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Sat Apr 16 10:10:"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Sat Apr 16 10:10:21 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Sat Apr 16 10:10:"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Sat Apr 16 10:10:"), Diff(INSERT,"2"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="746" _type="ConsoleOutput" date="Sat Apr 16 10:10:22 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="1108496" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Sat Apr 16 10:10:22 EDT 2022
Test execution time (ms):5474
Test execution time (ms):21
A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.8620689655172413

Test execution time (ms):15
Test execution time (ms):10
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Sat Apr 16 10:10:2"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating checks:Sat Apr 16 10:10:21 EDT 2022¶Finished Generating checks:Sat Apr 16 10:10:21 EDT 2022¶Generating externals:Sat Apr 16 10:10:21 EDT 2022"), Diff(INSERT,"Test execution time (ms):5474¶Test execution time (ms):21¶A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.8620689655172413¶¶Test execution time (ms):15¶Test execution time (ms):10"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="747" _type="ConsoleOutput" date="Sat Apr 16 10:10:22 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="1108558" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (37)
 |- checks (1)
  |~ Checks.java (36)
 |- client (8)
  |~ Client.java (23)
  |~ ClientConfigure.java (434)
  |~ ClientOutCoupler.java (57)
  |~ ClientRemoteInterfaceGIPC.java (33)
  |~ ClientRemoteInterfaceNIO.java (21)
  |~ ClientRemoteInterfaceRMI.java (29)
  |~ ClientRemoteObject.java (294)
  |~ ClientRemoteObjectNIO.java (170)
 |- nioExample (8)
  |~ AnNIOManagerPrintClient.java (125)
  |~ AnNIOManagerPrintServer.java (138)
  |~ exampleClientReadThread.java (67)
  |~ exampleServerReadThread.java (70)
  |~ FakeClientInterface.java (12)
  |~ NIOManagerPrintClientLauncherNoFactory.java (10)
  |~ NIOManagerPrintServer.java (20)
  |~ NIOManagerPrintServerLauncherNoFactory.java (10)
 |- readThread (3)
  |~ ClientReadThread.java (82)
  |~ ReadThreadInterface.java (13)
  |~ ServerReadThread.java (76)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (10)
  |~ OriginalSimulation.java (9)
  |~ Server.java (33)
  |~ ServerConfigure.java (475)
  |- remote (6)
   |~ ServerRemoteInterfaceGIPC.java (44)
   |~ ServerRemoteInterfaceNIO.java (23)
   |~ ServerRemoteInterfaceRMI.java (40)
   |~ ServerRemoteObjectGIPC.java (335)
   |~ ServerRemoteObjectNIO.java (159)
   |~ ServerRemoteObjectRMI.java (245)

Attempting to match to the structure:
|- .* (23)
 |- [a-z]?.*[Cc]lient.* (10)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Sat Apr 16 10:10:22 EDT 2022¶Test execution time (ms):5474¶Test execution time (ms):21¶A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.8620689655172413¶¶Test execution time (ms):15¶Test execution time (ms):10"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (434)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (21)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (294)¶  |~ ClientRemoteObjectNIO.java (170)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (82)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (475)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (335)¶   |~ ServerRemoteObjectNIO.java (159)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* (23)¶ |- [a-z]?.*[Cc]lient.* (10)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="749" _type="PauseCommand" date="Sat Apr 16 10:10:24 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1111290">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2732]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="748" _type="ConsoleOutput" date="Sat Apr 16 10:10:24 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="1111290" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@49eb830b . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (37)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (434)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (21)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (294)¶  |~ ClientRemoteObjectNIO.java (170)¶ |- nioExample (8)¶  |~ AnNIOManagerPrintClient.java (125)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (67)¶  |~ exampleServerReadThread.java (70)¶  |~ FakeClientInterface.java (12)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (82)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (475)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (335)¶   |~ ServerRemoteObjectNIO.java (159)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* (23)¶ |- [a-z]?.*[Cc]lient.* (10)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@49eb830b . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="751" _type="PauseCommand" date="Sat Apr 16 10:10:35 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1122202">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[10912]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="750" _type="ShellCommand" date="Sat Apr 16 10:10:35 EDT 2022" starttimestamp="1650117113620" timestamp="1122202" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="662" _type="Insert" date="Sat Apr 16 10:09:51 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13104" docExpressionCount="1240" docLength="14676" length="18" offset="13264" repeat="18" starttimestamp="1650117113620" timestamp="1077670" timestamp2="1080170">
    <text><![CDATA[all for autograder]]></text>
  </DocumentChange>
  <DocumentChange __id="703" _type="Replace" date="Sat Apr 16 10:09:58 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13101" docExpressionCount="1240" docLength="14673" endLine="414" insertionLength="1" int_docASTNodeCount="1788" int_docActiveCodeLength="13100" int_docExpressionCount="1239" int_docLength="14672" length="4" offset="13319" startLine="414" starttimestamp="1650117113620" timestamp="1084566">
    <deletedText><![CDATA[fake]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="705" _type="Insert" date="Sat Apr 16 10:09:58 EDT 2022" docASTNodeCount="1789" docActiveCodeLength="13108" docExpressionCount="1240" docLength="14680" length="7" offset="13320" repeat="7" starttimestamp="1650117113620" timestamp="1084909" timestamp2="1085634">
    <text><![CDATA[Message]]></text>
  </DocumentChange>
  <Command __id="753" _type="PauseCommand" date="Sat Apr 16 10:10:50 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1136419">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14217]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="755" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:10:51 EDT 2022" starttimestamp="1650117113620" timestamp="1137713" />
  <Command __id="757" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:10:51 EDT 2022" starttimestamp="1650117113620" timestamp="1137717" />
  <Command __id="759" _type="PauseCommand" date="Sat Apr 16 10:11:14 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="1160591">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[22874]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="758" _type="ShellCommand" date="Sat Apr 16 10:11:14 EDT 2022" starttimestamp="1650117113620" timestamp="1160591" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="761" _type="PauseCommand" date="Sat Apr 16 10:11:19 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1165580">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4989]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="760" _type="ShellCommand" date="Sat Apr 16 10:11:19 EDT 2022" starttimestamp="1650117113620" timestamp="1165580" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="763" _type="PauseCommand" date="Sat Apr 16 10:11:30 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1176752">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11172]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="762" _type="ShellCommand" date="Sat Apr 16 10:11:30 EDT 2022" starttimestamp="1650117113620" timestamp="1176752" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="765" _type="PauseCommand" date="Sat Apr 16 10:12:37 EDT 2022" range="1m-2m" starttimestamp="1650117113620" timestamp="1243828">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[67076]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="764" _type="ShellCommand" date="Sat Apr 16 10:12:37 EDT 2022" starttimestamp="1650117113620" timestamp="1243828" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="767" _type="PauseCommand" date="Sat Apr 16 10:12:41 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1247619">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3791]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="766" _type="ShellCommand" date="Sat Apr 16 10:12:41 EDT 2022" starttimestamp="1650117113620" timestamp="1247619" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="769" _type="PauseCommand" date="Sat Apr 16 10:13:34 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="1300459">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[52840]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="768" _type="ShellCommand" date="Sat Apr 16 10:13:34 EDT 2022" starttimestamp="1650117113620" timestamp="1300459" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="770" _type="MoveCaretCommand" caretOffset="1227" date="Sat Apr 16 10:13:34 EDT 2022" docOffset="1733" starttimestamp="1650117113620" timestamp="1300571" />
  <Command __id="772" _type="PauseCommand" date="Sat Apr 16 10:13:38 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1304498">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3927]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="771" _type="MoveCaretCommand" caretOffset="1159" date="Sat Apr 16 10:13:38 EDT 2022" docOffset="1665" starttimestamp="1650117113620" timestamp="1304498" />
  <Command __id="774" _type="PauseCommand" date="Sat Apr 16 10:13:42 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1308889">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4391]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="773" _type="ShellCommand" date="Sat Apr 16 10:13:42 EDT 2022" starttimestamp="1650117113620" timestamp="1308889" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="776" _type="PauseCommand" date="Sat Apr 16 10:13:44 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1310794">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1905]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="775" _type="ShellCommand" date="Sat Apr 16 10:13:44 EDT 2022" starttimestamp="1650117113620" timestamp="1310794" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="752" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:10:50 EDT 2022" docASTNodeCount="290" docActiveCodeLength="2179" docExpressionCount="196" docLength="2413" projectName="A6" starttimestamp="1650117113620" timestamp="1136419">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	//final ClientRemoteObjectNIO client;
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			
			
			ProposalLearnedNotificationReceived.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);
			commandProcessor.processCommand(aMessageString);
			ProposedStateSet.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);
			client.aProposalNumber++;
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="778" _type="PauseCommand" date="Sat Apr 16 10:14:11 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="1337465">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26671]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="779" _type="MoveCaretCommand" caretOffset="5103" date="Sat Apr 16 10:14:11 EDT 2022" docOffset="6759" starttimestamp="1650117113620" timestamp="1337640" />
  <Command __id="781" _type="PauseCommand" date="Sat Apr 16 10:14:24 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1350730">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13090]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="780" _type="SelectTextCommand" caretOffset="2528" date="Sat Apr 16 10:14:24 EDT 2022" end="2617" start="2528" starttimestamp="1650117113620" timestamp="1350730" />
  <Command __id="782" _type="CopyCommand" date="Sat Apr 16 10:14:25 EDT 2022" starttimestamp="1650117113620" timestamp="1351390" />
  <Command __id="777" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:14:11 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9191" docExpressionCount="890" docLength="10307" projectName="A6" starttimestamp="1650117113620" timestamp="1337465">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static int NIO_SERVER_PORT;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		

		// Make sure you set this property when processing args
		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));
		

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);
		// ClientArgsProcessor.getServerHost(args);
		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);
		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);
		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);
		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);
		

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			System.out.println("Broadcasting IPC mechanism: "+mechanism);
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
		System.out.println("ADDED CONNECTION LISTENER");
	}

	

}
]]></snapshot>
  </Command>
  <Command __id="784" _type="PauseCommand" date="Sat Apr 16 10:14:32 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="1358472">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[7082]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="785" _type="MoveCaretCommand" caretOffset="1404" date="Sat Apr 16 10:14:32 EDT 2022" docOffset="1764" starttimestamp="1650117113620" timestamp="1358646" />
  <Command __id="783" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:14:32 EDT 2022" docASTNodeCount="252" docActiveCodeLength="1776" docExpressionCount="157" docLength="2044" projectName="A6" starttimestamp="1650117113620" timestamp="1358472">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.NIOManagerPrintServer;
import server.remote.ServerRemoteObjectNIO;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})
public class ServerReadThread implements ReadThreadInterface{
	
	final ServerRemoteObjectNIO server;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ServerReadThread (final ServerRemoteObjectNIO aServer) {
		server = aServer;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();
			List<SocketChannel> socketList = server.getSocketList();
			SocketChannel currentSocket = server.getSocketChannel();
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			// Echo recieve message to all clients (except original message sender)
			for (SocketChannel socket : socketList) {
				if (!socket.equals(currentSocket)) {
					nioManager.write(socket, originalMessage, server);
				}
			}
		
		}
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}


}
]]></snapshot>
  </Command>
  <Command __id="787" _type="PauseCommand" date="Sat Apr 16 10:15:04 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="1391059">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[32413]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="788" _type="MoveCaretCommand" caretOffset="248" date="Sat Apr 16 10:15:04 EDT 2022" docOffset="1436" starttimestamp="1650117113620" timestamp="1391220" />
  <Command __id="786" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:15:04 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4496" docExpressionCount="449" docLength="4883" projectName="A6" starttimestamp="1650117113620" timestamp="1391059">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶			¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="790" _type="PauseCommand" date="Sat Apr 16 10:17:33 EDT 2022" range="2m-5m" starttimestamp="1650117113620" timestamp="1540097">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[148877]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="791" _type="SelectTextCommand" caretOffset="2528" date="Sat Apr 16 10:17:33 EDT 2022" end="2617" start="2528" starttimestamp="1650117113620" timestamp="1540254" />
  <Command __id="789" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:17:33 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9191" docExpressionCount="890" docLength="10307" projectName="A6" starttimestamp="1650117113620" timestamp="1540097">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static int NIO_SERVER_PORT;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		¶¶		// Make sure you set this property when processing args¶		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶		¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);¶		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);¶		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);¶		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);¶		¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			System.out.println("Broadcasting IPC mechanism: "+mechanism);¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶		System.out.println("ADDED CONNECTION LISTENER");¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="793" _type="PauseCommand" date="Sat Apr 16 10:17:36 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1543085">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2830]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="795" _type="MoveCaretCommand" caretOffset="248" date="Sat Apr 16 10:17:36 EDT 2022" docOffset="1436" starttimestamp="1650117113620" timestamp="1543249" />
  <Command __id="796" _type="SelectTextCommand" caretOffset="2528" date="Sat Apr 16 10:17:36 EDT 2022" end="2617" start="2528" starttimestamp="1650117113620" timestamp="1543263" />
  <Command __id="798" _type="PauseCommand" date="Sat Apr 16 10:17:52 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1558498">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[15235]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="797" _type="MoveCaretCommand" caretOffset="2617" date="Sat Apr 16 10:17:52 EDT 2022" docOffset="4273" starttimestamp="1650117113620" timestamp="1558498" />
  <Command __id="799" _type="SelectTextCommand" caretOffset="2385" date="Sat Apr 16 10:17:53 EDT 2022" end="2627" start="2385" starttimestamp="1650117113620" timestamp="1559492" />
  <Command __id="800" _type="MoveCaretCommand" caretOffset="2586" date="Sat Apr 16 10:17:53 EDT 2022" docOffset="4242" starttimestamp="1650117113620" timestamp="1560108" />
  <Command __id="802" _type="PauseCommand" date="Sat Apr 16 10:17:56 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1562917">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2809]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="801" _type="SelectTextCommand" caretOffset="2438" date="Sat Apr 16 10:17:56 EDT 2022" end="2617" start="2438" starttimestamp="1650117113620" timestamp="1562917" />
  <Command __id="803" _type="CopyCommand" date="Sat Apr 16 10:17:57 EDT 2022" starttimestamp="1650117113620" timestamp="1563701" />
  <Command __id="792" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:17:36 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4496" docExpressionCount="449" docLength="4883" projectName="A6" starttimestamp="1650117113620" timestamp="1543084">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶			¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="794" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:17:36 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9191" docExpressionCount="890" docLength="10307" projectName="A6" starttimestamp="1650117113620" timestamp="1543128">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static int NIO_SERVER_PORT;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		¶¶		// Make sure you set this property when processing args¶		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶		¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);¶		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);¶		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);¶		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);¶		¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			System.out.println("Broadcasting IPC mechanism: "+mechanism);¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶		System.out.println("ADDED CONNECTION LISTENER");¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="805" _type="PauseCommand" date="Sat Apr 16 10:18:00 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1567228">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3527]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="804" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:18:00 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4496" docExpressionCount="449" docLength="4883" projectName="A6" starttimestamp="1650117113620" timestamp="1567228">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶			¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="806" _type="MoveCaretCommand" caretOffset="2332" date="Sat Apr 16 10:18:00 EDT 2022" docOffset="3520" starttimestamp="1650117113620" timestamp="1567291" />
  <Command __id="808" _type="InsertStringCommand" date="Sat Apr 16 10:18:01 EDT 2022" starttimestamp="1650117113620" timestamp="1567715" timestamp2="1567715">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="809" _type="InsertStringCommand" date="Sat Apr 16 10:18:01 EDT 2022" starttimestamp="1650117113620" timestamp="1567715" timestamp2="1567715">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="807" _type="Insert" date="Sat Apr 16 10:18:01 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4500" docExpressionCount="449" docLength="4887" length="4" offset="3520" starttimestamp="1650117113620" timestamp="1567709">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="811" _type="PauseCommand" date="Sat Apr 16 10:18:02 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1569191">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1476]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="816" _type="PasteCommand" date="Sat Apr 16 10:18:02 EDT 2022" starttimestamp="1650117113620" timestamp="1569256" />
  <Command __id="818" _type="PauseCommand" date="Sat Apr 16 10:18:08 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="1574700">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[5444]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="817" _type="MoveCaretCommand" caretOffset="2379" date="Sat Apr 16 10:18:08 EDT 2022" docOffset="3698" starttimestamp="1650117113620" timestamp="1574700" />
  <Command __id="819" _type="MoveCaretCommand" caretOffset="2379" date="Sat Apr 16 10:18:08 EDT 2022" docOffset="3698" starttimestamp="1650117113620" timestamp="1574700" />
  <Command __id="821" _type="PauseCommand" date="Sat Apr 16 10:18:11 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1577381">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2681]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="820" _type="ShellCommand" date="Sat Apr 16 10:18:11 EDT 2022" starttimestamp="1650117113620" timestamp="1577381" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="822" _type="ShellCommand" date="Sat Apr 16 10:18:11 EDT 2022" starttimestamp="1650117113620" timestamp="1577500" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="828" _type="SelectTextCommand" caretOffset="542" date="Sat Apr 16 10:18:11 EDT 2022" end="542" start="533" starttimestamp="1650117113620" timestamp="1577762" />
  <Command __id="829" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:18:12 EDT 2022" starttimestamp="1650117113620" timestamp="1578713" />
  <Command __id="830" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:18:12 EDT 2022" starttimestamp="1650117113620" timestamp="1578814" />
  <Command __id="831" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:18:12 EDT 2022" starttimestamp="1650117113620" timestamp="1578920" />
  <DocumentChange __id="810" _type="Replace" date="Sat Apr 16 10:18:02 EDT 2022" docASTNodeCount="654" docActiveCodeLength="4679" docExpressionCount="463" docLength="5066" endLine="99" insertionLength="181" int_docASTNodeCount="638" int_docActiveCodeLength="4498" int_docExpressionCount="449" int_docLength="4885" length="2" offset="3522" startLine="99" starttimestamp="1650117113620" timestamp="1569191">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="812" _type="Insert" date="Sat Apr 16 10:18:02 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4810" docExpressionCount="481" docLength="5197" length="131" offset="893" repeat="4" starttimestamp="1650117113620" timestamp="1569227" timestamp2="1569230">
    <text><![CDATA[
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;]]></text>
  </DocumentChange>
  <Command __id="823" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:18:11 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9191" docExpressionCount="890" docLength="10307" projectName="A6" starttimestamp="1650117113620" timestamp="1577532">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static int NIO_SERVER_PORT;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		¶¶		// Make sure you set this property when processing args¶		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶		¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);¶		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);¶		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);¶		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);¶		¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			System.out.println("Broadcasting IPC mechanism: "+mechanism);¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶		System.out.println("ADDED CONNECTION LISTENER");¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="824" _type="Delete" date="Sat Apr 16 10:18:11 EDT 2022" docASTNodeCount="1261" docActiveCodeLength="9183" docExpressionCount="890" docLength="10299" endLine="50" length="8" offset="2189" repeat="2" startLine="50" starttimestamp="1650117113620" timestamp="1577610" timestamp2="1577616">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="826" _type="Insert" date="Sat Apr 16 10:18:11 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9193" docExpressionCount="890" docLength="10309" length="10" offset="2189" repeat="2" starttimestamp="1650117113620" timestamp="1577618" timestamp2="1577620">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <Command __id="833" _type="PauseCommand" date="Sat Apr 16 10:18:20 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="1586571">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7650]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="832" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:18:20 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4810" docExpressionCount="481" docLength="5197" projectName="A6" starttimestamp="1650117113620" timestamp="1586570">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶"), Diff(INSERT,"import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶"), Diff(EQUAL,"import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶			¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		"), Diff(INSERT,"RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		"), Diff(EQUAL,"reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
			
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <Command __id="834" _type="MoveCaretCommand" caretOffset="2392" date="Sat Apr 16 10:18:20 EDT 2022" docOffset="3711" starttimestamp="1650117113620" timestamp="1586637" />
  <DocumentChange __id="835" _type="Insert" date="Sat Apr 16 10:18:20 EDT 2022" docASTNodeCount="676" docActiveCodeLength="4815" docExpressionCount="483" docLength="5202" length="5" offset="3711" repeat="5" starttimestamp="1650117113620" timestamp="1587202" timestamp2="1587751">
    <text><![CDATA[supe.]]></text>
  </DocumentChange>
  <Command __id="836" _type="InsertStringCommand" date="Sat Apr 16 10:18:20 EDT 2022" starttimestamp="1650117113620" timestamp="1587216" timestamp2="1587216">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="837" _type="InsertStringCommand" date="Sat Apr 16 10:18:20 EDT 2022" starttimestamp="1650117113620" timestamp="1587216" timestamp2="1587216">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="839" _type="InsertStringCommand" date="Sat Apr 16 10:18:20 EDT 2022" starttimestamp="1650117113620" timestamp="1587374" timestamp2="1587374">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="840" _type="InsertStringCommand" date="Sat Apr 16 10:18:20 EDT 2022" starttimestamp="1650117113620" timestamp="1587374" timestamp2="1587374">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="842" _type="InsertStringCommand" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1587429" timestamp2="1587429">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="843" _type="InsertStringCommand" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1587429" timestamp2="1587429">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="845" _type="InsertStringCommand" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1587574" timestamp2="1587574">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="846" _type="InsertStringCommand" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1587574" timestamp2="1587574">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="848" _type="InsertStringCommand" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1587757" timestamp2="1587757">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="849" _type="InsertStringCommand" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1587757" timestamp2="1587757">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="850" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Apr 16 10:18:21 EDT 2022" start_end="START" starttimestamp="1650117113620" timestamp="1587760" />
  <Command __id="851" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Apr 16 10:18:21 EDT 2022" start_end="END" starttimestamp="1650117113620" timestamp="1587804" />
  <DocumentChange __id="852" _type="Delete" date="Sat Apr 16 10:18:21 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4814" docExpressionCount="481" docLength="5201" endLine="101" length="1" offset="3715" startLine="101" starttimestamp="1650117113620" timestamp="1588085">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="853" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1588089" />
  <Command __id="854" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1588089" />
  <Command __id="856" _type="InsertStringCommand" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1588368" timestamp2="1588368">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="857" _type="InsertStringCommand" date="Sat Apr 16 10:18:21 EDT 2022" starttimestamp="1650117113620" timestamp="1588368" timestamp2="1588368">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="859" _type="InsertStringCommand" date="Sat Apr 16 10:18:22 EDT 2022" starttimestamp="1650117113620" timestamp="1588524" timestamp2="1588524">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="860" _type="InsertStringCommand" date="Sat Apr 16 10:18:22 EDT 2022" starttimestamp="1650117113620" timestamp="1588525" timestamp2="1588525">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="861" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Apr 16 10:18:22 EDT 2022" start_end="START" starttimestamp="1650117113620" timestamp="1588527" />
  <Command __id="863" _type="PauseCommand" date="Sat Apr 16 10:18:23 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1589918">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1391]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="862" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:18:23 EDT 2022" starttimestamp="1650117113620" timestamp="1589918" />
  <Command __id="864" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Apr 16 10:18:23 EDT 2022" start_end="END" starttimestamp="1650117113620" timestamp="1589963" />
  <Command __id="865" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:18:23 EDT 2022" starttimestamp="1650117113620" timestamp="1590073" />
  <Command __id="866" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:18:23 EDT 2022" starttimestamp="1650117113620" timestamp="1590124" />
  <DocumentChange __id="855" _type="Insert" date="Sat Apr 16 10:18:21 EDT 2022" docASTNodeCount="675" docActiveCodeLength="4816" docExpressionCount="482" docLength="5203" length="2" offset="3715" repeat="2" starttimestamp="1650117113620" timestamp="1588363" timestamp2="1588519">
    <text><![CDATA[r.]]></text>
  </DocumentChange>
  <Command __id="868" _type="PauseCommand" date="Sat Apr 16 10:18:25 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1592127">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2003]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="869" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:25 EDT 2022" starttimestamp="1650117113620" timestamp="1592145" />
  <Command __id="870" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:25 EDT 2022" starttimestamp="1650117113620" timestamp="1592145" />
  <Command __id="872" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:26 EDT 2022" starttimestamp="1650117113620" timestamp="1592866" />
  <Command __id="873" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:26 EDT 2022" starttimestamp="1650117113620" timestamp="1592867" />
  <Command __id="875" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:26 EDT 2022" starttimestamp="1650117113620" timestamp="1592879" />
  <Command __id="876" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:26 EDT 2022" starttimestamp="1650117113620" timestamp="1592879" />
  <Command __id="878" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:26 EDT 2022" starttimestamp="1650117113620" timestamp="1592886" />
  <Command __id="879" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:26 EDT 2022" starttimestamp="1650117113620" timestamp="1592886" />
  <Command __id="881" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:26 EDT 2022" starttimestamp="1650117113620" timestamp="1592892" />
  <Command __id="882" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:26 EDT 2022" starttimestamp="1650117113620" timestamp="1592892" />
  <Command __id="884" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:27 EDT 2022" starttimestamp="1650117113620" timestamp="1593867" />
  <Command __id="885" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:18:27 EDT 2022" starttimestamp="1650117113620" timestamp="1593867" />
  <Command __id="886" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:18:27 EDT 2022" starttimestamp="1650117113620" timestamp="1594330" />
  <Command __id="887" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:18:28 EDT 2022" starttimestamp="1650117113620" timestamp="1594429" />
  <Command __id="888" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:18:28 EDT 2022" starttimestamp="1650117113620" timestamp="1594470" />
  <Command __id="890" _type="PauseCommand" date="Sat Apr 16 10:18:44 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1610767">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[16297]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="889" _type="SelectTextCommand" caretOffset="2151" date="Sat Apr 16 10:18:44 EDT 2022" end="2165" start="2151" starttimestamp="1650117113620" timestamp="1610767" />
  <Command __id="891" _type="SelectTextCommand" caretOffset="2151" date="Sat Apr 16 10:18:44 EDT 2022" end="2165" start="2151" starttimestamp="1650117113620" timestamp="1610768" />
  <Command __id="892" _type="CopyCommand" date="Sat Apr 16 10:18:44 EDT 2022" starttimestamp="1650117113620" timestamp="1611207" />
  <Command __id="894" _type="PauseCommand" date="Sat Apr 16 10:18:49 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1615945">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[4738]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="893" _type="SelectTextCommand" caretOffset="2409" date="Sat Apr 16 10:18:49 EDT 2022" end="2420" start="2409" starttimestamp="1650117113620" timestamp="1615945" />
  <Command __id="895" _type="SelectTextCommand" caretOffset="2409" date="Sat Apr 16 10:18:49 EDT 2022" end="2420" start="2409" starttimestamp="1650117113620" timestamp="1615945" />
  <Command __id="897" _type="PasteCommand" date="Sat Apr 16 10:18:49 EDT 2022" starttimestamp="1650117113620" timestamp="1616375" />
  <Command __id="899" _type="PauseCommand" date="Sat Apr 16 10:18:52 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1618664">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2289]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="898" _type="SelectTextCommand" caretOffset="2505" date="Sat Apr 16 10:18:52 EDT 2022" end="2516" start="2505" starttimestamp="1650117113620" timestamp="1618664" />
  <Command __id="900" _type="SelectTextCommand" caretOffset="2505" date="Sat Apr 16 10:18:52 EDT 2022" end="2516" start="2505" starttimestamp="1650117113620" timestamp="1618664" />
  <Command __id="902" _type="PasteCommand" date="Sat Apr 16 10:18:52 EDT 2022" starttimestamp="1650117113620" timestamp="1618888" />
  <Command __id="904" _type="PauseCommand" date="Sat Apr 16 10:18:53 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1619942">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1054]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="903" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:18:53 EDT 2022" starttimestamp="1650117113620" timestamp="1619942" />
  <Command __id="905" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:18:53 EDT 2022" starttimestamp="1650117113620" timestamp="1620034" />
  <Command __id="906" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:18:53 EDT 2022" starttimestamp="1650117113620" timestamp="1620070" />
  <Command __id="908" _type="PauseCommand" date="Sat Apr 16 10:21:15 EDT 2022" range="2m-5m" starttimestamp="1650117113620" timestamp="1761653">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[141583]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="907" _type="ShellCommand" date="Sat Apr 16 10:21:15 EDT 2022" starttimestamp="1650117113620" timestamp="1761653" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="910" _type="PauseCommand" date="Sat Apr 16 10:21:28 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1775194">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13541]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="909" _type="ShellCommand" date="Sat Apr 16 10:21:28 EDT 2022" starttimestamp="1650117113620" timestamp="1775194" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="911" _type="MoveCaretCommand" caretOffset="2293" date="Sat Apr 16 10:21:28 EDT 2022" docOffset="3612" starttimestamp="1650117113620" timestamp="1775236" />
  <Command __id="912" _type="MoveCaretCommand" caretOffset="2293" date="Sat Apr 16 10:21:28 EDT 2022" docOffset="3612" starttimestamp="1650117113620" timestamp="1775236" />
  <DocumentChange __id="867" _type="Delete" date="Sat Apr 16 10:18:25 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4810" docExpressionCount="481" docLength="5197" endLine="101" length="6" offset="3711" repeat="6" startLine="101" starttimestamp="1650117113620" timestamp="1592127" timestamp2="1593865">
    <text><![CDATA[super.]]></text>
  </DocumentChange>
  <DocumentChange __id="896" _type="Replace" date="Sat Apr 16 10:18:49 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4813" docExpressionCount="481" docLength="5200" endLine="101" insertionLength="14" int_docASTNodeCount="674" int_docActiveCodeLength="4799" int_docExpressionCount="481" int_docLength="5186" length="11" offset="3728" startLine="101" starttimestamp="1650117113620" timestamp="1616362">
    <deletedText><![CDATA[aNewCommand]]></deletedText>
    <insertedText><![CDATA[aMessageString]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="901" _type="Replace" date="Sat Apr 16 10:18:52 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4816" docExpressionCount="481" docLength="5203" endLine="102" insertionLength="14" int_docASTNodeCount="674" int_docActiveCodeLength="4802" int_docExpressionCount="481" int_docLength="5189" length="11" offset="3824" startLine="102" starttimestamp="1650117113620" timestamp="1618881">
    <deletedText><![CDATA[aNewCommand]]></deletedText>
    <insertedText><![CDATA[aMessageString]]></insertedText>
  </DocumentChange>
  <Command __id="914" _type="PauseCommand" date="Sat Apr 16 10:21:31 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1777902">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2665]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="915" _type="MoveCaretCommand" caretOffset="734" date="Sat Apr 16 10:21:31 EDT 2022" docOffset="2390" starttimestamp="1650117113620" timestamp="1777978" />
  <Command __id="917" _type="PauseCommand" date="Sat Apr 16 10:21:32 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1779116">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="916" _type="SelectTextCommand" caretOffset="710" date="Sat Apr 16 10:21:32 EDT 2022" end="734" start="710" starttimestamp="1650117113620" timestamp="1779116" />
  <Command __id="918" _type="CopyCommand" date="Sat Apr 16 10:21:33 EDT 2022" starttimestamp="1650117113620" timestamp="1779423" />
  <Command __id="913" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:21:31 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9193" docExpressionCount="890" docLength="10309" projectName="A6" starttimestamp="1650117113620" timestamp="1777901">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	pr"), Diff(DELETE,"ivate"), Diff(INSERT,"otected"), Diff(EQUAL," static String SERVER_NAME;¶	private static int NIO_SERVER_PORT;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		¶¶		// Make sure you set this property when processing args¶		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶		¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);¶		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);¶		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);¶		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);¶		¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			System.out.println("Broadcasting IPC mechanism: "+mechanism);¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶		System.out.println("ADDED CONNECTION LISTENER");¶	}¶¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	protected static String SERVER_NAME;
	private static int NIO_SERVER_PORT;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		

		// Make sure you set this property when processing args
		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));
		

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);
		// ClientArgsProcessor.getServerHost(args);
		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);
		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);
		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);
		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);
		

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			System.out.println("Broadcasting IPC mechanism: "+mechanism);
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
		System.out.println("ADDED CONNECTION LISTENER");
	}

	

}
]]></snapshot>
  </Command>
  <Command __id="920" _type="PauseCommand" date="Sat Apr 16 10:21:34 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1780634">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1211]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="919" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:21:34 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4816" docExpressionCount="481" docLength="5203" projectName="A6" starttimestamp="1650117113620" timestamp="1780634">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶			¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, a"), Diff(DELETE,"NewCommand"), Diff(INSERT,"MessageString"), Diff(EQUAL,");¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, a"), Diff(DELETE,"NewCommand"), Diff(INSERT,"MessageString"), Diff(EQUAL,");¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
			
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aMessageString);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <Command __id="921" _type="MoveCaretCommand" caretOffset="2332" date="Sat Apr 16 10:21:34 EDT 2022" docOffset="3651" starttimestamp="1650117113620" timestamp="1780697" />
  <DocumentChange __id="922" _type="Insert" date="Sat Apr 16 10:21:34 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4820" docExpressionCount="481" docLength="5207" length="4" offset="3651" starttimestamp="1650117113620" timestamp="1780992">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="923" _type="InsertStringCommand" date="Sat Apr 16 10:21:34 EDT 2022" starttimestamp="1650117113620" timestamp="1780996" timestamp2="1780996">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="924" _type="InsertStringCommand" date="Sat Apr 16 10:21:34 EDT 2022" starttimestamp="1650117113620" timestamp="1780996" timestamp2="1780996">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="926" _type="PasteCommand" date="Sat Apr 16 10:21:34 EDT 2022" starttimestamp="1650117113620" timestamp="1781348" />
  <Command __id="927" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:21:35 EDT 2022" starttimestamp="1650117113620" timestamp="1781932" />
  <Command __id="928" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:21:35 EDT 2022" starttimestamp="1650117113620" timestamp="1782036" />
  <Command __id="929" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:21:35 EDT 2022" starttimestamp="1650117113620" timestamp="1782083" />
  <Command __id="931" _type="PauseCommand" date="Sat Apr 16 10:21:45 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="1791825">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9742]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="930" _type="ShellCommand" date="Sat Apr 16 10:21:45 EDT 2022" starttimestamp="1650117113620" timestamp="1791825" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="933" _type="PauseCommand" date="Sat Apr 16 10:21:47 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="1793781">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1956]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="937" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:21:50 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="1797321" type="Run" />
  <Command __id="939" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:21:50 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="1797322" type="Run" />
  <Command __id="940" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:21:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1797544" type="Run" />
  <Command __id="941" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:21:51 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1797563" type="Run" />
  <Command __id="942" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:21:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1797566" type="Run" />
  <Command __id="944" _type="PauseCommand" date="Sat Apr 16 10:21:53 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="1799978">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2412]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="973" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:22:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1837706" type="Run" />
  <Command __id="975" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:22:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="1837708" type="Run" />
  <Command __id="977" _type="PauseCommand" date="Sat Apr 16 10:23:28 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="1894786">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[57078]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="976" _type="ConsoleOutput" date="Sat Apr 16 10:23:28 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="1894786" type="ConsoleOutput">
    <outputString><![CDATA[
GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via NIO, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*
GIPC is not checked because RMI failed%0.16666666666666666
Test execution time (ms):58587
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via NIO, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*¶GIPC is not checked because RMI failed%0.16666666666666666¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"13582"), Diff(INSERT,"58587"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="979" _type="PauseCommand" date="Sat Apr 16 10:23:42 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1908862">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[14076]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="978" _type="ConsoleOutput" date="Sat Apr 16 10:23:42 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="1908862" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@32d111dd . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via NIO, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*¶GIPC is not checked because RMI failed%0.16666666666666666¶Test execution time (ms):58587"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@32d111dd . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="981" _type="PauseCommand" date="Sat Apr 16 10:24:37 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="1964093">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[55231]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="980" _type="ShellCommand" date="Sat Apr 16 10:24:37 EDT 2022" starttimestamp="1650117113620" timestamp="1964093" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="925" _type="Replace" date="Sat Apr 16 10:21:34 EDT 2022" docASTNodeCount="679" docActiveCodeLength="4844" docExpressionCount="483" docLength="5231" endLine="101" insertionLength="26" int_docASTNodeCount="674" int_docActiveCodeLength="4818" int_docExpressionCount="481" int_docLength="5205" length="2" offset="3653" startLine="101" starttimestamp="1650117113620" timestamp="1781344">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		int aProposalNumber = 0;]]></insertedText>
  </DocumentChange>
  <Command __id="983" _type="PauseCommand" date="Sat Apr 16 10:24:42 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="1969133">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5040]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="985" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:24:44 EDT 2022" starttimestamp="1650117113620" timestamp="1970417" />
  <Command __id="987" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:24:44 EDT 2022" starttimestamp="1650117113620" timestamp="1970422" />
  <Command __id="989" _type="PauseCommand" date="Sat Apr 16 10:24:55 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1982259">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[11837]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="988" _type="MoveCaretCommand" caretOffset="2632" date="Sat Apr 16 10:24:55 EDT 2022" docOffset="3933" starttimestamp="1650117113620" timestamp="1982259" />
  <Command __id="991" _type="InsertStringCommand" date="Sat Apr 16 10:24:56 EDT 2022" starttimestamp="1650117113620" timestamp="1982927" timestamp2="1982927">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="993" _type="PauseCommand" date="Sat Apr 16 10:25:07 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="1994161">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[11234]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="992" _type="ShellCommand" date="Sat Apr 16 10:25:07 EDT 2022" starttimestamp="1650117113620" timestamp="1994161" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="995" _type="PauseCommand" date="Sat Apr 16 10:25:17 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2004153">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9992]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="994" _type="ShellCommand" date="Sat Apr 16 10:25:17 EDT 2022" starttimestamp="1650117113620" timestamp="2004153" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="996" _type="MoveCaretCommand" caretOffset="2636" date="Sat Apr 16 10:25:17 EDT 2022" docOffset="3937" starttimestamp="1650117113620" timestamp="2004230" />
  <Command __id="982" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:24:42 EDT 2022" docASTNodeCount="650" docActiveCodeLength="4732" docExpressionCount="459" docLength="5395" projectName="A6" starttimestamp="1650117113620" timestamp="1969133">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestSent;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {

			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		nioManager.write(socketChannel, bufferCommand, this);

		
		
		
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		aProposalNumber = 1 + aProposalNumber;
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		


}
]]></snapshot>
  </Command>
  <DocumentChange __id="990" _type="Insert" date="Sat Apr 16 10:24:56 EDT 2022" docASTNodeCount="650" docActiveCodeLength="4736" docExpressionCount="459" docLength="5399" length="4" offset="3933" starttimestamp="1650117113620" timestamp="1982922">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="998" _type="PauseCommand" date="Sat Apr 16 10:25:22 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2009106">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4876]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="999" _type="MoveCaretCommand" caretOffset="1159" date="Sat Apr 16 10:25:22 EDT 2022" docOffset="1665" starttimestamp="1650117113620" timestamp="2009271" />
  <Command __id="1001" _type="PauseCommand" date="Sat Apr 16 10:25:44 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="2031357">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[22086]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1000" _type="SelectTextCommand" caretOffset="1326" date="Sat Apr 16 10:25:44 EDT 2022" end="1436" start="1326" starttimestamp="1650117113620" timestamp="2031357" />
  <Command __id="1002" _type="CopyCommand" date="Sat Apr 16 10:25:45 EDT 2022" starttimestamp="1650117113620" timestamp="2032030" />
  <Command __id="1004" _type="PauseCommand" date="Sat Apr 16 10:25:47 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2034219">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2189]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1003" _type="MoveCaretCommand" caretOffset="1326" date="Sat Apr 16 10:25:47 EDT 2022" docOffset="1832" starttimestamp="1650117113620" timestamp="2034219" />
  <Command __id="1006" _type="InsertStringCommand" date="Sat Apr 16 10:25:48 EDT 2022" starttimestamp="1650117113620" timestamp="2034981" timestamp2="2034981">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1008" _type="InsertStringCommand" date="Sat Apr 16 10:25:48 EDT 2022" starttimestamp="1650117113620" timestamp="2035089" timestamp2="2035089">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1009" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:25:49 EDT 2022" starttimestamp="1650117113620" timestamp="2035679" />
  <Command __id="1010" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:25:49 EDT 2022" starttimestamp="1650117113620" timestamp="2036081" />
  <Command __id="1011" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:25:49 EDT 2022" starttimestamp="1650117113620" timestamp="2036119" />
  <Command __id="1013" _type="MoveCaretCommand" caretOffset="2636" date="Sat Apr 16 10:25:50 EDT 2022" docOffset="3937" starttimestamp="1650117113620" timestamp="2036967" />
  <Command __id="1015" _type="PasteCommand" date="Sat Apr 16 10:25:51 EDT 2022" starttimestamp="1650117113620" timestamp="2038006" />
  <Command __id="1016" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:25:52 EDT 2022" starttimestamp="1650117113620" timestamp="2038539" />
  <Command __id="1017" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:25:52 EDT 2022" starttimestamp="1650117113620" timestamp="2038643" />
  <Command __id="1018" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:25:52 EDT 2022" starttimestamp="1650117113620" timestamp="2038672" />
  <Command __id="1020" _type="PauseCommand" date="Sat Apr 16 10:26:01 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2047679">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9007]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1019" _type="SelectTextCommand" caretOffset="2699" date="Sat Apr 16 10:26:01 EDT 2022" end="2699" start="2693" starttimestamp="1650117113620" timestamp="2047679" />
  <Command __id="1022" _type="PauseCommand" date="Sat Apr 16 10:26:03 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2049440">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1761]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1021" _type="MoveCaretCommand" caretOffset="2693" date="Sat Apr 16 10:26:03 EDT 2022" docOffset="3994" starttimestamp="1650117113620" timestamp="2049440" />
  <Command __id="1024" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:03 EDT 2022" starttimestamp="1650117113620" timestamp="2049995" />
  <Command __id="1026" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:04 EDT 2022" starttimestamp="1650117113620" timestamp="2050497" />
  <Command __id="1028" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:04 EDT 2022" starttimestamp="1650117113620" timestamp="2050533" />
  <Command __id="1030" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:04 EDT 2022" starttimestamp="1650117113620" timestamp="2050558" />
  <Command __id="1032" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:04 EDT 2022" starttimestamp="1650117113620" timestamp="2050590" />
  <Command __id="1034" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:04 EDT 2022" starttimestamp="1650117113620" timestamp="2050756" />
  <Command __id="1036" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:04 EDT 2022" starttimestamp="1650117113620" timestamp="2051191" />
  <Command __id="1037" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:26:05 EDT 2022" starttimestamp="1650117113620" timestamp="2051656" />
  <Command __id="1038" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:26:05 EDT 2022" starttimestamp="1650117113620" timestamp="2051752" />
  <Command __id="1039" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:26:05 EDT 2022" starttimestamp="1650117113620" timestamp="2051782" />
  <Command __id="1041" _type="PauseCommand" date="Sat Apr 16 10:26:13 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2059909">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8127]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1040" _type="SelectTextCommand" caretOffset="2699" date="Sat Apr 16 10:26:13 EDT 2022" end="2706" start="2699" starttimestamp="1650117113620" timestamp="2059909" />
  <Command __id="1043" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:13 EDT 2022" starttimestamp="1650117113620" timestamp="2060276" />
  <Command __id="997" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:25:22 EDT 2022" docASTNodeCount="290" docActiveCodeLength="2179" docExpressionCount="196" docLength="2413" projectName="A6" starttimestamp="1650117113620" timestamp="2009106">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	//final ClientRemoteObjectNIO client;¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			ProposalLearnedNotificationReceived.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);¶			client.aProposalNumber++;¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1005" _type="Insert" date="Sat Apr 16 10:25:48 EDT 2022" docASTNodeCount="278" docActiveCodeLength="2069" docExpressionCount="185" docLength="2415" length="2" offset="1832" repeat="2" starttimestamp="1650117113620" timestamp="2034976" timestamp2="2035083">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1012" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:25:50 EDT 2022" docASTNodeCount="650" docActiveCodeLength="4736" docExpressionCount="459" docLength="5399" projectName="A6" starttimestamp="1650117113620" timestamp="2036745">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		¶		¶		¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		aProposalNumber = 1 + aProposalNumber;¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestSent;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {

			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		nioManager.write(socketChannel, bufferCommand, this);

		
		
		
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		aProposalNumber = 1 + aProposalNumber;
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		


}
]]></snapshot>
  </Command>
  <DocumentChange __id="1014" _type="Replace" date="Sat Apr 16 10:25:51 EDT 2022" docASTNodeCount="662" docActiveCodeLength="4846" docExpressionCount="470" docLength="5509" endLine="115" insertionLength="112" int_docASTNodeCount="650" int_docActiveCodeLength="4734" int_docExpressionCount="459" int_docLength="5397" length="2" offset="3935" startLine="115" starttimestamp="1650117113620" timestamp="2037956">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		ProposalLearnedNotificationReceived.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1023" _type="Delete" date="Sat Apr 16 10:26:03 EDT 2022" docASTNodeCount="660" docActiveCodeLength="4839" docExpressionCount="468" docLength="5502" endLine="115" length="7" offset="3987" repeat="7" startLine="115" starttimestamp="1650117113620" timestamp="2049988" timestamp2="2051187">
    <text><![CDATA[client.]]></text>
  </DocumentChange>
  <DocumentChange __id="1042" _type="Delete" date="Sat Apr 16 10:26:13 EDT 2022" docASTNodeCount="658" docActiveCodeLength="4832" docExpressionCount="466" docLength="5495" endLine="115" length="7" offset="4000" startLine="115" starttimestamp="1650117113620" timestamp="2060270">
    <text><![CDATA[client.]]></text>
  </DocumentChange>
  <Command __id="1045" _type="PauseCommand" date="Sat Apr 16 10:26:15 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2061794">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1518]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1046" _type="MoveCaretCommand" caretOffset="734" date="Sat Apr 16 10:26:15 EDT 2022" docOffset="2390" starttimestamp="1650117113620" timestamp="2061858" />
  <Command __id="1048" _type="PauseCommand" date="Sat Apr 16 10:26:16 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2063072">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1214]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1047" _type="SelectTextCommand" caretOffset="710" date="Sat Apr 16 10:26:16 EDT 2022" end="734" start="710" starttimestamp="1650117113620" timestamp="2063072" />
  <Command __id="1049" _type="CopyCommand" date="Sat Apr 16 10:26:16 EDT 2022" starttimestamp="1650117113620" timestamp="2063281" />
  <Command __id="1051" _type="MoveCaretCommand" caretOffset="2709" date="Sat Apr 16 10:26:17 EDT 2022" docOffset="4010" starttimestamp="1650117113620" timestamp="2064153" />
  <Command __id="1052" _type="MoveCaretCommand" caretOffset="2632" date="Sat Apr 16 10:26:18 EDT 2022" docOffset="3933" starttimestamp="1650117113620" timestamp="2064775" />
  <Command __id="1054" _type="PasteCommand" date="Sat Apr 16 10:26:19 EDT 2022" starttimestamp="1650117113620" timestamp="2065494" />
  <Command __id="1056" _type="PauseCommand" date="Sat Apr 16 10:26:20 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2066832">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1338]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1055" _type="MoveCaretCommand" caretOffset="2628" date="Sat Apr 16 10:26:20 EDT 2022" docOffset="3929" starttimestamp="1650117113620" timestamp="2066832" />
  <Command __id="1058" _type="InsertStringCommand" date="Sat Apr 16 10:26:20 EDT 2022" starttimestamp="1650117113620" timestamp="2067093" timestamp2="2067093">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1060" _type="PauseCommand" date="Sat Apr 16 10:26:25 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2072188">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5095]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1059" _type="SelectTextCommand" caretOffset="2752" date="Sat Apr 16 10:26:25 EDT 2022" end="2758" start="2752" starttimestamp="1650117113620" timestamp="2072188" />
  <Command __id="1062" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:26:26 EDT 2022" starttimestamp="1650117113620" timestamp="2072508" />
  <Command __id="1064" _type="PauseCommand" date="Sat Apr 16 10:26:35 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2081546">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9038]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1063" _type="MoveCaretCommand" caretOffset="2632" date="Sat Apr 16 10:26:35 EDT 2022" docOffset="3933" starttimestamp="1650117113620" timestamp="2081546" />
  <Command __id="1066" _type="InsertStringCommand" date="Sat Apr 16 10:26:35 EDT 2022" starttimestamp="1650117113620" timestamp="2081943" timestamp2="2081943">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1044" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:26:15 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9193" docExpressionCount="890" docLength="10309" projectName="A6" starttimestamp="1650117113620" timestamp="2061794">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	protected static String SERVER_NAME;¶	private static int NIO_SERVER_PORT;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		¶¶		// Make sure you set this property when processing args¶		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶		¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);¶		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);¶		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);¶		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);¶		¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			System.out.println("Broadcasting IPC mechanism: "+mechanism);¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶		System.out.println("ADDED CONNECTION LISTENER");¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1050" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:26:17 EDT 2022" docASTNodeCount="658" docActiveCodeLength="4832" docExpressionCount="466" docLength="5495" projectName="A6" starttimestamp="1650117113620" timestamp="2064095">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		"), Diff(INSERT,"ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);"), Diff(EQUAL,"¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		¶		¶		¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		aProposalNumber = 1 + aProposalNumber;¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestSent;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {

			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		nioManager.write(socketChannel, bufferCommand, this);

		
		
		
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		aProposalNumber = 1 + aProposalNumber;
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		


}
]]></snapshot>
  </Command>
  <DocumentChange __id="1053" _type="Replace" date="Sat Apr 16 10:26:19 EDT 2022" docASTNodeCount="663" docActiveCodeLength="4856" docExpressionCount="468" docLength="5519" endLine="114" insertionLength="26" int_docASTNodeCount="658" int_docActiveCodeLength="4830" int_docExpressionCount="466" int_docLength="5493" length="2" offset="3931" startLine="114" starttimestamp="1650117113620" timestamp="2065488">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		int aProposalNumber = 0;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1057" _type="Insert" date="Sat Apr 16 10:26:20 EDT 2022" docASTNodeCount="663" docActiveCodeLength="4860" docExpressionCount="468" docLength="5523" length="4" offset="3929" starttimestamp="1650117113620" timestamp="2067084">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="1061" _type="Delete" date="Sat Apr 16 10:26:26 EDT 2022" docASTNodeCount="663" docActiveCodeLength="4854" docExpressionCount="468" docLength="5517" endLine="116" length="6" offset="4053" startLine="116" starttimestamp="1650117113620" timestamp="2072500">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <DocumentChange __id="1065" _type="Insert" date="Sat Apr 16 10:26:35 EDT 2022" docASTNodeCount="663" docActiveCodeLength="4858" docExpressionCount="468" docLength="5521" length="4" offset="3933" starttimestamp="1650117113620" timestamp="2081937">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="1068" _type="PauseCommand" date="Sat Apr 16 10:26:37 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2083901">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1958]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1069" _type="MoveCaretCommand" caretOffset="1328" date="Sat Apr 16 10:26:37 EDT 2022" docOffset="1834" starttimestamp="1650117113620" timestamp="2083968" />
  <Command __id="1071" _type="PauseCommand" date="Sat Apr 16 10:26:48 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="2094976">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11008]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1070" _type="SelectTextCommand" caretOffset="1094" date="Sat Apr 16 10:26:48 EDT 2022" end="1154" start="1094" starttimestamp="1650117113620" timestamp="2094976" />
  <Command __id="1072" _type="CopyCommand" date="Sat Apr 16 10:26:48 EDT 2022" starttimestamp="1650117113620" timestamp="2095306" />
  <Command __id="1067" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:26:37 EDT 2022" docASTNodeCount="278" docActiveCodeLength="2069" docExpressionCount="185" docLength="2415" projectName="A6" starttimestamp="1650117113620" timestamp="2083901">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	//final ClientRemoteObjectNIO client;¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			"), Diff(INSERT,"//"), Diff(EQUAL,"ProposalLearnedNotificationReceived.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);¶			client.aProposalNumber++;¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	//final ClientRemoteObjectNIO client;
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			
			
			//ProposalLearnedNotificationReceived.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);
			commandProcessor.processCommand(aMessageString);
			ProposedStateSet.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);
			client.aProposalNumber++;
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1074" _type="PauseCommand" date="Sat Apr 16 10:26:49 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2096342">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1036]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1075" _type="MoveCaretCommand" caretOffset="2636" date="Sat Apr 16 10:26:50 EDT 2022" docOffset="3937" starttimestamp="1650117113620" timestamp="2096408" />
  <Command __id="1077" _type="PauseCommand" date="Sat Apr 16 10:26:52 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2098727">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2319]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1076" _type="MoveCaretCommand" caretOffset="2664" date="Sat Apr 16 10:26:52 EDT 2022" docOffset="3965" starttimestamp="1650117113620" timestamp="2098727" />
  <Command __id="1079" _type="InsertStringCommand" date="Sat Apr 16 10:26:52 EDT 2022" starttimestamp="1650117113620" timestamp="2098982" timestamp2="2098982">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1081" _type="PasteCommand" date="Sat Apr 16 10:26:52 EDT 2022" starttimestamp="1650117113620" timestamp="2099262" />
  <Command __id="1083" _type="PauseCommand" date="Sat Apr 16 10:26:58 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2104673">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[5411]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1082" _type="SelectTextCommand" caretOffset="2703" date="Sat Apr 16 10:26:58 EDT 2022" end="2718" start="2703" starttimestamp="1650117113620" timestamp="2104673" />
  <Command __id="1085" _type="InsertStringCommand" date="Sat Apr 16 10:26:58 EDT 2022" starttimestamp="1650117113620" timestamp="2104758" timestamp2="2104758">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1087" _type="InsertStringCommand" date="Sat Apr 16 10:26:59 EDT 2022" starttimestamp="1650117113620" timestamp="2105717" timestamp2="2105717">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="1089" _type="InsertStringCommand" date="Sat Apr 16 10:26:59 EDT 2022" starttimestamp="1650117113620" timestamp="2105899" timestamp2="2105899">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1091" _type="InsertStringCommand" date="Sat Apr 16 10:26:59 EDT 2022" starttimestamp="1650117113620" timestamp="2106182" timestamp2="2106182">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1093" _type="InsertStringCommand" date="Sat Apr 16 10:27:00 EDT 2022" starttimestamp="1650117113620" timestamp="2106401" timestamp2="2106401">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1095" _type="InsertStringCommand" date="Sat Apr 16 10:27:00 EDT 2022" starttimestamp="1650117113620" timestamp="2106640" timestamp2="2106640">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1097" _type="InsertStringCommand" date="Sat Apr 16 10:27:00 EDT 2022" starttimestamp="1650117113620" timestamp="2106768" timestamp2="2106768">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1099" _type="InsertStringCommand" date="Sat Apr 16 10:27:00 EDT 2022" starttimestamp="1650117113620" timestamp="2106877" timestamp2="2106877">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1100" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:27:01 EDT 2022" starttimestamp="1650117113620" timestamp="2107734" />
  <Command __id="1101" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:27:01 EDT 2022" starttimestamp="1650117113620" timestamp="2107833" />
  <Command __id="1102" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:27:01 EDT 2022" starttimestamp="1650117113620" timestamp="2107880" />
  <Command __id="1104" _type="PauseCommand" date="Sat Apr 16 10:27:05 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2112301">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4421]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1103" _type="MoveCaretCommand" caretOffset="2813" date="Sat Apr 16 10:27:05 EDT 2022" docOffset="4114" starttimestamp="1650117113620" timestamp="2112301" />
  <Command __id="1106" _type="InsertStringCommand" date="Sat Apr 16 10:27:06 EDT 2022" starttimestamp="1650117113620" timestamp="2112520" timestamp2="2112520">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1108" _type="InsertStringCommand" date="Sat Apr 16 10:27:06 EDT 2022" starttimestamp="1650117113620" timestamp="2112756" timestamp2="2112756">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1110" _type="InsertStringCommand" date="Sat Apr 16 10:27:06 EDT 2022" starttimestamp="1650117113620" timestamp="2112951" timestamp2="2112951">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1112" _type="InsertStringCommand" date="Sat Apr 16 10:27:06 EDT 2022" starttimestamp="1650117113620" timestamp="2113078" timestamp2="2113078">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1114" _type="InsertStringCommand" date="Sat Apr 16 10:27:06 EDT 2022" starttimestamp="1650117113620" timestamp="2113285" timestamp2="2113285">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1116" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:27:07 EDT 2022" starttimestamp="1650117113620" timestamp="2113670" />
  <Command __id="1118" _type="InsertStringCommand" date="Sat Apr 16 10:27:07 EDT 2022" starttimestamp="1650117113620" timestamp="2113842" timestamp2="2113842">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1120" _type="InsertStringCommand" date="Sat Apr 16 10:27:07 EDT 2022" starttimestamp="1650117113620" timestamp="2113926" timestamp2="2113926">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1121" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:27:08 EDT 2022" starttimestamp="1650117113620" timestamp="2114450" />
  <Command __id="1122" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:27:08 EDT 2022" starttimestamp="1650117113620" timestamp="2114540" />
  <Command __id="1123" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:27:08 EDT 2022" starttimestamp="1650117113620" timestamp="2114585" />
  <Command __id="1125" _type="PauseCommand" date="Sat Apr 16 10:27:18 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="2125105">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10520]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1124" _type="MoveCaretCommand" caretOffset="2821" date="Sat Apr 16 10:27:18 EDT 2022" docOffset="4122" starttimestamp="1650117113620" timestamp="2125105" />
  <Command __id="1073" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:26:49 EDT 2022" docASTNodeCount="663" docActiveCodeLength="4858" docExpressionCount="468" docLength="5521" projectName="A6" starttimestamp="1650117113620" timestamp="2096342">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		"), Diff(INSERT,"¶		int aProposalNumber = 0;¶		"), Diff(EQUAL,"ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessage"), Diff(DELETE,"String"), Diff(EQUAL,");¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		¶		¶		¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		aProposalNumber = 1 + aProposalNumber;¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestSent;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		
		int aProposalNumber = 0;
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessage);
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {

			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		nioManager.write(socketChannel, bufferCommand, this);

		
		
		
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		aProposalNumber = 1 + aProposalNumber;
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		


}
]]></snapshot>
  </Command>
  <DocumentChange __id="1078" _type="Insert" date="Sat Apr 16 10:26:52 EDT 2022" docASTNodeCount="663" docActiveCodeLength="4862" docExpressionCount="468" docLength="5525" length="4" offset="3965" starttimestamp="1650117113620" timestamp="2098975">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="1080" _type="Replace" date="Sat Apr 16 10:26:52 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4922" docExpressionCount="475" docLength="5585" endLine="117" insertionLength="62" int_docASTNodeCount="663" int_docActiveCodeLength="4860" int_docExpressionCount="468" int_docLength="5523" length="2" offset="3967" startLine="117" starttimestamp="1650117113620" timestamp="2099216">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		String aMessageString = new String(originalMessage.array());]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1084" _type="Replace" date="Sat Apr 16 10:26:58 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4908" docExpressionCount="475" docLength="5571" endLine="117" insertionLength="1" int_docASTNodeCount="673" int_docActiveCodeLength="4907" int_docExpressionCount="474" int_docLength="5570" length="15" offset="4004" startLine="117" starttimestamp="1650117113620" timestamp="2104753">
    <deletedText><![CDATA[originalMessage]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1086" _type="Insert" date="Sat Apr 16 10:26:59 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4915" docExpressionCount="475" docLength="5578" length="7" offset="4005" repeat="7" starttimestamp="1650117113620" timestamp="2105711" timestamp2="2106872">
    <text><![CDATA[Message]]></text>
  </DocumentChange>
  <DocumentChange __id="1105" _type="Insert" date="Sat Apr 16 10:27:06 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4920" docExpressionCount="475" docLength="5583" length="5" offset="4114" repeat="5" starttimestamp="1650117113620" timestamp="2112514" timestamp2="2113279">
    <text><![CDATA[Strig]]></text>
  </DocumentChange>
  <DocumentChange __id="1115" _type="Delete" date="Sat Apr 16 10:27:07 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4919" docExpressionCount="475" docLength="5582" endLine="118" length="1" offset="4118" startLine="118" starttimestamp="1650117113620" timestamp="2113668">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="1117" _type="Insert" date="Sat Apr 16 10:27:07 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4921" docExpressionCount="475" docLength="5584" length="2" offset="4118" repeat="2" starttimestamp="1650117113620" timestamp="2113837" timestamp2="2113920">
    <text><![CDATA[ng]]></text>
  </DocumentChange>
  <Command __id="1127" _type="PauseCommand" date="Sat Apr 16 10:27:35 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="2141867">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16762]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1128" _type="InsertStringCommand" date="Sat Apr 16 10:27:35 EDT 2022" starttimestamp="1650117113620" timestamp="2141875" timestamp2="2141875">
    <data><![CDATA[d]]></data>
  </Command>
  <DocumentChange __id="1126" _type="Insert" date="Sat Apr 16 10:27:35 EDT 2022" docASTNodeCount="678" docActiveCodeLength="4922" docExpressionCount="476" docLength="5585" length="1" offset="4122" starttimestamp="1650117113620" timestamp="2141867">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1130" _type="PauseCommand" date="Sat Apr 16 10:27:36 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2143374">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1499]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1131" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:27:36 EDT 2022" starttimestamp="1650117113620" timestamp="2143378" />
  <Command __id="1132" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:27:37 EDT 2022" starttimestamp="1650117113620" timestamp="2144363" />
  <Command __id="1133" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:27:38 EDT 2022" starttimestamp="1650117113620" timestamp="2144465" />
  <Command __id="1134" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:27:38 EDT 2022" starttimestamp="1650117113620" timestamp="2144493" />
  <DocumentChange __id="1129" _type="Delete" date="Sat Apr 16 10:27:36 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4921" docExpressionCount="475" docLength="5584" endLine="118" length="1" offset="4122" startLine="118" starttimestamp="1650117113620" timestamp="2143374">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="1136" _type="PauseCommand" date="Sat Apr 16 10:27:48 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="2155030">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10537]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1137" _type="SelectTextCommand" caretOffset="710" date="Sat Apr 16 10:27:48 EDT 2022" end="734" start="710" starttimestamp="1650117113620" timestamp="2155169" />
  <Command __id="1135" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:27:48 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9193" docExpressionCount="890" docLength="10309" projectName="A6" starttimestamp="1650117113620" timestamp="2155030">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	protected static String SERVER_NAME;¶	private static int NIO_SERVER_PORT;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		¶¶		// Make sure you set this property when processing args¶		//System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶		¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		NIO_SERVER_PORT = ServerArgsProcessor.getNIOServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶		System.out.println("RMI_SERVER_HOST_NAME: "+RMI_SERVER_HOST_NAME);¶		System.out.println("RMI_SERVER_PORT: "+RMI_SERVER_PORT);¶		System.out.println("GIPC_SERVER_PORT: "+GIPC_SERVER_PORT);¶		System.out.println("NIO_SERVER_PORT: "+NIO_SERVER_PORT);¶		¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			System.out.println("Broadcasting IPC mechanism: "+mechanism);¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶					System.out.println("SEND NEW MECHANISM TO A CLIENT FROM SERVER");¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶		System.out.println("ADDED CONNECTION LISTENER");¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1139" _type="PauseCommand" date="Sat Apr 16 10:29:47 EDT 2022" range="1m-2m" starttimestamp="1650117113620" timestamp="2273733">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[118564]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1140" _type="SelectTextCommand" caretOffset="175" date="Sat Apr 16 10:29:47 EDT 2022" end="175" start="157" starttimestamp="1650117113620" timestamp="2273898" />
  <Command __id="1142" _type="PauseCommand" date="Sat Apr 16 10:29:49 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2276088">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2190]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1141" _type="MoveCaretCommand" caretOffset="2770" date="Sat Apr 16 10:29:49 EDT 2022" docOffset="4445" starttimestamp="1650117113620" timestamp="2276088" />
  <Command __id="1144" _type="ShellCommand" date="Sat Apr 16 10:29:50 EDT 2022" starttimestamp="1650117113620" timestamp="2276434" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1146" _type="PauseCommand" date="Sat Apr 16 10:29:51 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2278261">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1827]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="1145" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:29:51 EDT 2022" forward="true" matchWord="false" offset="4445" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="2278261" wrapSearch="false">
    <searchString><![CDATA[inCoup]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1148" _type="PauseCommand" date="Sat Apr 16 10:29:53 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2280314">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2053]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1147" _type="ShellCommand" date="Sat Apr 16 10:29:53 EDT 2022" starttimestamp="1650117113620" timestamp="2280314" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1150" _type="PauseCommand" date="Sat Apr 16 10:30:00 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2286998">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6684]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1149" _type="SelectTextCommand" caretOffset="6013" date="Sat Apr 16 10:30:00 EDT 2022" end="6086" start="6013" starttimestamp="1650117113620" timestamp="2286998" />
  <Command __id="1151" _type="CopyCommand" date="Sat Apr 16 10:30:01 EDT 2022" starttimestamp="1650117113620" timestamp="2287581" />
  <Command __id="1138" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:29:47 EDT 2022" docASTNodeCount="1198" docActiveCodeLength="9334" docExpressionCount="863" docLength="10222" projectName="A6" starttimestamp="1650117113620" timestamp="2273733">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	public String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	//protected int aProposalNumber;
	public int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		
		//ServerArgsProcessor.ge;
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			System.out.println("SERVER looked up in RMI registry!!");
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
	
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <Command __id="1153" _type="PauseCommand" date="Sat Apr 16 10:30:07 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2293432">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[5851]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1154" _type="SelectTextCommand" caretOffset="1094" date="Sat Apr 16 10:30:07 EDT 2022" end="1154" start="1094" starttimestamp="1650117113620" timestamp="2293494" />
  <Command __id="1156" _type="PauseCommand" date="Sat Apr 16 10:30:16 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2303341">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[9847]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1155" _type="ShellCommand" date="Sat Apr 16 10:30:16 EDT 2022" starttimestamp="1650117113620" timestamp="2303341" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1158" _type="PauseCommand" date="Sat Apr 16 10:30:19 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2306270">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2929]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1162" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:30:23 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="2310191" type="Run" />
  <Command __id="1164" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:30:23 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="2310192" type="Run" />
  <Command __id="1165" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:30:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2310301" type="Run" />
  <Command __id="1166" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:30:23 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2310318" type="Run" />
  <Command __id="1167" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:30:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2310320" type="Run" />
  <Command __id="1169" _type="PauseCommand" date="Sat Apr 16 10:30:26 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2312875">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2555]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1198" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:31:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2351700" type="Run" />
  <Command __id="1200" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:31:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2351701" type="Run" />
  <Command __id="1202" _type="PauseCommand" date="Sat Apr 16 10:32:02 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="2408854">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[57153]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1201" _type="ConsoleOutput" date="Sat Apr 16 10:32:02 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="2408854" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via NIO, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*
GIPC is not checked because RMI failed%0.16666666666666666

Test execution time (ms):58598
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via NIO, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*¶GIPC is not checked because RMI failed%0.16666666666666666¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"13575"), Diff(INSERT,"58598"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1204" _type="PauseCommand" date="Sat Apr 16 10:34:59 EDT 2022" range="2m-5m" starttimestamp="1650117113620" timestamp="2585894">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[177040]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1203" _type="ShellCommand" date="Sat Apr 16 10:34:59 EDT 2022" starttimestamp="1650117113620" timestamp="2585894" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1206" _type="MoveCaretCommand" caretOffset="2821" date="Sat Apr 16 10:34:59 EDT 2022" docOffset="4122" starttimestamp="1650117113620" timestamp="2586257" />
  <Command __id="1152" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:30:07 EDT 2022" docASTNodeCount="278" docActiveCodeLength="2069" docExpressionCount="185" docLength="2415" projectName="A6" starttimestamp="1650117113620" timestamp="2293432">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	//final ClientRemoteObjectNIO client;¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			//ProposalLearnedNotificationReceived.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, client.CLIENT_NAME, client.aProposalNumber, aMessageString);¶			client.aProposalNumber++;¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1205" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:34:59 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4921" docExpressionCount="475" docLength="5584" projectName="A6" starttimestamp="1650117113620" timestamp="2586098">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		¶		int aProposalNumber = 0;¶		"), Diff(INSERT,"String aMessageString = new String(aMessage.array());¶		"), Diff(EQUAL,"ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessage"), Diff(INSERT,"String"), Diff(EQUAL,");¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		¶		¶		¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		aProposalNumber = 1 + aProposalNumber;¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestSent;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		
		int aProposalNumber = 0;
		String aMessageString = new String(aMessage.array());
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {

			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		nioManager.write(socketChannel, bufferCommand, this);

		
		
		
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		aProposalNumber = 1 + aProposalNumber;
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		


}
]]></snapshot>
  </Command>
  <Command __id="1208" _type="PauseCommand" date="Sat Apr 16 10:36:16 EDT 2022" range="1m-2m" starttimestamp="1650117113620" timestamp="2663126">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[76869]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1209" _type="SelectTextCommand" caretOffset="6013" date="Sat Apr 16 10:36:16 EDT 2022" end="6086" start="6013" starttimestamp="1650117113620" timestamp="2663299" />
  <Command __id="1211" _type="PauseCommand" date="Sat Apr 16 10:36:18 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2664752">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1453]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1210" _type="MoveCaretCommand" caretOffset="5904" date="Sat Apr 16 10:36:18 EDT 2022" docOffset="7579" starttimestamp="1650117113620" timestamp="2664752" />
  <Command __id="1213" _type="PauseCommand" date="Sat Apr 16 10:36:34 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="2681317">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16565]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1212" _type="MoveCaretCommand" caretOffset="7099" date="Sat Apr 16 10:36:34 EDT 2022" docOffset="8774" starttimestamp="1650117113620" timestamp="2681317" />
  <Command __id="1207" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:36:16 EDT 2022" docASTNodeCount="1198" docActiveCodeLength="9334" docExpressionCount="863" docLength="10222" projectName="A6" starttimestamp="1650117113620" timestamp="2663126">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		¶		//ServerArgsProcessor.ge;¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			System.out.println("SERVER looked up in RMI registry!!");¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶	¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1215" _type="PauseCommand" date="Sat Apr 16 10:37:08 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="2715260">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[33942]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1216" _type="MoveCaretCommand" caretOffset="2821" date="Sat Apr 16 10:37:09 EDT 2022" docOffset="4122" starttimestamp="1650117113620" timestamp="2715415" />
  <Command __id="1218" _type="PauseCommand" date="Sat Apr 16 10:37:15 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2722264">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6849]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1217" _type="MoveCaretCommand" caretOffset="3806" date="Sat Apr 16 10:37:15 EDT 2022" docOffset="5107" starttimestamp="1650117113620" timestamp="2722264" />
  <Command __id="1214" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:37:08 EDT 2022" docASTNodeCount="674" docActiveCodeLength="4921" docExpressionCount="475" docLength="5584" projectName="A6" starttimestamp="1650117113620" timestamp="2715259">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		¶		int aProposalNumber = 0;¶		String aMessageString = new String(aMessage.array());¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		¶		¶		¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		aProposalNumber = 1 + aProposalNumber;¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1220" _type="PauseCommand" date="Sat Apr 16 10:37:19 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2725872">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3608]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1221" _type="InsertStringCommand" date="Sat Apr 16 10:37:19 EDT 2022" starttimestamp="1650117113620" timestamp="2725877" timestamp2="2725877">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1223" _type="InsertStringCommand" date="Sat Apr 16 10:37:19 EDT 2022" starttimestamp="1650117113620" timestamp="2726027" timestamp2="2726027">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1224" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:37:20 EDT 2022" starttimestamp="1650117113620" timestamp="2726934" />
  <Command __id="1225" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:37:20 EDT 2022" starttimestamp="1650117113620" timestamp="2727041" />
  <Command __id="1226" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:37:20 EDT 2022" starttimestamp="1650117113620" timestamp="2727084" />
  <Command __id="1228" _type="PauseCommand" date="Sat Apr 16 10:37:23 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2729775">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2691]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1227" _type="ShellCommand" date="Sat Apr 16 10:37:23 EDT 2022" starttimestamp="1650117113620" timestamp="2729775" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1230" _type="PauseCommand" date="Sat Apr 16 10:38:03 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="2769836">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[40061]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1229" _type="ShellCommand" date="Sat Apr 16 10:38:03 EDT 2022" starttimestamp="1650117113620" timestamp="2769836" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1232" _type="MoveCaretCommand" caretOffset="7099" date="Sat Apr 16 10:38:03 EDT 2022" docOffset="8774" starttimestamp="1650117113620" timestamp="2770197" />
  <Command __id="1234" _type="PauseCommand" date="Sat Apr 16 10:38:12 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2778768">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8571]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1233" _type="ShellCommand" date="Sat Apr 16 10:38:12 EDT 2022" starttimestamp="1650117113620" timestamp="2778768" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1236" _type="PauseCommand" date="Sat Apr 16 10:38:32 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="2798594">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19826]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1235" _type="ShellCommand" date="Sat Apr 16 10:38:32 EDT 2022" starttimestamp="1650117113620" timestamp="2798594" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1237" _type="MoveCaretCommand" caretOffset="7636" date="Sat Apr 16 10:38:32 EDT 2022" docOffset="9311" starttimestamp="1650117113620" timestamp="2798690" />
  <Command __id="1239" _type="ShellCommand" date="Sat Apr 16 10:38:32 EDT 2022" starttimestamp="1650117113620" timestamp="2799339" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1240" _type="PasteCommand" date="Sat Apr 16 10:38:33 EDT 2022" starttimestamp="1650117113620" timestamp="2800298" />
  <Command __id="1241" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:38:34 EDT 2022" forward="true" matchWord="false" offset="9311" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="2800751" wrapSearch="false">
    <searchString><![CDATA[RemoteProposeRequestReceived]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1243" _type="PauseCommand" date="Sat Apr 16 10:38:36 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2802829">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2078]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1242" _type="ShellCommand" date="Sat Apr 16 10:38:36 EDT 2022" starttimestamp="1650117113620" timestamp="2802829" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1245" _type="PauseCommand" date="Sat Apr 16 10:38:37 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2803839">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1010]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1244" _type="MoveCaretCommand" caretOffset="7461" date="Sat Apr 16 10:38:37 EDT 2022" docOffset="9136" starttimestamp="1650117113620" timestamp="2803839" />
  <Command __id="1247" _type="ShellCommand" date="Sat Apr 16 10:38:37 EDT 2022" starttimestamp="1650117113620" timestamp="2804308" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1248" _type="PasteCommand" date="Sat Apr 16 10:38:38 EDT 2022" starttimestamp="1650117113620" timestamp="2804672" />
  <Command __id="1250" _type="PauseCommand" date="Sat Apr 16 10:38:40 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2806517">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1845]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="1249" _type="FindCommand" caseSensitive="false" date="Sat Apr 16 10:38:40 EDT 2022" forward="false" matchWord="false" offset="9136" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1650117113620" timestamp="2806517" wrapSearch="false">
    <searchString><![CDATA[RemoteProposeRequestReceived]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1252" _type="PauseCommand" date="Sat Apr 16 10:38:41 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2807694">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1177]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1251" _type="ShellCommand" date="Sat Apr 16 10:38:41 EDT 2022" starttimestamp="1650117113620" timestamp="2807694" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="1219" _type="Insert" date="Sat Apr 16 10:37:19 EDT 2022" docASTNodeCount="666" docActiveCodeLength="4842" docExpressionCount="468" docLength="5586" length="2" offset="5107" repeat="2" starttimestamp="1650117113620" timestamp="2725872" timestamp2="2726020">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="1231" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:38:03 EDT 2022" docASTNodeCount="1198" docActiveCodeLength="9334" docExpressionCount="863" docLength="10222" projectName="A6" starttimestamp="1650117113620" timestamp="2770027">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		¶		//ServerArgsProcessor.ge;¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE: "+SERVER_NAME);¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			System.out.println("SERVER looked up in RMI registry!!");¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶	¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		System.out.print("GOT IPC MECHANISM CHANGE: "+mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1254" _type="PauseCommand" date="Sat Apr 16 10:38:44 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2810442">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2748]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1255" _type="MoveCaretCommand" caretOffset="3808" date="Sat Apr 16 10:38:44 EDT 2022" docOffset="5109" starttimestamp="1650117113620" timestamp="2810641" />
  <Command __id="1257" _type="PauseCommand" date="Sat Apr 16 10:39:17 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="2844275">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[33634]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1256" _type="MoveCaretCommand" caretOffset="2763" date="Sat Apr 16 10:39:17 EDT 2022" docOffset="4064" starttimestamp="1650117113620" timestamp="2844275" />
  <Command __id="1259" _type="PauseCommand" date="Sat Apr 16 10:39:19 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2846213">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1938]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1258" _type="MoveCaretCommand" caretOffset="2825" date="Sat Apr 16 10:39:19 EDT 2022" docOffset="4126" starttimestamp="1650117113620" timestamp="2846213" />
  <Command __id="1253" _type="DiffBasedFileOpenCommand" date="Sat Apr 16 10:38:44 EDT 2022" docASTNodeCount="666" docActiveCodeLength="4842" docExpressionCount="468" docLength="5586" projectName="A6" starttimestamp="1650117113620" timestamp="2810442">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	protected boolean broadcastIPCMechanism = false;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ClientArgsProcessor.getNIOServerPort(args);¶		System.out.println("NIO SERVER PORT: "+aServerPort);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		¶		int aProposalNumber = 0;¶		String aMessageString = new String(aMessage.array());¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: " + mechanism.toString());¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		"), Diff(INSERT,"//"), Diff(EQUAL,"RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		¶		¶		¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		aProposalNumber = 1 + aProposalNumber;¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestSent;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	protected boolean broadcastIPCMechanism = false;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		
		int aProposalNumber = 0;
		String aMessageString = new String(aMessage.array());
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, aMessageString);
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: " + mechanism.toString());

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {

			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}

		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		//RemoteProposeRequestSent.newCase(this, CLIENT_NAME, aProposalNumber, aCommand);
		nioManager.write(socketChannel, bufferCommand, this);

		
		
		
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		aProposalNumber = 1 + aProposalNumber;
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		


}
]]></snapshot>
  </Command>
  <Command __id="1261" _type="PauseCommand" date="Sat Apr 16 10:39:21 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2847877">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1664]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1260" _type="Insert" date="Sat Apr 16 10:39:21 EDT 2022" docASTNodeCount="666" docActiveCodeLength="4846" docExpressionCount="468" docLength="5590" length="4" offset="4126" starttimestamp="1650117113620" timestamp="2847877">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="1262" _type="InsertStringCommand" date="Sat Apr 16 10:39:21 EDT 2022" starttimestamp="1650117113620" timestamp="2847886" timestamp2="2847886">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1263" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Sat Apr 16 10:39:21 EDT 2022" starttimestamp="1650117113620" timestamp="2848187" />
  <DocumentChange __id="1264" _type="Replace" date="Sat Apr 16 10:39:22 EDT 2022" docASTNodeCount="670" docActiveCodeLength="4874" docExpressionCount="469" docLength="5618" endLine="119" insertionLength="30" int_docASTNodeCount="666" int_docActiveCodeLength="4844" int_docExpressionCount="468" int_docLength="5588" length="2" offset="4124" startLine="119" starttimestamp="1650117113620" timestamp="2848584">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		RemoteProposeRequestReceived]]></insertedText>
  </DocumentChange>
  <Command __id="1265" _type="PasteCommand" date="Sat Apr 16 10:39:22 EDT 2022" starttimestamp="1650117113620" timestamp="2848589" />
  <Command __id="1267" _type="InsertStringCommand" date="Sat Apr 16 10:39:22 EDT 2022" starttimestamp="1650117113620" timestamp="2849221" timestamp2="2849221">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1268" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Apr 16 10:39:22 EDT 2022" start_end="START" starttimestamp="1650117113620" timestamp="2849225" />
  <Command __id="1271" _type="PauseCommand" date="Sat Apr 16 10:39:27 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2853977">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[4751]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1270" _type="ShellCommand" date="Sat Apr 16 10:39:27 EDT 2022" starttimestamp="1650117113620" timestamp="2853976" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1273" _type="PauseCommand" date="Sat Apr 16 10:39:34 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2860427">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6451]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1272" _type="ShellCommand" date="Sat Apr 16 10:39:34 EDT 2022" starttimestamp="1650117113620" timestamp="2860427" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1274" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Apr 16 10:39:34 EDT 2022" start_end="END" starttimestamp="1650117113620" timestamp="2860457" />
  <Command __id="1276" _type="PauseCommand" date="Sat Apr 16 10:39:36 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2862737">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2280]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1275" _type="SelectTextCommand" caretOffset="2825" date="Sat Apr 16 10:39:36 EDT 2022" end="2855" start="2825" starttimestamp="1650117113620" timestamp="2862737" />
  <DocumentChange __id="1266" _type="Insert" date="Sat Apr 16 10:39:22 EDT 2022" docASTNodeCount="669" docActiveCodeLength="4876" docExpressionCount="470" docLength="5620" length="2" offset="4154" repeat="2" starttimestamp="1650117113620" timestamp="2849217" timestamp2="2850006">
    <text><![CDATA[.n]]></text>
  </DocumentChange>
  <Command __id="1278" _type="PauseCommand" date="Sat Apr 16 10:39:40 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2867078">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4341]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1279" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:39:40 EDT 2022" starttimestamp="1650117113620" timestamp="2867087" />
  <Command __id="1282" _type="PauseCommand" date="Sat Apr 16 10:39:41 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2868183">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1096]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1281" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:39:41 EDT 2022" starttimestamp="1650117113620" timestamp="2868183" />
  <Command __id="1284" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:39:42 EDT 2022" starttimestamp="1650117113620" timestamp="2868647" />
  <Command __id="1287" _type="PauseCommand" date="Sat Apr 16 10:39:43 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2869870">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1223]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1286" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Apr 16 10:39:43 EDT 2022" starttimestamp="1650117113620" timestamp="2869870" />
  <Command __id="1288" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:39:44 EDT 2022" starttimestamp="1650117113620" timestamp="2870783" />
  <Command __id="1289" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:39:44 EDT 2022" starttimestamp="1650117113620" timestamp="2870879" />
  <Command __id="1290" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:39:44 EDT 2022" starttimestamp="1650117113620" timestamp="2870916" />
  <DocumentChange __id="1277" _type="Delete" date="Sat Apr 16 10:39:40 EDT 2022" docASTNodeCount="666" docActiveCodeLength="4842" docExpressionCount="468" docLength="5586" endLine="119" length="34" offset="4122" repeat="4" startLine="118" starttimestamp="1650117113620" timestamp="2867078" timestamp2="2869859">
    <text><![CDATA[
		RemoteProposeRequestReceived.n]]></text>
  </DocumentChange>
  <Command __id="1292" _type="PauseCommand" date="Sat Apr 16 10:40:06 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="2893208">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[22292]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1293" _type="SelectTextCommand" caretOffset="710" date="Sat Apr 16 10:40:06 EDT 2022" end="734" start="710" starttimestamp="1650117113620" timestamp="2893277" />
  <Command __id="1295" _type="PauseCommand" date="Sat Apr 16 10:40:39 EDT 2022" range="30s-1m" starttimestamp="1650117113620" timestamp="2926044">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[32767]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1294" _type="SelectTextCommand" caretOffset="5221" date="Sat Apr 16 10:40:39 EDT 2022" end="5308" start="5221" starttimestamp="1650117113620" timestamp="2926044" />
  <Command __id="1296" _type="CopyCommand" date="Sat Apr 16 10:40:39 EDT 2022" starttimestamp="1650117113620" timestamp="2926294" />
  <Command __id="1297" _type="MoveCaretCommand" caretOffset="5221" date="Sat Apr 16 10:40:40 EDT 2022" docOffset="6877" starttimestamp="1650117113620" timestamp="2926786" />
  <Command __id="1299" _type="InsertStringCommand" date="Sat Apr 16 10:40:41 EDT 2022" starttimestamp="1650117113620" timestamp="2927442" timestamp2="2927442">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1301" _type="InsertStringCommand" date="Sat Apr 16 10:40:41 EDT 2022" starttimestamp="1650117113620" timestamp="2927571" timestamp2="2927571">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="1303" _type="PauseCommand" date="Sat Apr 16 10:40:43 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2930088">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2517]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1302" _type="MoveCaretCommand" caretOffset="4853" date="Sat Apr 16 10:40:43 EDT 2022" docOffset="6509" starttimestamp="1650117113620" timestamp="2930088" />
  <Command __id="1305" _type="PasteCommand" date="Sat Apr 16 10:40:43 EDT 2022" starttimestamp="1650117113620" timestamp="2930303" />
  <Command __id="1306" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Apr 16 10:40:44 EDT 2022" starttimestamp="1650117113620" timestamp="2931102" />
  <Command __id="1307" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:40:44 EDT 2022" starttimestamp="1650117113620" timestamp="2931202" />
  <Command __id="1308" _type="EclipseCommand" commandID="" date="Sat Apr 16 10:40:44 EDT 2022" starttimestamp="1650117113620" timestamp="2931228" />
  <Command __id="1310" _type="PauseCommand" date="Sat Apr 16 10:40:50 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="2937197">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5969]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1311" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:40:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2938988" type="Debug" />
  <Command __id="1313" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:40:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2938988" type="Debug" />
  <Command __id="1314" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:40:52 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="2938988" type="Run" />
  <Command __id="1316" _type="PauseCommand" date="Sat Apr 16 10:40:54 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="2940936">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1948]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1317" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:40:55 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="2942368" type="Run" />
  <Command __id="1319" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:40:55 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="2942368" type="Run" />
  <Command __id="1320" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:40:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2942478" type="Run" />
  <Command __id="1321" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:40:56 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2942492" type="Run" />
  <Command __id="1322" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:40:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2942495" type="Run" />
  <Command __id="1324" _type="PauseCommand" date="Sat Apr 16 10:40:58 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="2944962">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2467]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1353" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:41:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2982940" type="Run" />
  <Command __id="1355" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:41:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="2982941" type="Run" />
  <Command __id="1357" _type="PauseCommand" date="Sat Apr 16 10:42:01 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="3008326">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[25384]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1356" _type="ShellCommand" date="Sat Apr 16 10:42:01 EDT 2022" starttimestamp="1650117113620" timestamp="3008325" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1359" _type="PauseCommand" date="Sat Apr 16 10:42:25 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="3031788">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[23463]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1358" _type="ShellCommand" date="Sat Apr 16 10:42:25 EDT 2022" starttimestamp="1650117113620" timestamp="3031788" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1361" _type="PauseCommand" date="Sat Apr 16 10:42:33 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="3040060">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8272]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1382" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:44:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="3135268" type="Run" />
  <Command __id="1384" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:44:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="3135275" type="Run" />
  <Command __id="1386" _type="PauseCommand" date="Sat Apr 16 10:44:11 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="3138102">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2827]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1387" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:44:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="3140283" type="Run" />
  <Command __id="1389" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:44:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="3140284" type="Run" />
  <Command __id="1391" _type="PauseCommand" date="Sat Apr 16 10:45:35 EDT 2022" range="1m-2m" starttimestamp="1650117113620" timestamp="3221450">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[81166]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1390" _type="ShellCommand" date="Sat Apr 16 10:45:35 EDT 2022" starttimestamp="1650117113620" timestamp="3221450" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1393" _type="PauseCommand" date="Sat Apr 16 10:45:37 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="3223403">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1953]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1392" _type="ConsoleOutput" date="Sat Apr 16 10:45:37 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="3223403" type="ConsoleOutput">
    <outputString><![CDATA[                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):67587"), Diff(INSERT,"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    "), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1395" _type="PauseCommand" date="Sat Apr 16 10:45:55 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="3241715">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18312]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1447" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:48:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="3410753" type="Run" />
  <Command __id="1449" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:48:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="3410754" type="Run" />
  <Command __id="1451" _type="PauseCommand" date="Sat Apr 16 10:48:48 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="3414679">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3925]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1450" _type="ShellCommand" date="Sat Apr 16 10:48:48 EDT 2022" starttimestamp="1650117113620" timestamp="3414679" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1453" _type="PauseCommand" date="Sat Apr 16 10:50:29 EDT 2022" range="1m-2m" starttimestamp="1650117113620" timestamp="3515905">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[101226]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1452" _type="ConsoleOutput" date="Sat Apr 16 10:50:29 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="3515905" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOServerMetaStateBroadcast did not pass completely:When giving 'i nio' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;
When giving 'i rmi' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;
When giving 'i gipc' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification%0.0

Test execution time (ms):112621
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMINIOServerMetaStateBroadcast did not pass completely:When giving 'i nio' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;¶When giving 'i rmi' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;¶When giving 'i gipc' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification%0.0¶¶Test execution time (ms):112621"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1455" _type="PauseCommand" date="Sat Apr 16 10:50:37 EDT 2022" range="5s-10s" starttimestamp="1650117113620" timestamp="3523889">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7984]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1454" _type="ShellCommand" date="Sat Apr 16 10:50:37 EDT 2022" starttimestamp="1650117113620" timestamp="3523889" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1457" _type="PauseCommand" date="Sat Apr 16 10:50:51 EDT 2022" range="10s-20s" starttimestamp="1650117113620" timestamp="3538107">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14218]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1456" _type="ShellCommand" date="Sat Apr 16 10:50:51 EDT 2022" starttimestamp="1650117113620" timestamp="3538107" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1459" _type="PauseCommand" date="Sat Apr 16 10:50:55 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="3541412">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3305]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1458" _type="ConsoleOutput" date="Sat Apr 16 10:50:55 EDT 2022" overflow="false" starttimestamp="1650117113620" timestamp="3541412" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOClientMetaStateBroadcast@14febc1a . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOServerMetaStateBroadcast did not pass completely:When giving 'i nio' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;¶When giving 'i rmi' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification;¶When giving 'i gipc' as input to Server: Client 0 did not receive expected notification, Client 1 did not receive expected notification%0.0¶¶Test execution time (ms):112621"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOClientMetaStateBroadcast@14febc1a . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1461" _type="PauseCommand" date="Sat Apr 16 10:51:22 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="3568940">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[27528]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1460" _type="ShellCommand" date="Sat Apr 16 10:51:22 EDT 2022" starttimestamp="1650117113620" timestamp="3568940" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1462" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:51:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="3569630" type="Debug" />
  <Command __id="1463" _type="ProgramExecutionEvent" className="(Unknown)" date="Sat Apr 16 10:51:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1650117113620" timestamp="3569630" type="Debug" />
  <Command __id="1464" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Sat Apr 16 10:51:23 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1650117113620" timestamp="3569630" type="Run" />
  <Command __id="1465" _type="ShellCommand" date="Sat Apr 16 10:51:23 EDT 2022" starttimestamp="1650117113620" timestamp="3570313" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1467" _type="PauseCommand" date="Sat Apr 16 10:51:53 EDT 2022" range="20s-30s" starttimestamp="1650117113620" timestamp="3600124">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[29811]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="1466" _type="BalloonCommand" date="Sat Apr 16 10:51:53 EDT 2022" message="*******************************************
Worked 36 minutes(fixed)/47 minutes(context based) from
Sat Apr 16 09:51:56 EDT 2022 to Sat Apr 16 10:51:23 EDT 2022
Edited 1 Projects: 
	A6
Edited 6 Files: 
	C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientConfigure.java
	C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java
	C:\Users\mannu\COMP_533\A6\src\server\ServerConfigure.java
Number of insert: 387
Number of delete: 178
" starttimestamp="1650117113620" timestamp="3600124">
    <fineGrainedWorkTime><![CDATA[47]]></fineGrainedWorkTime>
    <insert><![CDATA[387]]></insert>
    <startTime><![CDATA[1650117116190]]></startTime>
    <endTime><![CDATA[1650120683933]]></endTime>
    <workTime><![CDATA[36]]></workTime>
    <delete><![CDATA[178]]></delete>
  </Command>
  <Command __id="1469" _type="PauseCommand" date="Sat Apr 16 12:13:10 EDT 2022" range=">1h" starttimestamp="1650117113620" timestamp="8476920">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[4876796]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1468" _type="ShellCommand" date="Sat Apr 16 12:13:10 EDT 2022" starttimestamp="1650117113620" timestamp="8476920" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1471" _type="PauseCommand" date="Sat Apr 16 12:13:12 EDT 2022" range="2s-5s" starttimestamp="1650117113620" timestamp="8479040">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2120]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1470" _type="ShellCommand" date="Sat Apr 16 12:13:12 EDT 2022" starttimestamp="1650117113620" timestamp="8479040" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1473" _type="PauseCommand" date="Sat Apr 16 12:13:14 EDT 2022" range="1s-2s" starttimestamp="1650117113620" timestamp="8480669">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1629]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
</Events>
