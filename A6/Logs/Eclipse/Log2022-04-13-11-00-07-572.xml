<Events startTimestamp="1649862007572" logVersion="1.0.0.202111260825">
  <Command __id="5" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:00:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="17970" type="Run" />
  <Command __id="9" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:00:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="26642" type="Run" />
  <Command __id="12" _type="PauseCommand" date="Wed Apr 13 11:00:39 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="31786">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5144]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="11" _type="ExceptionCommand" date="Wed Apr 13 11:00:39 EDT 2022" starttimestamp="1649862007572" timestamp="31786" type="Exception">
    <exceptionString><![CDATA[Could not connnect to server within ms:5000
java.lang.NullPointerException
	at client.ClientRemoteObject.init(ClientRemoteObject.java:136)
	at coupledsims.AStandAloneTwoCoupledHalloweenSimulations.start(AStandAloneTwoCoupledHalloweenSimulations.java:95)
	at client.Client.main(Client.java:14)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="14" _type="PauseCommand" date="Wed Apr 13 11:00:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="33246">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1460]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="28" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:00:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="49283" type="Run" />
  <Command __id="32" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:00:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="50343" type="Run" />
  <Command __id="37" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="54149" type="Run" />
  <Command __id="38" _type="ConsoleOutput" date="Wed Apr 13 11:01:02 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="54461" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.5412620634947035
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5412620634947035"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="46" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="60510" type="Run" />
  <Command __id="48" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="60565" type="Run" />
  <Command __id="49" _type="ConsoleOutput" date="Wed Apr 13 11:01:08 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="60803" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.5412620634947035 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC¶com.sun.proxy.$Proxy1@63ca17b5¶[com.sun.proxy.$Proxy1@63ca17b5]"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="53" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="65388" type="Run" />
  <Command __id="54" _type="ShellCommand" date="Wed Apr 13 11:01:13 EDT 2022" starttimestamp="1649862007572" timestamp="66106" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="56" _type="PauseCommand" date="Wed Apr 13 11:01:21 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="73871">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7765]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="55" _type="ConsoleInput" date="Wed Apr 13 11:01:21 EDT 2022" starttimestamp="1649862007572" timestamp="73871" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="57" _type="ConsoleOutput" date="Wed Apr 13 11:01:21 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="73938" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
NIO
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="59" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="75577" type="Run" />
  <Command __id="62" _type="PauseCommand" date="Wed Apr 13 11:01:36 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88854">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[13277]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="61" _type="ConsoleInput" date="Wed Apr 13 11:01:36 EDT 2022" starttimestamp="1649862007572" timestamp="88854" type="Exception">
    <outputString><![CDATA[i GIPC
]]></outputString>
  </Command>
  <Command __id="66" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90535" type="Run" />
  <Command __id="68" _type="PauseCommand" date="Wed Apr 13 11:01:44 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="97144">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6608]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="69" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="97146" type="Run" />
  <Command __id="70" _type="ConsoleOutput" date="Wed Apr 13 11:01:44 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="97207" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]
IPC Mechanism
GIPC
using gipc proxy server
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:undo
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener."), Diff(DELETE,"ipcMechanism(util.interactiveMethodInvocation."), Diff(INSERT,"simulationCommand(java.lang.String)[undo]¶"), Diff(EQUAL,"IPC"), Diff(INSERT," "), Diff(EQUAL,"Mechanism"), Diff(DELETE,")["), Diff(INSERT,"¶"), Diff(EQUAL,"GIPC"), Diff(DELETE,"]"), Diff(INSERT,"¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:undo"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="71" _type="ConsoleOutput" date="Wed Apr 13 11:01:44 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="97216" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: GIPC
USING RMI IN SERVER
Command recieved for broadcast: undo
USING GIPC IN SERVER
[com.sun.proxy.$Proxy1@63ca17b5]
1
com.sun.proxy.$Proxy1@63ca17b5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]¶IPC Mechanism¶GIPC¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:undo¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER¶Command recieved for broadcast: undo¶USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="73" _type="PauseCommand" date="Wed Apr 13 11:01:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="102280">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5064]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="72" _type="ShellCommand" date="Wed Apr 13 11:01:49 EDT 2022" starttimestamp="1649862007572" timestamp="102280" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="75" _type="PauseCommand" date="Wed Apr 13 11:01:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="105295">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3015]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="74" _type="ShellCommand" date="Wed Apr 13 11:01:52 EDT 2022" starttimestamp="1649862007572" timestamp="105295" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="77" _type="PauseCommand" date="Wed Apr 13 11:01:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="106427">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1132]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="80" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="112163" type="Run" />
  <Command __id="83" _type="PauseCommand" date="Wed Apr 13 11:02:15 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="127461">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[15298]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="84" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:02:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="127464" type="Run" />
  <Command __id="85" _type="ConsoleOutput" date="Wed Apr 13 11:02:15 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="127529" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 100 -100]
IPC Mechanism
GIPC
using gipc proxy server
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 100 -100
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER¶Command recieved for broadcast: undo¶USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 100 -100]¶IPC Mechanism¶GIPC¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 100 -100¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="86" _type="ConsoleOutput" date="Wed Apr 13 11:02:15 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="127535" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: GIPC
USING RMI IN SERVER
Command recieved for broadcast: move 100 -100
USING GIPC IN SERVER
[com.sun.proxy.$Proxy1@63ca17b5]
1
com.sun.proxy.$Proxy1@63ca17b5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 100 -100]¶IPC Mechanism¶GIPC¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 100 -100¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER¶Command recieved for broadcast: move 100 -100¶USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="88" _type="PauseCommand" date="Wed Apr 13 11:02:24 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="137261">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9726]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="87" _type="ConsoleInput" date="Wed Apr 13 11:02:24 EDT 2022" starttimestamp="1649862007572" timestamp="137261" type="Exception">
    <outputString><![CDATA[i RMI
]]></outputString>
  </Command>
  <Command __id="89" _type="ConsoleOutput" date="Wed Apr 13 11:02:24 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="137317" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER¶Command recieved for broadcast: move 100 -100¶USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="91" _type="PauseCommand" date="Wed Apr 13 11:02:26 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="138904">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1587]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="90" _type="ShellCommand" date="Wed Apr 13 11:02:26 EDT 2022" starttimestamp="1649862007572" timestamp="138904" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="93" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:02:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="142483" type="Run" />
  <Command __id="96" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:02:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="143213" type="Run" />
  <Command __id="97" _type="ConsoleOutput" date="Wed Apr 13 11:02:30 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="143274" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[take 3]
IPC Mechanism
RMI
using RMI proxy server
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener."), Diff(DELETE,"ipcMechanism(util.interactiveMethodInvocation."), Diff(INSERT,"simulationCommand(java.lang.String)[take 3]¶"), Diff(EQUAL,"IPC"), Diff(INSERT," "), Diff(EQUAL,"Mechanism"), Diff(DELETE,")["), Diff(INSERT,"¶"), Diff(EQUAL,"RMI"), Diff(DELETE,"]"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"using RMI proxy server"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="98" _type="ConsoleOutput" date="Wed Apr 13 11:02:30 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="143333" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: RMI
USING RMI IN SERVER
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[take 3]¶IPC Mechanism¶RMI¶using RMI proxy server"), Diff(INSERT,"IPC Mechanism recieved for broadcast: RMI¶USING RMI IN SERVER"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="99" _type="ConsoleOutput" date="Wed Apr 13 11:02:31 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="143468" type="ConsoleOutput">
    <outputString><![CDATA[PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:take 3
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: RMI¶USING RMI IN SERVER"), Diff(INSERT,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:take 3¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="100" _type="ConsoleOutput" date="Wed Apr 13 11:02:31 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="143648" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: take 3
USING RMI IN SERVER
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]]
1
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:take 3¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Command recieved for broadcast: take 3¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]]¶1¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="102" _type="PauseCommand" date="Wed Apr 13 11:02:35 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="147948">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4300]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="103" _type="ShellCommand" date="Wed Apr 13 11:02:39 EDT 2022" starttimestamp="1649862007572" timestamp="151969" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="106" _type="PauseCommand" date="Wed Apr 13 11:02:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="154682">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2713]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="105" _type="ConsoleInput" date="Wed Apr 13 11:02:42 EDT 2022" starttimestamp="1649862007572" timestamp="154682" type="Exception">
    <outputString><![CDATA[i GIPC
]]></outputString>
  </Command>
  <Command __id="107" _type="ConsoleOutput" date="Wed Apr 13 11:02:42 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="154739" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Command recieved for broadcast: take 3¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]]¶1¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="109" _type="PauseCommand" date="Wed Apr 13 11:02:50 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="162966">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8227]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="108" _type="ConsoleInput" date="Wed Apr 13 11:02:50 EDT 2022" starttimestamp="1649862007572" timestamp="162966" type="Exception">
    <outputString><![CDATA[s "undo"
]]></outputString>
  </Command>
  <Command __id="110" _type="ConsoleOutput" date="Wed Apr 13 11:02:50 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="163030" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: GIPC
USING RMI IN SERVER
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)["), Diff(INSERT,"IPC Mechanism recieved for broadcast: "), Diff(EQUAL,"GIPC"), Diff(DELETE,"]"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"USING RMI IN SERVER"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="111" _type="ConsoleOutput" date="Wed Apr 13 11:02:50 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="163034" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]
IPC Mechanism
GIPC
using gipc proxy server
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]¶IPC Mechanism¶GIPC¶using gipc proxy server"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="112" _type="ConsoleOutput" date="Wed Apr 13 11:02:50 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="163245" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: undo
USING GIPC IN SERVER
[com.sun.proxy.$Proxy1@63ca17b5]
1
com.sun.proxy.$Proxy1@63ca17b5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)["), Diff(INSERT,"Command recieved for broadcast: "), Diff(EQUAL,"undo"), Diff(DELETE,"]"), Diff(EQUAL,"¶"), Diff(DELETE,"IPC Mechanism¶GIPC¶using gipc proxy server"), Diff(INSERT,"USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="114" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:03:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="188230" type="Run" />
  <Command __id="117" _type="PauseCommand" date="Wed Apr 13 11:04:54 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="286924">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[98693]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="126" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:06:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="375521" type="Run" />
  <Command __id="128" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:06:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="375581" type="Run" />
  <Command __id="130" _type="PauseCommand" date="Wed Apr 13 11:06:43 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="396375">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[20793]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="129" _type="SelectTextCommand" caretOffset="5828" date="Wed Apr 13 11:06:43 EDT 2022" end="5876" start="5828" starttimestamp="1649862007572" timestamp="396374" />
  <Command __id="131" _type="CopyCommand" date="Wed Apr 13 11:06:44 EDT 2022" starttimestamp="1649862007572" timestamp="396640" />
  <Command __id="116" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:04:54 EDT 2022" docASTNodeCount="1234" docActiveCodeLength="8901" docExpressionCount="876" docLength="9957" projectName="A6" starttimestamp="1649862007572" timestamp="286923">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		//SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

	

}
]]></snapshot>
  </Command>
  <Command __id="133" _type="PauseCommand" date="Wed Apr 13 11:06:45 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="398058">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1418]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="134" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:06:45 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="398301" />
  <Command __id="136" _type="PauseCommand" date="Wed Apr 13 11:06:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="400029">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1728]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="135" _type="MoveCaretCommand" caretOffset="161" date="Wed Apr 13 11:06:47 EDT 2022" docOffset="322" starttimestamp="1649862007572" timestamp="400029" />
  <Command __id="138" _type="InsertStringCommand" date="Wed Apr 13 11:06:47 EDT 2022" starttimestamp="1649862007572" timestamp="400331" timestamp2="400331">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="140" _type="PasteCommand" date="Wed Apr 13 11:06:48 EDT 2022" starttimestamp="1649862007572" timestamp="401223" />
  <Command __id="142" _type="InsertStringCommand" date="Wed Apr 13 11:06:49 EDT 2022" starttimestamp="1649862007572" timestamp="401681" timestamp2="401681">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="144" _type="InsertStringCommand" date="Wed Apr 13 11:06:49 EDT 2022" starttimestamp="1649862007572" timestamp="402312" timestamp2="402312">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="146" _type="PauseCommand" date="Wed Apr 13 11:06:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="404546">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2234]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="145" _type="MoveCaretCommand" caretOffset="212" date="Wed Apr 13 11:06:52 EDT 2022" docOffset="373" starttimestamp="1649862007572" timestamp="404546" />
  <Command __id="148" _type="PauseCommand" date="Wed Apr 13 11:06:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="405884">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1338]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="147" _type="MoveCaretCommand" caretOffset="216" date="Wed Apr 13 11:06:53 EDT 2022" docOffset="377" starttimestamp="1649862007572" timestamp="405884" />
  <Command __id="150" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:06:53 EDT 2022" starttimestamp="1649862007572" timestamp="406163" />
  <Command __id="152" _type="PauseCommand" date="Wed Apr 13 11:06:55 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="407661">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1498]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="151" _type="MoveCaretCommand" caretOffset="215" date="Wed Apr 13 11:06:55 EDT 2022" docOffset="376" starttimestamp="1649862007572" timestamp="407661" />
  <Command __id="153" _type="MoveCaretCommand" caretOffset="219" date="Wed Apr 13 11:06:55 EDT 2022" docOffset="380" starttimestamp="1649862007572" timestamp="408221" />
  <Command __id="155" _type="InsertStringCommand" date="Wed Apr 13 11:06:56 EDT 2022" starttimestamp="1649862007572" timestamp="408472" timestamp2="408472">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:06:56 EDT 2022" starttimestamp="1649862007572" timestamp="409400" />
  <Command __id="159" _type="InsertStringCommand" date="Wed Apr 13 11:06:57 EDT 2022" starttimestamp="1649862007572" timestamp="409729" timestamp2="409729">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="161" _type="PauseCommand" date="Wed Apr 13 11:06:58 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="410828">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1099]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="160" _type="MoveCaretCommand" caretOffset="188" date="Wed Apr 13 11:06:58 EDT 2022" docOffset="349" starttimestamp="1649862007572" timestamp="410828" />
  <Command __id="162" _type="MoveCaretCommand" caretOffset="215" date="Wed Apr 13 11:06:59 EDT 2022" docOffset="376" starttimestamp="1649862007572" timestamp="411511" />
  <Command __id="164" _type="InsertStringCommand" date="Wed Apr 13 11:06:59 EDT 2022" starttimestamp="1649862007572" timestamp="411751" timestamp2="411751">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="166" _type="InsertStringCommand" date="Wed Apr 13 11:06:59 EDT 2022" starttimestamp="1649862007572" timestamp="411935" timestamp2="411935">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="168" _type="InsertStringCommand" date="Wed Apr 13 11:07:00 EDT 2022" starttimestamp="1649862007572" timestamp="412531" timestamp2="412531">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="170" _type="InsertStringCommand" date="Wed Apr 13 11:07:00 EDT 2022" starttimestamp="1649862007572" timestamp="412637" timestamp2="412637">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="172" _type="InsertStringCommand" date="Wed Apr 13 11:07:00 EDT 2022" starttimestamp="1649862007572" timestamp="412732" timestamp2="412732">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="174" _type="InsertStringCommand" date="Wed Apr 13 11:07:00 EDT 2022" starttimestamp="1649862007572" timestamp="413100" timestamp2="413100">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="175" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:07:01 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="413490" />
  <Command __id="178" _type="PauseCommand" date="Wed Apr 13 11:07:02 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="414836">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1346]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="177" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:07:02 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="414836" />
  <Command __id="180" _type="InsertStringCommand" date="Wed Apr 13 11:07:02 EDT 2022" starttimestamp="1649862007572" timestamp="414917" timestamp2="414917">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="182" _type="PauseCommand" date="Wed Apr 13 11:07:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="416127">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1210]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="195" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:07:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="421502" type="Debug" />
  <Command __id="197" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:07:09 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="421502" type="Run" />
  <Command __id="198" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:07:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="421502" type="Debug" />
  <Command __id="199" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:07:09 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="421503" type="Run" />
  <Command __id="200" _type="ShellCommand" date="Wed Apr 13 11:07:09 EDT 2022" starttimestamp="1649862007572" timestamp="421523" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="201" _type="ConsoleOutput" date="Wed Apr 13 11:07:09 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="421583" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:63625 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:undo¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:63625 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="132" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:06:45 EDT 2022" docASTNodeCount="135" docActiveCodeLength="907" docExpressionCount="77" docLength="1111" projectName="A6" starttimestamp="1649862007572" timestamp="398058">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="137" _type="Insert" date="Wed Apr 13 11:06:47 EDT 2022" docASTNodeCount="135" docActiveCodeLength="910" docExpressionCount="77" docLength="1114" length="3" offset="322" starttimestamp="1649862007572" timestamp="400324">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="139" _type="Replace" date="Wed Apr 13 11:06:48 EDT 2022" docASTNodeCount="147" docActiveCodeLength="958" docExpressionCount="82" docLength="1162" endLine="10" insertionLength="49" int_docASTNodeCount="135" int_docActiveCodeLength="909" int_docExpressionCount="77" int_docLength="1113" length="1" offset="324" startLine="10" starttimestamp="1649862007572" timestamp="401108">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	protected void init(String[] args) {]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="141" _type="Insert" date="Wed Apr 13 11:06:49 EDT 2022" docASTNodeCount="147" docActiveCodeLength="966" docExpressionCount="82" docLength="1170" length="8" offset="373" starttimestamp="1649862007572" timestamp="401676">
    <text><![CDATA[
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="143" _type="Replace" date="Wed Apr 13 11:06:49 EDT 2022" docASTNodeCount="149" docActiveCodeLength="966" docExpressionCount="82" docLength="1170" endLine="12" insertionLength="2" int_docASTNodeCount="147" int_docActiveCodeLength="964" int_docExpressionCount="82" int_docLength="1168" length="2" offset="375" startLine="12" starttimestamp="1649862007572" timestamp="402306">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="149" _type="Delete" date="Wed Apr 13 11:06:53 EDT 2022" docASTNodeCount="147" docActiveCodeLength="965" docExpressionCount="82" docLength="1169" endLine="12" length="1" offset="376" startLine="12" starttimestamp="1649862007572" timestamp="406157">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="154" _type="Insert" date="Wed Apr 13 11:06:56 EDT 2022" docASTNodeCount="147" docActiveCodeLength="966" docExpressionCount="82" docLength="1170" length="1" offset="380" starttimestamp="1649862007572" timestamp="408466">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <DocumentChange __id="156" _type="Delete" date="Wed Apr 13 11:06:56 EDT 2022" docASTNodeCount="147" docActiveCodeLength="965" docExpressionCount="82" docLength="1169" endLine="13" length="1" offset="380" startLine="13" starttimestamp="1649862007572" timestamp="409396">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <DocumentChange __id="158" _type="Insert" date="Wed Apr 13 11:06:57 EDT 2022" docASTNodeCount="147" docActiveCodeLength="968" docExpressionCount="82" docLength="1172" length="3" offset="380" starttimestamp="1649862007572" timestamp="409724">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="163" _type="Insert" date="Wed Apr 13 11:06:59 EDT 2022" docASTNodeCount="152" docActiveCodeLength="975" docExpressionCount="86" docLength="1179" length="7" offset="376" repeat="7" starttimestamp="1649862007572" timestamp="411747" timestamp2="414176">
    <text><![CDATA[super.i]]></text>
  </DocumentChange>
  <DocumentChange __id="179" _type="Replace" date="Wed Apr 13 11:07:02 EDT 2022" docASTNodeCount="151" docActiveCodeLength="985" docExpressionCount="85" docLength="1189" endLine="12" insertionLength="11" int_docASTNodeCount="147" int_docActiveCodeLength="974" int_docExpressionCount="82" int_docLength="1178" length="1" offset="382" startLine="12" starttimestamp="1649862007572" timestamp="414840">
    <deletedText><![CDATA[i]]></deletedText>
    <insertedText><![CDATA[init(args);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="184" _type="Replace" date="Wed Apr 13 11:07:03 EDT 2022" docASTNodeCount="151" docActiveCodeLength="986" docExpressionCount="85" docLength="1190" endLine="12" insertionLength="2" int_docASTNodeCount="151" int_docActiveCodeLength="984" int_docExpressionCount="85" int_docLength="1188" length="1" offset="375" startLine="12" starttimestamp="1649862007572" timestamp="416389">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="191" _type="Insert" date="Wed Apr 13 11:07:06 EDT 2022" docASTNodeCount="151" docActiveCodeLength="990" docExpressionCount="85" docLength="1194" length="4" offset="394" starttimestamp="1649862007572" timestamp="418676">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="203" _type="PauseCommand" date="Wed Apr 13 11:07:13 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="425570">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3987]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="204" _type="InsertStringCommand" date="Wed Apr 13 11:07:13 EDT 2022" starttimestamp="1649862007572" timestamp="425577" timestamp2="425577">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="206" _type="InsertStringCommand" date="Wed Apr 13 11:07:13 EDT 2022" starttimestamp="1649862007572" timestamp="425918" timestamp2="425918">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="208" _type="InsertStringCommand" date="Wed Apr 13 11:07:13 EDT 2022" starttimestamp="1649862007572" timestamp="426045" timestamp2="426045">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="210" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="426762" timestamp2="426762">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="212" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="426878" timestamp2="426878">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="214" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="427002" timestamp2="427002">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="216" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="427094" timestamp2="427094">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="218" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="427240" timestamp2="427240">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="220" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="427763" timestamp2="427763">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="222" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="427970" timestamp2="427970">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="224" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="428028" timestamp2="428028">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="226" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="428098" timestamp2="428098">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="228" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="428265" timestamp2="428265">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="230" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="428378" timestamp2="428378">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="232" _type="InsertStringCommand" date="Wed Apr 13 11:07:16 EDT 2022" starttimestamp="1649862007572" timestamp="428631" timestamp2="428631">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="234" _type="InsertStringCommand" date="Wed Apr 13 11:07:16 EDT 2022" starttimestamp="1649862007572" timestamp="429417" timestamp2="429417">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="236" _type="InsertStringCommand" date="Wed Apr 13 11:07:17 EDT 2022" starttimestamp="1649862007572" timestamp="429512" timestamp2="429512">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="238" _type="InsertStringCommand" date="Wed Apr 13 11:07:17 EDT 2022" starttimestamp="1649862007572" timestamp="429617" timestamp2="429617">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="241" _type="PauseCommand" date="Wed Apr 13 11:07:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="430948">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1331]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="240" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="430948" timestamp2="430948">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="243" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="431077" timestamp2="431077">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="245" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="431179" timestamp2="431179">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="247" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="431291" timestamp2="431291">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="249" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="431375" timestamp2="431375">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="251" _type="InsertStringCommand" date="Wed Apr 13 11:07:19 EDT 2022" starttimestamp="1649862007572" timestamp="431500" timestamp2="431500">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="253" _type="InsertStringCommand" date="Wed Apr 13 11:07:19 EDT 2022" starttimestamp="1649862007572" timestamp="431583" timestamp2="431583">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="255" _type="InsertStringCommand" date="Wed Apr 13 11:07:19 EDT 2022" starttimestamp="1649862007572" timestamp="432160" timestamp2="432160">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="256" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:07:20 EDT 2022" starttimestamp="1649862007572" timestamp="432697" />
  <Command __id="257" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:07:20 EDT 2022" starttimestamp="1649862007572" timestamp="432792" />
  <Command __id="258" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:07:20 EDT 2022" starttimestamp="1649862007572" timestamp="432825" />
  <DocumentChange __id="202" _type="Insert" date="Wed Apr 13 11:07:13 EDT 2022" docASTNodeCount="151" docActiveCodeLength="994" docExpressionCount="85" docLength="1223" length="29" offset="398" repeat="26" starttimestamp="1649862007572" timestamp="425570" timestamp2="432154">
    <text><![CDATA[
		//TODO create nio manager]]></text>
  </DocumentChange>
  <Command __id="260" _type="PauseCommand" date="Wed Apr 13 11:07:23 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="435855">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3030]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="261" _type="SelectTextCommand" caretOffset="2191" date="Wed Apr 13 11:07:23 EDT 2022" end="2191" start="2108" starttimestamp="1649862007572" timestamp="436002" />
  <Command __id="259" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:07:23 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="435855">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import assignments.util.MiscAssignmentUtils;

import client.ClientRemoteInterfaceGIPC;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import inputport.nio.manager.listeners.WriteBoundedBufferListener;
import readThread.ReadThreadInterface;
import util.trace.factories.FactoryTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;

public class AnNIOManagerPrintServer implements NIOManagerPrintServer {

	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();

	public AnNIOManagerPrintServer(int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}

//	protected void setFactories() {
//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
//	}
	protected void setTracing() {
		FactoryTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
	}

	protected void initialize(int aServerPort) {
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		/*
		// Pop value off the bounded buffer
		ByteBuffer originalMessage = null;
		try {
			originalMessage = boundedBuffer.take();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		// Echo recieve message to all clients (except original message sender)
		for (SocketChannel socket : socketList) {
			if (!socket.equals(aSocketChannel)) {
				nioManager.write(socket, originalMessage, this);
			}
		}
		*/
		System.out.println("notifying reader!!");
		reader.notifyThread();
		System.out.println("thread has completed action and is now waiting");

	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){
		return boundedBuffer;
		
	}
	
	@Override
	public List<SocketChannel> getSocketList(){
		return socketList;
	}
	
	@Override
	public SocketChannel getSocketChannel() {
		return currentSocket;
	}

	@Override
	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {
		// TODO Auto-generated method stub
		String aMessageString = new String(aMessage.array());
		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);
	}

}
]]></snapshot>
  </Command>
  <Command __id="263" _type="PauseCommand" date="Wed Apr 13 11:07:56 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="468978">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[32976]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="264" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:07:56 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="469180" />
  <Command __id="262" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:07:56 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="468978">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import assignments.util.mainArgs.ServerArgsProcessor;

public class NIOManagerPrintServerLauncherNoFactory {
	public static void main(String[] args) {
		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));
	}

}]]></snapshot>
  </Command>
  <Command __id="266" _type="PauseCommand" date="Wed Apr 13 11:08:11 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="484301">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15121]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="267" _type="MoveCaretCommand" caretOffset="2577" date="Wed Apr 13 11:08:11 EDT 2022" docOffset="3869" starttimestamp="1649862007572" timestamp="484418" />
  <Command __id="265" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:11 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="484301">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;
import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import readThread.ReadThreadInterface;
import util.trace.factories.FactoryTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;

public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	protected SocketChannel socketChannel;
	protected Scanner scanner = new Scanner(System.in);
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;

	protected AnNIOManagerPrintClient(int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}

//	protected void setFactories() {
//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
//	}

	public void processInput() {
		scanner = new Scanner(System.in);
		while (true) {
			System.out.println("Enter a line of input to be printed remotely");
			String aNextLine = scanner.nextLine();
			// wrap writes to the buffer and then flips it
			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
			nioManager.write(socketChannel, aWriteMessage, this);
		}
	}

	protected void setTracing() {
		FactoryTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
	}

	protected void initialize(int aServerPort) {
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("Client Connect to Server");
	}

	@Override
	public void notConnected(SocketChannel theSocketChannel, Exception e) {

	}

	@Override
	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {
		System.out.println("client channel has written");
	}

	@Override
	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
				
	}

	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

}]]></snapshot>
  </Command>
  <Command __id="269" _type="PauseCommand" date="Wed Apr 13 11:08:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="489099">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4681]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="270" _type="SelectTextCommand" caretOffset="2191" date="Wed Apr 13 11:08:16 EDT 2022" end="2191" start="2108" starttimestamp="1649862007572" timestamp="489185" />
  <Command __id="268" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:16 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="489099">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="272" _type="PauseCommand" date="Wed Apr 13 11:08:17 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="490267">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1081]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="271" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:17 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="490266">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="273" _type="MoveCaretCommand" caretOffset="2577" date="Wed Apr 13 11:08:17 EDT 2022" docOffset="3869" starttimestamp="1649862007572" timestamp="490356" />
  <Command __id="275" _type="MoveCaretCommand" caretOffset="1464" date="Wed Apr 13 11:08:18 EDT 2022" docOffset="1711" starttimestamp="1649862007572" timestamp="491212" />
  <Command __id="274" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:18 EDT 2022" docASTNodeCount="225" docActiveCodeLength="1609" docExpressionCount="133" docLength="1877" projectName="A6" starttimestamp="1649862007572" timestamp="491107">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleServerReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import readThread.ReadThreadInterface;

public class exampleServerReadThread implements ReadThreadInterface{
	final NIOManagerPrintServer server;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleServerReadThread (final NIOManagerPrintServer aServer) {
		server = aServer;
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();
			List<SocketChannel> socketList = server.getSocketList();
			SocketChannel currentSocket = server.getSocketChannel();
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			// Echo recieve message to all clients (except original message sender)
			for (SocketChannel socket : socketList) {
				if (!socket.equals(currentSocket)) {
					nioManager.write(socket, originalMessage, server);
				}
			}
		
		}
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="277" _type="PauseCommand" date="Wed Apr 13 11:08:22 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="495329">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4117]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="278" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:08:22 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="495407" />
  <Command __id="276" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:22 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="495329">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="280" _type="PauseCommand" date="Wed Apr 13 11:08:34 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="507041">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11634]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="281" _type="MoveCaretCommand" caretOffset="2577" date="Wed Apr 13 11:08:34 EDT 2022" docOffset="3869" starttimestamp="1649862007572" timestamp="507121" />
  <Command __id="279" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:34 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="507041">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="283" _type="PauseCommand" date="Wed Apr 13 11:08:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="510217">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3096]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="284" _type="SelectTextCommand" caretOffset="2191" date="Wed Apr 13 11:08:37 EDT 2022" end="2191" start="2108" starttimestamp="1649862007572" timestamp="510294" />
  <Command __id="282" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:37 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="510217">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="286" _type="PauseCommand" date="Wed Apr 13 11:08:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="512377">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2083]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="287" _type="MoveCaretCommand" caretOffset="2577" date="Wed Apr 13 11:08:40 EDT 2022" docOffset="3869" starttimestamp="1649862007572" timestamp="512472" />
  <Command __id="285" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:39 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="512377">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="289" _type="PauseCommand" date="Wed Apr 13 11:08:41 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="514392">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1919]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="290" _type="SelectTextCommand" caretOffset="2191" date="Wed Apr 13 11:08:42 EDT 2022" end="2191" start="2108" starttimestamp="1649862007572" timestamp="514545" />
  <Command __id="292" _type="PauseCommand" date="Wed Apr 13 11:08:53 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="526072">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[11527]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="291" _type="SelectTextCommand" caretOffset="464" date="Wed Apr 13 11:08:53 EDT 2022" end="584" start="464" starttimestamp="1649862007572" timestamp="526072" />
  <Command __id="288" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:41 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="514391">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="294" _type="PauseCommand" date="Wed Apr 13 11:08:57 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="530171">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4099]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="295" _type="SelectTextCommand" caretOffset="5828" date="Wed Apr 13 11:08:57 EDT 2022" end="5876" start="5828" starttimestamp="1649862007572" timestamp="530261" />
  <Command __id="293" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:57 EDT 2022" docASTNodeCount="1234" docActiveCodeLength="8901" docExpressionCount="876" docLength="9957" projectName="A6" starttimestamp="1649862007572" timestamp="530171">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="297" _type="PauseCommand" date="Wed Apr 13 11:09:05 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="537659">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7398]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="298" _type="MoveCaretCommand" caretOffset="266" date="Wed Apr 13 11:09:05 EDT 2022" docOffset="427" starttimestamp="1649862007572" timestamp="537737" />
  <Command __id="300" _type="PauseCommand" date="Wed Apr 13 11:09:07 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="539684">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1947]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="299" _type="MoveCaretCommand" caretOffset="161" date="Wed Apr 13 11:09:07 EDT 2022" docOffset="322" starttimestamp="1649862007572" timestamp="539684" />
  <Command __id="302" _type="InsertStringCommand" date="Wed Apr 13 11:09:07 EDT 2022" starttimestamp="1649862007572" timestamp="539991" timestamp2="539991">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="304" _type="PasteCommand" date="Wed Apr 13 11:09:08 EDT 2022" starttimestamp="1649862007572" timestamp="540461" />
  <Command __id="306" _type="PauseCommand" date="Wed Apr 13 11:09:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="544423">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3962]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="305" _type="SelectTextCommand" caretOffset="70" date="Wed Apr 13 11:09:11 EDT 2022" end="92" start="70" starttimestamp="1649862007572" timestamp="544423" />
  <Command __id="307" _type="CopyCommand" date="Wed Apr 13 11:09:12 EDT 2022" starttimestamp="1649862007572" timestamp="544646" />
  <Command __id="309" _type="PauseCommand" date="Wed Apr 13 11:09:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="547706">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3059]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="308" _type="SelectTextCommand" caretOffset="171" date="Wed Apr 13 11:09:15 EDT 2022" end="194" start="171" starttimestamp="1649862007572" timestamp="547705" />
  <Command __id="311" _type="PasteCommand" date="Wed Apr 13 11:09:15 EDT 2022" starttimestamp="1649862007572" timestamp="547951" />
  <Command __id="313" _type="PauseCommand" date="Wed Apr 13 11:09:16 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="549021">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1070]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="312" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:09:16 EDT 2022" starttimestamp="1649862007572" timestamp="549021" />
  <Command __id="314" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:09:16 EDT 2022" starttimestamp="1649862007572" timestamp="549123" />
  <Command __id="315" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:09:16 EDT 2022" starttimestamp="1649862007572" timestamp="549163" />
  <Command __id="317" _type="PauseCommand" date="Wed Apr 13 11:09:19 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="551637">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2474]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="316" _type="MoveCaretCommand" caretOffset="282" date="Wed Apr 13 11:09:19 EDT 2022" docOffset="443" starttimestamp="1649862007572" timestamp="551637" />
  <Command __id="319" _type="InsertStringCommand" date="Wed Apr 13 11:09:19 EDT 2022" starttimestamp="1649862007572" timestamp="551918" timestamp2="551918">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="296" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:05 EDT 2022" docASTNodeCount="151" docActiveCodeLength="994" docExpressionCount="85" docLength="1223" projectName="A6" starttimestamp="1649862007572" timestamp="537659">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶"), Diff(INSERT,"	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		//TODO create nio manager¶	}¶	¶"), Diff(EQUAL,"	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	@Override
	protected void init(String[] args) {
		super.init(args);
		
		//TODO create nio manager
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="301" _type="Insert" date="Wed Apr 13 11:09:07 EDT 2022" docASTNodeCount="151" docActiveCodeLength="997" docExpressionCount="85" docLength="1226" length="3" offset="322" starttimestamp="1649862007572" timestamp="539985">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="303" _type="Replace" date="Wed Apr 13 11:09:08 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1097" docExpressionCount="92" docLength="1345" endLine="10" insertionLength="120" int_docASTNodeCount="151" int_docActiveCodeLength="996" int_docExpressionCount="85" int_docLength="1225" length="1" offset="324" startLine="10" starttimestamp="1649862007572" timestamp="540453">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public AnNIOManagerPrintServer(int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="310" _type="Replace" date="Wed Apr 13 11:09:15 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1096" docExpressionCount="92" docLength="1344" endLine="10" insertionLength="22" int_docASTNodeCount="164" int_docActiveCodeLength="1074" int_docExpressionCount="91" int_docLength="1322" length="23" offset="332" startLine="10" starttimestamp="1649862007572" timestamp="547943">
    <deletedText><![CDATA[AnNIOManagerPrintServer]]></deletedText>
    <insertedText><![CDATA[ServerRemoteObjectNIO ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="318" _type="Insert" date="Wed Apr 13 11:09:19 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1099" docExpressionCount="92" docLength="1347" length="3" offset="443" starttimestamp="1649862007572" timestamp="551913">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="321" _type="PauseCommand" date="Wed Apr 13 11:09:35 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="567854">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[15936]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="322" _type="SelectTextCommand" caretOffset="644" date="Wed Apr 13 11:09:35 EDT 2022" end="644" start="23" starttimestamp="1649862007572" timestamp="567956" />
  <Command __id="320" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:35 EDT 2022" docASTNodeCount="88" docActiveCodeLength="644" docExpressionCount="64" docLength="644" projectName="A6" starttimestamp="1649862007572" timestamp="567854">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

public interface NIOManagerPrintServer extends SocketChannelAcceptListener, SocketChannelReadListener, SocketChannelWriteListener {

	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	List<SocketChannel> getSocketList();

	SocketChannel getSocketChannel();

}]]></snapshot>
  </Command>
  <Command __id="324" _type="PauseCommand" date="Wed Apr 13 11:09:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="570269">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2313]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="325" _type="MoveCaretCommand" caretOffset="285" date="Wed Apr 13 11:09:37 EDT 2022" docOffset="446" starttimestamp="1649862007572" timestamp="570384" />
  <Command __id="323" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:37 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1099" docExpressionCount="92" docLength="1347" projectName="A6" starttimestamp="1649862007572" timestamp="570269">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶"), Diff(INSERT,"	public ServerRemoteObjectNIO (int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶	¶"), Diff(EQUAL,"	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		//TODO create nio manager¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	public ServerRemoteObjectNIO (int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		
		//TODO create nio manager
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="327" _type="PauseCommand" date="Wed Apr 13 11:09:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="574600">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4216]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="328" _type="SelectTextCommand" caretOffset="464" date="Wed Apr 13 11:09:42 EDT 2022" end="584" start="464" starttimestamp="1649862007572" timestamp="574676" />
  <Command __id="330" _type="PauseCommand" date="Wed Apr 13 11:09:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="577962">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3286]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="329" _type="MoveCaretCommand" caretOffset="552" date="Wed Apr 13 11:09:45 EDT 2022" docOffset="1713" starttimestamp="1649862007572" timestamp="577962" />
  <Command __id="331" _type="MoveCaretCommand" caretOffset="552" date="Wed Apr 13 11:09:45 EDT 2022" docOffset="1713" starttimestamp="1649862007572" timestamp="577962" />
  <Command __id="326" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:42 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="574600">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="333" _type="PauseCommand" date="Wed Apr 13 11:09:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="581764">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3802]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="334" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:09:49 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="581859" />
  <Command __id="332" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:49 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="581764">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="336" _type="PauseCommand" date="Wed Apr 13 11:10:18 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="611066">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[29207]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="337" _type="MoveCaretCommand" caretOffset="552" date="Wed Apr 13 11:10:18 EDT 2022" docOffset="1713" starttimestamp="1649862007572" timestamp="611146" />
  <Command __id="335" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:10:18 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="611066">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="339" _type="PauseCommand" date="Wed Apr 13 11:10:27 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="619891">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8745]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="340" _type="MoveCaretCommand" caretOffset="285" date="Wed Apr 13 11:10:27 EDT 2022" docOffset="446" starttimestamp="1649862007572" timestamp="619985" />
  <Command __id="342" _type="PauseCommand" date="Wed Apr 13 11:10:38 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="631084">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11099]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="341" _type="SelectTextCommand" caretOffset="163" date="Wed Apr 13 11:10:38 EDT 2022" end="282" start="163" starttimestamp="1649862007572" timestamp="631084" />
  <Command __id="343" _type="SelectTextCommand" caretOffset="163" date="Wed Apr 13 11:10:38 EDT 2022" end="282" start="163" starttimestamp="1649862007572" timestamp="631084" />
  <Command __id="345" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:10:39 EDT 2022" starttimestamp="1649862007572" timestamp="631732" />
  <Command __id="346" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:10:39 EDT 2022" starttimestamp="1649862007572" timestamp="631732" />
  <Command __id="348" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Apr 13 11:10:40 EDT 2022" starttimestamp="1649862007572" timestamp="632585" />
  <Command __id="350" _type="PauseCommand" date="Wed Apr 13 11:10:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="634919">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2334]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="349" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:10:42 EDT 2022" starttimestamp="1649862007572" timestamp="634919" />
  <Command __id="351" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:10:42 EDT 2022" starttimestamp="1649862007572" timestamp="635008" />
  <Command __id="352" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:10:42 EDT 2022" starttimestamp="1649862007572" timestamp="635047" />
  <Command __id="338" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:10:27 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1099" docExpressionCount="92" docLength="1347" projectName="A6" starttimestamp="1649862007572" timestamp="619891">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶	public ServerRemoteObjectNIO (int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		//TODO create nio manager¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="344" _type="Delete" date="Wed Apr 13 11:10:39 EDT 2022" docASTNodeCount="151" docActiveCodeLength="997" docExpressionCount="85" docLength="1226" endLine="15" length="121" offset="324" repeat="2" startLine="10" starttimestamp="1649862007572" timestamp="631726" timestamp2="632572">
    <text><![CDATA[	public ServerRemoteObjectNIO (int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}
]]></text>
  </DocumentChange>
  <Command __id="354" _type="PauseCommand" date="Wed Apr 13 11:10:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="637000">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1953]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="355" _type="SelectTextCommand" caretOffset="5828" date="Wed Apr 13 11:10:44 EDT 2022" end="5876" start="5828" starttimestamp="1649862007572" timestamp="637101" />
  <Command __id="357" _type="PauseCommand" date="Wed Apr 13 11:10:46 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="638432">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1331]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="356" _type="MoveCaretCommand" caretOffset="5878" date="Wed Apr 13 11:10:46 EDT 2022" docOffset="7534" starttimestamp="1649862007572" timestamp="638432" />
  <Command __id="353" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:10:44 EDT 2022" docASTNodeCount="1234" docActiveCodeLength="8901" docExpressionCount="876" docLength="9957" projectName="A6" starttimestamp="1649862007572" timestamp="637000">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="359" _type="PauseCommand" date="Wed Apr 13 11:11:47 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="699465">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[61033]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="360" _type="MoveCaretCommand" caretOffset="552" date="Wed Apr 13 11:11:47 EDT 2022" docOffset="1713" starttimestamp="1649862007572" timestamp="699546" />
  <Command __id="362" _type="PauseCommand" date="Wed Apr 13 11:11:59 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="711762">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12216]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="361" _type="SelectTextCommand" caretOffset="1357" date="Wed Apr 13 11:11:59 EDT 2022" end="1427" start="1357" starttimestamp="1649862007572" timestamp="711762" />
  <Command __id="363" _type="SelectTextCommand" caretOffset="1357" date="Wed Apr 13 11:11:59 EDT 2022" end="1427" start="1357" starttimestamp="1649862007572" timestamp="711762" />
  <Command __id="365" _type="PauseCommand" date="Wed Apr 13 11:12:06 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="719112">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7349]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="364" _type="SelectTextCommand" caretOffset="883" date="Wed Apr 13 11:12:06 EDT 2022" end="1648" start="883" starttimestamp="1649862007572" timestamp="719111" />
  <Command __id="366" _type="SelectTextCommand" caretOffset="883" date="Wed Apr 13 11:12:06 EDT 2022" end="1648" start="883" starttimestamp="1649862007572" timestamp="719112" />
  <Command __id="367" _type="CopyCommand" date="Wed Apr 13 11:12:07 EDT 2022" starttimestamp="1649862007572" timestamp="719638" />
  <Command __id="358" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:11:47 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="699465">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="369" _type="PauseCommand" date="Wed Apr 13 11:12:16 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="728886">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[9248]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="370" _type="MoveCaretCommand" caretOffset="163" date="Wed Apr 13 11:12:16 EDT 2022" docOffset="324" starttimestamp="1649862007572" timestamp="728964" />
  <Command __id="372" _type="PauseCommand" date="Wed Apr 13 11:12:19 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="731799">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2835]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="371" _type="SelectTextCommand" caretOffset="244" date="Wed Apr 13 11:12:19 EDT 2022" end="269" start="244" starttimestamp="1649862007572" timestamp="731799" />
  <Command __id="373" _type="SelectTextCommand" caretOffset="244" date="Wed Apr 13 11:12:19 EDT 2022" end="269" start="244" starttimestamp="1649862007572" timestamp="731800" />
  <Command __id="385" _type="PasteCommand" date="Wed Apr 13 11:12:20 EDT 2022" starttimestamp="1649862007572" timestamp="732628" />
  <Command __id="387" _type="PauseCommand" date="Wed Apr 13 11:12:39 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="752242">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[19614]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="386" _type="MoveCaretCommand" caretOffset="600" date="Wed Apr 13 11:12:39 EDT 2022" docOffset="600" starttimestamp="1649862007572" timestamp="752242" />
  <Command __id="388" _type="MoveCaretCommand" caretOffset="600" date="Wed Apr 13 11:12:39 EDT 2022" docOffset="600" starttimestamp="1649862007572" timestamp="752242" />
  <Command __id="390" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="752930" timestamp2="752930">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="391" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="752930" timestamp2="752930">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="393" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753023" timestamp2="753023">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="394" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753023" timestamp2="753023">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="396" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753091" timestamp2="753091">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="397" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753091" timestamp2="753091">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="399" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753187" timestamp2="753187">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="400" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753187" timestamp2="753187">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="402" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753287" timestamp2="753287">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="403" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753287" timestamp2="753287">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="404" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:12:40 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="753292" />
  <Command __id="408" _type="PauseCommand" date="Wed Apr 13 11:12:42 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="754703">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1411]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="407" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:12:42 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="754703" />
  <Command __id="410" _type="InsertStringCommand" date="Wed Apr 13 11:12:42 EDT 2022" starttimestamp="1649862007572" timestamp="754788" timestamp2="754788">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="411" _type="InsertStringCommand" date="Wed Apr 13 11:12:42 EDT 2022" starttimestamp="1649862007572" timestamp="754788" timestamp2="754788">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="413" _type="PauseCommand" date="Wed Apr 13 11:12:43 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="756342">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1554]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="412" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:12:43 EDT 2022" starttimestamp="1649862007572" timestamp="756342" />
  <Command __id="414" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:12:44 EDT 2022" starttimestamp="1649862007572" timestamp="756443" />
  <Command __id="415" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:12:44 EDT 2022" starttimestamp="1649862007572" timestamp="756481" />
  <Command __id="416" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:12:44 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="756548" />
  <Command __id="418" _type="PauseCommand" date="Wed Apr 13 11:12:50 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="762865">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[6317]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="417" _type="SelectTextCommand" caretOffset="600" date="Wed Apr 13 11:12:50 EDT 2022" end="623" start="600" starttimestamp="1649862007572" timestamp="762865" />
  <Command __id="419" _type="SelectTextCommand" caretOffset="600" date="Wed Apr 13 11:12:50 EDT 2022" end="623" start="600" starttimestamp="1649862007572" timestamp="762866" />
  <Command __id="421" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:12:50 EDT 2022" starttimestamp="1649862007572" timestamp="763396" />
  <Command __id="422" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:12:50 EDT 2022" starttimestamp="1649862007572" timestamp="763396" />
  <Command __id="368" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:12:16 EDT 2022" docASTNodeCount="151" docActiveCodeLength="997" docExpressionCount="85" docLength="1226" projectName="A6" starttimestamp="1649862007572" timestamp="728886">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶"), Diff(DELETE,"	public ServerRemoteObjectNIO (int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶"), Diff(EQUAL,"	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		//TODO create nio manager¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	
	@Override
	protected void init(String[] args) {
		super.init(args);
		
		//TODO create nio manager
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="374" _type="Replace" date="Wed Apr 13 11:12:20 EDT 2022" docASTNodeCount="221" docActiveCodeLength="1630" docExpressionCount="133" docLength="1966" endLine="15" insertionLength="767" int_docASTNodeCount="151" int_docActiveCodeLength="995" int_docExpressionCount="85" int_docLength="1199" length="27" offset="403" startLine="15" starttimestamp="1649862007572" timestamp="732505">
    <deletedText><![CDATA[		//TODO create nio manager]]></deletedText>
    <insertedText><![CDATA[		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="375" _type="Insert" date="Wed Apr 13 11:12:20 EDT 2022" docASTNodeCount="235" docActiveCodeLength="1724" docExpressionCount="145" docLength="2060" length="94" offset="214" repeat="4" starttimestamp="1649862007572" timestamp="732585" timestamp2="732589">
    <text><![CDATA[

import nioExample.exampleServerReadThread;
import util.trace.port.nio.SocketChannelBound;]]></text>
  </DocumentChange>
  <DocumentChange __id="379" _type="Insert" date="Wed Apr 13 11:12:20 EDT 2022" docASTNodeCount="243" docActiveCodeLength="1764" docExpressionCount="152" docLength="2100" length="40" offset="53" repeat="2" starttimestamp="1649862007572" timestamp="732590" timestamp2="732592">
    <text><![CDATA[
import java.nio.channels.SelectionKey;]]></text>
  </DocumentChange>
  <DocumentChange __id="381" _type="Insert" date="Wed Apr 13 11:12:20 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1829" docExpressionCount="162" docLength="2165" length="65" offset="26" repeat="4" starttimestamp="1649862007572" timestamp="732593" timestamp2="732597">
    <text><![CDATA[import java.io.IOException;
import java.net.InetSocketAddress;
]]></text>
  </DocumentChange>
  <DocumentChange __id="389" _type="Insert" date="Wed Apr 13 11:12:40 EDT 2022" docASTNodeCount="261" docActiveCodeLength="1836" docExpressionCount="167" docLength="2172" length="7" offset="600" repeat="7" starttimestamp="1649862007572" timestamp="752923" timestamp2="753869">
    <text><![CDATA[this.pr]]></text>
  </DocumentChange>
  <DocumentChange __id="409" _type="Replace" date="Wed Apr 13 11:12:42 EDT 2022" docASTNodeCount="260" docActiveCodeLength="1852" docExpressionCount="166" docLength="2188" endLine="20" insertionLength="18" int_docASTNodeCount="255" int_docActiveCodeLength="1834" int_docExpressionCount="162" int_docLength="2170" length="2" offset="605" startLine="20" starttimestamp="1649862007572" timestamp="754707">
    <deletedText><![CDATA[pr]]></deletedText>
    <insertedText><![CDATA[processArgs(args);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="420" _type="Delete" date="Wed Apr 13 11:12:50 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1829" docExpressionCount="162" docLength="2165" endLine="20" length="23" offset="600" startLine="20" starttimestamp="1649862007572" timestamp="763389">
    <text><![CDATA[this.processArgs(args);]]></text>
  </DocumentChange>
  <Command __id="424" _type="PauseCommand" date="Wed Apr 13 11:12:55 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="767743">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4347]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="425" _type="SelectTextCommand" caretOffset="883" date="Wed Apr 13 11:12:55 EDT 2022" end="1648" start="883" starttimestamp="1649862007572" timestamp="767828" />
  <Command __id="423" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:12:55 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="767743">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="427" _type="PauseCommand" date="Wed Apr 13 11:12:56 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="768874">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1046]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="428" _type="MoveCaretCommand" caretOffset="1464" date="Wed Apr 13 11:12:56 EDT 2022" docOffset="1711" starttimestamp="1649862007572" timestamp="768946" />
  <Command __id="426" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:12:56 EDT 2022" docASTNodeCount="225" docActiveCodeLength="1609" docExpressionCount="133" docLength="1877" projectName="A6" starttimestamp="1649862007572" timestamp="768874">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleServerReadThread implements ReadThreadInterface{¶	final NIOManagerPrintServer server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleServerReadThread (final NIOManagerPrintServer aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="430" _type="PauseCommand" date="Wed Apr 13 11:12:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="771079">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2133]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="431" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:12:58 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="771155" />
  <Command __id="433" _type="PauseCommand" date="Wed Apr 13 11:13:03 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="775606">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4451]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="432" _type="SelectTextCommand" caretOffset="208" date="Wed Apr 13 11:13:03 EDT 2022" end="250" start="208" starttimestamp="1649862007572" timestamp="775606" />
  <Command __id="434" _type="CopyCommand" date="Wed Apr 13 11:13:03 EDT 2022" starttimestamp="1649862007572" timestamp="775754" />
  <Command __id="429" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:12:58 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="771079">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="436" _type="PauseCommand" date="Wed Apr 13 11:13:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="779276">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3522]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="437" _type="MoveCaretCommand" caretOffset="600" date="Wed Apr 13 11:13:06 EDT 2022" docOffset="600" starttimestamp="1649862007572" timestamp="779353" />
  <Command __id="435" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:13:06 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1829" docExpressionCount="162" docLength="2165" projectName="A6" starttimestamp="1649862007572" timestamp="779276">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java."), Diff(DELETE,"nio.ByteBuffer"), Diff(INSERT,"io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey"), Diff(EQUAL,";¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(INSERT,"import nioExample.exampleServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶"), Diff(EQUAL,"public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		"), Diff(DELETE,"//TODO create nio manager"), Diff(INSERT,"try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();"), Diff(EQUAL,"¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import nioExample.exampleServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	
	@Override
	protected void init(String[] args) {
		super.init(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="439" _type="PauseCommand" date="Wed Apr 13 11:13:10 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="782553">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3200]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="438" _type="Insert" date="Wed Apr 13 11:13:10 EDT 2022" docASTNodeCount="257" docActiveCodeLength="1834" docExpressionCount="163" docLength="2170" length="5" offset="600" repeat="2" starttimestamp="1649862007572" timestamp="782553" timestamp2="782775">
    <text><![CDATA[
		s]]></text>
  </DocumentChange>
  <Command __id="440" _type="InsertStringCommand" date="Wed Apr 13 11:13:10 EDT 2022" starttimestamp="1649862007572" timestamp="782560" timestamp2="782560">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="441" _type="InsertStringCommand" date="Wed Apr 13 11:13:10 EDT 2022" starttimestamp="1649862007572" timestamp="782560" timestamp2="782560">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="443" _type="InsertStringCommand" date="Wed Apr 13 11:13:10 EDT 2022" starttimestamp="1649862007572" timestamp="782781" timestamp2="782781">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="444" _type="InsertStringCommand" date="Wed Apr 13 11:13:10 EDT 2022" starttimestamp="1649862007572" timestamp="782781" timestamp2="782781">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="445" _type="Delete" date="Wed Apr 13 11:13:11 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1833" docExpressionCount="162" docLength="2169" endLine="21" length="1" offset="604" startLine="21" starttimestamp="1649862007572" timestamp="783527">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="446" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="783530" />
  <Command __id="447" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="783531" />
  <DocumentChange __id="448" _type="Insert" date="Wed Apr 13 11:13:11 EDT 2022" docASTNodeCount="257" docActiveCodeLength="1835" docExpressionCount="163" docLength="2171" length="2" offset="604" repeat="2" starttimestamp="1649862007572" timestamp="783644" timestamp2="784137">
    <text><![CDATA[as]]></text>
  </DocumentChange>
  <Command __id="449" _type="InsertStringCommand" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="783649" timestamp2="783649">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="450" _type="InsertStringCommand" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="783649" timestamp2="783649">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="452" _type="InsertStringCommand" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="784143" timestamp2="784143">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="453" _type="InsertStringCommand" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="784143" timestamp2="784143">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="454" _type="Delete" date="Wed Apr 13 11:13:12 EDT 2022" docASTNodeCount="257" docActiveCodeLength="1834" docExpressionCount="163" docLength="2170" endLine="21" length="1" offset="605" startLine="21" starttimestamp="1649862007572" timestamp="784496">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="455" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784501" />
  <Command __id="456" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784501" />
  <Command __id="458" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784657" timestamp2="784657">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="459" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784657" timestamp2="784657">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="461" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784871" timestamp2="784871">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="462" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784871" timestamp2="784871">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="464" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784938" timestamp2="784938">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="465" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784938" timestamp2="784938">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="467" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785141" timestamp2="785141">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="468" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785141" timestamp2="785141">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="470" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785284" timestamp2="785284">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="471" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785284" timestamp2="785284">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="473" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785398" timestamp2="785398">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="474" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785398" timestamp2="785398">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="476" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="785717" timestamp2="785717">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="477" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="785717" timestamp2="785717">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="479" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="785884" timestamp2="785884">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="480" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="785884" timestamp2="785884">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="482" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786014" timestamp2="786014">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="483" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786014" timestamp2="786014">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="485" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786209" timestamp2="786209">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="486" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786209" timestamp2="786209">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="488" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786318" timestamp2="786318">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="489" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786318" timestamp2="786318">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="491" _type="InsertStringCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786542" timestamp2="786542">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="492" _type="InsertStringCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786542" timestamp2="786542">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="494" _type="InsertStringCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786680" timestamp2="786680">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="495" _type="InsertStringCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786681" timestamp2="786681">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="501" _type="PasteCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786968" />
  <Command __id="503" _type="InsertStringCommand" date="Wed Apr 13 11:13:15 EDT 2022" starttimestamp="1649862007572" timestamp="787528" timestamp2="787528">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="504" _type="InsertStringCommand" date="Wed Apr 13 11:13:15 EDT 2022" starttimestamp="1649862007572" timestamp="787528" timestamp2="787528">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="506" _type="PauseCommand" date="Wed Apr 13 11:13:16 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="788532">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1004]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="505" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:13:16 EDT 2022" starttimestamp="1649862007572" timestamp="788532" />
  <Command __id="507" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:16 EDT 2022" starttimestamp="1649862007572" timestamp="788624" />
  <Command __id="508" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:16 EDT 2022" starttimestamp="1649862007572" timestamp="788650" />
  <Command __id="510" _type="PauseCommand" date="Wed Apr 13 11:13:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="790514">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1863]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="509" _type="MoveCaretCommand" caretOffset="659" date="Wed Apr 13 11:13:18 EDT 2022" docOffset="659" starttimestamp="1649862007572" timestamp="790513" />
  <Command __id="511" _type="MoveCaretCommand" caretOffset="659" date="Wed Apr 13 11:13:18 EDT 2022" docOffset="659" starttimestamp="1649862007572" timestamp="790514" />
  <Command __id="513" _type="InsertStringCommand" date="Wed Apr 13 11:13:18 EDT 2022" starttimestamp="1649862007572" timestamp="790797" timestamp2="790797">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="514" _type="InsertStringCommand" date="Wed Apr 13 11:13:18 EDT 2022" starttimestamp="1649862007572" timestamp="790797" timestamp2="790797">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="516" _type="InsertStringCommand" date="Wed Apr 13 11:13:18 EDT 2022" starttimestamp="1649862007572" timestamp="790908" timestamp2="790908">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="517" _type="InsertStringCommand" date="Wed Apr 13 11:13:18 EDT 2022" starttimestamp="1649862007572" timestamp="790908" timestamp2="790908">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="519" _type="InsertStringCommand" date="Wed Apr 13 11:13:19 EDT 2022" starttimestamp="1649862007572" timestamp="791694" timestamp2="791694">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="520" _type="InsertStringCommand" date="Wed Apr 13 11:13:19 EDT 2022" starttimestamp="1649862007572" timestamp="791694" timestamp2="791694">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="522" _type="InsertStringCommand" date="Wed Apr 13 11:13:19 EDT 2022" starttimestamp="1649862007572" timestamp="791704" timestamp2="791704">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="523" _type="InsertStringCommand" date="Wed Apr 13 11:13:19 EDT 2022" starttimestamp="1649862007572" timestamp="791704" timestamp2="791704">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="525" _type="PauseCommand" date="Wed Apr 13 11:13:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="793104">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1400]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="524" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:13:20 EDT 2022" starttimestamp="1649862007572" timestamp="793104" />
  <Command __id="526" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:20 EDT 2022" starttimestamp="1649862007572" timestamp="793194" />
  <Command __id="527" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:20 EDT 2022" starttimestamp="1649862007572" timestamp="793222" />
  <DocumentChange __id="457" _type="Insert" date="Wed Apr 13 11:13:12 EDT 2022" docASTNodeCount="262" docActiveCodeLength="1889" docExpressionCount="168" docLength="2225" length="55" offset="605" repeat="14" starttimestamp="1649862007572" timestamp="784653" timestamp2="786895">
    <text><![CDATA[ServerPort = ServerArgsProcessor.getNIOServerPort(args)]]></text>
  </DocumentChange>
  <DocumentChange __id="497" _type="Delete" date="Wed Apr 13 11:13:14 EDT 2022" docASTNodeCount="262" docActiveCodeLength="1885" docExpressionCount="168" docLength="2221" endLine="11" length="4" offset="319" startLine="9" starttimestamp="1649862007572" timestamp="786924">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="498" _type="Insert" date="Wed Apr 13 11:13:14 EDT 2022" docASTNodeCount="270" docActiveCodeLength="1944" docExpressionCount="175" docLength="2280" length="59" offset="319" repeat="3" starttimestamp="1649862007572" timestamp="786926" timestamp2="786929">
    <text><![CDATA[

import assignments.util.mainArgs.ServerArgsProcessor;
]]></text>
  </DocumentChange>
  <DocumentChange __id="502" _type="Insert" date="Wed Apr 13 11:13:15 EDT 2022" docASTNodeCount="270" docActiveCodeLength="1945" docExpressionCount="175" docLength="2281" length="1" offset="715" starttimestamp="1649862007572" timestamp="787522">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="512" _type="Insert" date="Wed Apr 13 11:13:18 EDT 2022" docASTNodeCount="271" docActiveCodeLength="1949" docExpressionCount="174" docLength="2285" length="4" offset="659" repeat="4" starttimestamp="1649862007572" timestamp="790791" timestamp2="791700">
    <text><![CDATA[int ]]></text>
  </DocumentChange>
  <Command __id="529" _type="PauseCommand" date="Wed Apr 13 11:13:26 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="798810">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5588]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="530" _type="SelectTextCommand" caretOffset="883" date="Wed Apr 13 11:13:26 EDT 2022" end="1648" start="883" starttimestamp="1649862007572" timestamp="798906" />
  <Command __id="532" _type="PauseCommand" date="Wed Apr 13 11:13:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="800091">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1185]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="531" _type="MoveCaretCommand" caretOffset="907" date="Wed Apr 13 11:13:27 EDT 2022" docOffset="2068" starttimestamp="1649862007572" timestamp="800091" />
  <Command __id="533" _type="MoveCaretCommand" caretOffset="907" date="Wed Apr 13 11:13:27 EDT 2022" docOffset="2068" starttimestamp="1649862007572" timestamp="800091" />
  <Command __id="535" _type="PauseCommand" date="Wed Apr 13 11:13:32 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="805313">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5222]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="534" _type="SelectTextCommand" caretOffset="393" date="Wed Apr 13 11:13:32 EDT 2022" end="460" start="393" starttimestamp="1649862007572" timestamp="805313" />
  <Command __id="536" _type="SelectTextCommand" caretOffset="393" date="Wed Apr 13 11:13:32 EDT 2022" end="460" start="393" starttimestamp="1649862007572" timestamp="805313" />
  <Command __id="537" _type="CopyCommand" date="Wed Apr 13 11:13:33 EDT 2022" starttimestamp="1649862007572" timestamp="805539" />
  <Command __id="528" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:13:26 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="798810">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="539" _type="PauseCommand" date="Wed Apr 13 11:13:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="807142">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1603]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="540" _type="MoveCaretCommand" caretOffset="663" date="Wed Apr 13 11:13:34 EDT 2022" docOffset="663" starttimestamp="1649862007572" timestamp="807223" />
  <Command __id="542" _type="PauseCommand" date="Wed Apr 13 11:13:40 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="812448">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5225]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="541" _type="MoveCaretCommand" caretOffset="576" date="Wed Apr 13 11:13:40 EDT 2022" docOffset="576" starttimestamp="1649862007572" timestamp="812448" />
  <Command __id="543" _type="MoveCaretCommand" caretOffset="576" date="Wed Apr 13 11:13:40 EDT 2022" docOffset="576" starttimestamp="1649862007572" timestamp="812448" />
  <Command __id="545" _type="InsertStringCommand" date="Wed Apr 13 11:13:40 EDT 2022" starttimestamp="1649862007572" timestamp="812843" timestamp2="812843">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="546" _type="InsertStringCommand" date="Wed Apr 13 11:13:40 EDT 2022" starttimestamp="1649862007572" timestamp="812843" timestamp2="812843">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="552" _type="PasteCommand" date="Wed Apr 13 11:13:41 EDT 2022" starttimestamp="1649862007572" timestamp="813555" />
  <Command __id="553" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:13:41 EDT 2022" starttimestamp="1649862007572" timestamp="813941" />
  <Command __id="554" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:41 EDT 2022" starttimestamp="1649862007572" timestamp="814037" />
  <Command __id="555" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:41 EDT 2022" starttimestamp="1649862007572" timestamp="814087" />
  <Command __id="557" _type="PauseCommand" date="Wed Apr 13 11:13:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="821630">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7543]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="556" _type="SelectTextCommand" caretOffset="818" date="Wed Apr 13 11:13:49 EDT 2022" end="879" start="818" starttimestamp="1649862007572" timestamp="821630" />
  <Command __id="558" _type="SelectTextCommand" caretOffset="818" date="Wed Apr 13 11:13:49 EDT 2022" end="879" start="818" starttimestamp="1649862007572" timestamp="821630" />
  <Command __id="560" _type="CutCommand" date="Wed Apr 13 11:13:49 EDT 2022" starttimestamp="1649862007572" timestamp="822074" />
  <Command __id="562" _type="PauseCommand" date="Wed Apr 13 11:13:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="823185">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[1111]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="561" _type="MoveCaretCommand" caretOffset="738" date="Wed Apr 13 11:13:50 EDT 2022" docOffset="738" starttimestamp="1649862007572" timestamp="823185" />
  <Command __id="563" _type="MoveCaretCommand" caretOffset="738" date="Wed Apr 13 11:13:50 EDT 2022" docOffset="738" starttimestamp="1649862007572" timestamp="823185" />
  <Command __id="565" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823463" timestamp2="823463">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="566" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823463" timestamp2="823463">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="568" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823570" timestamp2="823570">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="569" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823570" timestamp2="823570">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="571" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823625" timestamp2="823625">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="572" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823625" timestamp2="823625">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="574" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823744" timestamp2="823744">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="575" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823744" timestamp2="823744">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="577" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823839" timestamp2="823839">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="578" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823839" timestamp2="823839">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="580" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823923" timestamp2="823923">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="581" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823923" timestamp2="823923">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="583" _type="PasteCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="824229" />
  <Command __id="585" _type="InsertStringCommand" date="Wed Apr 13 11:13:52 EDT 2022" starttimestamp="1649862007572" timestamp="824453" timestamp2="824453">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="586" _type="InsertStringCommand" date="Wed Apr 13 11:13:52 EDT 2022" starttimestamp="1649862007572" timestamp="824453" timestamp2="824453">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="588" _type="PauseCommand" date="Wed Apr 13 11:13:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="825481">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1028]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="587" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:13:53 EDT 2022" starttimestamp="1649862007572" timestamp="825481" />
  <Command __id="589" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:53 EDT 2022" starttimestamp="1649862007572" timestamp="825595" />
  <Command __id="590" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:53 EDT 2022" starttimestamp="1649862007572" timestamp="825641" />
  <Command __id="592" _type="PauseCommand" date="Wed Apr 13 11:13:59 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="832329">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6688]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="591" _type="SelectTextCommand" caretOffset="760" date="Wed Apr 13 11:13:59 EDT 2022" end="805" start="760" starttimestamp="1649862007572" timestamp="832329" />
  <Command __id="593" _type="SelectTextCommand" caretOffset="760" date="Wed Apr 13 11:13:59 EDT 2022" end="805" start="760" starttimestamp="1649862007572" timestamp="832329" />
  <Command __id="595" _type="CutCommand" date="Wed Apr 13 11:14:00 EDT 2022" starttimestamp="1649862007572" timestamp="832745" />
  <Command __id="597" _type="PauseCommand" date="Wed Apr 13 11:14:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="833970">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[1225]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="596" _type="MoveCaretCommand" caretOffset="839" date="Wed Apr 13 11:14:01 EDT 2022" docOffset="839" starttimestamp="1649862007572" timestamp="833970" />
  <Command __id="598" _type="MoveCaretCommand" caretOffset="839" date="Wed Apr 13 11:14:01 EDT 2022" docOffset="839" starttimestamp="1649862007572" timestamp="833970" />
  <Command __id="600" _type="PasteCommand" date="Wed Apr 13 11:14:02 EDT 2022" starttimestamp="1649862007572" timestamp="834438" />
  <Command __id="602" _type="PauseCommand" date="Wed Apr 13 11:14:05 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="837777">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3339]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="601" _type="SelectTextCommand" caretOffset="739" date="Wed Apr 13 11:14:05 EDT 2022" end="744" start="739" starttimestamp="1649862007572" timestamp="837777" />
  <Command __id="603" _type="SelectTextCommand" caretOffset="739" date="Wed Apr 13 11:14:05 EDT 2022" end="744" start="739" starttimestamp="1649862007572" timestamp="837778" />
  <Command __id="605" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:05 EDT 2022" starttimestamp="1649862007572" timestamp="838038" />
  <Command __id="606" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:05 EDT 2022" starttimestamp="1649862007572" timestamp="838039" />
  <Command __id="608" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:05 EDT 2022" starttimestamp="1649862007572" timestamp="838227" />
  <Command __id="609" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:05 EDT 2022" starttimestamp="1649862007572" timestamp="838227" />
  <Command __id="611" _type="PauseCommand" date="Wed Apr 13 11:14:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="839346">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1119]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="610" _type="MoveCaretCommand" caretOffset="686" date="Wed Apr 13 11:14:06 EDT 2022" docOffset="686" starttimestamp="1649862007572" timestamp="839346" />
  <Command __id="612" _type="MoveCaretCommand" caretOffset="686" date="Wed Apr 13 11:14:06 EDT 2022" docOffset="686" starttimestamp="1649862007572" timestamp="839346" />
  <Command __id="613" _type="MoveCaretCommand" caretOffset="754" date="Wed Apr 13 11:14:07 EDT 2022" docOffset="754" starttimestamp="1649862007572" timestamp="839782" />
  <Command __id="614" _type="MoveCaretCommand" caretOffset="754" date="Wed Apr 13 11:14:07 EDT 2022" docOffset="754" starttimestamp="1649862007572" timestamp="839782" />
  <Command __id="616" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:07 EDT 2022" starttimestamp="1649862007572" timestamp="840418" />
  <Command __id="617" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:07 EDT 2022" starttimestamp="1649862007572" timestamp="840418" />
  <Command __id="619" _type="InsertStringCommand" date="Wed Apr 13 11:14:08 EDT 2022" starttimestamp="1649862007572" timestamp="840678" timestamp2="840678">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="620" _type="InsertStringCommand" date="Wed Apr 13 11:14:08 EDT 2022" starttimestamp="1649862007572" timestamp="840678" timestamp2="840678">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="622" _type="PauseCommand" date="Wed Apr 13 11:14:09 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="842334">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1656]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="621" _type="MoveCaretCommand" caretOffset="833" date="Wed Apr 13 11:14:09 EDT 2022" docOffset="833" starttimestamp="1649862007572" timestamp="842334" />
  <Command __id="623" _type="MoveCaretCommand" caretOffset="833" date="Wed Apr 13 11:14:09 EDT 2022" docOffset="833" starttimestamp="1649862007572" timestamp="842334" />
  <Command __id="625" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="842506" timestamp2="842506">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="626" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="842506" timestamp2="842506">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="628" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="843019" timestamp2="843019">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="629" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="843019" timestamp2="843019">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="631" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="843193" timestamp2="843193">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="632" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="843193" timestamp2="843193">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="634" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="843664" timestamp2="843664">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="635" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="843664" timestamp2="843664">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="637" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="843886" timestamp2="843886">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="638" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="843886" timestamp2="843886">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="640" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="844013" timestamp2="844013">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="641" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="844013" timestamp2="844013">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="643" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="844134" timestamp2="844134">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="644" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="844134" timestamp2="844134">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="646" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844431" timestamp2="844431">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="647" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844431" timestamp2="844431">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="649" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844530" timestamp2="844530">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="650" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844530" timestamp2="844530">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="652" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844638" timestamp2="844638">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="653" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844638" timestamp2="844638">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="655" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844814" timestamp2="844814">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="656" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844815" timestamp2="844815">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="658" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="845138" timestamp2="845138">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="659" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="845138" timestamp2="845138">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="661" _type="PauseCommand" date="Wed Apr 13 11:14:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="846667">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1529]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="660" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:14:14 EDT 2022" starttimestamp="1649862007572" timestamp="846667" />
  <Command __id="662" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:14 EDT 2022" starttimestamp="1649862007572" timestamp="846768" />
  <Command __id="663" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:14 EDT 2022" starttimestamp="1649862007572" timestamp="846807" />
  <Command __id="665" _type="PauseCommand" date="Wed Apr 13 11:14:33 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="865813">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[19006]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="664" _type="SelectTextCommand" caretOffset="1500" date="Wed Apr 13 11:14:33 EDT 2022" end="1507" start="1500" starttimestamp="1649862007572" timestamp="865813" />
  <Command __id="666" _type="SelectTextCommand" caretOffset="1500" date="Wed Apr 13 11:14:33 EDT 2022" end="1507" start="1500" starttimestamp="1649862007572" timestamp="865813" />
  <Command __id="538" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:13:34 EDT 2022" docASTNodeCount="271" docActiveCodeLength="1949" docExpressionCount="174" docLength="2285" projectName="A6" starttimestamp="1649862007572" timestamp="807142">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(INSERT,"import assignments.util.mainArgs.ServerArgsProcessor;¶"), Diff(EQUAL,"import nioExample.exampleServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		"), Diff(INSERT,"int aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		"), Diff(EQUAL,"try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import nioExample.exampleServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	
	@Override
	protected void init(String[] args) {
		super.init(args);
		
		int aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="544" _type="Insert" date="Wed Apr 13 11:13:40 EDT 2022" docASTNodeCount="271" docActiveCodeLength="1950" docExpressionCount="174" docLength="2286" length="1" offset="576" starttimestamp="1649862007572" timestamp="812841">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="547" _type="Replace" date="Wed Apr 13 11:13:41 EDT 2022" docASTNodeCount="280" docActiveCodeLength="2017" docExpressionCount="179" docLength="2353" endLine="16" insertionLength="68" int_docASTNodeCount="271" int_docActiveCodeLength="1949" int_docExpressionCount="174" int_docLength="2285" length="1" offset="576" startLine="16" starttimestamp="1649862007572" timestamp="813467">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected NIOManager nioManager = NIOManagerFactory.getSingleton();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="548" _type="Insert" date="Wed Apr 13 11:13:41 EDT 2022" docASTNodeCount="296" docActiveCodeLength="2108" docExpressionCount="193" docLength="2444" length="91" offset="376" repeat="4" starttimestamp="1649862007572" timestamp="813516" timestamp2="813521">
    <text><![CDATA[
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;]]></text>
  </DocumentChange>
  <DocumentChange __id="559" _type="Delete" date="Wed Apr 13 11:13:49 EDT 2022" docASTNodeCount="288" docActiveCodeLength="2047" docExpressionCount="188" docLength="2383" endLine="24" length="61" offset="818" startLine="24" starttimestamp="1649862007572" timestamp="822061">
    <text><![CDATA[int aServerPort = ServerArgsProcessor.getNIOServerPort(args);]]></text>
  </DocumentChange>
  <DocumentChange __id="564" _type="Insert" date="Wed Apr 13 11:13:51 EDT 2022" docASTNodeCount="297" docActiveCodeLength="2117" docExpressionCount="193" docLength="2453" length="70" offset="738" repeat="8" starttimestamp="1649862007572" timestamp="823457" timestamp2="824447">
    <text><![CDATA[final int aServerPort = ServerArgsProcessor.getNIOServerPort(args);
	]]></text>
  </DocumentChange>
  <DocumentChange __id="594" _type="Delete" date="Wed Apr 13 11:14:00 EDT 2022" docASTNodeCount="289" docActiveCodeLength="2072" docExpressionCount="188" docLength="2408" endLine="19" length="45" offset="760" startLine="19" starttimestamp="1649862007572" timestamp="832732">
    <text><![CDATA[= ServerArgsProcessor.getNIOServerPort(args);]]></text>
  </DocumentChange>
  <DocumentChange __id="599" _type="Replace" date="Wed Apr 13 11:14:02 EDT 2022" docASTNodeCount="294" docActiveCodeLength="2117" docExpressionCount="192" docLength="2453" endLine="24" insertionLength="47" int_docASTNodeCount="289" int_docActiveCodeLength="2070" int_docExpressionCount="188" int_docLength="2406" length="2" offset="837" startLine="24" starttimestamp="1649862007572" timestamp="834434">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		= ServerArgsProcessor.getNIOServerPort(args);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="604" _type="Delete" date="Wed Apr 13 11:14:05 EDT 2022" docASTNodeCount="293" docActiveCodeLength="2111" docExpressionCount="192" docLength="2447" endLine="19" length="6" offset="738" repeat="2" startLine="19" starttimestamp="1649862007572" timestamp="838035" timestamp2="838224">
    <text><![CDATA[final ]]></text>
  </DocumentChange>
  <DocumentChange __id="615" _type="Delete" date="Wed Apr 13 11:14:07 EDT 2022" docASTNodeCount="293" docActiveCodeLength="2110" docExpressionCount="192" docLength="2446" endLine="19" length="1" offset="753" startLine="19" starttimestamp="1649862007572" timestamp="840416">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="618" _type="Insert" date="Wed Apr 13 11:14:08 EDT 2022" docASTNodeCount="297" docActiveCodeLength="2111" docExpressionCount="193" docLength="2447" length="1" offset="753" starttimestamp="1649862007572" timestamp="840672">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="624" _type="Insert" date="Wed Apr 13 11:14:10 EDT 2022" docASTNodeCount="299" docActiveCodeLength="2123" docExpressionCount="195" docLength="2459" length="12" offset="833" repeat="12" starttimestamp="1649862007572" timestamp="842499" timestamp2="845132">
    <text><![CDATA[aServerPort ]]></text>
  </DocumentChange>
  <Command __id="668" _type="PauseCommand" date="Wed Apr 13 11:14:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="866870">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1057]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="669" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:34 EDT 2022" starttimestamp="1649862007572" timestamp="866877" />
  <Command __id="670" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:34 EDT 2022" starttimestamp="1649862007572" timestamp="866877" />
  <Command __id="672" _type="PauseCommand" date="Wed Apr 13 11:14:36 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="868752">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1875]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="671" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:14:36 EDT 2022" starttimestamp="1649862007572" timestamp="868752" />
  <Command __id="673" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:36 EDT 2022" starttimestamp="1649862007572" timestamp="868851" />
  <Command __id="674" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:36 EDT 2022" starttimestamp="1649862007572" timestamp="868894" />
  <Command __id="676" _type="PauseCommand" date="Wed Apr 13 11:14:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="871648">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2754]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="675" _type="ShellCommand" date="Wed Apr 13 11:14:39 EDT 2022" starttimestamp="1649862007572" timestamp="871648" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="677" _type="ShellCommand" date="Wed Apr 13 11:14:39 EDT 2022" starttimestamp="1649862007572" timestamp="871801" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="681" _type="PauseCommand" date="Wed Apr 13 11:14:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="874600">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2771]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="680" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:14:42 EDT 2022" starttimestamp="1649862007572" timestamp="874600" />
  <Command __id="682" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:42 EDT 2022" starttimestamp="1649862007572" timestamp="874701" />
  <Command __id="683" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:42 EDT 2022" starttimestamp="1649862007572" timestamp="874745" />
  <DocumentChange __id="667" _type="Delete" date="Wed Apr 13 11:14:34 EDT 2022" docASTNodeCount="299" docActiveCodeLength="2116" docExpressionCount="195" docLength="2452" endLine="40" length="7" offset="1500" startLine="40" starttimestamp="1649862007572" timestamp="866870">
    <text><![CDATA[example]]></text>
  </DocumentChange>
  <DocumentChange __id="678" _type="Insert" date="Wed Apr 13 11:14:39 EDT 2022" docASTNodeCount="303" docActiveCodeLength="2153" docExpressionCount="198" docLength="2489" length="37" offset="511" repeat="2" starttimestamp="1649862007572" timestamp="871829" timestamp2="871830">
    <text><![CDATA[
import readThread.ServerReadThread;]]></text>
  </DocumentChange>
  <Command __id="685" _type="PauseCommand" date="Wed Apr 13 11:14:53 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="886088">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[11343]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="686" _type="SelectTextCommand" caretOffset="393" date="Wed Apr 13 11:14:53 EDT 2022" end="460" start="393" starttimestamp="1649862007572" timestamp="886171" />
  <Command __id="688" _type="PauseCommand" date="Wed Apr 13 11:15:04 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="896469">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[10298]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="687" _type="SelectTextCommand" caretOffset="130" date="Wed Apr 13 11:15:04 EDT 2022" end="387" start="130" starttimestamp="1649862007572" timestamp="896469" />
  <Command __id="689" _type="SelectTextCommand" caretOffset="130" date="Wed Apr 13 11:15:04 EDT 2022" end="387" start="130" starttimestamp="1649862007572" timestamp="896469" />
  <Command __id="690" _type="CopyCommand" date="Wed Apr 13 11:15:04 EDT 2022" starttimestamp="1649862007572" timestamp="896777" />
  <Command __id="684" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:14:53 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="886088">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="692" _type="PauseCommand" date="Wed Apr 13 11:15:05 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="897847">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1070]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="693" _type="MoveCaretCommand" caretOffset="1537" date="Wed Apr 13 11:15:05 EDT 2022" docOffset="1537" starttimestamp="1649862007572" timestamp="897933" />
  <Command __id="695" _type="PauseCommand" date="Wed Apr 13 11:15:07 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="899532">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1599]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="694" _type="MoveCaretCommand" caretOffset="791" date="Wed Apr 13 11:15:07 EDT 2022" docOffset="791" starttimestamp="1649862007572" timestamp="899532" />
  <Command __id="696" _type="MoveCaretCommand" caretOffset="791" date="Wed Apr 13 11:15:07 EDT 2022" docOffset="791" starttimestamp="1649862007572" timestamp="899532" />
  <Command __id="698" _type="InsertStringCommand" date="Wed Apr 13 11:15:07 EDT 2022" starttimestamp="1649862007572" timestamp="899793" timestamp2="899793">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="699" _type="InsertStringCommand" date="Wed Apr 13 11:15:07 EDT 2022" starttimestamp="1649862007572" timestamp="899793" timestamp2="899793">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="701" _type="InsertStringCommand" date="Wed Apr 13 11:15:07 EDT 2022" starttimestamp="1649862007572" timestamp="900126" timestamp2="900126">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="702" _type="InsertStringCommand" date="Wed Apr 13 11:15:07 EDT 2022" starttimestamp="1649862007572" timestamp="900126" timestamp2="900126">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="708" _type="PasteCommand" date="Wed Apr 13 11:15:08 EDT 2022" starttimestamp="1649862007572" timestamp="900449" />
  <Command __id="710" _type="PauseCommand" date="Wed Apr 13 11:15:13 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="906203">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[5754]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="709" _type="SelectTextCommand" caretOffset="1024" date="Wed Apr 13 11:15:13 EDT 2022" end="1042" start="1024" starttimestamp="1649862007572" timestamp="906203" />
  <Command __id="711" _type="SelectTextCommand" caretOffset="1024" date="Wed Apr 13 11:15:13 EDT 2022" end="1042" start="1024" starttimestamp="1649862007572" timestamp="906204" />
  <Command __id="713" _type="PauseCommand" date="Wed Apr 13 11:15:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="909240">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3036]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="712" _type="MoveCaretCommand" caretOffset="1041" date="Wed Apr 13 11:15:16 EDT 2022" docOffset="1041" starttimestamp="1649862007572" timestamp="909240" />
  <Command __id="714" _type="MoveCaretCommand" caretOffset="1041" date="Wed Apr 13 11:15:16 EDT 2022" docOffset="1041" starttimestamp="1649862007572" timestamp="909241" />
  <Command __id="716" _type="PauseCommand" date="Wed Apr 13 11:15:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="911090">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1849]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="715" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:15:18 EDT 2022" starttimestamp="1649862007572" timestamp="911090" />
  <Command __id="717" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:15:18 EDT 2022" starttimestamp="1649862007572" timestamp="911181" />
  <Command __id="718" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:15:18 EDT 2022" starttimestamp="1649862007572" timestamp="911232" />
  <Command __id="691" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:15:05 EDT 2022" docASTNodeCount="303" docActiveCodeLength="2153" docExpressionCount="198" docLength="2489" projectName="A6" starttimestamp="1649862007572" timestamp="897847">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import "), Diff(DELETE,"nioExample.example"), Diff(INSERT,"inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread."), Diff(EQUAL,"ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶"), Diff(INSERT,"	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;"), Diff(EQUAL,"¶"), Diff(DELETE,""), Diff(EQUAL,"	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		"), Diff(DELETE,"¶		int "), Diff(EQUAL,"aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new "), Diff(DELETE,"example"), Diff(EQUAL,"ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="697" _type="Insert" date="Wed Apr 13 11:15:07 EDT 2022" docASTNodeCount="303" docActiveCodeLength="2159" docExpressionCount="198" docLength="2495" length="6" offset="791" repeat="2" starttimestamp="1649862007572" timestamp="899786" timestamp2="900120">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="703" _type="Replace" date="Wed Apr 13 11:15:07 EDT 2022" docASTNodeCount="350" docActiveCodeLength="2416" docExpressionCount="220" docLength="2752" endLine="22" insertionLength="258" int_docASTNodeCount="303" int_docActiveCodeLength="2158" int_docExpressionCount="198" int_docLength="2494" length="1" offset="796" startLine="22" starttimestamp="1649862007572" timestamp="900355">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="704" _type="Insert" date="Wed Apr 13 11:15:07 EDT 2022" docASTNodeCount="354" docActiveCodeLength="2456" docExpressionCount="223" docLength="2792" length="40" offset="511" repeat="2" starttimestamp="1649862007572" timestamp="900410" timestamp2="900411">
    <text><![CDATA[
import readThread.ReadThreadInterface;]]></text>
  </DocumentChange>
  <DocumentChange __id="706" _type="Insert" date="Wed Apr 13 11:15:07 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" length="29" offset="246" repeat="2" starttimestamp="1649862007572" timestamp="900412" timestamp2="900415">
    <text><![CDATA[
import java.util.ArrayList;]]></text>
  </DocumentChange>
  <Command __id="720" _type="PauseCommand" date="Wed Apr 13 11:15:53 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="945699">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[34467]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="721" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:15:53 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="945909" />
  <Command __id="719" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:15:53 EDT 2022" docASTNodeCount="80" docActiveCodeLength="540" docExpressionCount="51" docLength="650" projectName="A6" starttimestamp="1649862007572" timestamp="945699">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})
public class ServerReadThread implements ReadThreadInterface{

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}


}
]]></snapshot>
  </Command>
  <Command __id="723" _type="PauseCommand" date="Wed Apr 13 11:15:58 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="951425">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5516]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="724" _type="MoveCaretCommand" caretOffset="1464" date="Wed Apr 13 11:15:59 EDT 2022" docOffset="1711" starttimestamp="1649862007572" timestamp="951599" />
  <Command __id="726" _type="PauseCommand" date="Wed Apr 13 11:16:07 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="959454">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7855]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="725" _type="SelectTextCommand" caretOffset="125" date="Wed Apr 13 11:16:07 EDT 2022" end="230" start="125" starttimestamp="1649862007572" timestamp="959454" />
  <Command __id="728" _type="PauseCommand" date="Wed Apr 13 11:16:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="960561">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1107]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="727" _type="CopyCommand" date="Wed Apr 13 11:16:08 EDT 2022" starttimestamp="1649862007572" timestamp="960561" />
  <Command __id="730" _type="PauseCommand" date="Wed Apr 13 11:16:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="963524">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2963]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="729" _type="SelectTextCommand" caretOffset="125" date="Wed Apr 13 11:16:11 EDT 2022" end="331" start="125" starttimestamp="1649862007572" timestamp="963524" />
  <Command __id="731" _type="CopyCommand" date="Wed Apr 13 11:16:11 EDT 2022" starttimestamp="1649862007572" timestamp="963694" />
  <Command __id="722" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:15:58 EDT 2022" docASTNodeCount="225" docActiveCodeLength="1609" docExpressionCount="133" docLength="1877" projectName="A6" starttimestamp="1649862007572" timestamp="951425">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleServerReadThread implements ReadThreadInterface{¶	final NIOManagerPrintServer server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleServerReadThread (final NIOManagerPrintServer aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="733" _type="PauseCommand" date="Wed Apr 13 11:16:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="965184">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1489]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="734" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:16:12 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="965259" />
  <Command __id="736" _type="PauseCommand" date="Wed Apr 13 11:16:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="966969">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1710]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="735" _type="MoveCaretCommand" caretOffset="183" date="Wed Apr 13 11:16:14 EDT 2022" docOffset="292" starttimestamp="1649862007572" timestamp="966969" />
  <Command __id="738" _type="InsertStringCommand" date="Wed Apr 13 11:16:14 EDT 2022" starttimestamp="1649862007572" timestamp="967211" timestamp2="967211">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="740" _type="InsertStringCommand" date="Wed Apr 13 11:16:15 EDT 2022" starttimestamp="1649862007572" timestamp="967564" timestamp2="967564">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="750" _type="PasteCommand" date="Wed Apr 13 11:16:15 EDT 2022" starttimestamp="1649862007572" timestamp="967887" />
  <Command __id="752" _type="PauseCommand" date="Wed Apr 13 11:16:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="971325">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3438]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="751" _type="SelectTextCommand" caretOffset="195" date="Wed Apr 13 11:16:18 EDT 2022" end="216" start="195" starttimestamp="1649862007572" timestamp="971325" />
  <Command __id="732" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:16:12 EDT 2022" docASTNodeCount="80" docActiveCodeLength="540" docExpressionCount="51" docLength="650" projectName="A6" starttimestamp="1649862007572" timestamp="965183">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="737" _type="Insert" date="Wed Apr 13 11:16:14 EDT 2022" docASTNodeCount="80" docActiveCodeLength="546" docExpressionCount="51" docLength="656" length="6" offset="292" repeat="2" starttimestamp="1649862007572" timestamp="967204" timestamp2="967558">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="741" _type="Replace" date="Wed Apr 13 11:16:15 EDT 2022" docASTNodeCount="108" docActiveCodeLength="752" docExpressionCount="64" docLength="862" endLine="12" insertionLength="207" int_docASTNodeCount="80" int_docActiveCodeLength="545" int_docExpressionCount="51" int_docLength="655" length="1" offset="297" startLine="12" starttimestamp="1649862007572" timestamp="967796">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	final NIOManagerPrintServer server;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleServerReadThread (final NIOManagerPrintServer aServer) {
		server = aServer;
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="742" _type="Delete" date="Wed Apr 13 11:16:15 EDT 2022" docASTNodeCount="108" docActiveCodeLength="748" docExpressionCount="64" docLength="858" endLine="5" length="4" offset="91" startLine="3" starttimestamp="1649862007572" timestamp="967842">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="743" _type="Insert" date="Wed Apr 13 11:16:15 EDT 2022" docASTNodeCount="128" docActiveCodeLength="885" docExpressionCount="81" docLength="995" length="137" offset="91" repeat="7" starttimestamp="1649862007572" timestamp="967843" timestamp2="967850">
    <text><![CDATA[

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.NIOManagerPrintServer;
]]></text>
  </DocumentChange>
  <Command __id="754" _type="PauseCommand" date="Wed Apr 13 11:16:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="972527">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1202]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="753" _type="Replace" date="Wed Apr 13 11:16:20 EDT 2022" docASTNodeCount="128" docActiveCodeLength="865" docExpressionCount="81" docLength="975" endLine="15" insertionLength="1" int_docASTNodeCount="122" int_docActiveCodeLength="864" int_docExpressionCount="79" int_docLength="974" length="21" offset="437" startLine="15" starttimestamp="1649862007572" timestamp="972527">
    <deletedText><![CDATA[NIOManagerPrintServer]]></deletedText>
    <insertedText><![CDATA[S]]></insertedText>
  </DocumentChange>
  <Command __id="755" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="972533" timestamp2="972533">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="757" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="972728" timestamp2="972728">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="759" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="972829" timestamp2="972829">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="761" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="973092" timestamp2="973092">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="763" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="973234" timestamp2="973234">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="765" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="973358" timestamp2="973358">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="767" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="973748" timestamp2="973748">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="769" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="973907" timestamp2="973907">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="771" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="974048" timestamp2="974048">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="773" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="974143" timestamp2="974143">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="775" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="974199" timestamp2="974199">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="777" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="974309" timestamp2="974309">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="779" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="974574" timestamp2="974574">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="781" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="974769" timestamp2="974769">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="783" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="974864" timestamp2="974864">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="785" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="974975" timestamp2="974975">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="787" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="975165" timestamp2="975165">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="789" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="975370" timestamp2="975370">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="756" _type="Insert" date="Wed Apr 13 11:16:20 EDT 2022" docASTNodeCount="128" docActiveCodeLength="882" docExpressionCount="81" docLength="992" length="17" offset="438" repeat="17" starttimestamp="1649862007572" timestamp="972720" timestamp2="975364">
    <text><![CDATA[erverRemoteObject]]></text>
  </DocumentChange>
  <Command __id="791" _type="PauseCommand" date="Wed Apr 13 11:16:25 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="977688">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2318]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="792" _type="InsertStringCommand" date="Wed Apr 13 11:16:25 EDT 2022" starttimestamp="1649862007572" timestamp="977694" timestamp2="977694">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="794" _type="InsertStringCommand" date="Wed Apr 13 11:16:25 EDT 2022" starttimestamp="1649862007572" timestamp="977804" timestamp2="977804">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="796" _type="InsertStringCommand" date="Wed Apr 13 11:16:25 EDT 2022" starttimestamp="1649862007572" timestamp="977869" timestamp2="977869">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="798" _type="PauseCommand" date="Wed Apr 13 11:16:31 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="983855">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5986]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="797" _type="ShellCommand" date="Wed Apr 13 11:16:31 EDT 2022" starttimestamp="1649862007572" timestamp="983855" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="799" _type="ShellCommand" date="Wed Apr 13 11:16:31 EDT 2022" starttimestamp="1649862007572" timestamp="983918" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="803" _type="PauseCommand" date="Wed Apr 13 11:16:32 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="985319">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1388]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="802" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:16:32 EDT 2022" starttimestamp="1649862007572" timestamp="985319" />
  <Command __id="804" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:16:32 EDT 2022" starttimestamp="1649862007572" timestamp="985408" />
  <Command __id="805" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:16:33 EDT 2022" starttimestamp="1649862007572" timestamp="985462" />
  <Command __id="807" _type="PauseCommand" date="Wed Apr 13 11:16:35 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="988147">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2685]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <DocumentChange __id="790" _type="Insert" date="Wed Apr 13 11:16:25 EDT 2022" docASTNodeCount="128" docActiveCodeLength="885" docExpressionCount="81" docLength="995" length="3" offset="455" repeat="3" starttimestamp="1649862007572" timestamp="977688" timestamp2="977863">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <DocumentChange __id="800" _type="Insert" date="Wed Apr 13 11:16:31 EDT 2022" docASTNodeCount="134" docActiveCodeLength="930" docExpressionCount="86" docLength="1040" length="45" offset="226" repeat="2" starttimestamp="1649862007572" timestamp="983931" timestamp2="983933">
    <text><![CDATA[
import server.remote.ServerRemoteObjectNIO;]]></text>
  </DocumentChange>
  <Command __id="806" _type="SelectTextCommand" caretOffset="308" date="Wed Apr 13 11:16:35 EDT 2022" end="314" start="308" starttimestamp="1649862007572" timestamp="988147" />
  <Command __id="809" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:16:36 EDT 2022" starttimestamp="1649862007572" timestamp="988478" />
  <Command __id="812" _type="PauseCommand" date="Wed Apr 13 11:16:37 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="989498">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1020]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="811" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:16:37 EDT 2022" starttimestamp="1649862007572" timestamp="989498" />
  <Command __id="814" _type="PauseCommand" date="Wed Apr 13 11:16:41 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="993784">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4286]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="813" _type="SelectTextCommand" caretOffset="195" date="Wed Apr 13 11:16:41 EDT 2022" end="216" start="195" starttimestamp="1649862007572" timestamp="993784" />
  <Command __id="815" _type="CopyCommand" date="Wed Apr 13 11:16:41 EDT 2022" starttimestamp="1649862007572" timestamp="994019" />
  <Command __id="817" _type="PauseCommand" date="Wed Apr 13 11:16:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="996277">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2258]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="816" _type="SelectTextCommand" caretOffset="331" date="Wed Apr 13 11:16:43 EDT 2022" end="352" start="331" starttimestamp="1649862007572" timestamp="996277" />
  <Command __id="819" _type="PasteCommand" date="Wed Apr 13 11:16:43 EDT 2022" starttimestamp="1649862007572" timestamp="996409" />
  <Command __id="821" _type="PauseCommand" date="Wed Apr 13 11:16:45 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="997976">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1567]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="820" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:16:45 EDT 2022" starttimestamp="1649862007572" timestamp="997976" />
  <Command __id="822" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:16:45 EDT 2022" starttimestamp="1649862007572" timestamp="998076" />
  <Command __id="823" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:16:45 EDT 2022" starttimestamp="1649862007572" timestamp="998125" />
  <DocumentChange __id="808" _type="Delete" date="Wed Apr 13 11:16:36 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" endLine="19" length="7" offset="594" repeat="2" startLine="19" starttimestamp="1649862007572" timestamp="988471" timestamp2="989495">
    <text><![CDATA[example]]></text>
  </DocumentChange>
  <DocumentChange __id="818" _type="Replace" date="Wed Apr 13 11:16:43 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" endLine="19" insertionLength="21" int_docASTNodeCount="132" int_docActiveCodeLength="902" int_docExpressionCount="84" int_docLength="1012" length="21" offset="618" startLine="19" starttimestamp="1649862007572" timestamp="996404">
    <deletedText><![CDATA[NIOManagerPrintServer]]></deletedText>
    <insertedText><![CDATA[ServerRemoteObjectNIO]]></insertedText>
  </DocumentChange>
  <Command __id="825" _type="PauseCommand" date="Wed Apr 13 11:16:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1001676">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3551]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="826" _type="SelectTextCommand" caretOffset="208" date="Wed Apr 13 11:16:49 EDT 2022" end="250" start="208" starttimestamp="1649862007572" timestamp="1001770" />
  <Command __id="824" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:16:49 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="1001676">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="828" _type="PauseCommand" date="Wed Apr 13 11:16:51 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1003806">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2036]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="829" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 11:16:51 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="1003955" />
  <Command __id="827" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:16:51 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="1003806">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶"), Diff(EQUAL,"import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{"), Diff(INSERT,"¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}"), Diff(EQUAL,"¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.NIOManagerPrintServer;
import server.remote.ServerRemoteObjectNIO;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})
public class ServerReadThread implements ReadThreadInterface{
	
	final ServerRemoteObjectNIO server;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ServerReadThread (final ServerRemoteObjectNIO aServer) {
		server = aServer;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}


}
]]></snapshot>
  </Command>
  <Command __id="831" _type="PauseCommand" date="Wed Apr 13 11:16:56 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1008570">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4615]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="832" _type="MoveCaretCommand" caretOffset="1041" date="Wed Apr 13 11:16:56 EDT 2022" docOffset="1041" starttimestamp="1649862007572" timestamp="1008653" />
  <Command __id="830" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:16:56 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" projectName="A6" starttimestamp="1649862007572" timestamp="1008570">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶"), Diff(INSERT,"import java.util.ArrayList;¶"), Diff(EQUAL,"import java.util.List;¶"), Diff(DELETE,""), Diff(EQUAL,"import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶"), Diff(INSERT,"import readThread.ReadThreadInterface;¶"), Diff(EQUAL,"import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶"), Diff(DELETE,""), Diff(EQUAL,"	int aServerPort;¶	¶	"), Diff(INSERT,"List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	"), Diff(EQUAL,"@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="834" _type="PauseCommand" date="Wed Apr 13 11:17:24 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="1037152">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[28499]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="835" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:17:24 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1037344" />
  <Command __id="833" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:17:24 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="1037152">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <Command __id="837" _type="PauseCommand" date="Wed Apr 13 11:17:32 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1044494">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7150]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="838" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:17:32 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1044694" />
  <Command __id="836" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:17:32 EDT 2022" docASTNodeCount="1200" docActiveCodeLength="9207" docExpressionCount="857" docLength="10076" projectName="A6" starttimestamp="1649862007572" timestamp="1044494">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientConfigure.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteObjectRMI;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.Tracer;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PerformanceExperimentEnded;
import util.trace.port.PerformanceExperimentStarted;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.CLIENT_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO})
public class ClientConfigure  extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI {
	
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	public void atomicBroadcast(boolean fake) {
		return;
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC((ClientRemoteInterfaceGIPC) this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI((ClientRemoteInterfaceGIPC) this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, (ClientRemoteInterfaceGIPC) this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}

}
]]></snapshot>
  </Command>
  <Command __id="840" _type="PauseCommand" date="Wed Apr 13 11:17:37 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1050394">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5700]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="841" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:17:38 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1050512" />
  <Command __id="843" _type="PauseCommand" date="Wed Apr 13 11:18:03 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="1075828">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[25316]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="844" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:09 EDT 2022" starttimestamp="1649862007572" timestamp="1082285" />
  <Command __id="846" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:09 EDT 2022" starttimestamp="1649862007572" timestamp="1082301" />
  <Command __id="847" _type="ShellCommand" date="Wed Apr 13 11:18:09 EDT 2022" starttimestamp="1649862007572" timestamp="1082373" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="849" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:18:10 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1082962" />
  <Command __id="851" _type="PauseCommand" date="Wed Apr 13 11:18:23 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1095542">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12580]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="839" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:17:37 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="1050394">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="848" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:18:10 EDT 2022" docASTNodeCount="6" docActiveCodeLength="62" docExpressionCount="2" docLength="62" projectName="A6" starttimestamp="1649862007572" timestamp="1082780">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

public class ClientRemoteObjectNIO {

}
]]></snapshot>
  </Command>
  <Command __id="850" _type="MoveCaretCommand" caretOffset="54" date="Wed Apr 13 11:18:23 EDT 2022" docOffset="54" starttimestamp="1649862007572" timestamp="1095542" />
  <Command __id="853" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1095781" timestamp2="1095781">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="855" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1095978" timestamp2="1095978">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="857" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1096173" timestamp2="1096173">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="859" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1096257" timestamp2="1096257">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="861" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1096391" timestamp2="1096391">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="863" _type="InsertStringCommand" date="Wed Apr 13 11:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="1096468" timestamp2="1096468">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="865" _type="InsertStringCommand" date="Wed Apr 13 11:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="1096545" timestamp2="1096545">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="867" _type="InsertStringCommand" date="Wed Apr 13 11:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="1096764" timestamp2="1096764">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="870" _type="PauseCommand" date="Wed Apr 13 11:18:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1097913">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1149]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="869" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1097913" timestamp2="1097913">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="872" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1098059" timestamp2="1098059">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="874" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1098175" timestamp2="1098175">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="876" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1098260" timestamp2="1098260">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="878" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1098385" timestamp2="1098385">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="880" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1098463" timestamp2="1098463">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="882" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1098764" timestamp2="1098764">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="884" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1098961" timestamp2="1098961">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="886" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1099235" timestamp2="1099235">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="888" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1099341" timestamp2="1099341">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="890" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1099401" timestamp2="1099401">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="892" _type="InsertStringCommand" date="Wed Apr 13 11:18:27 EDT 2022" starttimestamp="1649862007572" timestamp="1099561" timestamp2="1099561">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="894" _type="InsertStringCommand" date="Wed Apr 13 11:18:27 EDT 2022" starttimestamp="1649862007572" timestamp="1099884" timestamp2="1099884">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="896" _type="InsertStringCommand" date="Wed Apr 13 11:18:27 EDT 2022" starttimestamp="1649862007572" timestamp="1100191" timestamp2="1100191">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="898" _type="InsertStringCommand" date="Wed Apr 13 11:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="1100432" timestamp2="1100432">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="900" _type="InsertStringCommand" date="Wed Apr 13 11:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="1100536" timestamp2="1100536">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="902" _type="InsertStringCommand" date="Wed Apr 13 11:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="1100729" timestamp2="1100729">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="904" _type="InsertStringCommand" date="Wed Apr 13 11:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="1100913" timestamp2="1100913">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="906" _type="PauseCommand" date="Wed Apr 13 11:18:29 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1102070">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1157]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="905" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:18:29 EDT 2022" starttimestamp="1649862007572" timestamp="1102070" />
  <Command __id="907" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:29 EDT 2022" starttimestamp="1649862007572" timestamp="1102166" />
  <Command __id="908" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:29 EDT 2022" starttimestamp="1649862007572" timestamp="1102194" />
  <DocumentChange __id="852" _type="Insert" date="Wed Apr 13 11:18:23 EDT 2022" docASTNodeCount="8" docActiveCodeLength="88" docExpressionCount="3" docLength="88" length="26" offset="54" repeat="26" starttimestamp="1649862007572" timestamp="1095777" timestamp2="1100910">
    <text><![CDATA[extends ClientRemoteObject]]></text>
  </DocumentChange>
  <Command __id="910" _type="PauseCommand" date="Wed Apr 13 11:18:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1105071">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2877]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="911" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:18:32 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1105246" />
  <Command __id="913" _type="PauseCommand" date="Wed Apr 13 11:18:34 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1107413">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2167]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="912" _type="MoveCaretCommand" caretOffset="327" date="Wed Apr 13 11:18:34 EDT 2022" docOffset="362" starttimestamp="1649862007572" timestamp="1107413" />
  <Command __id="915" _type="InsertStringCommand" date="Wed Apr 13 11:18:35 EDT 2022" starttimestamp="1649862007572" timestamp="1107979" timestamp2="1107979">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="917" _type="InsertStringCommand" date="Wed Apr 13 11:18:35 EDT 2022" starttimestamp="1649862007572" timestamp="1108014" timestamp2="1108014">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="919" _type="InsertStringCommand" date="Wed Apr 13 11:18:35 EDT 2022" starttimestamp="1649862007572" timestamp="1108064" timestamp2="1108064">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="921" _type="PauseCommand" date="Wed Apr 13 11:18:36 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1109112">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1048]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="920" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:18:36 EDT 2022" starttimestamp="1649862007572" timestamp="1109112" />
  <Command __id="922" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:36 EDT 2022" starttimestamp="1649862007572" timestamp="1109207" />
  <Command __id="923" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:36 EDT 2022" starttimestamp="1649862007572" timestamp="1109225" />
  <Command __id="909" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:18:32 EDT 2022" docASTNodeCount="71" docActiveCodeLength="440" docExpressionCount="43" docLength="463" projectName="A6" starttimestamp="1649862007572" timestamp="1105071">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\Client.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({ DistributedTags.CLIENT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class Client {
	public static void main(final String[] args) {
		try {

			// create client object
			final ClientRemoteInterfaceRMI client = new ClientRemoteObject();

			client.start(args);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="914" _type="Insert" date="Wed Apr 13 11:18:35 EDT 2022" docASTNodeCount="71" docActiveCodeLength="443" docExpressionCount="43" docLength="466" length="3" offset="362" repeat="3" starttimestamp="1649862007572" timestamp="1107975" timestamp2="1108059">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <Command __id="925" _type="PauseCommand" date="Wed Apr 13 11:18:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1111640">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2415]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="926" _type="UndoCommand" date="Wed Apr 13 11:18:39 EDT 2022" starttimestamp="1649862007572" timestamp="1111651" />
  <Command __id="928" _type="PauseCommand" date="Wed Apr 13 11:18:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1113302">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1651]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="927" _type="MoveCaretCommand" caretOffset="265" date="Wed Apr 13 11:18:40 EDT 2022" docOffset="300" starttimestamp="1649862007572" timestamp="1113302" />
  <Command __id="930" _type="InsertStringCommand" date="Wed Apr 13 11:18:41 EDT 2022" starttimestamp="1649862007572" timestamp="1113754" timestamp2="1113754">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="931" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:18:41 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="1113763" />
  <Command __id="932" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:18:41 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="1114035" />
  <Command __id="934" _type="InsertStringCommand" date="Wed Apr 13 11:18:41 EDT 2022" starttimestamp="1649862007572" timestamp="1114043" timestamp2="1114043">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="935" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:18:41 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="1114053" />
  <Command __id="943" _type="PauseCommand" date="Wed Apr 13 11:18:43 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1116245">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[1510]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="945" _type="PauseCommand" date="Wed Apr 13 11:18:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1117358">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1113]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="944" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:18:44 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="1117358" />
  <Command __id="947" _type="InsertStringCommand" date="Wed Apr 13 11:18:44 EDT 2022" starttimestamp="1649862007572" timestamp="1117367" timestamp2="1117367">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="949" _type="PauseCommand" date="Wed Apr 13 11:18:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1119649">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2282]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="948" _type="SelectTextCommand" caretOffset="267" date="Wed Apr 13 11:18:47 EDT 2022" end="332" start="267" starttimestamp="1649862007572" timestamp="1119649" />
  <Command __id="950" _type="CopyCommand" date="Wed Apr 13 11:18:47 EDT 2022" starttimestamp="1649862007572" timestamp="1120058" />
  <Command __id="951" _type="MoveCaretCommand" caretOffset="334" date="Wed Apr 13 11:18:48 EDT 2022" docOffset="369" starttimestamp="1649862007572" timestamp="1120656" />
  <Command __id="953" _type="InsertStringCommand" date="Wed Apr 13 11:18:48 EDT 2022" starttimestamp="1649862007572" timestamp="1121041" timestamp2="1121041">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Apr 13 11:18:49 EDT 2022" starttimestamp="1649862007572" timestamp="1121821" />
  <Command __id="956" _type="InsertStringCommand" date="Wed Apr 13 11:18:49 EDT 2022" starttimestamp="1649862007572" timestamp="1122321" timestamp2="1122321">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="958" _type="PasteCommand" date="Wed Apr 13 11:18:50 EDT 2022" starttimestamp="1649862007572" timestamp="1122969" />
  <Command __id="960" _type="PauseCommand" date="Wed Apr 13 11:18:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1125553">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2584]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="970" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Wed Apr 13 11:19:01 EDT 2022" starttimestamp="1649862007572" timestamp="1134300" />
  <Command __id="972" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1134352" type="Debug" />
  <Command __id="973" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:19:01 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1134352" type="Run" />
  <Command __id="974" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1134352" type="Debug" />
  <Command __id="975" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:19:01 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1134352" type="Run" />
  <Command __id="977" _type="PauseCommand" date="Wed Apr 13 11:19:08 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1140589">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6237]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="976" _type="ShellCommand" date="Wed Apr 13 11:19:08 EDT 2022" starttimestamp="1649862007572" timestamp="1140589" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="978" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Wed Apr 13 11:19:08 EDT 2022" starttimestamp="1649862007572" timestamp="1140816" />
  <Command __id="979" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:19:08 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1141205" type="Run" />
  <Command __id="980" _type="RunCommand" className="/A6/src/server/Server.java" date="Wed Apr 13 11:19:08 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1141205" type="Run" />
  <Command __id="981" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1141420" type="Run" />
  <Command __id="982" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:09 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1141438" type="Run" />
  <Command __id="983" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1141441" type="Run" />
  <Command __id="984" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1142039" type="Run" />
  <Command __id="985" _type="ConsoleOutput" date="Wed Apr 13 11:19:09 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1142101" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.9563812044815038
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(EQUAL,"Re"), Diff(DELETE,"adCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:63625 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9563812044815038¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="986" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1142495" type="Run" />
  <Command __id="987" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1142529" type="Run" />
  <Command __id="988" _type="ConsoleOutput" date="Wed Apr 13 11:19:10 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1142631" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9563812044815038¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="990" _type="PauseCommand" date="Wed Apr 13 11:19:11 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1143769">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="989" _type="ShellCommand" date="Wed Apr 13 11:19:11 EDT 2022" starttimestamp="1649862007572" timestamp="1143769" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="992" _type="PauseCommand" date="Wed Apr 13 11:19:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1148172">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4403]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="998" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1151660" type="Run" />
  <Command __id="1001" _type="PauseCommand" date="Wed Apr 13 11:19:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1153150">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1489]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1011" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1157573" type="Run" />
  <Command __id="1013" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1157574" type="Run" />
  <Command __id="1014" _type="ShellCommand" date="Wed Apr 13 11:19:25 EDT 2022" starttimestamp="1649862007572" timestamp="1157761" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1016" _type="PauseCommand" date="Wed Apr 13 11:19:31 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1164133">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6372]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1024" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1169680" type="Run" />
  <Command __id="1026" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1170409" type="Run" />
  <Command __id="1027" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1170667" type="Run" />
  <Command __id="1028" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1170696" type="Run" />
  <Command __id="1029" _type="ConsoleOutput" date="Wed Apr 13 11:19:38 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1170710" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.40620601268491363 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@a527092
[com.sun.proxy.$Proxy1@65dd0f14, com.sun.proxy.$Proxy1@a527092]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.40620601268491363"), Diff(INSERT,"Server0<-->Generic Client:0.40620601268491363 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@a527092¶[com.sun.proxy.$Proxy1@65dd0f14, com.sun.proxy.$Proxy1@a527092]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1030" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1170749" type="Run" />
  <Command __id="1031" _type="ConsoleOutput" date="Wed Apr 13 11:19:38 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1170935" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.40620601268491363 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@a527092¶[com.sun.proxy.$Proxy1@65dd0f14, com.sun.proxy.$Proxy1@a527092]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1032" _type="ConsoleOutput" date="Wed Apr 13 11:19:38 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1170956" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1034" _type="PauseCommand" date="Wed Apr 13 11:19:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1175480">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4524]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1033" _type="ShellCommand" date="Wed Apr 13 11:19:43 EDT 2022" starttimestamp="1649862007572" timestamp="1175480" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1036" _type="PauseCommand" date="Wed Apr 13 11:19:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1176871">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1391]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1035" _type="ShellCommand" date="Wed Apr 13 11:19:44 EDT 2022" starttimestamp="1649862007572" timestamp="1176871" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1038" _type="PauseCommand" date="Wed Apr 13 11:19:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1180070">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3199]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1042" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1185757" type="Run" />
  <Command __id="1045" _type="PauseCommand" date="Wed Apr 13 11:19:57 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1190087">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4330]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1044" _type="ConsoleInput" date="Wed Apr 13 11:19:57 EDT 2022" starttimestamp="1649862007572" timestamp="1190087" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="1046" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1190091" type="Run" />
  <Command __id="1047" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1190124" type="Run" />
  <Command __id="1048" _type="ConsoleOutput" date="Wed Apr 13 11:19:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1190145" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
NIO
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1049" _type="ConsoleOutput" date="Wed Apr 13 11:19:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1190163" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: NIO
USING RMI IN SERVER
Command recieved for broadcast: move 50 -50
USING RMI IN SERVER
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]
2
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]]
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(INSERT,"IPC Mechanism recieved for broadcast: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: move 50 -50¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1050" _type="ConsoleOutput" date="Wed Apr 13 11:19:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1190191" type="ConsoleOutput">
    <outputString><![CDATA[recieved broadcased command: move 50 -50
PROPERTY CHANGE
executed command
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism "), Diff(EQUAL,"recieved "), Diff(DELETE,"for "), Diff(EQUAL,"broadcas"), Diff(DELETE,"t: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: move 50 -50¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]"), Diff(INSERT,"ed command: move 50 -50¶PROPERTY CHANGE¶executed command"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1051" _type="ConsoleOutput" date="Wed Apr 13 11:19:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1190341" type="ConsoleOutput">
    <outputString><![CDATA[Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcased command: move 50 -50¶PROPERTY CHANGE¶execu"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separa"), Diff(EQUAL,"ted "), Diff(INSERT,"by "), Diff(EQUAL,"comma"), Diff(DELETE,"nd"), Diff(INSERT,"s:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1053" _type="PauseCommand" date="Wed Apr 13 11:20:00 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1193185">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2844]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1056" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:20:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1200702" type="Run" />
  <Command __id="1058" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:20:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1200718" type="Run" />
  <Command __id="1059" _type="ConsoleInput" date="Wed Apr 13 11:20:08 EDT 2022" starttimestamp="1649862007572" timestamp="1201221" type="Exception">
    <outputString><![CDATA[i GIPC
]]></outputString>
  </Command>
  <Command __id="1060" _type="ConsoleOutput" date="Wed Apr 13 11:20:08 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1201276" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]¶"), Diff(EQUAL,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="1062" _type="PauseCommand" date="Wed Apr 13 11:20:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1204365">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3089]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1061" _type="ShellCommand" date="Wed Apr 13 11:20:11 EDT 2022" starttimestamp="1649862007572" timestamp="1204365" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1063" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:20:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1205163" type="Run" />
  <Command __id="1064" _type="ShellCommand" date="Wed Apr 13 11:20:12 EDT 2022" starttimestamp="1649862007572" timestamp="1205421" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1066" _type="PauseCommand" date="Wed Apr 13 11:20:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1208124">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2703]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1076" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:20:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1223141" type="Run" />
  <Command __id="1079" _type="PauseCommand" date="Wed Apr 13 11:20:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1225453">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2312]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1080" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:20:38 EDT 2022" starttimestamp="1649862007572" timestamp="1231141" />
  <Command __id="1082" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:20:38 EDT 2022" starttimestamp="1649862007572" timestamp="1231161" />
  <Command __id="1083" _type="ShellCommand" date="Wed Apr 13 11:20:38 EDT 2022" starttimestamp="1649862007572" timestamp="1231207" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1085" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:20:39 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1231827" />
  <DocumentChange __id="924" _type="Delete" date="Wed Apr 13 11:18:39 EDT 2022" docASTNodeCount="71" docActiveCodeLength="440" docExpressionCount="43" docLength="463" endLine="11" length="3" offset="362" startLine="11" starttimestamp="1649862007572" timestamp="1111640">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <DocumentChange __id="929" _type="Insert" date="Wed Apr 13 11:18:41 EDT 2022" docASTNodeCount="72" docActiveCodeLength="446" docExpressionCount="45" docLength="469" length="6" offset="300" repeat="2" starttimestamp="1649862007572" timestamp="1113750" timestamp2="1114039">
    <text><![CDATA[.args.]]></text>
  </DocumentChange>
  <DocumentChange __id="936" _type="Delete" date="Wed Apr 13 11:18:42 EDT 2022" docASTNodeCount="71" docActiveCodeLength="440" docExpressionCount="43" docLength="463" endLine="11" length="6" offset="300" repeat="6" startLine="11" starttimestamp="1649862007572" timestamp="1114735" timestamp2="1115625">
    <text><![CDATA[.args.]]></text>
  </DocumentChange>
  <DocumentChange __id="942" _type="Insert" date="Wed Apr 13 11:18:43 EDT 2022" docASTNodeCount="62" docActiveCodeLength="375" docExpressionCount="39" docLength="465" length="2" offset="300" repeat="2" starttimestamp="1649862007572" timestamp="1116245" timestamp2="1117361">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="952" _type="Insert" date="Wed Apr 13 11:18:48 EDT 2022" docASTNodeCount="62" docActiveCodeLength="383" docExpressionCount="39" docLength="473" length="8" offset="369" repeat="2" starttimestamp="1649862007572" timestamp="1121032" timestamp2="1122319">
    <text><![CDATA[			
			]]></text>
  </DocumentChange>
  <DocumentChange __id="957" _type="Replace" date="Wed Apr 13 11:18:50 EDT 2022" docASTNodeCount="71" docActiveCodeLength="448" docExpressionCount="43" docLength="538" endLine="12" insertionLength="68" int_docASTNodeCount="62" int_docActiveCodeLength="380" int_docExpressionCount="39" int_docLength="470" length="3" offset="369" startLine="12" starttimestamp="1649862007572" timestamp="1122964">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			final ClientRemoteInterfaceRMI client = new ClientRemoteObject();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="961" _type="Insert" date="Wed Apr 13 11:18:53 EDT 2022" docASTNodeCount="71" docActiveCodeLength="451" docExpressionCount="43" docLength="541" length="3" offset="434" repeat="3" starttimestamp="1649862007572" timestamp="1125955" timestamp2="1126119">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <Command __id="1084" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:20:39 EDT 2022" docASTNodeCount="6" docActiveCodeLength="69" docExpressionCount="2" docLength="69" projectName="A6" starttimestamp="1649862007572" timestamp="1231621">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

public interface ClientRemoteInterfaceNIO {

}
]]></snapshot>
  </Command>
  <Command __id="1087" _type="PauseCommand" date="Wed Apr 13 11:20:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1235372">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3545]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1088" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:20:43 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1235579" />
  <Command __id="1086" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:20:42 EDT 2022" docASTNodeCount="90" docActiveCodeLength="652" docExpressionCount="66" docLength="652" projectName="A6" starttimestamp="1649862007572" timestamp="1235372">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;


import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

public interface ServerRemoteInterfaceNIO extends SocketChannelAcceptListener, SocketChannelReadListener, SocketChannelWriteListener {

	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	List<SocketChannel> getSocketList();

	SocketChannel getSocketChannel();

}]]></snapshot>
  </Command>
  <Command __id="1090" _type="PauseCommand" date="Wed Apr 13 11:20:53 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1245832">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10253]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1091" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:20:53 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1246049" />
  <Command __id="1093" _type="PauseCommand" date="Wed Apr 13 11:21:01 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1253901">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7852]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1092" _type="SelectTextCommand" caretOffset="102" date="Wed Apr 13 11:21:01 EDT 2022" end="215" start="102" starttimestamp="1649862007572" timestamp="1253901" />
  <Command __id="1094" _type="CopyCommand" date="Wed Apr 13 11:21:01 EDT 2022" starttimestamp="1649862007572" timestamp="1254376" />
  <Command __id="1089" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:20:53 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1245832">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1096" _type="PauseCommand" date="Wed Apr 13 11:21:09 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1261973">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[7597]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1097" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:21:09 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1262041" />
  <Command __id="1099" _type="PauseCommand" date="Wed Apr 13 11:21:11 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1263784">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1743]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1098" _type="MoveCaretCommand" caretOffset="61" date="Wed Apr 13 11:21:11 EDT 2022" docOffset="61" starttimestamp="1649862007572" timestamp="1263784" />
  <Command __id="1101" _type="InsertStringCommand" date="Wed Apr 13 11:21:11 EDT 2022" starttimestamp="1649862007572" timestamp="1264293" timestamp2="1264293">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1103" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1264486" timestamp2="1264486">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1105" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1264736" timestamp2="1264736">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1107" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1264831" timestamp2="1264831">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1109" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1265049" timestamp2="1265049">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1111" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1265368" timestamp2="1265368">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1113" _type="InsertStringCommand" date="Wed Apr 13 11:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="1265469" timestamp2="1265469">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1115" _type="InsertStringCommand" date="Wed Apr 13 11:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="1265652" timestamp2="1265652">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1127" _type="PasteCommand" date="Wed Apr 13 11:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="1266201" />
  <Command __id="1129" _type="PauseCommand" date="Wed Apr 13 11:21:15 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1267440">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1239]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1128" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:21:15 EDT 2022" starttimestamp="1649862007572" timestamp="1267440" />
  <Command __id="1130" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:21:15 EDT 2022" starttimestamp="1649862007572" timestamp="1267538" />
  <Command __id="1131" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:21:15 EDT 2022" starttimestamp="1649862007572" timestamp="1267553" />
  <Command __id="1095" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:21:09 EDT 2022" docASTNodeCount="6" docActiveCodeLength="69" docExpressionCount="2" docLength="69" projectName="A6" starttimestamp="1649862007572" timestamp="1261973">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶public interface ClientRemoteInterfaceNIO {¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1100" _type="Insert" date="Wed Apr 13 11:21:11 EDT 2022" docASTNodeCount="14" docActiveCodeLength="190" docExpressionCount="6" docLength="190" length="121" offset="61" repeat="9" starttimestamp="1649862007572" timestamp="1264287" timestamp2="1266123">
    <text><![CDATA[extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener]]></text>
  </DocumentChange>
  <DocumentChange __id="1117" _type="Delete" date="Wed Apr 13 11:21:13 EDT 2022" docASTNodeCount="14" docActiveCodeLength="186" docExpressionCount="6" docLength="186" endLine="2" length="4" offset="15" startLine="0" starttimestamp="1649862007572" timestamp="1266167">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1118" _type="Insert" date="Wed Apr 13 11:21:13 EDT 2022" docASTNodeCount="54" docActiveCodeLength="466" docExpressionCount="42" docLength="466" length="280" offset="15" repeat="9" starttimestamp="1649862007572" timestamp="1266167" timestamp2="1266172">
    <text><![CDATA[

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

]]></text>
  </DocumentChange>
  <Command __id="1133" _type="PauseCommand" date="Wed Apr 13 11:21:31 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1284177">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[16624]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1134" _type="MoveCaretCommand" caretOffset="80" date="Wed Apr 13 11:21:31 EDT 2022" docOffset="80" starttimestamp="1649862007572" timestamp="1284363" />
  <Command __id="1132" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:21:31 EDT 2022" docASTNodeCount="8" docActiveCodeLength="88" docExpressionCount="3" docLength="88" projectName="A6" starttimestamp="1649862007572" timestamp="1284177">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶public class ClientRemoteObjectNIO "), Diff(INSERT,"extends ClientRemoteObject"), Diff(EQUAL,"{¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

public class ClientRemoteObjectNIO extends ClientRemoteObject{

}
]]></snapshot>
  </Command>
  <Command __id="1136" _type="PauseCommand" date="Wed Apr 13 11:21:33 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1285732">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1369]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1135" _type="Insert" date="Wed Apr 13 11:21:33 EDT 2022" docASTNodeCount="10" docActiveCodeLength="104" docExpressionCount="4" docLength="104" length="16" offset="80" repeat="16" starttimestamp="1649862007572" timestamp="1285732" timestamp2="1288190">
    <text><![CDATA[ implements Clin]]></text>
  </DocumentChange>
  <Command __id="1137" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1285737" timestamp2="1285737">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1139" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1285870" timestamp2="1285870">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1141" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1286040" timestamp2="1286040">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1143" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1286179" timestamp2="1286179">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1145" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1286348" timestamp2="1286348">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1147" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1286442" timestamp2="1286442">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1149" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1286561" timestamp2="1286561">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1151" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1286693" timestamp2="1286693">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1153" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1287011" timestamp2="1287011">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1155" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1287102" timestamp2="1287102">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1157" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1287288" timestamp2="1287288">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1159" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1287423" timestamp2="1287423">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1161" _type="InsertStringCommand" date="Wed Apr 13 11:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="1287719" timestamp2="1287719">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1163" _type="InsertStringCommand" date="Wed Apr 13 11:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="1287921" timestamp2="1287921">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1165" _type="InsertStringCommand" date="Wed Apr 13 11:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="1287986" timestamp2="1287986">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1167" _type="InsertStringCommand" date="Wed Apr 13 11:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="1288194" timestamp2="1288194">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1168" _type="Delete" date="Wed Apr 13 11:21:36 EDT 2022" docASTNodeCount="10" docActiveCodeLength="103" docExpressionCount="4" docLength="103" endLine="2" length="1" offset="95" startLine="2" starttimestamp="1649862007572" timestamp="1288485">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1288487" />
  <DocumentChange __id="1170" _type="Insert" date="Wed Apr 13 11:21:36 EDT 2022" docASTNodeCount="10" docActiveCodeLength="123" docExpressionCount="4" docLength="123" length="20" offset="95" repeat="20" starttimestamp="1649862007572" timestamp="1288586" timestamp2="1292049">
    <text><![CDATA[entRemoteInterfaceNO]]></text>
  </DocumentChange>
  <Command __id="1171" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1288591" timestamp2="1288591">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1173" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1288728" timestamp2="1288728">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1175" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1288858" timestamp2="1288858">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1177" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1289182" timestamp2="1289182">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="1179" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1289341" timestamp2="1289341">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1181" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289467" timestamp2="1289467">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1183" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289531" timestamp2="1289531">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1185" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289589" timestamp2="1289589">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1187" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289683" timestamp2="1289683">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1189" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289970" timestamp2="1289970">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1191" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1290094" timestamp2="1290094">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1193" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1290182" timestamp2="1290182">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1195" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1290339" timestamp2="1290339">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1197" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1290413" timestamp2="1290413">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1199" _type="InsertStringCommand" date="Wed Apr 13 11:21:38 EDT 2022" starttimestamp="1649862007572" timestamp="1290588" timestamp2="1290588">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1201" _type="InsertStringCommand" date="Wed Apr 13 11:21:38 EDT 2022" starttimestamp="1649862007572" timestamp="1290653" timestamp2="1290653">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1203" _type="InsertStringCommand" date="Wed Apr 13 11:21:38 EDT 2022" starttimestamp="1649862007572" timestamp="1290822" timestamp2="1290822">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1205" _type="InsertStringCommand" date="Wed Apr 13 11:21:38 EDT 2022" starttimestamp="1649862007572" timestamp="1290999" timestamp2="1290999">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1207" _type="InsertStringCommand" date="Wed Apr 13 11:21:39 EDT 2022" starttimestamp="1649862007572" timestamp="1291857" timestamp2="1291857">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="1209" _type="InsertStringCommand" date="Wed Apr 13 11:21:39 EDT 2022" starttimestamp="1649862007572" timestamp="1292053" timestamp2="1292053">
    <data><![CDATA[O]]></data>
  </Command>
  <DocumentChange __id="1210" _type="Delete" date="Wed Apr 13 11:21:40 EDT 2022" docASTNodeCount="10" docActiveCodeLength="122" docExpressionCount="4" docLength="122" endLine="2" length="1" offset="114" startLine="2" starttimestamp="1649862007572" timestamp="1292555">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="1211" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:21:40 EDT 2022" starttimestamp="1649862007572" timestamp="1292556" />
  <Command __id="1213" _type="InsertStringCommand" date="Wed Apr 13 11:21:40 EDT 2022" starttimestamp="1649862007572" timestamp="1292771" timestamp2="1292771">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1215" _type="InsertStringCommand" date="Wed Apr 13 11:21:40 EDT 2022" starttimestamp="1649862007572" timestamp="1292801" timestamp2="1292801">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1217" _type="PauseCommand" date="Wed Apr 13 11:21:42 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1294761">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1960]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1223" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:21:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1296591" type="Debug" />
  <Command __id="1225" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:21:44 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1296592" type="Run" />
  <Command __id="1226" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:21:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1296592" type="Debug" />
  <Command __id="1227" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:21:44 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1296592" type="Run" />
  <Command __id="1228" _type="ShellCommand" date="Wed Apr 13 11:21:44 EDT 2022" starttimestamp="1649862007572" timestamp="1296597" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1229" _type="ConsoleOutput" date="Wed Apr 13 11:21:44 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1296687" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63752]:An existing connection was forcibly closed by the remote host
Server0<-->Generic Client:0.13283619649975464 (Closed)
Explanation: An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcased command: take 3¶PROPERTY CHANGE¶executed command"), Diff(INSERT,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63752]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0.13283619649975464 (Closed)¶Explanation: An existing connection was forcibly closed by the remote host"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1231" _type="PauseCommand" date="Wed Apr 13 11:21:46 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1298718">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2031]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1230" _type="ShellCommand" date="Wed Apr 13 11:21:46 EDT 2022" starttimestamp="1649862007572" timestamp="1298718" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1232" _type="ShellCommand" date="Wed Apr 13 11:21:46 EDT 2022" starttimestamp="1649862007572" timestamp="1298787" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1262" _type="PauseCommand" date="Wed Apr 13 11:21:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1299927">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1027]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1266" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:21:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1301778" type="Debug" />
  <Command __id="1268" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:21:49 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1301778" type="Run" />
  <Command __id="1269" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:21:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1301778" type="Debug" />
  <Command __id="1270" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:21:49 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1301778" type="Run" />
  <Command __id="1271" _type="ShellCommand" date="Wed Apr 13 11:21:49 EDT 2022" starttimestamp="1649862007572" timestamp="1301783" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1272" _type="ConsoleOutput" date="Wed Apr 13 11:21:49 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1301944" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63763]:An existing connection was forcibly closed by the remote host
Server0<-->Generic Client:0.40620601268491363 (Closed)
Explanation: An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:637"), Diff(DELETE,"52"), Diff(INSERT,"63"), Diff(EQUAL,"]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0."), Diff(DELETE,"13283619649975464"), Diff(INSERT,"40620601268491363"), Diff(EQUAL," (Closed)¶Explanation: An existing connection was forcibly closed by the remote host¶")]]]></diff>
  </Command>
  <DocumentChange __id="1212" _type="Insert" date="Wed Apr 13 11:21:40 EDT 2022" docASTNodeCount="10" docActiveCodeLength="124" docExpressionCount="4" docLength="124" length="2" offset="114" repeat="2" starttimestamp="1649862007572" timestamp="1292767" timestamp2="1292796">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="1233" _type="Insert" date="Wed Apr 13 11:21:46 EDT 2022" docASTNodeCount="87" docActiveCodeLength="601" docExpressionCount="39" docLength="771" length="647" offset="117" repeat="20" starttimestamp="1649862007572" timestamp="1298891" timestamp2="1298899">
    <text><![CDATA[

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="1253" _type="Delete" date="Wed Apr 13 11:21:46 EDT 2022" docASTNodeCount="87" docActiveCodeLength="597" docExpressionCount="39" docLength="767" endLine="2" length="4" offset="15" startLine="0" starttimestamp="1649862007572" timestamp="1298899">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1254" _type="Insert" date="Wed Apr 13 11:21:46 EDT 2022" docASTNodeCount="109" docActiveCodeLength="720" docExpressionCount="58" docLength="890" length="123" offset="15" repeat="7" starttimestamp="1649862007572" timestamp="1298900" timestamp2="1298902">
    <text><![CDATA[

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

]]></text>
  </DocumentChange>
  <Command __id="1274" _type="PauseCommand" date="Wed Apr 13 11:22:08 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1320785">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18841]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1275" _type="SelectTextCommand" caretOffset="102" date="Wed Apr 13 11:22:08 EDT 2022" end="215" start="102" starttimestamp="1649862007572" timestamp="1320975" />
  <Command __id="1277" _type="PauseCommand" date="Wed Apr 13 11:22:24 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1336473">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[15498]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1276" _type="MoveCaretCommand" caretOffset="327" date="Wed Apr 13 11:22:24 EDT 2022" docOffset="1619" starttimestamp="1649862007572" timestamp="1336473" />
  <Command __id="1279" _type="PauseCommand" date="Wed Apr 13 11:22:34 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1346443">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9970]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1278" _type="ShellCommand" date="Wed Apr 13 11:22:34 EDT 2022" starttimestamp="1649862007572" timestamp="1346443" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1281" _type="PauseCommand" date="Wed Apr 13 11:22:47 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1359597">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13154]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1280" _type="ShellCommand" date="Wed Apr 13 11:22:47 EDT 2022" starttimestamp="1649862007572" timestamp="1359597" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1283" _type="PauseCommand" date="Wed Apr 13 11:22:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1361650">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2053]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1282" _type="ShellCommand" date="Wed Apr 13 11:22:49 EDT 2022" starttimestamp="1649862007572" timestamp="1361650" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1285" _type="PauseCommand" date="Wed Apr 13 11:22:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1365554">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3904]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1284" _type="ShellCommand" date="Wed Apr 13 11:22:53 EDT 2022" starttimestamp="1649862007572" timestamp="1365554" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1286" _type="ShellCommand" date="Wed Apr 13 11:22:53 EDT 2022" starttimestamp="1649862007572" timestamp="1365590" type="ECLIPSE_MINIMIZED" />
  <Command __id="1287" _type="ShellCommand" date="Wed Apr 13 11:22:53 EDT 2022" starttimestamp="1649862007572" timestamp="1365605" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1289" _type="PauseCommand" date="Wed Apr 13 11:23:19 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="1391684">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26079]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1288" _type="ShellCommand" date="Wed Apr 13 11:23:19 EDT 2022" starttimestamp="1649862007572" timestamp="1391684" type="ECLIPSE_MAXIMIZED" />
  <Command __id="1290" _type="ShellCommand" date="Wed Apr 13 11:23:19 EDT 2022" starttimestamp="1649862007572" timestamp="1391743" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1292" _type="PauseCommand" date="Wed Apr 13 11:23:57 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="1429910">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[38167]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1291" _type="SelectTextCommand" caretOffset="1339" date="Wed Apr 13 11:23:57 EDT 2022" end="1903" start="1339" starttimestamp="1649862007572" timestamp="1429910" />
  <Command __id="1293" _type="CopyCommand" date="Wed Apr 13 11:23:57 EDT 2022" starttimestamp="1649862007572" timestamp="1430360" />
  <Command __id="1273" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:22:08 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1320785">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1295" _type="PauseCommand" date="Wed Apr 13 11:23:59 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1432214">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1854]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1296" _type="MoveCaretCommand" caretOffset="458" date="Wed Apr 13 11:23:59 EDT 2022" docOffset="458" starttimestamp="1649862007572" timestamp="1432285" />
  <Command __id="1294" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:23:59 EDT 2022" docASTNodeCount="54" docActiveCodeLength="466" docExpressionCount="42" docLength="466" projectName="A6" starttimestamp="1649862007572" timestamp="1432214">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶"), Diff(DELETE,"public interface ClientRemoteInterfaceNIO "), Diff(INSERT,"import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener"), Diff(EQUAL,"{¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{

}
]]></snapshot>
  </Command>
  <Command __id="1298" _type="PauseCommand" date="Wed Apr 13 11:24:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1433917">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1632]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1299" _type="SelectTextCommand" caretOffset="1339" date="Wed Apr 13 11:24:01 EDT 2022" end="1903" start="1339" starttimestamp="1649862007572" timestamp="1434048" />
  <Command __id="1297" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:01 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1433917">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1301" _type="PauseCommand" date="Wed Apr 13 11:24:03 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1436167">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2119]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1302" _type="MoveCaretCommand" caretOffset="235" date="Wed Apr 13 11:24:03 EDT 2022" docOffset="235" starttimestamp="1649862007572" timestamp="1436234" />
  <Command __id="1300" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:03 EDT 2022" docASTNodeCount="109" docActiveCodeLength="720" docExpressionCount="58" docLength="890" projectName="A6" starttimestamp="1649862007572" timestamp="1436167">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶"), Diff(DELETE,"public class ClientRemoteObjectNIO extends ClientRemoteObject{"), Diff(INSERT,"import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}"), Diff(EQUAL,"¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1304" _type="PauseCommand" date="Wed Apr 13 11:24:07 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1440151">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3917]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1305" _type="InsertStringCommand" date="Wed Apr 13 11:24:07 EDT 2022" starttimestamp="1649862007572" timestamp="1440157" timestamp2="1440157">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1303" _type="Insert" date="Wed Apr 13 11:24:07 EDT 2022" docASTNodeCount="109" docActiveCodeLength="722" docExpressionCount="58" docLength="892" length="2" offset="235" starttimestamp="1649862007572" timestamp="1440151">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="1307" _type="PauseCommand" date="Wed Apr 13 11:24:09 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1441765">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1608]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="1306" _type="Delete" date="Wed Apr 13 11:24:09 EDT 2022" docASTNodeCount="109" docActiveCodeLength="720" docExpressionCount="58" docLength="890" endLine="7" length="2" offset="235" startLine="6" starttimestamp="1649862007572" timestamp="1441765">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="1308" _type="UndoCommand" date="Wed Apr 13 11:24:09 EDT 2022" starttimestamp="1649862007572" timestamp="1441774" />
  <Command __id="1309" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="1442493" />
  <Command __id="1310" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:24:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1442531" type="Run" />
  <Command __id="1311" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:24:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1442532" type="Run" />
  <Command __id="1313" _type="InsertStringCommand" date="Wed Apr 13 11:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="1442781" timestamp2="1442781">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1315" _type="InsertStringCommand" date="Wed Apr 13 11:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="1443194" timestamp2="1443194">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1318" _type="PauseCommand" date="Wed Apr 13 11:24:11 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1444291">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1097]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1317" _type="InsertStringCommand" date="Wed Apr 13 11:24:11 EDT 2022" starttimestamp="1649862007572" timestamp="1444291" timestamp2="1444291">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="1320" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1444723" timestamp2="1444723">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1322" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1444890" timestamp2="1444890">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1324" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1445029" timestamp2="1445029">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1326" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1445141" timestamp2="1445141">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1328" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1445346" timestamp2="1445346">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1330" _type="InsertStringCommand" date="Wed Apr 13 11:24:13 EDT 2022" starttimestamp="1649862007572" timestamp="1445509" timestamp2="1445509">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1332" _type="InsertStringCommand" date="Wed Apr 13 11:24:13 EDT 2022" starttimestamp="1649862007572" timestamp="1445649" timestamp2="1445649">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1334" _type="InsertStringCommand" date="Wed Apr 13 11:24:13 EDT 2022" starttimestamp="1649862007572" timestamp="1445827" timestamp2="1445827">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1312" _type="Insert" date="Wed Apr 13 11:24:10 EDT 2022" docASTNodeCount="111" docActiveCodeLength="735" docExpressionCount="60" docLength="905" length="15" offset="236" repeat="11" starttimestamp="1649862007572" timestamp="1442775" timestamp2="1445823">
    <text><![CDATA[
	
	@Override]]></text>
  </DocumentChange>
  <Command __id="1336" _type="PauseCommand" date="Wed Apr 13 11:24:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1447851">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2024]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1337" _type="InsertStringCommand" date="Wed Apr 13 11:24:15 EDT 2022" starttimestamp="1649862007572" timestamp="1447858" timestamp2="1447858">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1339" _type="InsertStringCommand" date="Wed Apr 13 11:24:15 EDT 2022" starttimestamp="1649862007572" timestamp="1448126" timestamp2="1448126">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1341" _type="InsertStringCommand" date="Wed Apr 13 11:24:15 EDT 2022" starttimestamp="1649862007572" timestamp="1448270" timestamp2="1448270">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1343" _type="InsertStringCommand" date="Wed Apr 13 11:24:15 EDT 2022" starttimestamp="1649862007572" timestamp="1448392" timestamp2="1448392">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1345" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1448661" timestamp2="1448661">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1347" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1448778" timestamp2="1448778">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1349" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1448920" timestamp2="1448920">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1351" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1449083" timestamp2="1449083">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1353" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1449256" timestamp2="1449256">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1355" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1449329" timestamp2="1449329">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1357" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1449393" timestamp2="1449393">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1359" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1449522" timestamp2="1449522">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1361" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1449663" timestamp2="1449663">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1363" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1449909" timestamp2="1449909">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1365" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1450025" timestamp2="1450025">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1367" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1450145" timestamp2="1450145">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1369" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1450258" timestamp2="1450258">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1371" _type="InsertStringCommand" date="Wed Apr 13 11:24:18 EDT 2022" starttimestamp="1649862007572" timestamp="1450550" timestamp2="1450550">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1373" _type="PauseCommand" date="Wed Apr 13 11:24:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1452168">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1618]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1381" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:24:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1457540" type="Run" />
  <DocumentChange __id="1335" _type="Insert" date="Wed Apr 13 11:24:15 EDT 2022" docASTNodeCount="116" docActiveCodeLength="756" docExpressionCount="61" docLength="926" length="21" offset="251" repeat="18" starttimestamp="1649862007572" timestamp="1447851" timestamp2="1450545">
    <text><![CDATA[
	public void init()]]></text>
  </DocumentChange>
  <DocumentChange __id="1374" _type="Insert" date="Wed Apr 13 11:24:20 EDT 2022" docASTNodeCount="116" docActiveCodeLength="766" docExpressionCount="61" docLength="936" length="10" offset="272" repeat="3" starttimestamp="1649862007572" timestamp="1452568" timestamp2="1453644">
    <text><![CDATA[ {
		
	}]]></text>
  </DocumentChange>
  <Command __id="1384" _type="PauseCommand" date="Wed Apr 13 11:24:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1460607">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3067]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1385" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:24:28 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1460685" />
  <Command __id="1383" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:28 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="1460607">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1387" _type="PauseCommand" date="Wed Apr 13 11:24:31 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1463853">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3168]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1388" _type="MoveCaretCommand" caretOffset="278" date="Wed Apr 13 11:24:31 EDT 2022" docOffset="278" starttimestamp="1649862007572" timestamp="1463930" />
  <Command __id="1390" _type="PauseCommand" date="Wed Apr 13 11:24:32 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1465143">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1213]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1386" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:31 EDT 2022" docASTNodeCount="116" docActiveCodeLength="766" docExpressionCount="61" docLength="936" projectName="A6" starttimestamp="1649862007572" timestamp="1463853">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{"), Diff(INSERT,"¶	¶	@Override¶	public void init() {¶		¶	}"), Diff(EQUAL,"¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	
	@Override
	public void init() {
		
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1389" _type="MoveCaretCommand" caretOffset="271" date="Wed Apr 13 11:24:32 EDT 2022" docOffset="271" starttimestamp="1649862007572" timestamp="1465143" />
  <DocumentChange __id="1391" _type="Insert" date="Wed Apr 13 11:24:33 EDT 2022" docASTNodeCount="120" docActiveCodeLength="777" docExpressionCount="63" docLength="947" length="11" offset="271" repeat="11" starttimestamp="1649862007572" timestamp="1465640" timestamp2="1468301">
    <text><![CDATA[String args]]></text>
  </DocumentChange>
  <Command __id="1392" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1465646" timestamp2="1465646">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1394" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1465886" timestamp2="1465886">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1396" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1466087" timestamp2="1466087">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1398" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1466186" timestamp2="1466186">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1400" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1466293" timestamp2="1466293">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1402" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1466365" timestamp2="1466365">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1404" _type="InsertStringCommand" date="Wed Apr 13 11:24:34 EDT 2022" starttimestamp="1649862007572" timestamp="1466740" timestamp2="1466740">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1407" _type="PauseCommand" date="Wed Apr 13 11:24:35 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1467770">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1030]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1406" _type="InsertStringCommand" date="Wed Apr 13 11:24:35 EDT 2022" starttimestamp="1649862007572" timestamp="1467770" timestamp2="1467770">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1409" _type="InsertStringCommand" date="Wed Apr 13 11:24:35 EDT 2022" starttimestamp="1649862007572" timestamp="1467903" timestamp2="1467903">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1411" _type="InsertStringCommand" date="Wed Apr 13 11:24:35 EDT 2022" starttimestamp="1649862007572" timestamp="1468131" timestamp2="1468131">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1413" _type="InsertStringCommand" date="Wed Apr 13 11:24:35 EDT 2022" starttimestamp="1649862007572" timestamp="1468305" timestamp2="1468305">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="1414" _type="Delete" date="Wed Apr 13 11:24:36 EDT 2022" docASTNodeCount="116" docActiveCodeLength="772" docExpressionCount="61" docLength="942" endLine="9" length="5" offset="277" repeat="5" startLine="9" starttimestamp="1649862007572" timestamp="1468612" timestamp2="1469232">
    <text><![CDATA[ args]]></text>
  </DocumentChange>
  <Command __id="1415" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1468615" />
  <Command __id="1417" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1468774" />
  <Command __id="1419" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1468936" />
  <Command __id="1421" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1469110" />
  <Command __id="1423" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1469234" />
  <Command __id="1425" _type="InsertStringCommand" date="Wed Apr 13 11:24:37 EDT 2022" starttimestamp="1649862007572" timestamp="1469894" timestamp2="1469894">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1426" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:37 EDT 2022" starttimestamp="1649862007572" timestamp="1470324" />
  <Command __id="1428" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1470672" timestamp2="1470672">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1430" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1470804" timestamp2="1470804">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1432" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1470876" timestamp2="1470876">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1434" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1471031" timestamp2="1471031">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1436" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1471091" timestamp2="1471091">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1438" _type="PauseCommand" date="Wed Apr 13 11:24:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1472778">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1687]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1437" _type="MoveCaretCommand" caretOffset="291" date="Wed Apr 13 11:24:40 EDT 2022" docOffset="291" starttimestamp="1649862007572" timestamp="1472778" />
  <DocumentChange __id="1424" _type="Insert" date="Wed Apr 13 11:24:37 EDT 2022" docASTNodeCount="121" docActiveCodeLength="779" docExpressionCount="63" docLength="949" length="7" offset="277" repeat="6" starttimestamp="1649862007572" timestamp="1469890" timestamp2="1471087">
    <text><![CDATA[[] args]]></text>
  </DocumentChange>
  <Command __id="1440" _type="PauseCommand" date="Wed Apr 13 11:24:41 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1474027">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1249]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1439" _type="Insert" date="Wed Apr 13 11:24:41 EDT 2022" docASTNodeCount="123" docActiveCodeLength="782" docExpressionCount="64" docLength="952" length="3" offset="291" repeat="3" starttimestamp="1649862007572" timestamp="1474027" timestamp2="1474336">
    <text><![CDATA[sub]]></text>
  </DocumentChange>
  <Command __id="1441" _type="InsertStringCommand" date="Wed Apr 13 11:24:41 EDT 2022" starttimestamp="1649862007572" timestamp="1474031" timestamp2="1474031">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1443" _type="InsertStringCommand" date="Wed Apr 13 11:24:41 EDT 2022" starttimestamp="1649862007572" timestamp="1474201" timestamp2="1474201">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1445" _type="InsertStringCommand" date="Wed Apr 13 11:24:41 EDT 2022" starttimestamp="1649862007572" timestamp="1474339" timestamp2="1474339">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="1446" _type="Delete" date="Wed Apr 13 11:24:42 EDT 2022" docASTNodeCount="123" docActiveCodeLength="781" docExpressionCount="64" docLength="951" endLine="10" length="1" offset="293" startLine="10" starttimestamp="1649862007572" timestamp="1474715">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="1447" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1474718" />
  <DocumentChange __id="1448" _type="Insert" date="Wed Apr 13 11:24:42 EDT 2022" docASTNodeCount="126" docActiveCodeLength="787" docExpressionCount="67" docLength="957" length="6" offset="293" repeat="6" starttimestamp="1649862007572" timestamp="1474947" timestamp2="1475828">
    <text><![CDATA[per.in]]></text>
  </DocumentChange>
  <Command __id="1449" _type="InsertStringCommand" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1474951" timestamp2="1474951">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1451" _type="InsertStringCommand" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1475008" timestamp2="1475008">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1453" _type="InsertStringCommand" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1475126" timestamp2="1475126">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1455" _type="InsertStringCommand" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1475259" timestamp2="1475259">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1456" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:24:42 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="1475261" />
  <Command __id="1459" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:24:43 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="1476171" />
  <DocumentChange __id="1460" _type="Replace" date="Wed Apr 13 11:24:43 EDT 2022" docASTNodeCount="125" docActiveCodeLength="796" docExpressionCount="66" docLength="966" endLine="10" insertionLength="11" int_docASTNodeCount="121" int_docActiveCodeLength="785" int_docExpressionCount="63" int_docLength="955" length="2" offset="297" startLine="10" starttimestamp="1649862007572" timestamp="1476173">
    <deletedText><![CDATA[in]]></deletedText>
    <insertedText><![CDATA[init(args);]]></insertedText>
  </DocumentChange>
  <Command __id="1461" _type="InsertStringCommand" date="Wed Apr 13 11:24:43 EDT 2022" starttimestamp="1649862007572" timestamp="1476218" timestamp2="1476218">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1462" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:44 EDT 2022" starttimestamp="1649862007572" timestamp="1477097" />
  <Command __id="1463" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:44 EDT 2022" starttimestamp="1649862007572" timestamp="1477275" />
  <Command __id="1464" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:45 EDT 2022" starttimestamp="1649862007572" timestamp="1477625" />
  <DocumentChange __id="1465" _type="Insert" date="Wed Apr 13 11:24:45 EDT 2022" docASTNodeCount="125" docActiveCodeLength="804" docExpressionCount="66" docLength="974" length="8" offset="308" repeat="2" starttimestamp="1649862007572" timestamp="1477865" timestamp2="1478139">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <Command __id="1466" _type="InsertStringCommand" date="Wed Apr 13 11:24:45 EDT 2022" starttimestamp="1649862007572" timestamp="1477870" timestamp2="1477870">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1468" _type="InsertStringCommand" date="Wed Apr 13 11:24:45 EDT 2022" starttimestamp="1649862007572" timestamp="1478144" timestamp2="1478144">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1478" _type="PasteCommand" date="Wed Apr 13 11:24:46 EDT 2022" starttimestamp="1649862007572" timestamp="1479217" />
  <DocumentChange __id="1469" _type="Replace" date="Wed Apr 13 11:24:46 EDT 2022" docASTNodeCount="181" docActiveCodeLength="1236" docExpressionCount="105" docLength="1537" endLine="12" insertionLength="565" int_docASTNodeCount="125" int_docActiveCodeLength="802" int_docExpressionCount="66" int_docLength="972" length="2" offset="314" startLine="12" starttimestamp="1649862007572" timestamp="1479133">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1470" _type="Insert" date="Wed Apr 13 11:24:46 EDT 2022" docASTNodeCount="185" docActiveCodeLength="1282" docExpressionCount="108" docLength="1583" length="46" offset="134" repeat="2" starttimestamp="1649862007572" timestamp="1479179" timestamp2="1479181">
    <text><![CDATA[

import nioExample.exampleClientReadThread;]]></text>
  </DocumentChange>
  <DocumentChange __id="1472" _type="Insert" date="Wed Apr 13 11:24:46 EDT 2022" docASTNodeCount="193" docActiveCodeLength="1322" docExpressionCount="115" docLength="1623" length="40" offset="46" repeat="2" starttimestamp="1649862007572" timestamp="1479182" timestamp2="1479183">
    <text><![CDATA[
import java.nio.channels.SelectionKey;]]></text>
  </DocumentChange>
  <DocumentChange __id="1474" _type="Insert" date="Wed Apr 13 11:24:46 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1381" docExpressionCount="125" docLength="1682" length="59" offset="19" repeat="4" starttimestamp="1649862007572" timestamp="1479184" timestamp2="1479187">
    <text><![CDATA[import java.io.IOException;
import java.net.InetAddress;
]]></text>
  </DocumentChange>
  <Command __id="1480" _type="PauseCommand" date="Wed Apr 13 11:24:54 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1487344">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[8127]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1481" _type="MoveCaretCommand" caretOffset="1041" date="Wed Apr 13 11:24:55 EDT 2022" docOffset="1041" starttimestamp="1649862007572" timestamp="1487435" />
  <Command __id="1483" _type="PauseCommand" date="Wed Apr 13 11:24:59 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1492043">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4608]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1482" _type="SelectTextCommand" caretOffset="774" date="Wed Apr 13 11:24:59 EDT 2022" end="860" start="774" starttimestamp="1649862007572" timestamp="1492043" />
  <Command __id="1484" _type="SelectTextCommand" caretOffset="774" date="Wed Apr 13 11:24:59 EDT 2022" end="860" start="774" starttimestamp="1649862007572" timestamp="1492043" />
  <Command __id="1485" _type="CopyCommand" date="Wed Apr 13 11:24:59 EDT 2022" starttimestamp="1649862007572" timestamp="1492143" />
  <Command __id="1479" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:54 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" projectName="A6" starttimestamp="1649862007572" timestamp="1487344">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1487" _type="PauseCommand" date="Wed Apr 13 11:25:00 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1493420">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1277]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1488" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 11:25:01 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="1493495" />
  <Command __id="1486" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:00 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="1493420">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1490" _type="PauseCommand" date="Wed Apr 13 11:25:04 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1496830">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3335]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1491" _type="MoveCaretCommand" caretOffset="1024" date="Wed Apr 13 11:25:04 EDT 2022" docOffset="1024" starttimestamp="1649862007572" timestamp="1496910" />
  <Command __id="1493" _type="PauseCommand" date="Wed Apr 13 11:25:05 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1498011">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1101]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1492" _type="MoveCaretCommand" caretOffset="384" date="Wed Apr 13 11:25:05 EDT 2022" docOffset="384" starttimestamp="1649862007572" timestamp="1498011" />
  <Command __id="1489" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:04 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1381" docExpressionCount="125" docLength="1682" projectName="A6" starttimestamp="1649862007572" timestamp="1496830">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java."), Diff(DELETE,"nio.ByteBuffer"), Diff(INSERT,"io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey"), Diff(EQUAL,";¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import nioExample.exampleClientReadThread;¶¶"), Diff(EQUAL,"public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	¶	@Override¶	public void init("), Diff(DELETE,") {¶		"), Diff(INSERT,"String[] args) {¶		super.init(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import nioExample.exampleClientReadThread;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	
	@Override
	public void init(String[] args) {
		super.init(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1495" _type="PauseCommand" date="Wed Apr 13 11:25:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1499325">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1314]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="1494" _type="Replace" date="Wed Apr 13 11:25:06 EDT 2022" docASTNodeCount="218" docActiveCodeLength="1467" docExpressionCount="131" docLength="1768" endLine="12" insertionLength="87" int_docASTNodeCount="205" int_docActiveCodeLength="1380" int_docExpressionCount="125" int_docLength="1681" length="1" offset="383" startLine="12" starttimestamp="1649862007572" timestamp="1499325">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1496" _type="Delete" date="Wed Apr 13 11:25:06 EDT 2022" docASTNodeCount="218" docActiveCodeLength="1463" docExpressionCount="131" docLength="1764" endLine="9" length="4" offset="233" startLine="7" starttimestamp="1649862007572" timestamp="1499364">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1497" _type="Insert" date="Wed Apr 13 11:25:06 EDT 2022" docASTNodeCount="234" docActiveCodeLength="1558" docExpressionCount="145" docLength="1859" length="95" offset="233" repeat="5" starttimestamp="1649862007572" timestamp="1499365" timestamp2="1499369">
    <text><![CDATA[

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
]]></text>
  </DocumentChange>
  <Command __id="1502" _type="PasteCommand" date="Wed Apr 13 11:25:06 EDT 2022" starttimestamp="1649862007572" timestamp="1499398" />
  <Command __id="1504" _type="InsertStringCommand" date="Wed Apr 13 11:25:07 EDT 2022" starttimestamp="1649862007572" timestamp="1499714" timestamp2="1499714">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1506" _type="PauseCommand" date="Wed Apr 13 11:25:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1500727">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1013]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1505" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:25:08 EDT 2022" starttimestamp="1649862007572" timestamp="1500727" />
  <Command __id="1507" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:08 EDT 2022" starttimestamp="1649862007572" timestamp="1500821" />
  <Command __id="1508" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:08 EDT 2022" starttimestamp="1649862007572" timestamp="1500857" />
  <Command __id="1510" _type="SelectTextCommand" caretOffset="774" date="Wed Apr 13 11:25:09 EDT 2022" end="860" start="774" starttimestamp="1649862007572" timestamp="1501715" />
  <Command __id="1512" _type="PauseCommand" date="Wed Apr 13 11:25:19 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1511901">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[10186]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1511" _type="SelectTextCommand" caretOffset="1202" date="Wed Apr 13 11:25:19 EDT 2022" end="1259" start="1202" starttimestamp="1649862007572" timestamp="1511901" />
  <Command __id="1513" _type="SelectTextCommand" caretOffset="1202" date="Wed Apr 13 11:25:19 EDT 2022" end="1259" start="1202" starttimestamp="1649862007572" timestamp="1511901" />
  <Command __id="1514" _type="CopyCommand" date="Wed Apr 13 11:25:19 EDT 2022" starttimestamp="1649862007572" timestamp="1512163" />
  <DocumentChange __id="1503" _type="Insert" date="Wed Apr 13 11:25:07 EDT 2022" docASTNodeCount="234" docActiveCodeLength="1561" docExpressionCount="145" docLength="1862" length="3" offset="561" starttimestamp="1649862007572" timestamp="1499708">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="1509" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:09 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" projectName="A6" starttimestamp="1649862007572" timestamp="1501632">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1516" _type="PauseCommand" date="Wed Apr 13 11:25:21 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1513675">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1512]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1517" _type="MoveCaretCommand" caretOffset="564" date="Wed Apr 13 11:25:21 EDT 2022" docOffset="564" starttimestamp="1649862007572" timestamp="1513759" />
  <Command __id="1519" _type="PauseCommand" date="Wed Apr 13 11:25:23 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1515854">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2094]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1518" _type="MoveCaretCommand" caretOffset="637" date="Wed Apr 13 11:25:23 EDT 2022" docOffset="637" starttimestamp="1649862007572" timestamp="1515853" />
  <Command __id="1525" _type="PasteCommand" date="Wed Apr 13 11:25:23 EDT 2022" starttimestamp="1649862007572" timestamp="1516302" />
  <Command __id="1527" _type="InsertStringCommand" date="Wed Apr 13 11:25:24 EDT 2022" starttimestamp="1649862007572" timestamp="1517030" timestamp2="1517030">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1529" _type="PauseCommand" date="Wed Apr 13 11:25:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1518065">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1035]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1528" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:25:25 EDT 2022" starttimestamp="1649862007572" timestamp="1518065" />
  <Command __id="1530" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:25 EDT 2022" starttimestamp="1649862007572" timestamp="1518220" />
  <Command __id="1531" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:25 EDT 2022" starttimestamp="1649862007572" timestamp="1518246" />
  <Command __id="1515" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:21 EDT 2022" docASTNodeCount="234" docActiveCodeLength="1561" docExpressionCount="145" docLength="1862" projectName="A6" starttimestamp="1649862007572" timestamp="1513675">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶"), Diff(EQUAL,"import nioExample.exampleClientReadThread;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	"), Diff(INSERT,"protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	"), Diff(EQUAL,"¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1520" _type="Replace" date="Wed Apr 13 11:25:23 EDT 2022" docASTNodeCount="241" docActiveCodeLength="1618" docExpressionCount="151" docLength="1919" endLine="20" insertionLength="59" int_docASTNodeCount="234" int_docActiveCodeLength="1559" int_docExpressionCount="145" int_docLength="1860" length="2" offset="635" startLine="20" starttimestamp="1649862007572" timestamp="1516189">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		aServerPort = ServerArgsProcessor.getNIOServerPort(args);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1521" _type="Delete" date="Wed Apr 13 11:25:23 EDT 2022" docASTNodeCount="241" docActiveCodeLength="1614" docExpressionCount="151" docLength="1915" endLine="9" length="4" offset="233" startLine="7" starttimestamp="1649862007572" timestamp="1516258">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1522" _type="Insert" date="Wed Apr 13 11:25:23 EDT 2022" docASTNodeCount="249" docActiveCodeLength="1673" docExpressionCount="158" docLength="1974" length="59" offset="233" repeat="3" starttimestamp="1649862007572" timestamp="1516260" timestamp2="1516263">
    <text><![CDATA[

import assignments.util.mainArgs.ServerArgsProcessor;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1526" _type="Insert" date="Wed Apr 13 11:25:24 EDT 2022" docASTNodeCount="249" docActiveCodeLength="1677" docExpressionCount="158" docLength="1978" length="4" offset="749" starttimestamp="1649862007572" timestamp="1517025">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="1533" _type="PauseCommand" date="Wed Apr 13 11:25:34 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1527244">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8998]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1534" _type="SelectTextCommand" caretOffset="1339" date="Wed Apr 13 11:25:34 EDT 2022" end="1903" start="1339" starttimestamp="1649862007572" timestamp="1527328" />
  <Command __id="1536" _type="PauseCommand" date="Wed Apr 13 11:25:45 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1537820">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[10492]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1535" _type="SelectTextCommand" caretOffset="218" date="Wed Apr 13 11:25:45 EDT 2022" end="327" start="218" starttimestamp="1649862007572" timestamp="1537820" />
  <Command __id="1537" _type="SelectTextCommand" caretOffset="218" date="Wed Apr 13 11:25:45 EDT 2022" end="327" start="218" starttimestamp="1649862007572" timestamp="1537820" />
  <Command __id="1538" _type="CopyCommand" date="Wed Apr 13 11:25:45 EDT 2022" starttimestamp="1649862007572" timestamp="1538126" />
  <Command __id="1532" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:34 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1527244">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1540" _type="PauseCommand" date="Wed Apr 13 11:25:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1539489">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1363]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1541" _type="MoveCaretCommand" caretOffset="753" date="Wed Apr 13 11:25:47 EDT 2022" docOffset="753" starttimestamp="1649862007572" timestamp="1539564" />
  <Command __id="1543" _type="PauseCommand" date="Wed Apr 13 11:25:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1541230">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1666]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1542" _type="MoveCaretCommand" caretOffset="616" date="Wed Apr 13 11:25:48 EDT 2022" docOffset="616" starttimestamp="1649862007572" timestamp="1541230" />
  <Command __id="1545" _type="InsertStringCommand" date="Wed Apr 13 11:25:49 EDT 2022" starttimestamp="1649862007572" timestamp="1541467" timestamp2="1541467">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1547" _type="PasteCommand" date="Wed Apr 13 11:25:49 EDT 2022" starttimestamp="1649862007572" timestamp="1541774" />
  <Command __id="1549" _type="PauseCommand" date="Wed Apr 13 11:25:51 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1544361">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2587]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1548" _type="SelectTextCommand" caretOffset="619" date="Wed Apr 13 11:25:51 EDT 2022" end="686" start="619" starttimestamp="1649862007572" timestamp="1544361" />
  <Command __id="1551" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:25:52 EDT 2022" starttimestamp="1649862007572" timestamp="1544882" />
  <Command __id="1553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:25:52 EDT 2022" starttimestamp="1649862007572" timestamp="1545357" />
  <Command __id="1555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:25:53 EDT 2022" starttimestamp="1649862007572" timestamp="1545770" />
  <Command __id="1539" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:47 EDT 2022" docASTNodeCount="249" docActiveCodeLength="1677" docExpressionCount="158" docLength="1978" projectName="A6" starttimestamp="1649862007572" timestamp="1539489">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import assignments.util.mainArgs.ServerArgsProcessor;¶"), Diff(EQUAL,"import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		"), Diff(INSERT,"aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		"), Diff(EQUAL,"¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1544" _type="Insert" date="Wed Apr 13 11:25:49 EDT 2022" docASTNodeCount="249" docActiveCodeLength="1680" docExpressionCount="158" docLength="1981" length="3" offset="616" starttimestamp="1649862007572" timestamp="1541463">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="1546" _type="Replace" date="Wed Apr 13 11:25:49 EDT 2022" docASTNodeCount="264" docActiveCodeLength="1788" docExpressionCount="165" docLength="2089" endLine="17" insertionLength="109" int_docASTNodeCount="249" int_docActiveCodeLength="1679" int_docExpressionCount="158" int_docLength="1980" length="1" offset="618" startLine="17" starttimestamp="1649862007572" timestamp="1541720">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	protected SocketChannel socketChannel;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1550" _type="Delete" date="Wed Apr 13 11:25:52 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1718" docExpressionCount="160" docLength="2019" endLine="17" length="70" offset="616" repeat="3" startLine="16" starttimestamp="1649862007572" timestamp="1544879" timestamp2="1545766">
    <text><![CDATA[
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();]]></text>
  </DocumentChange>
  <Command __id="1557" _type="PauseCommand" date="Wed Apr 13 11:25:54 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1547024">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1254]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1558" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Apr 13 11:25:54 EDT 2022" starttimestamp="1649862007572" timestamp="1547028" />
  <DocumentChange __id="1556" _type="Delete" date="Wed Apr 13 11:25:54 EDT 2022" docASTNodeCount="251" docActiveCodeLength="1699" docExpressionCount="159" docLength="2000" endLine="17" length="19" offset="599" startLine="16" starttimestamp="1649862007572" timestamp="1547024">
    <text><![CDATA[	int aServerPort;
]]></text>
  </DocumentChange>
  <Command __id="1560" _type="PauseCommand" date="Wed Apr 13 11:25:55 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1548232">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1204]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1561" _type="UndoCommand" date="Wed Apr 13 11:25:55 EDT 2022" starttimestamp="1649862007572" timestamp="1548236" />
  <Command __id="1563" _type="PauseCommand" date="Wed Apr 13 11:25:57 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1550174">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1938]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1562" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:25:57 EDT 2022" starttimestamp="1649862007572" timestamp="1550174" />
  <Command __id="1564" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:57 EDT 2022" starttimestamp="1649862007572" timestamp="1550272" />
  <Command __id="1565" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:57 EDT 2022" starttimestamp="1649862007572" timestamp="1550317" />
  <Command __id="1567" _type="PauseCommand" date="Wed Apr 13 11:26:04 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1556456">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6139]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1566" _type="SelectTextCommand" caretOffset="1194" date="Wed Apr 13 11:26:04 EDT 2022" end="1201" start="1194" starttimestamp="1649862007572" timestamp="1556456" />
  <Command __id="1569" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:26:04 EDT 2022" starttimestamp="1649862007572" timestamp="1556844" />
  <Command __id="1571" _type="PauseCommand" date="Wed Apr 13 11:26:05 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1557967">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1123]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1570" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:26:05 EDT 2022" starttimestamp="1649862007572" timestamp="1557967" />
  <Command __id="1572" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:05 EDT 2022" starttimestamp="1649862007572" timestamp="1558068" />
  <Command __id="1573" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:05 EDT 2022" starttimestamp="1649862007572" timestamp="1558091" />
  <DocumentChange __id="1559" _type="Insert" date="Wed Apr 13 11:25:55 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1718" docExpressionCount="160" docLength="2019" length="19" offset="599" starttimestamp="1649862007572" timestamp="1548232">
    <text><![CDATA[	int aServerPort;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1568" _type="Delete" date="Wed Apr 13 11:26:04 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1711" docExpressionCount="160" docLength="2012" endLine="37" length="7" offset="1194" startLine="37" starttimestamp="1649862007572" timestamp="1556838">
    <text><![CDATA[example]]></text>
  </DocumentChange>
  <Command __id="1575" _type="PauseCommand" date="Wed Apr 13 11:26:08 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1560526">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2435]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1576" _type="SelectTextCommand" caretOffset="218" date="Wed Apr 13 11:26:08 EDT 2022" end="327" start="218" starttimestamp="1649862007572" timestamp="1560606" />
  <Command __id="1578" _type="PauseCommand" date="Wed Apr 13 11:26:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1563871">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3265]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1577" _type="SelectTextCommand" caretOffset="387" date="Wed Apr 13 11:26:11 EDT 2022" end="539" start="387" starttimestamp="1649862007572" timestamp="1563871" />
  <Command __id="1579" _type="SelectTextCommand" caretOffset="387" date="Wed Apr 13 11:26:11 EDT 2022" end="539" start="387" starttimestamp="1649862007572" timestamp="1563871" />
  <Command __id="1580" _type="CopyCommand" date="Wed Apr 13 11:26:11 EDT 2022" starttimestamp="1649862007572" timestamp="1564288" />
  <Command __id="1574" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:08 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1560526">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1582" _type="PauseCommand" date="Wed Apr 13 11:26:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1565409">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1121]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1583" _type="MoveCaretCommand" caretOffset="1194" date="Wed Apr 13 11:26:13 EDT 2022" docOffset="1194" starttimestamp="1649862007572" timestamp="1565481" />
  <Command __id="1585" _type="PauseCommand" date="Wed Apr 13 11:26:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1568055">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2574]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1584" _type="MoveCaretCommand" caretOffset="657" date="Wed Apr 13 11:26:15 EDT 2022" docOffset="657" starttimestamp="1649862007572" timestamp="1568055" />
  <Command __id="1587" _type="InsertStringCommand" date="Wed Apr 13 11:26:15 EDT 2022" starttimestamp="1649862007572" timestamp="1568293" timestamp2="1568293">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1589" _type="InsertStringCommand" date="Wed Apr 13 11:26:15 EDT 2022" starttimestamp="1649862007572" timestamp="1568420" timestamp2="1568420">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1595" _type="PasteCommand" date="Wed Apr 13 11:26:16 EDT 2022" starttimestamp="1649862007572" timestamp="1568695" />
  <Command __id="1596" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:26:16 EDT 2022" starttimestamp="1649862007572" timestamp="1569038" />
  <Command __id="1597" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:16 EDT 2022" starttimestamp="1649862007572" timestamp="1569133" />
  <Command __id="1598" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:16 EDT 2022" starttimestamp="1649862007572" timestamp="1569163" />
  <Command __id="1581" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:12 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1711" docExpressionCount="160" docLength="2012" projectName="A6" starttimestamp="1649862007572" timestamp="1565409">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	"), Diff(INSERT,"protected SocketChannel socketChannel;¶	"), Diff(EQUAL,"¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new "), Diff(DELETE,"example"), Diff(EQUAL,"ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1586" _type="Insert" date="Wed Apr 13 11:26:15 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1717" docExpressionCount="160" docLength="2018" length="6" offset="657" repeat="2" starttimestamp="1649862007572" timestamp="1568288" timestamp2="1568414">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="1590" _type="Replace" date="Wed Apr 13 11:26:16 EDT 2022" docASTNodeCount="282" docActiveCodeLength="1869" docExpressionCount="173" docLength="2170" endLine="19" insertionLength="153" int_docASTNodeCount="255" int_docActiveCodeLength="1716" int_docExpressionCount="160" int_docLength="2017" length="1" offset="662" startLine="19" starttimestamp="1649862007572" timestamp="1568617">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1591" _type="Insert" date="Wed Apr 13 11:26:16 EDT 2022" docASTNodeCount="286" docActiveCodeLength="1909" docExpressionCount="176" docLength="2210" length="40" offset="425" repeat="2" starttimestamp="1649862007572" timestamp="1568662" timestamp2="1568663">
    <text><![CDATA[
import readThread.ReadThreadInterface;]]></text>
  </DocumentChange>
  <DocumentChange __id="1593" _type="Insert" date="Wed Apr 13 11:26:16 EDT 2022" docASTNodeCount="294" docActiveCodeLength="1958" docExpressionCount="183" docLength="2259" length="49" offset="233" repeat="2" starttimestamp="1649862007572" timestamp="1568663" timestamp2="1568664">
    <text><![CDATA[
import java.util.concurrent.ArrayBlockingQueue;]]></text>
  </DocumentChange>
  <Command __id="1600" _type="PauseCommand" date="Wed Apr 13 11:26:22 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1574933">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5770]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1601" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:26:22 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1575131" />
  <Command __id="1599" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:22 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1471" docExpressionCount="123" docLength="1668" projectName="A6" starttimestamp="1649862007572" timestamp="1574933">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleClientReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import readThread.ReadThreadInterface;

public class exampleClientReadThread implements ReadThreadInterface{
	final AnNIOManagerPrintClient client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {
		client = aClient;
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
		
		}
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1603" _type="PauseCommand" date="Wed Apr 13 11:26:25 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1578062">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2931]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1604" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:26:25 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1578271" />
  <Command __id="1602" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:25 EDT 2022" docASTNodeCount="80" docActiveCodeLength="539" docExpressionCount="51" docLength="649" projectName="A6" starttimestamp="1649862007572" timestamp="1578062">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1606" _type="PauseCommand" date="Wed Apr 13 11:26:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1579967">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1696]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1607" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:26:27 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1580062" />
  <Command __id="1609" _type="PauseCommand" date="Wed Apr 13 11:26:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1584550">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4488]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1608" _type="SelectTextCommand" caretOffset="125" date="Wed Apr 13 11:26:32 EDT 2022" end="335" start="125" starttimestamp="1649862007572" timestamp="1584550" />
  <Command __id="1610" _type="CopyCommand" date="Wed Apr 13 11:26:32 EDT 2022" starttimestamp="1649862007572" timestamp="1584933" />
  <Command __id="1605" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:27 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1471" docExpressionCount="123" docLength="1668" projectName="A6" starttimestamp="1649862007572" timestamp="1579967">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleClientReadThread implements ReadThreadInterface{¶	final AnNIOManagerPrintClient client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {¶		client = aClient;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1612" _type="PauseCommand" date="Wed Apr 13 11:26:33 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1586138">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1205]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1613" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:26:33 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1586211" />
  <Command __id="1615" _type="PauseCommand" date="Wed Apr 13 11:26:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1587389">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1178]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1614" _type="MoveCaretCommand" caretOffset="185" date="Wed Apr 13 11:26:34 EDT 2022" docOffset="294" starttimestamp="1649862007572" timestamp="1587389" />
  <Command __id="1617" _type="InsertStringCommand" date="Wed Apr 13 11:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="1587707" timestamp2="1587707">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1618" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Apr 13 11:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="1588198" />
  <Command __id="1620" _type="InsertStringCommand" date="Wed Apr 13 11:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="1588755" timestamp2="1588755">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1630" _type="PasteCommand" date="Wed Apr 13 11:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="1589390" />
  <Command __id="1631" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="1589962" />
  <Command __id="1632" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="1590060" />
  <Command __id="1633" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="1590098" />
  <Command __id="1635" _type="PauseCommand" date="Wed Apr 13 11:26:46 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1598597">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8499]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1634" _type="SelectTextCommand" caretOffset="192" date="Wed Apr 13 11:26:46 EDT 2022" end="215" start="192" starttimestamp="1649862007572" timestamp="1598597" />
  <Command __id="1637" _type="InsertStringCommand" date="Wed Apr 13 11:26:46 EDT 2022" starttimestamp="1649862007572" timestamp="1599222" timestamp2="1599222">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1639" _type="InsertStringCommand" date="Wed Apr 13 11:26:46 EDT 2022" starttimestamp="1649862007572" timestamp="1599427" timestamp2="1599427">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1641" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1599477" timestamp2="1599477">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1643" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1599556" timestamp2="1599556">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1645" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1599694" timestamp2="1599694">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1647" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1599780" timestamp2="1599780">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1649" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1600101" timestamp2="1600101">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1651" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600473" />
  <Command __id="1653" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600616" timestamp2="1600616">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="1655" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600753" timestamp2="1600753">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1657" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600908" timestamp2="1600908">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1659" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600974" timestamp2="1600974">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1661" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1601038" timestamp2="1601038">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1663" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1601108" timestamp2="1601108">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1665" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1601408" timestamp2="1601408">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1667" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1601580" timestamp2="1601580">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1669" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1601675" timestamp2="1601675">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="1671" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1601798" timestamp2="1601798">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1673" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1601976" timestamp2="1601976">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1675" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1602139" timestamp2="1602139">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1677" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1602397" timestamp2="1602397">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="1679" _type="InsertStringCommand" date="Wed Apr 13 11:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="1602548" timestamp2="1602548">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1681" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="1602996" />
  <Command __id="1683" _type="InsertStringCommand" date="Wed Apr 13 11:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="1603197" timestamp2="1603197">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1685" _type="InsertStringCommand" date="Wed Apr 13 11:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="1603268" timestamp2="1603268">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1687" _type="PauseCommand" date="Wed Apr 13 11:26:54 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1606998">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3730]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1686" _type="ShellCommand" date="Wed Apr 13 11:26:54 EDT 2022" starttimestamp="1649862007572" timestamp="1606998" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1688" _type="ShellCommand" date="Wed Apr 13 11:26:54 EDT 2022" starttimestamp="1649862007572" timestamp="1607105" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1694" _type="PauseCommand" date="Wed Apr 13 11:26:55 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1608134">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1016]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1693" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:26:55 EDT 2022" starttimestamp="1649862007572" timestamp="1608134" />
  <Command __id="1695" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:55 EDT 2022" starttimestamp="1649862007572" timestamp="1608237" />
  <Command __id="1696" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:55 EDT 2022" starttimestamp="1649862007572" timestamp="1608280" />
  <Command __id="1698" _type="PauseCommand" date="Wed Apr 13 11:26:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1610502">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2222]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1697" _type="SelectTextCommand" caretOffset="304" date="Wed Apr 13 11:26:58 EDT 2022" end="311" start="304" starttimestamp="1649862007572" timestamp="1610502" />
  <Command __id="1700" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:26:58 EDT 2022" starttimestamp="1649862007572" timestamp="1610969" />
  <Command __id="1702" _type="PauseCommand" date="Wed Apr 13 11:27:01 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1613992">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3023]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1747" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:27:06 EDT 2022" starttimestamp="1649862007572" timestamp="1618641" />
  <Command __id="1611" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:33 EDT 2022" docASTNodeCount="80" docActiveCodeLength="539" docExpressionCount="51" docLength="649" projectName="A6" starttimestamp="1649862007572" timestamp="1586138">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1616" _type="Insert" date="Wed Apr 13 11:26:35 EDT 2022" docASTNodeCount="80" docActiveCodeLength="543" docExpressionCount="51" docLength="653" length="4" offset="294" repeat="2" starttimestamp="1649862007572" timestamp="1587701" timestamp2="1588753">
    <text><![CDATA[	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="1621" _type="Replace" date="Wed Apr 13 11:26:36 EDT 2022" docASTNodeCount="108" docActiveCodeLength="753" docExpressionCount="64" docLength="863" endLine="11" insertionLength="211" int_docASTNodeCount="80" int_docActiveCodeLength="542" int_docExpressionCount="51" int_docLength="652" length="1" offset="294" startLine="11" starttimestamp="1649862007572" timestamp="1589296">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	final AnNIOManagerPrintClient client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {
		client = aClient;
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1622" _type="Delete" date="Wed Apr 13 11:26:36 EDT 2022" docASTNodeCount="108" docActiveCodeLength="749" docExpressionCount="64" docLength="859" endLine="5" length="4" offset="91" startLine="3" starttimestamp="1649862007572" timestamp="1589346">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1623" _type="Insert" date="Wed Apr 13 11:26:36 EDT 2022" docASTNodeCount="128" docActiveCodeLength="888" docExpressionCount="81" docLength="998" length="139" offset="91" repeat="7" starttimestamp="1649862007572" timestamp="1589347" timestamp2="1589353">
    <text><![CDATA[

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1636" _type="Replace" date="Wed Apr 13 11:26:46 EDT 2022" docASTNodeCount="128" docActiveCodeLength="866" docExpressionCount="81" docLength="976" endLine="14" insertionLength="1" int_docASTNodeCount="122" int_docActiveCodeLength="865" int_docExpressionCount="79" int_docLength="975" length="23" offset="436" startLine="14" starttimestamp="1649862007572" timestamp="1599215">
    <deletedText><![CDATA[AnNIOManagerPrintClient]]></deletedText>
    <insertedText><![CDATA[C]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1638" _type="Insert" date="Wed Apr 13 11:26:46 EDT 2022" docASTNodeCount="128" docActiveCodeLength="872" docExpressionCount="81" docLength="982" length="6" offset="437" repeat="6" starttimestamp="1649862007572" timestamp="1599423" timestamp2="1600095">
    <text><![CDATA[lientr]]></text>
  </DocumentChange>
  <DocumentChange __id="1650" _type="Delete" date="Wed Apr 13 11:26:48 EDT 2022" docASTNodeCount="128" docActiveCodeLength="871" docExpressionCount="81" docLength="981" endLine="14" length="1" offset="442" startLine="14" starttimestamp="1649862007572" timestamp="1600470">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1652" _type="Insert" date="Wed Apr 13 11:26:48 EDT 2022" docASTNodeCount="128" docActiveCodeLength="885" docExpressionCount="81" docLength="995" length="14" offset="442" repeat="14" starttimestamp="1649862007572" timestamp="1600611" timestamp2="1602545">
    <text><![CDATA[RemoteObjectNO]]></text>
  </DocumentChange>
  <DocumentChange __id="1680" _type="Delete" date="Wed Apr 13 11:26:50 EDT 2022" docASTNodeCount="128" docActiveCodeLength="884" docExpressionCount="81" docLength="994" endLine="14" length="1" offset="455" startLine="14" starttimestamp="1649862007572" timestamp="1602993">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="1682" _type="Insert" date="Wed Apr 13 11:26:50 EDT 2022" docASTNodeCount="128" docActiveCodeLength="886" docExpressionCount="81" docLength="996" length="2" offset="455" repeat="2" starttimestamp="1649862007572" timestamp="1603193" timestamp2="1603264">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="1689" _type="Delete" date="Wed Apr 13 11:26:54 EDT 2022" docASTNodeCount="128" docActiveCodeLength="882" docExpressionCount="81" docLength="992" endLine="5" length="4" offset="91" startLine="3" starttimestamp="1649862007572" timestamp="1607117">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1690" _type="Insert" date="Wed Apr 13 11:26:54 EDT 2022" docASTNodeCount="132" docActiveCodeLength="924" docExpressionCount="84" docLength="1034" length="42" offset="91" repeat="3" starttimestamp="1649862007572" timestamp="1607118" timestamp2="1607119">
    <text><![CDATA[

import client.ClientRemoteObjectNIO;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1699" _type="Delete" date="Wed Apr 13 11:26:58 EDT 2022" docASTNodeCount="132" docActiveCodeLength="917" docExpressionCount="84" docLength="1027" endLine="18" length="7" offset="586" startLine="18" starttimestamp="1649862007572" timestamp="1610964">
    <text><![CDATA[example]]></text>
  </DocumentChange>
  <DocumentChange __id="1703" _type="Replace" date="Wed Apr 13 11:27:01 EDT 2022" docASTNodeCount="132" docActiveCodeLength="895" docExpressionCount="84" docLength="1005" endLine="18" insertionLength="1" int_docASTNodeCount="130" int_docActiveCodeLength="894" int_docExpressionCount="82" int_docLength="1004" length="23" offset="610" startLine="18" starttimestamp="1649862007572" timestamp="1614340">
    <deletedText><![CDATA[AnNIOManagerPrintClient]]></deletedText>
    <insertedText><![CDATA[C]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1705" _type="Insert" date="Wed Apr 13 11:27:02 EDT 2022" docASTNodeCount="132" docActiveCodeLength="915" docExpressionCount="84" docLength="1025" length="20" offset="611" repeat="20" starttimestamp="1649862007572" timestamp="1614629" timestamp2="1617613">
    <text><![CDATA[lientRemoteObjectNIO]]></text>
  </DocumentChange>
  <Command __id="1749" _type="PauseCommand" date="Wed Apr 13 11:27:09 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1622189">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3548]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1750" _type="MoveCaretCommand" caretOffset="904" date="Wed Apr 13 11:27:09 EDT 2022" docOffset="904" starttimestamp="1649862007572" timestamp="1622272" />
  <Command __id="1752" _type="PauseCommand" date="Wed Apr 13 11:27:45 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="1658403">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[36131]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1751" _type="ShellCommand" date="Wed Apr 13 11:27:45 EDT 2022" starttimestamp="1649862007572" timestamp="1658403" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1753" _type="ShellCommand" date="Wed Apr 13 11:27:46 EDT 2022" starttimestamp="1649862007572" timestamp="1658610" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1757" _type="PauseCommand" date="Wed Apr 13 11:27:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1660477">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1853]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1756" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:27:48 EDT 2022" starttimestamp="1649862007572" timestamp="1660477" />
  <Command __id="1758" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:27:48 EDT 2022" starttimestamp="1649862007572" timestamp="1660576" />
  <Command __id="1759" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:27:48 EDT 2022" starttimestamp="1649862007572" timestamp="1660601" />
  <Command __id="1761" _type="PauseCommand" date="Wed Apr 13 11:27:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1665402">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4801]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1760" _type="ShellCommand" date="Wed Apr 13 11:27:52 EDT 2022" starttimestamp="1649862007572" timestamp="1665402" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1763" _type="PauseCommand" date="Wed Apr 13 11:28:39 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="1711790">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[46388]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1768" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Wed Apr 13 11:29:33 EDT 2022" starttimestamp="1649862007572" timestamp="1765940" />
  <Command __id="1770" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:33 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1765957" type="Debug" />
  <Command __id="1771" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:33 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1765957" type="Debug" />
  <Command __id="1772" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:29:33 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1765957" type="Run" />
  <Command __id="1774" _type="PauseCommand" date="Wed Apr 13 11:29:39 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1771750">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5793]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1773" _type="ShellCommand" date="Wed Apr 13 11:29:39 EDT 2022" starttimestamp="1649862007572" timestamp="1771750" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1775" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Wed Apr 13 11:29:39 EDT 2022" starttimestamp="1649862007572" timestamp="1772094" />
  <Command __id="1776" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1772588" type="Run" />
  <Command __id="1777" _type="RunCommand" className="/A6/src/server/Server.java" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1772588" type="Run" />
  <Command __id="1778" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1772812" type="Run" />
  <Command __id="1779" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:40 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1772834" type="Run" />
  <Command __id="1780" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1772837" type="Run" />
  <Command __id="1781" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1773418" type="Run" />
  <Command __id="1782" _type="ConsoleOutput" date="Wed Apr 13 11:29:41 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1773474" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.7996663870986356
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(EQUAL,"Re"), Diff(DELETE,"adCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63763]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0.40620601268491363 (Closed)¶Explanation: An existing connection was forcibly closed by the remote host"), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.7996663870986356¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1783" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1773865" type="Run" />
  <Command __id="1784" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1773901" type="Run" />
  <Command __id="1785" _type="ConsoleOutput" date="Wed Apr 13 11:29:41 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1773989" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.7996663870986356¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1787" _type="PauseCommand" date="Wed Apr 13 11:29:48 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1781122">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7133]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1786" _type="ShellCommand" date="Wed Apr 13 11:29:48 EDT 2022" starttimestamp="1649862007572" timestamp="1781122" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1789" _type="PauseCommand" date="Wed Apr 13 11:29:54 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1786531">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5409]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1788" _type="ShellCommand" date="Wed Apr 13 11:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="1786531" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1790" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Wed Apr 13 11:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="1786724" />
  <Command __id="1791" _type="RunCommand" className="/A6/src/client/Client.java" date="Wed Apr 13 11:29:54 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1786768" type="Run" />
  <Command __id="1792" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:54 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1787014" type="Run" />
  <Command __id="1793" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1787017" type="Run" />
  <Command __id="1794" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1787604" type="Run" />
  <Command __id="1795" _type="ConsoleOutput" date="Wed Apr 13 11:29:55 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1787662" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.32184598126359243
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.32184598126359243"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1796" _type="ShellCommand" date="Wed Apr 13 11:29:56 EDT 2022" starttimestamp="1649862007572" timestamp="1788557" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1797" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1788944" type="Run" />
  <Command __id="1798" _type="ShellCommand" date="Wed Apr 13 11:29:56 EDT 2022" starttimestamp="1649862007572" timestamp="1788947" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1799" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1788948" type="Run" />
  <Command __id="1801" _type="PauseCommand" date="Wed Apr 13 11:29:58 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1790461">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1513]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1803" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1793784" type="Run" />
  <Command __id="1805" _type="ConsoleOutput" date="Wed Apr 13 11:30:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1793797" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.32184598126359243 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:"), Diff(INSERT,"Server0<-->"), Diff(EQUAL,"Generic Client:0.32184598126359243"), Diff(INSERT," (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1806" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1793899" type="Run" />
  <Command __id="1807" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1793943" type="Run" />
  <Command __id="1808" _type="ConsoleOutput" date="Wed Apr 13 11:30:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1793947" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@6cf8dc3c
[com.sun.proxy.$Proxy1@6cf8dc3c]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.32184598126359243 (Opened)"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@6cf8dc3c¶[com.sun.proxy.$Proxy1@6cf8dc3c]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1809" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1794004" type="Run" />
  <Command __id="1810" _type="ConsoleOutput" date="Wed Apr 13 11:30:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1794127" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@6cf8dc3c¶[com.sun.proxy.$Proxy1@6cf8dc3c]"), Diff(INSERT,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1811" _type="ConsoleOutput" date="Wed Apr 13 11:30:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1794148" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1813" _type="PauseCommand" date="Wed Apr 13 11:30:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1795462">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1314]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1820" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1800081" type="Run" />
  <Command __id="1823" _type="PauseCommand" date="Wed Apr 13 11:30:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1803585">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3503]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1822" _type="ConsoleOutput" date="Wed Apr 13 11:30:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1803584" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.09261083902577771 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:"), Diff(INSERT,"Server0<-->"), Diff(EQUAL,"Generic Client:0.09261083902577771"), Diff(INSERT," (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1824" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1803715" type="Run" />
  <Command __id="1825" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1803758" type="Run" />
  <Command __id="1826" _type="ConsoleOutput" date="Wed Apr 13 11:30:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1803761" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@733e800b
[com.sun.proxy.$Proxy1@6cf8dc3c, com.sun.proxy.$Proxy1@733e800b]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.09261083902577771 (Opened)"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@733e800b¶[com.sun.proxy.$Proxy1@6cf8dc3c, com.sun.proxy.$Proxy1@733e800b]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1827" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1803822" type="Run" />
  <Command __id="1828" _type="ConsoleOutput" date="Wed Apr 13 11:30:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1803943" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@733e800b¶[com.sun.proxy.$Proxy1@6cf8dc3c, com.sun.proxy.$Proxy1@733e800b]"), Diff(INSERT,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1829" _type="ConsoleOutput" date="Wed Apr 13 11:30:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1803951" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener o"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRe"), Diff(EQUAL,"f "), Diff(DELETE,"c"), Diff(INSERT,"["), Diff(EQUAL,"li"), Diff(DELETE,"ent¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"veRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1831" _type="PauseCommand" date="Wed Apr 13 11:30:13 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1805457">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1505]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1830" _type="ShellCommand" date="Wed Apr 13 11:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="1805456" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1832" _type="MoveCaretCommand" caretOffset="1750" date="Wed Apr 13 11:30:13 EDT 2022" docOffset="1750" starttimestamp="1649862007572" timestamp="1805525" />
  <Command __id="1748" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:27:09 EDT 2022" docASTNodeCount="294" docActiveCodeLength="1958" docExpressionCount="183" docLength="2259" projectName="A6" starttimestamp="1649862007572" timestamp="1622189">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;"), Diff(INSERT,"¶import java.util.concurrent.ArrayBlockingQueue;"), Diff(EQUAL,"¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;"), Diff(INSERT,"¶import readThread.ReadThreadInterface;"), Diff(EQUAL,"¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶"), Diff(DELETE,""), Diff(EQUAL,"	protected SocketChannel socketChannel;¶	¶	"), Diff(INSERT,"ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	"), Diff(EQUAL,"@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ReadThreadInterface;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1754" _type="Insert" date="Wed Apr 13 11:27:46 EDT 2022" docASTNodeCount="298" docActiveCodeLength="1995" docExpressionCount="186" docLength="2296" length="37" offset="474" repeat="2" starttimestamp="1649862007572" timestamp="1658624" timestamp2="1658625">
    <text><![CDATA[
import readThread.ClientReadThread;]]></text>
  </DocumentChange>
  <Command __id="1834" _type="PauseCommand" date="Wed Apr 13 11:30:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1806862">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1337]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1843" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1833761" type="Run" />
  <Command __id="1845" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1833792" type="Run" />
  <Command __id="1847" _type="PauseCommand" date="Wed Apr 13 11:30:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1841979">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8187]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1846" _type="ShellCommand" date="Wed Apr 13 11:30:49 EDT 2022" starttimestamp="1649862007572" timestamp="1841979" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1849" _type="PauseCommand" date="Wed Apr 13 11:30:55 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1847958">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5979]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1848" _type="ShellCommand" date="Wed Apr 13 11:30:55 EDT 2022" starttimestamp="1649862007572" timestamp="1847958" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1851" _type="PauseCommand" date="Wed Apr 13 11:31:03 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1855883">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7925]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1850" _type="ConsoleInput" date="Wed Apr 13 11:31:03 EDT 2022" starttimestamp="1649862007572" timestamp="1855883" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="1852" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:31:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1855888" type="Run" />
  <Command __id="1853" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:31:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1855929" type="Run" />
  <Command __id="1854" _type="ConsoleOutput" date="Wed Apr 13 11:31:03 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1855940" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
NIO
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1855" _type="ConsoleOutput" date="Wed Apr 13 11:31:03 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1855959" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: NIO
USING RMI IN SERVER
Command recieved for broadcast: move 50 -50
USING RMI IN SERVER
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]
2
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(INSERT,"IPC Mechanism recieved for broadcast: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: move 50 -50¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1856" _type="ConsoleOutput" date="Wed Apr 13 11:31:03 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1855984" type="ConsoleOutput">
    <outputString><![CDATA[recieved broadcased command: move 50 -50
PROPERTY CHANGE
executed command
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism "), Diff(EQUAL,"recieved "), Diff(DELETE,"for "), Diff(EQUAL,"broadcas"), Diff(DELETE,"t: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: move 50 -50¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]"), Diff(INSERT,"ed command: move 50 -50¶PROPERTY CHANGE¶executed command"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1857" _type="ConsoleOutput" date="Wed Apr 13 11:31:03 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1856146" type="ConsoleOutput">
    <outputString><![CDATA[Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcased command: move 50 -50¶PROPERTY CHANGE¶execu"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separa"), Diff(EQUAL,"ted "), Diff(INSERT,"by "), Diff(EQUAL,"comma"), Diff(DELETE,"nd"), Diff(INSERT,"s:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1859" _type="PauseCommand" date="Wed Apr 13 11:31:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1859064">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2918]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
