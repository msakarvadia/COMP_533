<Events startTimestamp="1649862007572" logVersion="1.0.0.202111260825">
  <Command __id="5" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:00:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="17970" type="Run" />
  <Command __id="9" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:00:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="26642" type="Run" />
  <Command __id="12" _type="PauseCommand" date="Wed Apr 13 11:00:39 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="31786">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5144]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="11" _type="ExceptionCommand" date="Wed Apr 13 11:00:39 EDT 2022" starttimestamp="1649862007572" timestamp="31786" type="Exception">
    <exceptionString><![CDATA[Could not connnect to server within ms:5000
java.lang.NullPointerException
	at client.ClientRemoteObject.init(ClientRemoteObject.java:136)
	at coupledsims.AStandAloneTwoCoupledHalloweenSimulations.start(AStandAloneTwoCoupledHalloweenSimulations.java:95)
	at client.Client.main(Client.java:14)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="14" _type="PauseCommand" date="Wed Apr 13 11:00:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="33246">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1460]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="28" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:00:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="49283" type="Run" />
  <Command __id="32" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:00:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="50343" type="Run" />
  <Command __id="37" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="54149" type="Run" />
  <Command __id="38" _type="ConsoleOutput" date="Wed Apr 13 11:01:02 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="54461" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.5412620634947035
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5412620634947035"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="46" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="60510" type="Run" />
  <Command __id="48" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="60565" type="Run" />
  <Command __id="49" _type="ConsoleOutput" date="Wed Apr 13 11:01:08 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="60803" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.5412620634947035 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC¶com.sun.proxy.$Proxy1@63ca17b5¶[com.sun.proxy.$Proxy1@63ca17b5]"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="53" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="65388" type="Run" />
  <Command __id="54" _type="ShellCommand" date="Wed Apr 13 11:01:13 EDT 2022" starttimestamp="1649862007572" timestamp="66106" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="56" _type="PauseCommand" date="Wed Apr 13 11:01:21 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="73871">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7765]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="55" _type="ConsoleInput" date="Wed Apr 13 11:01:21 EDT 2022" starttimestamp="1649862007572" timestamp="73871" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="57" _type="ConsoleOutput" date="Wed Apr 13 11:01:21 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="73938" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
NIO
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="59" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="75577" type="Run" />
  <Command __id="62" _type="PauseCommand" date="Wed Apr 13 11:01:36 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88854">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[13277]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="61" _type="ConsoleInput" date="Wed Apr 13 11:01:36 EDT 2022" starttimestamp="1649862007572" timestamp="88854" type="Exception">
    <outputString><![CDATA[i GIPC
]]></outputString>
  </Command>
  <Command __id="66" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90535" type="Run" />
  <Command __id="68" _type="PauseCommand" date="Wed Apr 13 11:01:44 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="97144">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6608]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="69" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="97146" type="Run" />
  <Command __id="70" _type="ConsoleOutput" date="Wed Apr 13 11:01:44 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="97207" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]
IPC Mechanism
GIPC
using gipc proxy server
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:undo
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener."), Diff(DELETE,"ipcMechanism(util.interactiveMethodInvocation."), Diff(INSERT,"simulationCommand(java.lang.String)[undo]¶"), Diff(EQUAL,"IPC"), Diff(INSERT," "), Diff(EQUAL,"Mechanism"), Diff(DELETE,")["), Diff(INSERT,"¶"), Diff(EQUAL,"GIPC"), Diff(DELETE,"]"), Diff(INSERT,"¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:undo"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="71" _type="ConsoleOutput" date="Wed Apr 13 11:01:44 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="97216" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: GIPC
USING RMI IN SERVER
Command recieved for broadcast: undo
USING GIPC IN SERVER
[com.sun.proxy.$Proxy1@63ca17b5]
1
com.sun.proxy.$Proxy1@63ca17b5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]¶IPC Mechanism¶GIPC¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:undo¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER¶Command recieved for broadcast: undo¶USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="73" _type="PauseCommand" date="Wed Apr 13 11:01:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="102280">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5064]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="72" _type="ShellCommand" date="Wed Apr 13 11:01:49 EDT 2022" starttimestamp="1649862007572" timestamp="102280" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="75" _type="PauseCommand" date="Wed Apr 13 11:01:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="105295">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3015]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="74" _type="ShellCommand" date="Wed Apr 13 11:01:52 EDT 2022" starttimestamp="1649862007572" timestamp="105295" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="77" _type="PauseCommand" date="Wed Apr 13 11:01:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="106427">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1132]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="80" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:01:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="112163" type="Run" />
  <Command __id="83" _type="PauseCommand" date="Wed Apr 13 11:02:15 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="127461">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[15298]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="84" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:02:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="127464" type="Run" />
  <Command __id="85" _type="ConsoleOutput" date="Wed Apr 13 11:02:15 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="127529" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 100 -100]
IPC Mechanism
GIPC
using gipc proxy server
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 100 -100
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER¶Command recieved for broadcast: undo¶USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 100 -100]¶IPC Mechanism¶GIPC¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 100 -100¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="86" _type="ConsoleOutput" date="Wed Apr 13 11:02:15 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="127535" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: GIPC
USING RMI IN SERVER
Command recieved for broadcast: move 100 -100
USING GIPC IN SERVER
[com.sun.proxy.$Proxy1@63ca17b5]
1
com.sun.proxy.$Proxy1@63ca17b5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 100 -100]¶IPC Mechanism¶GIPC¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 100 -100¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER¶Command recieved for broadcast: move 100 -100¶USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="88" _type="PauseCommand" date="Wed Apr 13 11:02:24 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="137261">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9726]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="87" _type="ConsoleInput" date="Wed Apr 13 11:02:24 EDT 2022" starttimestamp="1649862007572" timestamp="137261" type="Exception">
    <outputString><![CDATA[i RMI
]]></outputString>
  </Command>
  <Command __id="89" _type="ConsoleOutput" date="Wed Apr 13 11:02:24 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="137317" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER¶Command recieved for broadcast: move 100 -100¶USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="91" _type="PauseCommand" date="Wed Apr 13 11:02:26 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="138904">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1587]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="90" _type="ShellCommand" date="Wed Apr 13 11:02:26 EDT 2022" starttimestamp="1649862007572" timestamp="138904" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="93" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:02:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="142483" type="Run" />
  <Command __id="96" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:02:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="143213" type="Run" />
  <Command __id="97" _type="ConsoleOutput" date="Wed Apr 13 11:02:30 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="143274" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[take 3]
IPC Mechanism
RMI
using RMI proxy server
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener."), Diff(DELETE,"ipcMechanism(util.interactiveMethodInvocation."), Diff(INSERT,"simulationCommand(java.lang.String)[take 3]¶"), Diff(EQUAL,"IPC"), Diff(INSERT," "), Diff(EQUAL,"Mechanism"), Diff(DELETE,")["), Diff(INSERT,"¶"), Diff(EQUAL,"RMI"), Diff(DELETE,"]"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"using RMI proxy server"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="98" _type="ConsoleOutput" date="Wed Apr 13 11:02:30 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="143333" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: RMI
USING RMI IN SERVER
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[take 3]¶IPC Mechanism¶RMI¶using RMI proxy server"), Diff(INSERT,"IPC Mechanism recieved for broadcast: RMI¶USING RMI IN SERVER"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="99" _type="ConsoleOutput" date="Wed Apr 13 11:02:31 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="143468" type="ConsoleOutput">
    <outputString><![CDATA[PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:take 3
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: RMI¶USING RMI IN SERVER"), Diff(INSERT,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:take 3¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="100" _type="ConsoleOutput" date="Wed Apr 13 11:02:31 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="143648" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: take 3
USING RMI IN SERVER
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]]
1
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:take 3¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Command recieved for broadcast: take 3¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]]¶1¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="102" _type="PauseCommand" date="Wed Apr 13 11:02:35 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="147948">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4300]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="103" _type="ShellCommand" date="Wed Apr 13 11:02:39 EDT 2022" starttimestamp="1649862007572" timestamp="151969" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="106" _type="PauseCommand" date="Wed Apr 13 11:02:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="154682">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2713]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="105" _type="ConsoleInput" date="Wed Apr 13 11:02:42 EDT 2022" starttimestamp="1649862007572" timestamp="154682" type="Exception">
    <outputString><![CDATA[i GIPC
]]></outputString>
  </Command>
  <Command __id="107" _type="ConsoleOutput" date="Wed Apr 13 11:02:42 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="154739" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Command recieved for broadcast: take 3¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]]¶1¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63628](remote),objID:[-157c3601:180237146e3:-7ffe, 7223370025675201959]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="109" _type="PauseCommand" date="Wed Apr 13 11:02:50 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="162966">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8227]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="108" _type="ConsoleInput" date="Wed Apr 13 11:02:50 EDT 2022" starttimestamp="1649862007572" timestamp="162966" type="Exception">
    <outputString><![CDATA[s "undo"
]]></outputString>
  </Command>
  <Command __id="110" _type="ConsoleOutput" date="Wed Apr 13 11:02:50 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="163030" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: GIPC
USING RMI IN SERVER
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)["), Diff(INSERT,"IPC Mechanism recieved for broadcast: "), Diff(EQUAL,"GIPC"), Diff(DELETE,"]"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"USING RMI IN SERVER"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="111" _type="ConsoleOutput" date="Wed Apr 13 11:02:50 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="163034" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]
IPC Mechanism
GIPC
using gipc proxy server
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: GIPC¶USING RMI IN SERVER"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]¶IPC Mechanism¶GIPC¶using gipc proxy server"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="112" _type="ConsoleOutput" date="Wed Apr 13 11:02:50 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="163245" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: undo
USING GIPC IN SERVER
[com.sun.proxy.$Proxy1@63ca17b5]
1
com.sun.proxy.$Proxy1@63ca17b5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)["), Diff(INSERT,"Command recieved for broadcast: "), Diff(EQUAL,"undo"), Diff(DELETE,"]"), Diff(EQUAL,"¶"), Diff(DELETE,"IPC Mechanism¶GIPC¶using gipc proxy server"), Diff(INSERT,"USING GIPC IN SERVER¶[com.sun.proxy.$Proxy1@63ca17b5]¶1¶com.sun.proxy.$Proxy1@63ca17b5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="114" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:03:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="188230" type="Run" />
  <Command __id="117" _type="PauseCommand" date="Wed Apr 13 11:04:54 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="286924">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[98693]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="126" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:06:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="375521" type="Run" />
  <Command __id="128" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:06:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="375581" type="Run" />
  <Command __id="130" _type="PauseCommand" date="Wed Apr 13 11:06:43 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="396375">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[20793]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="129" _type="SelectTextCommand" caretOffset="5828" date="Wed Apr 13 11:06:43 EDT 2022" end="5876" start="5828" starttimestamp="1649862007572" timestamp="396374" />
  <Command __id="131" _type="CopyCommand" date="Wed Apr 13 11:06:44 EDT 2022" starttimestamp="1649862007572" timestamp="396640" />
  <Command __id="116" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:04:54 EDT 2022" docASTNodeCount="1234" docActiveCodeLength="8901" docExpressionCount="876" docLength="9957" projectName="A6" starttimestamp="1649862007572" timestamp="286923">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		//SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

	

}
]]></snapshot>
  </Command>
  <Command __id="133" _type="PauseCommand" date="Wed Apr 13 11:06:45 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="398058">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1418]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="134" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:06:45 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="398301" />
  <Command __id="136" _type="PauseCommand" date="Wed Apr 13 11:06:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="400029">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1728]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="135" _type="MoveCaretCommand" caretOffset="161" date="Wed Apr 13 11:06:47 EDT 2022" docOffset="322" starttimestamp="1649862007572" timestamp="400029" />
  <Command __id="138" _type="InsertStringCommand" date="Wed Apr 13 11:06:47 EDT 2022" starttimestamp="1649862007572" timestamp="400331" timestamp2="400331">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="140" _type="PasteCommand" date="Wed Apr 13 11:06:48 EDT 2022" starttimestamp="1649862007572" timestamp="401223" />
  <Command __id="142" _type="InsertStringCommand" date="Wed Apr 13 11:06:49 EDT 2022" starttimestamp="1649862007572" timestamp="401681" timestamp2="401681">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="144" _type="InsertStringCommand" date="Wed Apr 13 11:06:49 EDT 2022" starttimestamp="1649862007572" timestamp="402312" timestamp2="402312">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="146" _type="PauseCommand" date="Wed Apr 13 11:06:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="404546">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2234]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="145" _type="MoveCaretCommand" caretOffset="212" date="Wed Apr 13 11:06:52 EDT 2022" docOffset="373" starttimestamp="1649862007572" timestamp="404546" />
  <Command __id="148" _type="PauseCommand" date="Wed Apr 13 11:06:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="405884">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1338]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="147" _type="MoveCaretCommand" caretOffset="216" date="Wed Apr 13 11:06:53 EDT 2022" docOffset="377" starttimestamp="1649862007572" timestamp="405884" />
  <Command __id="150" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:06:53 EDT 2022" starttimestamp="1649862007572" timestamp="406163" />
  <Command __id="152" _type="PauseCommand" date="Wed Apr 13 11:06:55 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="407661">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1498]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="151" _type="MoveCaretCommand" caretOffset="215" date="Wed Apr 13 11:06:55 EDT 2022" docOffset="376" starttimestamp="1649862007572" timestamp="407661" />
  <Command __id="153" _type="MoveCaretCommand" caretOffset="219" date="Wed Apr 13 11:06:55 EDT 2022" docOffset="380" starttimestamp="1649862007572" timestamp="408221" />
  <Command __id="155" _type="InsertStringCommand" date="Wed Apr 13 11:06:56 EDT 2022" starttimestamp="1649862007572" timestamp="408472" timestamp2="408472">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:06:56 EDT 2022" starttimestamp="1649862007572" timestamp="409400" />
  <Command __id="159" _type="InsertStringCommand" date="Wed Apr 13 11:06:57 EDT 2022" starttimestamp="1649862007572" timestamp="409729" timestamp2="409729">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="161" _type="PauseCommand" date="Wed Apr 13 11:06:58 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="410828">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1099]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="160" _type="MoveCaretCommand" caretOffset="188" date="Wed Apr 13 11:06:58 EDT 2022" docOffset="349" starttimestamp="1649862007572" timestamp="410828" />
  <Command __id="162" _type="MoveCaretCommand" caretOffset="215" date="Wed Apr 13 11:06:59 EDT 2022" docOffset="376" starttimestamp="1649862007572" timestamp="411511" />
  <Command __id="164" _type="InsertStringCommand" date="Wed Apr 13 11:06:59 EDT 2022" starttimestamp="1649862007572" timestamp="411751" timestamp2="411751">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="166" _type="InsertStringCommand" date="Wed Apr 13 11:06:59 EDT 2022" starttimestamp="1649862007572" timestamp="411935" timestamp2="411935">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="168" _type="InsertStringCommand" date="Wed Apr 13 11:07:00 EDT 2022" starttimestamp="1649862007572" timestamp="412531" timestamp2="412531">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="170" _type="InsertStringCommand" date="Wed Apr 13 11:07:00 EDT 2022" starttimestamp="1649862007572" timestamp="412637" timestamp2="412637">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="172" _type="InsertStringCommand" date="Wed Apr 13 11:07:00 EDT 2022" starttimestamp="1649862007572" timestamp="412732" timestamp2="412732">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="174" _type="InsertStringCommand" date="Wed Apr 13 11:07:00 EDT 2022" starttimestamp="1649862007572" timestamp="413100" timestamp2="413100">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="175" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:07:01 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="413490" />
  <Command __id="178" _type="PauseCommand" date="Wed Apr 13 11:07:02 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="414836">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1346]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="177" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:07:02 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="414836" />
  <Command __id="180" _type="InsertStringCommand" date="Wed Apr 13 11:07:02 EDT 2022" starttimestamp="1649862007572" timestamp="414917" timestamp2="414917">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="182" _type="PauseCommand" date="Wed Apr 13 11:07:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="416127">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1210]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="195" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:07:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="421502" type="Debug" />
  <Command __id="197" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:07:09 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="421502" type="Run" />
  <Command __id="198" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:07:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="421502" type="Debug" />
  <Command __id="199" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:07:09 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="421503" type="Run" />
  <Command __id="200" _type="ShellCommand" date="Wed Apr 13 11:07:09 EDT 2022" starttimestamp="1649862007572" timestamp="421523" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="201" _type="ConsoleOutput" date="Wed Apr 13 11:07:09 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="421583" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:63625 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:undo¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:63625 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="132" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:06:45 EDT 2022" docASTNodeCount="135" docActiveCodeLength="907" docExpressionCount="77" docLength="1111" projectName="A6" starttimestamp="1649862007572" timestamp="398058">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="137" _type="Insert" date="Wed Apr 13 11:06:47 EDT 2022" docASTNodeCount="135" docActiveCodeLength="910" docExpressionCount="77" docLength="1114" length="3" offset="322" starttimestamp="1649862007572" timestamp="400324">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="139" _type="Replace" date="Wed Apr 13 11:06:48 EDT 2022" docASTNodeCount="147" docActiveCodeLength="958" docExpressionCount="82" docLength="1162" endLine="10" insertionLength="49" int_docASTNodeCount="135" int_docActiveCodeLength="909" int_docExpressionCount="77" int_docLength="1113" length="1" offset="324" startLine="10" starttimestamp="1649862007572" timestamp="401108">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	protected void init(String[] args) {]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="141" _type="Insert" date="Wed Apr 13 11:06:49 EDT 2022" docASTNodeCount="147" docActiveCodeLength="966" docExpressionCount="82" docLength="1170" length="8" offset="373" starttimestamp="1649862007572" timestamp="401676">
    <text><![CDATA[
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="143" _type="Replace" date="Wed Apr 13 11:06:49 EDT 2022" docASTNodeCount="149" docActiveCodeLength="966" docExpressionCount="82" docLength="1170" endLine="12" insertionLength="2" int_docASTNodeCount="147" int_docActiveCodeLength="964" int_docExpressionCount="82" int_docLength="1168" length="2" offset="375" startLine="12" starttimestamp="1649862007572" timestamp="402306">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="149" _type="Delete" date="Wed Apr 13 11:06:53 EDT 2022" docASTNodeCount="147" docActiveCodeLength="965" docExpressionCount="82" docLength="1169" endLine="12" length="1" offset="376" startLine="12" starttimestamp="1649862007572" timestamp="406157">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="154" _type="Insert" date="Wed Apr 13 11:06:56 EDT 2022" docASTNodeCount="147" docActiveCodeLength="966" docExpressionCount="82" docLength="1170" length="1" offset="380" starttimestamp="1649862007572" timestamp="408466">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <DocumentChange __id="156" _type="Delete" date="Wed Apr 13 11:06:56 EDT 2022" docASTNodeCount="147" docActiveCodeLength="965" docExpressionCount="82" docLength="1169" endLine="13" length="1" offset="380" startLine="13" starttimestamp="1649862007572" timestamp="409396">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <DocumentChange __id="158" _type="Insert" date="Wed Apr 13 11:06:57 EDT 2022" docASTNodeCount="147" docActiveCodeLength="968" docExpressionCount="82" docLength="1172" length="3" offset="380" starttimestamp="1649862007572" timestamp="409724">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="163" _type="Insert" date="Wed Apr 13 11:06:59 EDT 2022" docASTNodeCount="152" docActiveCodeLength="975" docExpressionCount="86" docLength="1179" length="7" offset="376" repeat="7" starttimestamp="1649862007572" timestamp="411747" timestamp2="414176">
    <text><![CDATA[super.i]]></text>
  </DocumentChange>
  <DocumentChange __id="179" _type="Replace" date="Wed Apr 13 11:07:02 EDT 2022" docASTNodeCount="151" docActiveCodeLength="985" docExpressionCount="85" docLength="1189" endLine="12" insertionLength="11" int_docASTNodeCount="147" int_docActiveCodeLength="974" int_docExpressionCount="82" int_docLength="1178" length="1" offset="382" startLine="12" starttimestamp="1649862007572" timestamp="414840">
    <deletedText><![CDATA[i]]></deletedText>
    <insertedText><![CDATA[init(args);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="184" _type="Replace" date="Wed Apr 13 11:07:03 EDT 2022" docASTNodeCount="151" docActiveCodeLength="986" docExpressionCount="85" docLength="1190" endLine="12" insertionLength="2" int_docASTNodeCount="151" int_docActiveCodeLength="984" int_docExpressionCount="85" int_docLength="1188" length="1" offset="375" startLine="12" starttimestamp="1649862007572" timestamp="416389">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="191" _type="Insert" date="Wed Apr 13 11:07:06 EDT 2022" docASTNodeCount="151" docActiveCodeLength="990" docExpressionCount="85" docLength="1194" length="4" offset="394" starttimestamp="1649862007572" timestamp="418676">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="203" _type="PauseCommand" date="Wed Apr 13 11:07:13 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="425570">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3987]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="204" _type="InsertStringCommand" date="Wed Apr 13 11:07:13 EDT 2022" starttimestamp="1649862007572" timestamp="425577" timestamp2="425577">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="206" _type="InsertStringCommand" date="Wed Apr 13 11:07:13 EDT 2022" starttimestamp="1649862007572" timestamp="425918" timestamp2="425918">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="208" _type="InsertStringCommand" date="Wed Apr 13 11:07:13 EDT 2022" starttimestamp="1649862007572" timestamp="426045" timestamp2="426045">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="210" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="426762" timestamp2="426762">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="212" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="426878" timestamp2="426878">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="214" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="427002" timestamp2="427002">
    <data><![CDATA[D]]></data>
  </Command>
  <Command __id="216" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="427094" timestamp2="427094">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="218" _type="InsertStringCommand" date="Wed Apr 13 11:07:14 EDT 2022" starttimestamp="1649862007572" timestamp="427240" timestamp2="427240">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="220" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="427763" timestamp2="427763">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="222" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="427970" timestamp2="427970">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="224" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="428028" timestamp2="428028">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="226" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="428098" timestamp2="428098">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="228" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="428265" timestamp2="428265">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="230" _type="InsertStringCommand" date="Wed Apr 13 11:07:15 EDT 2022" starttimestamp="1649862007572" timestamp="428378" timestamp2="428378">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="232" _type="InsertStringCommand" date="Wed Apr 13 11:07:16 EDT 2022" starttimestamp="1649862007572" timestamp="428631" timestamp2="428631">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="234" _type="InsertStringCommand" date="Wed Apr 13 11:07:16 EDT 2022" starttimestamp="1649862007572" timestamp="429417" timestamp2="429417">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="236" _type="InsertStringCommand" date="Wed Apr 13 11:07:17 EDT 2022" starttimestamp="1649862007572" timestamp="429512" timestamp2="429512">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="238" _type="InsertStringCommand" date="Wed Apr 13 11:07:17 EDT 2022" starttimestamp="1649862007572" timestamp="429617" timestamp2="429617">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="241" _type="PauseCommand" date="Wed Apr 13 11:07:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="430948">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1331]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="240" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="430948" timestamp2="430948">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="243" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="431077" timestamp2="431077">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="245" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="431179" timestamp2="431179">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="247" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="431291" timestamp2="431291">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="249" _type="InsertStringCommand" date="Wed Apr 13 11:07:18 EDT 2022" starttimestamp="1649862007572" timestamp="431375" timestamp2="431375">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="251" _type="InsertStringCommand" date="Wed Apr 13 11:07:19 EDT 2022" starttimestamp="1649862007572" timestamp="431500" timestamp2="431500">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="253" _type="InsertStringCommand" date="Wed Apr 13 11:07:19 EDT 2022" starttimestamp="1649862007572" timestamp="431583" timestamp2="431583">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="255" _type="InsertStringCommand" date="Wed Apr 13 11:07:19 EDT 2022" starttimestamp="1649862007572" timestamp="432160" timestamp2="432160">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="256" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:07:20 EDT 2022" starttimestamp="1649862007572" timestamp="432697" />
  <Command __id="257" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:07:20 EDT 2022" starttimestamp="1649862007572" timestamp="432792" />
  <Command __id="258" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:07:20 EDT 2022" starttimestamp="1649862007572" timestamp="432825" />
  <DocumentChange __id="202" _type="Insert" date="Wed Apr 13 11:07:13 EDT 2022" docASTNodeCount="151" docActiveCodeLength="994" docExpressionCount="85" docLength="1223" length="29" offset="398" repeat="26" starttimestamp="1649862007572" timestamp="425570" timestamp2="432154">
    <text><![CDATA[
		//TODO create nio manager]]></text>
  </DocumentChange>
  <Command __id="260" _type="PauseCommand" date="Wed Apr 13 11:07:23 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="435855">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3030]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="261" _type="SelectTextCommand" caretOffset="2191" date="Wed Apr 13 11:07:23 EDT 2022" end="2191" start="2108" starttimestamp="1649862007572" timestamp="436002" />
  <Command __id="259" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:07:23 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="435855">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import assignments.util.MiscAssignmentUtils;

import client.ClientRemoteInterfaceGIPC;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import inputport.nio.manager.listeners.WriteBoundedBufferListener;
import readThread.ReadThreadInterface;
import util.trace.factories.FactoryTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;

public class AnNIOManagerPrintServer implements NIOManagerPrintServer {

	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();

	public AnNIOManagerPrintServer(int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}

//	protected void setFactories() {
//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
//	}
	protected void setTracing() {
		FactoryTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
	}

	protected void initialize(int aServerPort) {
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		/*
		// Pop value off the bounded buffer
		ByteBuffer originalMessage = null;
		try {
			originalMessage = boundedBuffer.take();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		// Echo recieve message to all clients (except original message sender)
		for (SocketChannel socket : socketList) {
			if (!socket.equals(aSocketChannel)) {
				nioManager.write(socket, originalMessage, this);
			}
		}
		*/
		System.out.println("notifying reader!!");
		reader.notifyThread();
		System.out.println("thread has completed action and is now waiting");

	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){
		return boundedBuffer;
		
	}
	
	@Override
	public List<SocketChannel> getSocketList(){
		return socketList;
	}
	
	@Override
	public SocketChannel getSocketChannel() {
		return currentSocket;
	}

	@Override
	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {
		// TODO Auto-generated method stub
		String aMessageString = new String(aMessage.array());
		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);
	}

}
]]></snapshot>
  </Command>
  <Command __id="263" _type="PauseCommand" date="Wed Apr 13 11:07:56 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="468978">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[32976]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="264" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:07:56 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="469180" />
  <Command __id="262" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:07:56 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="468978">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import assignments.util.mainArgs.ServerArgsProcessor;

public class NIOManagerPrintServerLauncherNoFactory {
	public static void main(String[] args) {
		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));
	}

}]]></snapshot>
  </Command>
  <Command __id="266" _type="PauseCommand" date="Wed Apr 13 11:08:11 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="484301">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15121]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="267" _type="MoveCaretCommand" caretOffset="2577" date="Wed Apr 13 11:08:11 EDT 2022" docOffset="3869" starttimestamp="1649862007572" timestamp="484418" />
  <Command __id="265" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:11 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="484301">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;
import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import readThread.ReadThreadInterface;
import util.trace.factories.FactoryTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;

public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	protected SocketChannel socketChannel;
	protected Scanner scanner = new Scanner(System.in);
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;

	protected AnNIOManagerPrintClient(int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}

//	protected void setFactories() {
//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
//	}

	public void processInput() {
		scanner = new Scanner(System.in);
		while (true) {
			System.out.println("Enter a line of input to be printed remotely");
			String aNextLine = scanner.nextLine();
			// wrap writes to the buffer and then flips it
			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
			nioManager.write(socketChannel, aWriteMessage, this);
		}
	}

	protected void setTracing() {
		FactoryTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
	}

	protected void initialize(int aServerPort) {
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("Client Connect to Server");
	}

	@Override
	public void notConnected(SocketChannel theSocketChannel, Exception e) {

	}

	@Override
	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {
		System.out.println("client channel has written");
	}

	@Override
	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
				
	}

	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

}]]></snapshot>
  </Command>
  <Command __id="269" _type="PauseCommand" date="Wed Apr 13 11:08:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="489099">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4681]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="270" _type="SelectTextCommand" caretOffset="2191" date="Wed Apr 13 11:08:16 EDT 2022" end="2191" start="2108" starttimestamp="1649862007572" timestamp="489185" />
  <Command __id="268" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:16 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="489099">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="272" _type="PauseCommand" date="Wed Apr 13 11:08:17 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="490267">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1081]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="271" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:17 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="490266">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="273" _type="MoveCaretCommand" caretOffset="2577" date="Wed Apr 13 11:08:17 EDT 2022" docOffset="3869" starttimestamp="1649862007572" timestamp="490356" />
  <Command __id="275" _type="MoveCaretCommand" caretOffset="1464" date="Wed Apr 13 11:08:18 EDT 2022" docOffset="1711" starttimestamp="1649862007572" timestamp="491212" />
  <Command __id="274" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:18 EDT 2022" docASTNodeCount="225" docActiveCodeLength="1609" docExpressionCount="133" docLength="1877" projectName="A6" starttimestamp="1649862007572" timestamp="491107">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleServerReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import readThread.ReadThreadInterface;

public class exampleServerReadThread implements ReadThreadInterface{
	final NIOManagerPrintServer server;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleServerReadThread (final NIOManagerPrintServer aServer) {
		server = aServer;
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();
			List<SocketChannel> socketList = server.getSocketList();
			SocketChannel currentSocket = server.getSocketChannel();
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			// Echo recieve message to all clients (except original message sender)
			for (SocketChannel socket : socketList) {
				if (!socket.equals(currentSocket)) {
					nioManager.write(socket, originalMessage, server);
				}
			}
		
		}
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="277" _type="PauseCommand" date="Wed Apr 13 11:08:22 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="495329">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4117]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="278" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:08:22 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="495407" />
  <Command __id="276" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:22 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="495329">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="280" _type="PauseCommand" date="Wed Apr 13 11:08:34 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="507041">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11634]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="281" _type="MoveCaretCommand" caretOffset="2577" date="Wed Apr 13 11:08:34 EDT 2022" docOffset="3869" starttimestamp="1649862007572" timestamp="507121" />
  <Command __id="279" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:34 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="507041">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="283" _type="PauseCommand" date="Wed Apr 13 11:08:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="510217">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3096]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="284" _type="SelectTextCommand" caretOffset="2191" date="Wed Apr 13 11:08:37 EDT 2022" end="2191" start="2108" starttimestamp="1649862007572" timestamp="510294" />
  <Command __id="282" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:37 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="510217">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="286" _type="PauseCommand" date="Wed Apr 13 11:08:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="512377">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2083]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="287" _type="MoveCaretCommand" caretOffset="2577" date="Wed Apr 13 11:08:40 EDT 2022" docOffset="3869" starttimestamp="1649862007572" timestamp="512472" />
  <Command __id="285" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:39 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="512377">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="289" _type="PauseCommand" date="Wed Apr 13 11:08:41 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="514392">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1919]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="290" _type="SelectTextCommand" caretOffset="2191" date="Wed Apr 13 11:08:42 EDT 2022" end="2191" start="2108" starttimestamp="1649862007572" timestamp="514545" />
  <Command __id="292" _type="PauseCommand" date="Wed Apr 13 11:08:53 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="526072">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[11527]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="291" _type="SelectTextCommand" caretOffset="464" date="Wed Apr 13 11:08:53 EDT 2022" end="584" start="464" starttimestamp="1649862007572" timestamp="526072" />
  <Command __id="288" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:41 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="514391">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="294" _type="PauseCommand" date="Wed Apr 13 11:08:57 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="530171">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4099]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="295" _type="SelectTextCommand" caretOffset="5828" date="Wed Apr 13 11:08:57 EDT 2022" end="5876" start="5828" starttimestamp="1649862007572" timestamp="530261" />
  <Command __id="293" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:08:57 EDT 2022" docASTNodeCount="1234" docActiveCodeLength="8901" docExpressionCount="876" docLength="9957" projectName="A6" starttimestamp="1649862007572" timestamp="530171">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="297" _type="PauseCommand" date="Wed Apr 13 11:09:05 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="537659">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7398]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="298" _type="MoveCaretCommand" caretOffset="266" date="Wed Apr 13 11:09:05 EDT 2022" docOffset="427" starttimestamp="1649862007572" timestamp="537737" />
  <Command __id="300" _type="PauseCommand" date="Wed Apr 13 11:09:07 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="539684">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1947]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="299" _type="MoveCaretCommand" caretOffset="161" date="Wed Apr 13 11:09:07 EDT 2022" docOffset="322" starttimestamp="1649862007572" timestamp="539684" />
  <Command __id="302" _type="InsertStringCommand" date="Wed Apr 13 11:09:07 EDT 2022" starttimestamp="1649862007572" timestamp="539991" timestamp2="539991">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="304" _type="PasteCommand" date="Wed Apr 13 11:09:08 EDT 2022" starttimestamp="1649862007572" timestamp="540461" />
  <Command __id="306" _type="PauseCommand" date="Wed Apr 13 11:09:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="544423">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3962]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="305" _type="SelectTextCommand" caretOffset="70" date="Wed Apr 13 11:09:11 EDT 2022" end="92" start="70" starttimestamp="1649862007572" timestamp="544423" />
  <Command __id="307" _type="CopyCommand" date="Wed Apr 13 11:09:12 EDT 2022" starttimestamp="1649862007572" timestamp="544646" />
  <Command __id="309" _type="PauseCommand" date="Wed Apr 13 11:09:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="547706">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3059]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="308" _type="SelectTextCommand" caretOffset="171" date="Wed Apr 13 11:09:15 EDT 2022" end="194" start="171" starttimestamp="1649862007572" timestamp="547705" />
  <Command __id="311" _type="PasteCommand" date="Wed Apr 13 11:09:15 EDT 2022" starttimestamp="1649862007572" timestamp="547951" />
  <Command __id="313" _type="PauseCommand" date="Wed Apr 13 11:09:16 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="549021">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1070]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="312" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:09:16 EDT 2022" starttimestamp="1649862007572" timestamp="549021" />
  <Command __id="314" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:09:16 EDT 2022" starttimestamp="1649862007572" timestamp="549123" />
  <Command __id="315" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:09:16 EDT 2022" starttimestamp="1649862007572" timestamp="549163" />
  <Command __id="317" _type="PauseCommand" date="Wed Apr 13 11:09:19 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="551637">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2474]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="316" _type="MoveCaretCommand" caretOffset="282" date="Wed Apr 13 11:09:19 EDT 2022" docOffset="443" starttimestamp="1649862007572" timestamp="551637" />
  <Command __id="319" _type="InsertStringCommand" date="Wed Apr 13 11:09:19 EDT 2022" starttimestamp="1649862007572" timestamp="551918" timestamp2="551918">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="296" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:05 EDT 2022" docASTNodeCount="151" docActiveCodeLength="994" docExpressionCount="85" docLength="1223" projectName="A6" starttimestamp="1649862007572" timestamp="537659">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶"), Diff(INSERT,"	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		//TODO create nio manager¶	}¶	¶"), Diff(EQUAL,"	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	@Override
	protected void init(String[] args) {
		super.init(args);
		
		//TODO create nio manager
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="301" _type="Insert" date="Wed Apr 13 11:09:07 EDT 2022" docASTNodeCount="151" docActiveCodeLength="997" docExpressionCount="85" docLength="1226" length="3" offset="322" starttimestamp="1649862007572" timestamp="539985">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="303" _type="Replace" date="Wed Apr 13 11:09:08 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1097" docExpressionCount="92" docLength="1345" endLine="10" insertionLength="120" int_docASTNodeCount="151" int_docActiveCodeLength="996" int_docExpressionCount="85" int_docLength="1225" length="1" offset="324" startLine="10" starttimestamp="1649862007572" timestamp="540453">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public AnNIOManagerPrintServer(int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="310" _type="Replace" date="Wed Apr 13 11:09:15 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1096" docExpressionCount="92" docLength="1344" endLine="10" insertionLength="22" int_docASTNodeCount="164" int_docActiveCodeLength="1074" int_docExpressionCount="91" int_docLength="1322" length="23" offset="332" startLine="10" starttimestamp="1649862007572" timestamp="547943">
    <deletedText><![CDATA[AnNIOManagerPrintServer]]></deletedText>
    <insertedText><![CDATA[ServerRemoteObjectNIO ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="318" _type="Insert" date="Wed Apr 13 11:09:19 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1099" docExpressionCount="92" docLength="1347" length="3" offset="443" starttimestamp="1649862007572" timestamp="551913">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="321" _type="PauseCommand" date="Wed Apr 13 11:09:35 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="567854">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[15936]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="322" _type="SelectTextCommand" caretOffset="644" date="Wed Apr 13 11:09:35 EDT 2022" end="644" start="23" starttimestamp="1649862007572" timestamp="567956" />
  <Command __id="320" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:35 EDT 2022" docASTNodeCount="88" docActiveCodeLength="644" docExpressionCount="64" docLength="644" projectName="A6" starttimestamp="1649862007572" timestamp="567854">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

public interface NIOManagerPrintServer extends SocketChannelAcceptListener, SocketChannelReadListener, SocketChannelWriteListener {

	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	List<SocketChannel> getSocketList();

	SocketChannel getSocketChannel();

}]]></snapshot>
  </Command>
  <Command __id="324" _type="PauseCommand" date="Wed Apr 13 11:09:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="570269">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2313]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="325" _type="MoveCaretCommand" caretOffset="285" date="Wed Apr 13 11:09:37 EDT 2022" docOffset="446" starttimestamp="1649862007572" timestamp="570384" />
  <Command __id="323" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:37 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1099" docExpressionCount="92" docLength="1347" projectName="A6" starttimestamp="1649862007572" timestamp="570269">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶"), Diff(INSERT,"	public ServerRemoteObjectNIO (int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶	¶"), Diff(EQUAL,"	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		//TODO create nio manager¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	public ServerRemoteObjectNIO (int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		
		//TODO create nio manager
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="327" _type="PauseCommand" date="Wed Apr 13 11:09:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="574600">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4216]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="328" _type="SelectTextCommand" caretOffset="464" date="Wed Apr 13 11:09:42 EDT 2022" end="584" start="464" starttimestamp="1649862007572" timestamp="574676" />
  <Command __id="330" _type="PauseCommand" date="Wed Apr 13 11:09:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="577962">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3286]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="329" _type="MoveCaretCommand" caretOffset="552" date="Wed Apr 13 11:09:45 EDT 2022" docOffset="1713" starttimestamp="1649862007572" timestamp="577962" />
  <Command __id="331" _type="MoveCaretCommand" caretOffset="552" date="Wed Apr 13 11:09:45 EDT 2022" docOffset="1713" starttimestamp="1649862007572" timestamp="577962" />
  <Command __id="326" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:42 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="574600">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="333" _type="PauseCommand" date="Wed Apr 13 11:09:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="581764">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3802]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="334" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:09:49 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="581859" />
  <Command __id="332" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:09:49 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="581764">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="336" _type="PauseCommand" date="Wed Apr 13 11:10:18 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="611066">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[29207]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="337" _type="MoveCaretCommand" caretOffset="552" date="Wed Apr 13 11:10:18 EDT 2022" docOffset="1713" starttimestamp="1649862007572" timestamp="611146" />
  <Command __id="335" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:10:18 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="611066">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="339" _type="PauseCommand" date="Wed Apr 13 11:10:27 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="619891">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8745]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="340" _type="MoveCaretCommand" caretOffset="285" date="Wed Apr 13 11:10:27 EDT 2022" docOffset="446" starttimestamp="1649862007572" timestamp="619985" />
  <Command __id="342" _type="PauseCommand" date="Wed Apr 13 11:10:38 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="631084">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11099]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="341" _type="SelectTextCommand" caretOffset="163" date="Wed Apr 13 11:10:38 EDT 2022" end="282" start="163" starttimestamp="1649862007572" timestamp="631084" />
  <Command __id="343" _type="SelectTextCommand" caretOffset="163" date="Wed Apr 13 11:10:38 EDT 2022" end="282" start="163" starttimestamp="1649862007572" timestamp="631084" />
  <Command __id="345" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:10:39 EDT 2022" starttimestamp="1649862007572" timestamp="631732" />
  <Command __id="346" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:10:39 EDT 2022" starttimestamp="1649862007572" timestamp="631732" />
  <Command __id="348" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Apr 13 11:10:40 EDT 2022" starttimestamp="1649862007572" timestamp="632585" />
  <Command __id="350" _type="PauseCommand" date="Wed Apr 13 11:10:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="634919">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2334]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="349" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:10:42 EDT 2022" starttimestamp="1649862007572" timestamp="634919" />
  <Command __id="351" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:10:42 EDT 2022" starttimestamp="1649862007572" timestamp="635008" />
  <Command __id="352" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:10:42 EDT 2022" starttimestamp="1649862007572" timestamp="635047" />
  <Command __id="338" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:10:27 EDT 2022" docASTNodeCount="165" docActiveCodeLength="1099" docExpressionCount="92" docLength="1347" projectName="A6" starttimestamp="1649862007572" timestamp="619891">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶	public ServerRemoteObjectNIO (int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		//TODO create nio manager¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="344" _type="Delete" date="Wed Apr 13 11:10:39 EDT 2022" docASTNodeCount="151" docActiveCodeLength="997" docExpressionCount="85" docLength="1226" endLine="15" length="121" offset="324" repeat="2" startLine="10" starttimestamp="1649862007572" timestamp="631726" timestamp2="632572">
    <text><![CDATA[	public ServerRemoteObjectNIO (int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}
]]></text>
  </DocumentChange>
  <Command __id="354" _type="PauseCommand" date="Wed Apr 13 11:10:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="637000">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1953]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="355" _type="SelectTextCommand" caretOffset="5828" date="Wed Apr 13 11:10:44 EDT 2022" end="5876" start="5828" starttimestamp="1649862007572" timestamp="637101" />
  <Command __id="357" _type="PauseCommand" date="Wed Apr 13 11:10:46 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="638432">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1331]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="356" _type="MoveCaretCommand" caretOffset="5878" date="Wed Apr 13 11:10:46 EDT 2022" docOffset="7534" starttimestamp="1649862007572" timestamp="638432" />
  <Command __id="353" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:10:44 EDT 2022" docASTNodeCount="1234" docActiveCodeLength="8901" docExpressionCount="876" docLength="9957" projectName="A6" starttimestamp="1649862007572" timestamp="637000">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="359" _type="PauseCommand" date="Wed Apr 13 11:11:47 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="699465">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[61033]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="360" _type="MoveCaretCommand" caretOffset="552" date="Wed Apr 13 11:11:47 EDT 2022" docOffset="1713" starttimestamp="1649862007572" timestamp="699546" />
  <Command __id="362" _type="PauseCommand" date="Wed Apr 13 11:11:59 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="711762">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12216]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="361" _type="SelectTextCommand" caretOffset="1357" date="Wed Apr 13 11:11:59 EDT 2022" end="1427" start="1357" starttimestamp="1649862007572" timestamp="711762" />
  <Command __id="363" _type="SelectTextCommand" caretOffset="1357" date="Wed Apr 13 11:11:59 EDT 2022" end="1427" start="1357" starttimestamp="1649862007572" timestamp="711762" />
  <Command __id="365" _type="PauseCommand" date="Wed Apr 13 11:12:06 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="719112">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7349]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="364" _type="SelectTextCommand" caretOffset="883" date="Wed Apr 13 11:12:06 EDT 2022" end="1648" start="883" starttimestamp="1649862007572" timestamp="719111" />
  <Command __id="366" _type="SelectTextCommand" caretOffset="883" date="Wed Apr 13 11:12:06 EDT 2022" end="1648" start="883" starttimestamp="1649862007572" timestamp="719112" />
  <Command __id="367" _type="CopyCommand" date="Wed Apr 13 11:12:07 EDT 2022" starttimestamp="1649862007572" timestamp="719638" />
  <Command __id="358" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:11:47 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="699465">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="369" _type="PauseCommand" date="Wed Apr 13 11:12:16 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="728886">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[9248]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="370" _type="MoveCaretCommand" caretOffset="163" date="Wed Apr 13 11:12:16 EDT 2022" docOffset="324" starttimestamp="1649862007572" timestamp="728964" />
  <Command __id="372" _type="PauseCommand" date="Wed Apr 13 11:12:19 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="731799">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2835]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="371" _type="SelectTextCommand" caretOffset="244" date="Wed Apr 13 11:12:19 EDT 2022" end="269" start="244" starttimestamp="1649862007572" timestamp="731799" />
  <Command __id="373" _type="SelectTextCommand" caretOffset="244" date="Wed Apr 13 11:12:19 EDT 2022" end="269" start="244" starttimestamp="1649862007572" timestamp="731800" />
  <Command __id="385" _type="PasteCommand" date="Wed Apr 13 11:12:20 EDT 2022" starttimestamp="1649862007572" timestamp="732628" />
  <Command __id="387" _type="PauseCommand" date="Wed Apr 13 11:12:39 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="752242">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[19614]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="386" _type="MoveCaretCommand" caretOffset="600" date="Wed Apr 13 11:12:39 EDT 2022" docOffset="600" starttimestamp="1649862007572" timestamp="752242" />
  <Command __id="388" _type="MoveCaretCommand" caretOffset="600" date="Wed Apr 13 11:12:39 EDT 2022" docOffset="600" starttimestamp="1649862007572" timestamp="752242" />
  <Command __id="390" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="752930" timestamp2="752930">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="391" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="752930" timestamp2="752930">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="393" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753023" timestamp2="753023">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="394" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753023" timestamp2="753023">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="396" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753091" timestamp2="753091">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="397" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753091" timestamp2="753091">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="399" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753187" timestamp2="753187">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="400" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753187" timestamp2="753187">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="402" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753287" timestamp2="753287">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="403" _type="InsertStringCommand" date="Wed Apr 13 11:12:40 EDT 2022" starttimestamp="1649862007572" timestamp="753287" timestamp2="753287">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="404" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:12:40 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="753292" />
  <Command __id="408" _type="PauseCommand" date="Wed Apr 13 11:12:42 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="754703">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1411]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="407" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:12:42 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="754703" />
  <Command __id="410" _type="InsertStringCommand" date="Wed Apr 13 11:12:42 EDT 2022" starttimestamp="1649862007572" timestamp="754788" timestamp2="754788">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="411" _type="InsertStringCommand" date="Wed Apr 13 11:12:42 EDT 2022" starttimestamp="1649862007572" timestamp="754788" timestamp2="754788">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="413" _type="PauseCommand" date="Wed Apr 13 11:12:43 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="756342">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1554]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="412" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:12:43 EDT 2022" starttimestamp="1649862007572" timestamp="756342" />
  <Command __id="414" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:12:44 EDT 2022" starttimestamp="1649862007572" timestamp="756443" />
  <Command __id="415" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:12:44 EDT 2022" starttimestamp="1649862007572" timestamp="756481" />
  <Command __id="416" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:12:44 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="756548" />
  <Command __id="418" _type="PauseCommand" date="Wed Apr 13 11:12:50 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="762865">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[6317]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="417" _type="SelectTextCommand" caretOffset="600" date="Wed Apr 13 11:12:50 EDT 2022" end="623" start="600" starttimestamp="1649862007572" timestamp="762865" />
  <Command __id="419" _type="SelectTextCommand" caretOffset="600" date="Wed Apr 13 11:12:50 EDT 2022" end="623" start="600" starttimestamp="1649862007572" timestamp="762866" />
  <Command __id="421" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:12:50 EDT 2022" starttimestamp="1649862007572" timestamp="763396" />
  <Command __id="422" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:12:50 EDT 2022" starttimestamp="1649862007572" timestamp="763396" />
  <Command __id="368" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:12:16 EDT 2022" docASTNodeCount="151" docActiveCodeLength="997" docExpressionCount="85" docLength="1226" projectName="A6" starttimestamp="1649862007572" timestamp="728886">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶"), Diff(DELETE,"	public ServerRemoteObjectNIO (int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶"), Diff(EQUAL,"	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		//TODO create nio manager¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	
	@Override
	protected void init(String[] args) {
		super.init(args);
		
		//TODO create nio manager
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="374" _type="Replace" date="Wed Apr 13 11:12:20 EDT 2022" docASTNodeCount="221" docActiveCodeLength="1630" docExpressionCount="133" docLength="1966" endLine="15" insertionLength="767" int_docASTNodeCount="151" int_docActiveCodeLength="995" int_docExpressionCount="85" int_docLength="1199" length="27" offset="403" startLine="15" starttimestamp="1649862007572" timestamp="732505">
    <deletedText><![CDATA[		//TODO create nio manager]]></deletedText>
    <insertedText><![CDATA[		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="375" _type="Insert" date="Wed Apr 13 11:12:20 EDT 2022" docASTNodeCount="235" docActiveCodeLength="1724" docExpressionCount="145" docLength="2060" length="94" offset="214" repeat="4" starttimestamp="1649862007572" timestamp="732585" timestamp2="732589">
    <text><![CDATA[

import nioExample.exampleServerReadThread;
import util.trace.port.nio.SocketChannelBound;]]></text>
  </DocumentChange>
  <DocumentChange __id="379" _type="Insert" date="Wed Apr 13 11:12:20 EDT 2022" docASTNodeCount="243" docActiveCodeLength="1764" docExpressionCount="152" docLength="2100" length="40" offset="53" repeat="2" starttimestamp="1649862007572" timestamp="732590" timestamp2="732592">
    <text><![CDATA[
import java.nio.channels.SelectionKey;]]></text>
  </DocumentChange>
  <DocumentChange __id="381" _type="Insert" date="Wed Apr 13 11:12:20 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1829" docExpressionCount="162" docLength="2165" length="65" offset="26" repeat="4" starttimestamp="1649862007572" timestamp="732593" timestamp2="732597">
    <text><![CDATA[import java.io.IOException;
import java.net.InetSocketAddress;
]]></text>
  </DocumentChange>
  <DocumentChange __id="389" _type="Insert" date="Wed Apr 13 11:12:40 EDT 2022" docASTNodeCount="261" docActiveCodeLength="1836" docExpressionCount="167" docLength="2172" length="7" offset="600" repeat="7" starttimestamp="1649862007572" timestamp="752923" timestamp2="753869">
    <text><![CDATA[this.pr]]></text>
  </DocumentChange>
  <DocumentChange __id="409" _type="Replace" date="Wed Apr 13 11:12:42 EDT 2022" docASTNodeCount="260" docActiveCodeLength="1852" docExpressionCount="166" docLength="2188" endLine="20" insertionLength="18" int_docASTNodeCount="255" int_docActiveCodeLength="1834" int_docExpressionCount="162" int_docLength="2170" length="2" offset="605" startLine="20" starttimestamp="1649862007572" timestamp="754707">
    <deletedText><![CDATA[pr]]></deletedText>
    <insertedText><![CDATA[processArgs(args);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="420" _type="Delete" date="Wed Apr 13 11:12:50 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1829" docExpressionCount="162" docLength="2165" endLine="20" length="23" offset="600" startLine="20" starttimestamp="1649862007572" timestamp="763389">
    <text><![CDATA[this.processArgs(args);]]></text>
  </DocumentChange>
  <Command __id="424" _type="PauseCommand" date="Wed Apr 13 11:12:55 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="767743">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4347]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="425" _type="SelectTextCommand" caretOffset="883" date="Wed Apr 13 11:12:55 EDT 2022" end="1648" start="883" starttimestamp="1649862007572" timestamp="767828" />
  <Command __id="423" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:12:55 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="767743">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="427" _type="PauseCommand" date="Wed Apr 13 11:12:56 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="768874">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1046]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="428" _type="MoveCaretCommand" caretOffset="1464" date="Wed Apr 13 11:12:56 EDT 2022" docOffset="1711" starttimestamp="1649862007572" timestamp="768946" />
  <Command __id="426" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:12:56 EDT 2022" docASTNodeCount="225" docActiveCodeLength="1609" docExpressionCount="133" docLength="1877" projectName="A6" starttimestamp="1649862007572" timestamp="768874">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleServerReadThread implements ReadThreadInterface{¶	final NIOManagerPrintServer server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleServerReadThread (final NIOManagerPrintServer aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="430" _type="PauseCommand" date="Wed Apr 13 11:12:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="771079">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2133]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="431" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:12:58 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="771155" />
  <Command __id="433" _type="PauseCommand" date="Wed Apr 13 11:13:03 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="775606">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4451]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="432" _type="SelectTextCommand" caretOffset="208" date="Wed Apr 13 11:13:03 EDT 2022" end="250" start="208" starttimestamp="1649862007572" timestamp="775606" />
  <Command __id="434" _type="CopyCommand" date="Wed Apr 13 11:13:03 EDT 2022" starttimestamp="1649862007572" timestamp="775754" />
  <Command __id="429" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:12:58 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="771079">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="436" _type="PauseCommand" date="Wed Apr 13 11:13:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="779276">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3522]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="437" _type="MoveCaretCommand" caretOffset="600" date="Wed Apr 13 11:13:06 EDT 2022" docOffset="600" starttimestamp="1649862007572" timestamp="779353" />
  <Command __id="435" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:13:06 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1829" docExpressionCount="162" docLength="2165" projectName="A6" starttimestamp="1649862007572" timestamp="779276">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java."), Diff(DELETE,"nio.ByteBuffer"), Diff(INSERT,"io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey"), Diff(EQUAL,";¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(INSERT,"import nioExample.exampleServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶"), Diff(EQUAL,"public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		"), Diff(DELETE,"//TODO create nio manager"), Diff(INSERT,"try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();"), Diff(EQUAL,"¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import nioExample.exampleServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	
	@Override
	protected void init(String[] args) {
		super.init(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="439" _type="PauseCommand" date="Wed Apr 13 11:13:10 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="782553">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3200]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="438" _type="Insert" date="Wed Apr 13 11:13:10 EDT 2022" docASTNodeCount="257" docActiveCodeLength="1834" docExpressionCount="163" docLength="2170" length="5" offset="600" repeat="2" starttimestamp="1649862007572" timestamp="782553" timestamp2="782775">
    <text><![CDATA[
		s]]></text>
  </DocumentChange>
  <Command __id="440" _type="InsertStringCommand" date="Wed Apr 13 11:13:10 EDT 2022" starttimestamp="1649862007572" timestamp="782560" timestamp2="782560">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="441" _type="InsertStringCommand" date="Wed Apr 13 11:13:10 EDT 2022" starttimestamp="1649862007572" timestamp="782560" timestamp2="782560">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="443" _type="InsertStringCommand" date="Wed Apr 13 11:13:10 EDT 2022" starttimestamp="1649862007572" timestamp="782781" timestamp2="782781">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="444" _type="InsertStringCommand" date="Wed Apr 13 11:13:10 EDT 2022" starttimestamp="1649862007572" timestamp="782781" timestamp2="782781">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="445" _type="Delete" date="Wed Apr 13 11:13:11 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1833" docExpressionCount="162" docLength="2169" endLine="21" length="1" offset="604" startLine="21" starttimestamp="1649862007572" timestamp="783527">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="446" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="783530" />
  <Command __id="447" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="783531" />
  <DocumentChange __id="448" _type="Insert" date="Wed Apr 13 11:13:11 EDT 2022" docASTNodeCount="257" docActiveCodeLength="1835" docExpressionCount="163" docLength="2171" length="2" offset="604" repeat="2" starttimestamp="1649862007572" timestamp="783644" timestamp2="784137">
    <text><![CDATA[as]]></text>
  </DocumentChange>
  <Command __id="449" _type="InsertStringCommand" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="783649" timestamp2="783649">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="450" _type="InsertStringCommand" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="783649" timestamp2="783649">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="452" _type="InsertStringCommand" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="784143" timestamp2="784143">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="453" _type="InsertStringCommand" date="Wed Apr 13 11:13:11 EDT 2022" starttimestamp="1649862007572" timestamp="784143" timestamp2="784143">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="454" _type="Delete" date="Wed Apr 13 11:13:12 EDT 2022" docASTNodeCount="257" docActiveCodeLength="1834" docExpressionCount="163" docLength="2170" endLine="21" length="1" offset="605" startLine="21" starttimestamp="1649862007572" timestamp="784496">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="455" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784501" />
  <Command __id="456" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784501" />
  <Command __id="458" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784657" timestamp2="784657">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="459" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784657" timestamp2="784657">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="461" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784871" timestamp2="784871">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="462" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784871" timestamp2="784871">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="464" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784938" timestamp2="784938">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="465" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="784938" timestamp2="784938">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="467" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785141" timestamp2="785141">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="468" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785141" timestamp2="785141">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="470" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785284" timestamp2="785284">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="471" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785284" timestamp2="785284">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="473" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785398" timestamp2="785398">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="474" _type="InsertStringCommand" date="Wed Apr 13 11:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="785398" timestamp2="785398">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="476" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="785717" timestamp2="785717">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="477" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="785717" timestamp2="785717">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="479" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="785884" timestamp2="785884">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="480" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="785884" timestamp2="785884">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="482" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786014" timestamp2="786014">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="483" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786014" timestamp2="786014">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="485" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786209" timestamp2="786209">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="486" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786209" timestamp2="786209">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="488" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786318" timestamp2="786318">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="489" _type="InsertStringCommand" date="Wed Apr 13 11:13:13 EDT 2022" starttimestamp="1649862007572" timestamp="786318" timestamp2="786318">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="491" _type="InsertStringCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786542" timestamp2="786542">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="492" _type="InsertStringCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786542" timestamp2="786542">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="494" _type="InsertStringCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786680" timestamp2="786680">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="495" _type="InsertStringCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786681" timestamp2="786681">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="501" _type="PasteCommand" date="Wed Apr 13 11:13:14 EDT 2022" starttimestamp="1649862007572" timestamp="786968" />
  <Command __id="503" _type="InsertStringCommand" date="Wed Apr 13 11:13:15 EDT 2022" starttimestamp="1649862007572" timestamp="787528" timestamp2="787528">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="504" _type="InsertStringCommand" date="Wed Apr 13 11:13:15 EDT 2022" starttimestamp="1649862007572" timestamp="787528" timestamp2="787528">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="506" _type="PauseCommand" date="Wed Apr 13 11:13:16 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="788532">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1004]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="505" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:13:16 EDT 2022" starttimestamp="1649862007572" timestamp="788532" />
  <Command __id="507" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:16 EDT 2022" starttimestamp="1649862007572" timestamp="788624" />
  <Command __id="508" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:16 EDT 2022" starttimestamp="1649862007572" timestamp="788650" />
  <Command __id="510" _type="PauseCommand" date="Wed Apr 13 11:13:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="790514">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1863]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="509" _type="MoveCaretCommand" caretOffset="659" date="Wed Apr 13 11:13:18 EDT 2022" docOffset="659" starttimestamp="1649862007572" timestamp="790513" />
  <Command __id="511" _type="MoveCaretCommand" caretOffset="659" date="Wed Apr 13 11:13:18 EDT 2022" docOffset="659" starttimestamp="1649862007572" timestamp="790514" />
  <Command __id="513" _type="InsertStringCommand" date="Wed Apr 13 11:13:18 EDT 2022" starttimestamp="1649862007572" timestamp="790797" timestamp2="790797">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="514" _type="InsertStringCommand" date="Wed Apr 13 11:13:18 EDT 2022" starttimestamp="1649862007572" timestamp="790797" timestamp2="790797">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="516" _type="InsertStringCommand" date="Wed Apr 13 11:13:18 EDT 2022" starttimestamp="1649862007572" timestamp="790908" timestamp2="790908">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="517" _type="InsertStringCommand" date="Wed Apr 13 11:13:18 EDT 2022" starttimestamp="1649862007572" timestamp="790908" timestamp2="790908">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="519" _type="InsertStringCommand" date="Wed Apr 13 11:13:19 EDT 2022" starttimestamp="1649862007572" timestamp="791694" timestamp2="791694">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="520" _type="InsertStringCommand" date="Wed Apr 13 11:13:19 EDT 2022" starttimestamp="1649862007572" timestamp="791694" timestamp2="791694">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="522" _type="InsertStringCommand" date="Wed Apr 13 11:13:19 EDT 2022" starttimestamp="1649862007572" timestamp="791704" timestamp2="791704">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="523" _type="InsertStringCommand" date="Wed Apr 13 11:13:19 EDT 2022" starttimestamp="1649862007572" timestamp="791704" timestamp2="791704">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="525" _type="PauseCommand" date="Wed Apr 13 11:13:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="793104">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1400]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="524" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:13:20 EDT 2022" starttimestamp="1649862007572" timestamp="793104" />
  <Command __id="526" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:20 EDT 2022" starttimestamp="1649862007572" timestamp="793194" />
  <Command __id="527" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:20 EDT 2022" starttimestamp="1649862007572" timestamp="793222" />
  <DocumentChange __id="457" _type="Insert" date="Wed Apr 13 11:13:12 EDT 2022" docASTNodeCount="262" docActiveCodeLength="1889" docExpressionCount="168" docLength="2225" length="55" offset="605" repeat="14" starttimestamp="1649862007572" timestamp="784653" timestamp2="786895">
    <text><![CDATA[ServerPort = ServerArgsProcessor.getNIOServerPort(args)]]></text>
  </DocumentChange>
  <DocumentChange __id="497" _type="Delete" date="Wed Apr 13 11:13:14 EDT 2022" docASTNodeCount="262" docActiveCodeLength="1885" docExpressionCount="168" docLength="2221" endLine="11" length="4" offset="319" startLine="9" starttimestamp="1649862007572" timestamp="786924">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="498" _type="Insert" date="Wed Apr 13 11:13:14 EDT 2022" docASTNodeCount="270" docActiveCodeLength="1944" docExpressionCount="175" docLength="2280" length="59" offset="319" repeat="3" starttimestamp="1649862007572" timestamp="786926" timestamp2="786929">
    <text><![CDATA[

import assignments.util.mainArgs.ServerArgsProcessor;
]]></text>
  </DocumentChange>
  <DocumentChange __id="502" _type="Insert" date="Wed Apr 13 11:13:15 EDT 2022" docASTNodeCount="270" docActiveCodeLength="1945" docExpressionCount="175" docLength="2281" length="1" offset="715" starttimestamp="1649862007572" timestamp="787522">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="512" _type="Insert" date="Wed Apr 13 11:13:18 EDT 2022" docASTNodeCount="271" docActiveCodeLength="1949" docExpressionCount="174" docLength="2285" length="4" offset="659" repeat="4" starttimestamp="1649862007572" timestamp="790791" timestamp2="791700">
    <text><![CDATA[int ]]></text>
  </DocumentChange>
  <Command __id="529" _type="PauseCommand" date="Wed Apr 13 11:13:26 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="798810">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5588]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="530" _type="SelectTextCommand" caretOffset="883" date="Wed Apr 13 11:13:26 EDT 2022" end="1648" start="883" starttimestamp="1649862007572" timestamp="798906" />
  <Command __id="532" _type="PauseCommand" date="Wed Apr 13 11:13:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="800091">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1185]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="531" _type="MoveCaretCommand" caretOffset="907" date="Wed Apr 13 11:13:27 EDT 2022" docOffset="2068" starttimestamp="1649862007572" timestamp="800091" />
  <Command __id="533" _type="MoveCaretCommand" caretOffset="907" date="Wed Apr 13 11:13:27 EDT 2022" docOffset="2068" starttimestamp="1649862007572" timestamp="800091" />
  <Command __id="535" _type="PauseCommand" date="Wed Apr 13 11:13:32 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="805313">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5222]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="534" _type="SelectTextCommand" caretOffset="393" date="Wed Apr 13 11:13:32 EDT 2022" end="460" start="393" starttimestamp="1649862007572" timestamp="805313" />
  <Command __id="536" _type="SelectTextCommand" caretOffset="393" date="Wed Apr 13 11:13:32 EDT 2022" end="460" start="393" starttimestamp="1649862007572" timestamp="805313" />
  <Command __id="537" _type="CopyCommand" date="Wed Apr 13 11:13:33 EDT 2022" starttimestamp="1649862007572" timestamp="805539" />
  <Command __id="528" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:13:26 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="798810">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="539" _type="PauseCommand" date="Wed Apr 13 11:13:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="807142">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1603]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="540" _type="MoveCaretCommand" caretOffset="663" date="Wed Apr 13 11:13:34 EDT 2022" docOffset="663" starttimestamp="1649862007572" timestamp="807223" />
  <Command __id="542" _type="PauseCommand" date="Wed Apr 13 11:13:40 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="812448">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5225]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="541" _type="MoveCaretCommand" caretOffset="576" date="Wed Apr 13 11:13:40 EDT 2022" docOffset="576" starttimestamp="1649862007572" timestamp="812448" />
  <Command __id="543" _type="MoveCaretCommand" caretOffset="576" date="Wed Apr 13 11:13:40 EDT 2022" docOffset="576" starttimestamp="1649862007572" timestamp="812448" />
  <Command __id="545" _type="InsertStringCommand" date="Wed Apr 13 11:13:40 EDT 2022" starttimestamp="1649862007572" timestamp="812843" timestamp2="812843">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="546" _type="InsertStringCommand" date="Wed Apr 13 11:13:40 EDT 2022" starttimestamp="1649862007572" timestamp="812843" timestamp2="812843">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="552" _type="PasteCommand" date="Wed Apr 13 11:13:41 EDT 2022" starttimestamp="1649862007572" timestamp="813555" />
  <Command __id="553" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:13:41 EDT 2022" starttimestamp="1649862007572" timestamp="813941" />
  <Command __id="554" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:41 EDT 2022" starttimestamp="1649862007572" timestamp="814037" />
  <Command __id="555" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:41 EDT 2022" starttimestamp="1649862007572" timestamp="814087" />
  <Command __id="557" _type="PauseCommand" date="Wed Apr 13 11:13:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="821630">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7543]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="556" _type="SelectTextCommand" caretOffset="818" date="Wed Apr 13 11:13:49 EDT 2022" end="879" start="818" starttimestamp="1649862007572" timestamp="821630" />
  <Command __id="558" _type="SelectTextCommand" caretOffset="818" date="Wed Apr 13 11:13:49 EDT 2022" end="879" start="818" starttimestamp="1649862007572" timestamp="821630" />
  <Command __id="560" _type="CutCommand" date="Wed Apr 13 11:13:49 EDT 2022" starttimestamp="1649862007572" timestamp="822074" />
  <Command __id="562" _type="PauseCommand" date="Wed Apr 13 11:13:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="823185">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[1111]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="561" _type="MoveCaretCommand" caretOffset="738" date="Wed Apr 13 11:13:50 EDT 2022" docOffset="738" starttimestamp="1649862007572" timestamp="823185" />
  <Command __id="563" _type="MoveCaretCommand" caretOffset="738" date="Wed Apr 13 11:13:50 EDT 2022" docOffset="738" starttimestamp="1649862007572" timestamp="823185" />
  <Command __id="565" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823463" timestamp2="823463">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="566" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823463" timestamp2="823463">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="568" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823570" timestamp2="823570">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="569" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823570" timestamp2="823570">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="571" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823625" timestamp2="823625">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="572" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823625" timestamp2="823625">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="574" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823744" timestamp2="823744">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="575" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823744" timestamp2="823744">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="577" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823839" timestamp2="823839">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="578" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823839" timestamp2="823839">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="580" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823923" timestamp2="823923">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="581" _type="InsertStringCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="823923" timestamp2="823923">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="583" _type="PasteCommand" date="Wed Apr 13 11:13:51 EDT 2022" starttimestamp="1649862007572" timestamp="824229" />
  <Command __id="585" _type="InsertStringCommand" date="Wed Apr 13 11:13:52 EDT 2022" starttimestamp="1649862007572" timestamp="824453" timestamp2="824453">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="586" _type="InsertStringCommand" date="Wed Apr 13 11:13:52 EDT 2022" starttimestamp="1649862007572" timestamp="824453" timestamp2="824453">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="588" _type="PauseCommand" date="Wed Apr 13 11:13:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="825481">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1028]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="587" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:13:53 EDT 2022" starttimestamp="1649862007572" timestamp="825481" />
  <Command __id="589" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:53 EDT 2022" starttimestamp="1649862007572" timestamp="825595" />
  <Command __id="590" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:13:53 EDT 2022" starttimestamp="1649862007572" timestamp="825641" />
  <Command __id="592" _type="PauseCommand" date="Wed Apr 13 11:13:59 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="832329">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6688]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="591" _type="SelectTextCommand" caretOffset="760" date="Wed Apr 13 11:13:59 EDT 2022" end="805" start="760" starttimestamp="1649862007572" timestamp="832329" />
  <Command __id="593" _type="SelectTextCommand" caretOffset="760" date="Wed Apr 13 11:13:59 EDT 2022" end="805" start="760" starttimestamp="1649862007572" timestamp="832329" />
  <Command __id="595" _type="CutCommand" date="Wed Apr 13 11:14:00 EDT 2022" starttimestamp="1649862007572" timestamp="832745" />
  <Command __id="597" _type="PauseCommand" date="Wed Apr 13 11:14:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="833970">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[1225]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="596" _type="MoveCaretCommand" caretOffset="839" date="Wed Apr 13 11:14:01 EDT 2022" docOffset="839" starttimestamp="1649862007572" timestamp="833970" />
  <Command __id="598" _type="MoveCaretCommand" caretOffset="839" date="Wed Apr 13 11:14:01 EDT 2022" docOffset="839" starttimestamp="1649862007572" timestamp="833970" />
  <Command __id="600" _type="PasteCommand" date="Wed Apr 13 11:14:02 EDT 2022" starttimestamp="1649862007572" timestamp="834438" />
  <Command __id="602" _type="PauseCommand" date="Wed Apr 13 11:14:05 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="837777">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3339]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="601" _type="SelectTextCommand" caretOffset="739" date="Wed Apr 13 11:14:05 EDT 2022" end="744" start="739" starttimestamp="1649862007572" timestamp="837777" />
  <Command __id="603" _type="SelectTextCommand" caretOffset="739" date="Wed Apr 13 11:14:05 EDT 2022" end="744" start="739" starttimestamp="1649862007572" timestamp="837778" />
  <Command __id="605" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:05 EDT 2022" starttimestamp="1649862007572" timestamp="838038" />
  <Command __id="606" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:05 EDT 2022" starttimestamp="1649862007572" timestamp="838039" />
  <Command __id="608" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:05 EDT 2022" starttimestamp="1649862007572" timestamp="838227" />
  <Command __id="609" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:05 EDT 2022" starttimestamp="1649862007572" timestamp="838227" />
  <Command __id="611" _type="PauseCommand" date="Wed Apr 13 11:14:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="839346">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1119]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="610" _type="MoveCaretCommand" caretOffset="686" date="Wed Apr 13 11:14:06 EDT 2022" docOffset="686" starttimestamp="1649862007572" timestamp="839346" />
  <Command __id="612" _type="MoveCaretCommand" caretOffset="686" date="Wed Apr 13 11:14:06 EDT 2022" docOffset="686" starttimestamp="1649862007572" timestamp="839346" />
  <Command __id="613" _type="MoveCaretCommand" caretOffset="754" date="Wed Apr 13 11:14:07 EDT 2022" docOffset="754" starttimestamp="1649862007572" timestamp="839782" />
  <Command __id="614" _type="MoveCaretCommand" caretOffset="754" date="Wed Apr 13 11:14:07 EDT 2022" docOffset="754" starttimestamp="1649862007572" timestamp="839782" />
  <Command __id="616" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:07 EDT 2022" starttimestamp="1649862007572" timestamp="840418" />
  <Command __id="617" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:07 EDT 2022" starttimestamp="1649862007572" timestamp="840418" />
  <Command __id="619" _type="InsertStringCommand" date="Wed Apr 13 11:14:08 EDT 2022" starttimestamp="1649862007572" timestamp="840678" timestamp2="840678">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="620" _type="InsertStringCommand" date="Wed Apr 13 11:14:08 EDT 2022" starttimestamp="1649862007572" timestamp="840678" timestamp2="840678">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="622" _type="PauseCommand" date="Wed Apr 13 11:14:09 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="842334">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1656]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="621" _type="MoveCaretCommand" caretOffset="833" date="Wed Apr 13 11:14:09 EDT 2022" docOffset="833" starttimestamp="1649862007572" timestamp="842334" />
  <Command __id="623" _type="MoveCaretCommand" caretOffset="833" date="Wed Apr 13 11:14:09 EDT 2022" docOffset="833" starttimestamp="1649862007572" timestamp="842334" />
  <Command __id="625" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="842506" timestamp2="842506">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="626" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="842506" timestamp2="842506">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="628" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="843019" timestamp2="843019">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="629" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="843019" timestamp2="843019">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="631" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="843193" timestamp2="843193">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="632" _type="InsertStringCommand" date="Wed Apr 13 11:14:10 EDT 2022" starttimestamp="1649862007572" timestamp="843193" timestamp2="843193">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="634" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="843664" timestamp2="843664">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="635" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="843664" timestamp2="843664">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="637" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="843886" timestamp2="843886">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="638" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="843886" timestamp2="843886">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="640" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="844013" timestamp2="844013">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="641" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="844013" timestamp2="844013">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="643" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="844134" timestamp2="844134">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="644" _type="InsertStringCommand" date="Wed Apr 13 11:14:11 EDT 2022" starttimestamp="1649862007572" timestamp="844134" timestamp2="844134">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="646" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844431" timestamp2="844431">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="647" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844431" timestamp2="844431">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="649" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844530" timestamp2="844530">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="650" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844530" timestamp2="844530">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="652" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844638" timestamp2="844638">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="653" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844638" timestamp2="844638">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="655" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844814" timestamp2="844814">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="656" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="844815" timestamp2="844815">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="658" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="845138" timestamp2="845138">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="659" _type="InsertStringCommand" date="Wed Apr 13 11:14:12 EDT 2022" starttimestamp="1649862007572" timestamp="845138" timestamp2="845138">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="661" _type="PauseCommand" date="Wed Apr 13 11:14:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="846667">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1529]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="660" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:14:14 EDT 2022" starttimestamp="1649862007572" timestamp="846667" />
  <Command __id="662" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:14 EDT 2022" starttimestamp="1649862007572" timestamp="846768" />
  <Command __id="663" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:14 EDT 2022" starttimestamp="1649862007572" timestamp="846807" />
  <Command __id="665" _type="PauseCommand" date="Wed Apr 13 11:14:33 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="865813">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[19006]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="664" _type="SelectTextCommand" caretOffset="1500" date="Wed Apr 13 11:14:33 EDT 2022" end="1507" start="1500" starttimestamp="1649862007572" timestamp="865813" />
  <Command __id="666" _type="SelectTextCommand" caretOffset="1500" date="Wed Apr 13 11:14:33 EDT 2022" end="1507" start="1500" starttimestamp="1649862007572" timestamp="865813" />
  <Command __id="538" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:13:34 EDT 2022" docASTNodeCount="271" docActiveCodeLength="1949" docExpressionCount="174" docLength="2285" projectName="A6" starttimestamp="1649862007572" timestamp="807142">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(INSERT,"import assignments.util.mainArgs.ServerArgsProcessor;¶"), Diff(EQUAL,"import nioExample.exampleServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		¶		"), Diff(INSERT,"int aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		"), Diff(EQUAL,"try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import nioExample.exampleServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{

	
	@Override
	protected void init(String[] args) {
		super.init(args);
		
		int aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="544" _type="Insert" date="Wed Apr 13 11:13:40 EDT 2022" docASTNodeCount="271" docActiveCodeLength="1950" docExpressionCount="174" docLength="2286" length="1" offset="576" starttimestamp="1649862007572" timestamp="812841">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="547" _type="Replace" date="Wed Apr 13 11:13:41 EDT 2022" docASTNodeCount="280" docActiveCodeLength="2017" docExpressionCount="179" docLength="2353" endLine="16" insertionLength="68" int_docASTNodeCount="271" int_docActiveCodeLength="1949" int_docExpressionCount="174" int_docLength="2285" length="1" offset="576" startLine="16" starttimestamp="1649862007572" timestamp="813467">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected NIOManager nioManager = NIOManagerFactory.getSingleton();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="548" _type="Insert" date="Wed Apr 13 11:13:41 EDT 2022" docASTNodeCount="296" docActiveCodeLength="2108" docExpressionCount="193" docLength="2444" length="91" offset="376" repeat="4" starttimestamp="1649862007572" timestamp="813516" timestamp2="813521">
    <text><![CDATA[
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;]]></text>
  </DocumentChange>
  <DocumentChange __id="559" _type="Delete" date="Wed Apr 13 11:13:49 EDT 2022" docASTNodeCount="288" docActiveCodeLength="2047" docExpressionCount="188" docLength="2383" endLine="24" length="61" offset="818" startLine="24" starttimestamp="1649862007572" timestamp="822061">
    <text><![CDATA[int aServerPort = ServerArgsProcessor.getNIOServerPort(args);]]></text>
  </DocumentChange>
  <DocumentChange __id="564" _type="Insert" date="Wed Apr 13 11:13:51 EDT 2022" docASTNodeCount="297" docActiveCodeLength="2117" docExpressionCount="193" docLength="2453" length="70" offset="738" repeat="8" starttimestamp="1649862007572" timestamp="823457" timestamp2="824447">
    <text><![CDATA[final int aServerPort = ServerArgsProcessor.getNIOServerPort(args);
	]]></text>
  </DocumentChange>
  <DocumentChange __id="594" _type="Delete" date="Wed Apr 13 11:14:00 EDT 2022" docASTNodeCount="289" docActiveCodeLength="2072" docExpressionCount="188" docLength="2408" endLine="19" length="45" offset="760" startLine="19" starttimestamp="1649862007572" timestamp="832732">
    <text><![CDATA[= ServerArgsProcessor.getNIOServerPort(args);]]></text>
  </DocumentChange>
  <DocumentChange __id="599" _type="Replace" date="Wed Apr 13 11:14:02 EDT 2022" docASTNodeCount="294" docActiveCodeLength="2117" docExpressionCount="192" docLength="2453" endLine="24" insertionLength="47" int_docASTNodeCount="289" int_docActiveCodeLength="2070" int_docExpressionCount="188" int_docLength="2406" length="2" offset="837" startLine="24" starttimestamp="1649862007572" timestamp="834434">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		= ServerArgsProcessor.getNIOServerPort(args);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="604" _type="Delete" date="Wed Apr 13 11:14:05 EDT 2022" docASTNodeCount="293" docActiveCodeLength="2111" docExpressionCount="192" docLength="2447" endLine="19" length="6" offset="738" repeat="2" startLine="19" starttimestamp="1649862007572" timestamp="838035" timestamp2="838224">
    <text><![CDATA[final ]]></text>
  </DocumentChange>
  <DocumentChange __id="615" _type="Delete" date="Wed Apr 13 11:14:07 EDT 2022" docASTNodeCount="293" docActiveCodeLength="2110" docExpressionCount="192" docLength="2446" endLine="19" length="1" offset="753" startLine="19" starttimestamp="1649862007572" timestamp="840416">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="618" _type="Insert" date="Wed Apr 13 11:14:08 EDT 2022" docASTNodeCount="297" docActiveCodeLength="2111" docExpressionCount="193" docLength="2447" length="1" offset="753" starttimestamp="1649862007572" timestamp="840672">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="624" _type="Insert" date="Wed Apr 13 11:14:10 EDT 2022" docASTNodeCount="299" docActiveCodeLength="2123" docExpressionCount="195" docLength="2459" length="12" offset="833" repeat="12" starttimestamp="1649862007572" timestamp="842499" timestamp2="845132">
    <text><![CDATA[aServerPort ]]></text>
  </DocumentChange>
  <Command __id="668" _type="PauseCommand" date="Wed Apr 13 11:14:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="866870">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1057]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="669" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:34 EDT 2022" starttimestamp="1649862007572" timestamp="866877" />
  <Command __id="670" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:14:34 EDT 2022" starttimestamp="1649862007572" timestamp="866877" />
  <Command __id="672" _type="PauseCommand" date="Wed Apr 13 11:14:36 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="868752">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1875]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="671" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:14:36 EDT 2022" starttimestamp="1649862007572" timestamp="868752" />
  <Command __id="673" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:36 EDT 2022" starttimestamp="1649862007572" timestamp="868851" />
  <Command __id="674" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:36 EDT 2022" starttimestamp="1649862007572" timestamp="868894" />
  <Command __id="676" _type="PauseCommand" date="Wed Apr 13 11:14:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="871648">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2754]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="675" _type="ShellCommand" date="Wed Apr 13 11:14:39 EDT 2022" starttimestamp="1649862007572" timestamp="871648" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="677" _type="ShellCommand" date="Wed Apr 13 11:14:39 EDT 2022" starttimestamp="1649862007572" timestamp="871801" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="681" _type="PauseCommand" date="Wed Apr 13 11:14:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="874600">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2771]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="680" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:14:42 EDT 2022" starttimestamp="1649862007572" timestamp="874600" />
  <Command __id="682" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:42 EDT 2022" starttimestamp="1649862007572" timestamp="874701" />
  <Command __id="683" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:14:42 EDT 2022" starttimestamp="1649862007572" timestamp="874745" />
  <DocumentChange __id="667" _type="Delete" date="Wed Apr 13 11:14:34 EDT 2022" docASTNodeCount="299" docActiveCodeLength="2116" docExpressionCount="195" docLength="2452" endLine="40" length="7" offset="1500" startLine="40" starttimestamp="1649862007572" timestamp="866870">
    <text><![CDATA[example]]></text>
  </DocumentChange>
  <DocumentChange __id="678" _type="Insert" date="Wed Apr 13 11:14:39 EDT 2022" docASTNodeCount="303" docActiveCodeLength="2153" docExpressionCount="198" docLength="2489" length="37" offset="511" repeat="2" starttimestamp="1649862007572" timestamp="871829" timestamp2="871830">
    <text><![CDATA[
import readThread.ServerReadThread;]]></text>
  </DocumentChange>
  <Command __id="685" _type="PauseCommand" date="Wed Apr 13 11:14:53 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="886088">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[11343]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="686" _type="SelectTextCommand" caretOffset="393" date="Wed Apr 13 11:14:53 EDT 2022" end="460" start="393" starttimestamp="1649862007572" timestamp="886171" />
  <Command __id="688" _type="PauseCommand" date="Wed Apr 13 11:15:04 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="896469">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[10298]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="687" _type="SelectTextCommand" caretOffset="130" date="Wed Apr 13 11:15:04 EDT 2022" end="387" start="130" starttimestamp="1649862007572" timestamp="896469" />
  <Command __id="689" _type="SelectTextCommand" caretOffset="130" date="Wed Apr 13 11:15:04 EDT 2022" end="387" start="130" starttimestamp="1649862007572" timestamp="896469" />
  <Command __id="690" _type="CopyCommand" date="Wed Apr 13 11:15:04 EDT 2022" starttimestamp="1649862007572" timestamp="896777" />
  <Command __id="684" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:14:53 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="886088">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="692" _type="PauseCommand" date="Wed Apr 13 11:15:05 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="897847">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1070]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="693" _type="MoveCaretCommand" caretOffset="1537" date="Wed Apr 13 11:15:05 EDT 2022" docOffset="1537" starttimestamp="1649862007572" timestamp="897933" />
  <Command __id="695" _type="PauseCommand" date="Wed Apr 13 11:15:07 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="899532">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1599]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="694" _type="MoveCaretCommand" caretOffset="791" date="Wed Apr 13 11:15:07 EDT 2022" docOffset="791" starttimestamp="1649862007572" timestamp="899532" />
  <Command __id="696" _type="MoveCaretCommand" caretOffset="791" date="Wed Apr 13 11:15:07 EDT 2022" docOffset="791" starttimestamp="1649862007572" timestamp="899532" />
  <Command __id="698" _type="InsertStringCommand" date="Wed Apr 13 11:15:07 EDT 2022" starttimestamp="1649862007572" timestamp="899793" timestamp2="899793">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="699" _type="InsertStringCommand" date="Wed Apr 13 11:15:07 EDT 2022" starttimestamp="1649862007572" timestamp="899793" timestamp2="899793">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="701" _type="InsertStringCommand" date="Wed Apr 13 11:15:07 EDT 2022" starttimestamp="1649862007572" timestamp="900126" timestamp2="900126">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="702" _type="InsertStringCommand" date="Wed Apr 13 11:15:07 EDT 2022" starttimestamp="1649862007572" timestamp="900126" timestamp2="900126">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="708" _type="PasteCommand" date="Wed Apr 13 11:15:08 EDT 2022" starttimestamp="1649862007572" timestamp="900449" />
  <Command __id="710" _type="PauseCommand" date="Wed Apr 13 11:15:13 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="906203">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[5754]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="709" _type="SelectTextCommand" caretOffset="1024" date="Wed Apr 13 11:15:13 EDT 2022" end="1042" start="1024" starttimestamp="1649862007572" timestamp="906203" />
  <Command __id="711" _type="SelectTextCommand" caretOffset="1024" date="Wed Apr 13 11:15:13 EDT 2022" end="1042" start="1024" starttimestamp="1649862007572" timestamp="906204" />
  <Command __id="713" _type="PauseCommand" date="Wed Apr 13 11:15:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="909240">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3036]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="712" _type="MoveCaretCommand" caretOffset="1041" date="Wed Apr 13 11:15:16 EDT 2022" docOffset="1041" starttimestamp="1649862007572" timestamp="909240" />
  <Command __id="714" _type="MoveCaretCommand" caretOffset="1041" date="Wed Apr 13 11:15:16 EDT 2022" docOffset="1041" starttimestamp="1649862007572" timestamp="909241" />
  <Command __id="716" _type="PauseCommand" date="Wed Apr 13 11:15:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="911090">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1849]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="715" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:15:18 EDT 2022" starttimestamp="1649862007572" timestamp="911090" />
  <Command __id="717" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:15:18 EDT 2022" starttimestamp="1649862007572" timestamp="911181" />
  <Command __id="718" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:15:18 EDT 2022" starttimestamp="1649862007572" timestamp="911232" />
  <Command __id="691" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:15:05 EDT 2022" docASTNodeCount="303" docActiveCodeLength="2153" docExpressionCount="198" docLength="2489" projectName="A6" starttimestamp="1649862007572" timestamp="897847">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import "), Diff(DELETE,"nioExample.example"), Diff(INSERT,"inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread."), Diff(EQUAL,"ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶"), Diff(INSERT,"	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;"), Diff(EQUAL,"¶"), Diff(DELETE,""), Diff(EQUAL,"	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		"), Diff(DELETE,"¶		int "), Diff(EQUAL,"aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new "), Diff(DELETE,"example"), Diff(EQUAL,"ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="697" _type="Insert" date="Wed Apr 13 11:15:07 EDT 2022" docASTNodeCount="303" docActiveCodeLength="2159" docExpressionCount="198" docLength="2495" length="6" offset="791" repeat="2" starttimestamp="1649862007572" timestamp="899786" timestamp2="900120">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="703" _type="Replace" date="Wed Apr 13 11:15:07 EDT 2022" docASTNodeCount="350" docActiveCodeLength="2416" docExpressionCount="220" docLength="2752" endLine="22" insertionLength="258" int_docASTNodeCount="303" int_docActiveCodeLength="2158" int_docExpressionCount="198" int_docLength="2494" length="1" offset="796" startLine="22" starttimestamp="1649862007572" timestamp="900355">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="704" _type="Insert" date="Wed Apr 13 11:15:07 EDT 2022" docASTNodeCount="354" docActiveCodeLength="2456" docExpressionCount="223" docLength="2792" length="40" offset="511" repeat="2" starttimestamp="1649862007572" timestamp="900410" timestamp2="900411">
    <text><![CDATA[
import readThread.ReadThreadInterface;]]></text>
  </DocumentChange>
  <DocumentChange __id="706" _type="Insert" date="Wed Apr 13 11:15:07 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" length="29" offset="246" repeat="2" starttimestamp="1649862007572" timestamp="900412" timestamp2="900415">
    <text><![CDATA[
import java.util.ArrayList;]]></text>
  </DocumentChange>
  <Command __id="720" _type="PauseCommand" date="Wed Apr 13 11:15:53 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="945699">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[34467]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="721" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:15:53 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="945909" />
  <Command __id="719" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:15:53 EDT 2022" docASTNodeCount="80" docActiveCodeLength="540" docExpressionCount="51" docLength="650" projectName="A6" starttimestamp="1649862007572" timestamp="945699">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})
public class ServerReadThread implements ReadThreadInterface{

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}


}
]]></snapshot>
  </Command>
  <Command __id="723" _type="PauseCommand" date="Wed Apr 13 11:15:58 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="951425">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5516]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="724" _type="MoveCaretCommand" caretOffset="1464" date="Wed Apr 13 11:15:59 EDT 2022" docOffset="1711" starttimestamp="1649862007572" timestamp="951599" />
  <Command __id="726" _type="PauseCommand" date="Wed Apr 13 11:16:07 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="959454">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7855]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="725" _type="SelectTextCommand" caretOffset="125" date="Wed Apr 13 11:16:07 EDT 2022" end="230" start="125" starttimestamp="1649862007572" timestamp="959454" />
  <Command __id="728" _type="PauseCommand" date="Wed Apr 13 11:16:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="960561">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1107]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="727" _type="CopyCommand" date="Wed Apr 13 11:16:08 EDT 2022" starttimestamp="1649862007572" timestamp="960561" />
  <Command __id="730" _type="PauseCommand" date="Wed Apr 13 11:16:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="963524">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2963]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="729" _type="SelectTextCommand" caretOffset="125" date="Wed Apr 13 11:16:11 EDT 2022" end="331" start="125" starttimestamp="1649862007572" timestamp="963524" />
  <Command __id="731" _type="CopyCommand" date="Wed Apr 13 11:16:11 EDT 2022" starttimestamp="1649862007572" timestamp="963694" />
  <Command __id="722" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:15:58 EDT 2022" docASTNodeCount="225" docActiveCodeLength="1609" docExpressionCount="133" docLength="1877" projectName="A6" starttimestamp="1649862007572" timestamp="951425">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleServerReadThread implements ReadThreadInterface{¶	final NIOManagerPrintServer server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleServerReadThread (final NIOManagerPrintServer aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="733" _type="PauseCommand" date="Wed Apr 13 11:16:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="965184">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1489]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="734" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:16:12 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="965259" />
  <Command __id="736" _type="PauseCommand" date="Wed Apr 13 11:16:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="966969">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1710]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="735" _type="MoveCaretCommand" caretOffset="183" date="Wed Apr 13 11:16:14 EDT 2022" docOffset="292" starttimestamp="1649862007572" timestamp="966969" />
  <Command __id="738" _type="InsertStringCommand" date="Wed Apr 13 11:16:14 EDT 2022" starttimestamp="1649862007572" timestamp="967211" timestamp2="967211">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="740" _type="InsertStringCommand" date="Wed Apr 13 11:16:15 EDT 2022" starttimestamp="1649862007572" timestamp="967564" timestamp2="967564">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="750" _type="PasteCommand" date="Wed Apr 13 11:16:15 EDT 2022" starttimestamp="1649862007572" timestamp="967887" />
  <Command __id="752" _type="PauseCommand" date="Wed Apr 13 11:16:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="971325">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3438]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="751" _type="SelectTextCommand" caretOffset="195" date="Wed Apr 13 11:16:18 EDT 2022" end="216" start="195" starttimestamp="1649862007572" timestamp="971325" />
  <Command __id="732" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:16:12 EDT 2022" docASTNodeCount="80" docActiveCodeLength="540" docExpressionCount="51" docLength="650" projectName="A6" starttimestamp="1649862007572" timestamp="965183">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="737" _type="Insert" date="Wed Apr 13 11:16:14 EDT 2022" docASTNodeCount="80" docActiveCodeLength="546" docExpressionCount="51" docLength="656" length="6" offset="292" repeat="2" starttimestamp="1649862007572" timestamp="967204" timestamp2="967558">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="741" _type="Replace" date="Wed Apr 13 11:16:15 EDT 2022" docASTNodeCount="108" docActiveCodeLength="752" docExpressionCount="64" docLength="862" endLine="12" insertionLength="207" int_docASTNodeCount="80" int_docActiveCodeLength="545" int_docExpressionCount="51" int_docLength="655" length="1" offset="297" startLine="12" starttimestamp="1649862007572" timestamp="967796">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	final NIOManagerPrintServer server;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleServerReadThread (final NIOManagerPrintServer aServer) {
		server = aServer;
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="742" _type="Delete" date="Wed Apr 13 11:16:15 EDT 2022" docASTNodeCount="108" docActiveCodeLength="748" docExpressionCount="64" docLength="858" endLine="5" length="4" offset="91" startLine="3" starttimestamp="1649862007572" timestamp="967842">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="743" _type="Insert" date="Wed Apr 13 11:16:15 EDT 2022" docASTNodeCount="128" docActiveCodeLength="885" docExpressionCount="81" docLength="995" length="137" offset="91" repeat="7" starttimestamp="1649862007572" timestamp="967843" timestamp2="967850">
    <text><![CDATA[

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.NIOManagerPrintServer;
]]></text>
  </DocumentChange>
  <Command __id="754" _type="PauseCommand" date="Wed Apr 13 11:16:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="972527">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1202]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="753" _type="Replace" date="Wed Apr 13 11:16:20 EDT 2022" docASTNodeCount="128" docActiveCodeLength="865" docExpressionCount="81" docLength="975" endLine="15" insertionLength="1" int_docASTNodeCount="122" int_docActiveCodeLength="864" int_docExpressionCount="79" int_docLength="974" length="21" offset="437" startLine="15" starttimestamp="1649862007572" timestamp="972527">
    <deletedText><![CDATA[NIOManagerPrintServer]]></deletedText>
    <insertedText><![CDATA[S]]></insertedText>
  </DocumentChange>
  <Command __id="755" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="972533" timestamp2="972533">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="757" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="972728" timestamp2="972728">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="759" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="972829" timestamp2="972829">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="761" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="973092" timestamp2="973092">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="763" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="973234" timestamp2="973234">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="765" _type="InsertStringCommand" date="Wed Apr 13 11:16:20 EDT 2022" starttimestamp="1649862007572" timestamp="973358" timestamp2="973358">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="767" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="973748" timestamp2="973748">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="769" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="973907" timestamp2="973907">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="771" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="974048" timestamp2="974048">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="773" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="974143" timestamp2="974143">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="775" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="974199" timestamp2="974199">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="777" _type="InsertStringCommand" date="Wed Apr 13 11:16:21 EDT 2022" starttimestamp="1649862007572" timestamp="974309" timestamp2="974309">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="779" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="974574" timestamp2="974574">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="781" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="974769" timestamp2="974769">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="783" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="974864" timestamp2="974864">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="785" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="974975" timestamp2="974975">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="787" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="975165" timestamp2="975165">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="789" _type="InsertStringCommand" date="Wed Apr 13 11:16:22 EDT 2022" starttimestamp="1649862007572" timestamp="975370" timestamp2="975370">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="756" _type="Insert" date="Wed Apr 13 11:16:20 EDT 2022" docASTNodeCount="128" docActiveCodeLength="882" docExpressionCount="81" docLength="992" length="17" offset="438" repeat="17" starttimestamp="1649862007572" timestamp="972720" timestamp2="975364">
    <text><![CDATA[erverRemoteObject]]></text>
  </DocumentChange>
  <Command __id="791" _type="PauseCommand" date="Wed Apr 13 11:16:25 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="977688">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2318]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="792" _type="InsertStringCommand" date="Wed Apr 13 11:16:25 EDT 2022" starttimestamp="1649862007572" timestamp="977694" timestamp2="977694">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="794" _type="InsertStringCommand" date="Wed Apr 13 11:16:25 EDT 2022" starttimestamp="1649862007572" timestamp="977804" timestamp2="977804">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="796" _type="InsertStringCommand" date="Wed Apr 13 11:16:25 EDT 2022" starttimestamp="1649862007572" timestamp="977869" timestamp2="977869">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="798" _type="PauseCommand" date="Wed Apr 13 11:16:31 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="983855">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5986]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="797" _type="ShellCommand" date="Wed Apr 13 11:16:31 EDT 2022" starttimestamp="1649862007572" timestamp="983855" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="799" _type="ShellCommand" date="Wed Apr 13 11:16:31 EDT 2022" starttimestamp="1649862007572" timestamp="983918" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="803" _type="PauseCommand" date="Wed Apr 13 11:16:32 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="985319">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1388]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="802" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:16:32 EDT 2022" starttimestamp="1649862007572" timestamp="985319" />
  <Command __id="804" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:16:32 EDT 2022" starttimestamp="1649862007572" timestamp="985408" />
  <Command __id="805" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:16:33 EDT 2022" starttimestamp="1649862007572" timestamp="985462" />
  <Command __id="807" _type="PauseCommand" date="Wed Apr 13 11:16:35 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="988147">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2685]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <DocumentChange __id="790" _type="Insert" date="Wed Apr 13 11:16:25 EDT 2022" docASTNodeCount="128" docActiveCodeLength="885" docExpressionCount="81" docLength="995" length="3" offset="455" repeat="3" starttimestamp="1649862007572" timestamp="977688" timestamp2="977863">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <DocumentChange __id="800" _type="Insert" date="Wed Apr 13 11:16:31 EDT 2022" docASTNodeCount="134" docActiveCodeLength="930" docExpressionCount="86" docLength="1040" length="45" offset="226" repeat="2" starttimestamp="1649862007572" timestamp="983931" timestamp2="983933">
    <text><![CDATA[
import server.remote.ServerRemoteObjectNIO;]]></text>
  </DocumentChange>
  <Command __id="806" _type="SelectTextCommand" caretOffset="308" date="Wed Apr 13 11:16:35 EDT 2022" end="314" start="308" starttimestamp="1649862007572" timestamp="988147" />
  <Command __id="809" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:16:36 EDT 2022" starttimestamp="1649862007572" timestamp="988478" />
  <Command __id="812" _type="PauseCommand" date="Wed Apr 13 11:16:37 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="989498">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1020]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="811" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:16:37 EDT 2022" starttimestamp="1649862007572" timestamp="989498" />
  <Command __id="814" _type="PauseCommand" date="Wed Apr 13 11:16:41 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="993784">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4286]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="813" _type="SelectTextCommand" caretOffset="195" date="Wed Apr 13 11:16:41 EDT 2022" end="216" start="195" starttimestamp="1649862007572" timestamp="993784" />
  <Command __id="815" _type="CopyCommand" date="Wed Apr 13 11:16:41 EDT 2022" starttimestamp="1649862007572" timestamp="994019" />
  <Command __id="817" _type="PauseCommand" date="Wed Apr 13 11:16:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="996277">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2258]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="816" _type="SelectTextCommand" caretOffset="331" date="Wed Apr 13 11:16:43 EDT 2022" end="352" start="331" starttimestamp="1649862007572" timestamp="996277" />
  <Command __id="819" _type="PasteCommand" date="Wed Apr 13 11:16:43 EDT 2022" starttimestamp="1649862007572" timestamp="996409" />
  <Command __id="821" _type="PauseCommand" date="Wed Apr 13 11:16:45 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="997976">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1567]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="820" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:16:45 EDT 2022" starttimestamp="1649862007572" timestamp="997976" />
  <Command __id="822" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:16:45 EDT 2022" starttimestamp="1649862007572" timestamp="998076" />
  <Command __id="823" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:16:45 EDT 2022" starttimestamp="1649862007572" timestamp="998125" />
  <DocumentChange __id="808" _type="Delete" date="Wed Apr 13 11:16:36 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" endLine="19" length="7" offset="594" repeat="2" startLine="19" starttimestamp="1649862007572" timestamp="988471" timestamp2="989495">
    <text><![CDATA[example]]></text>
  </DocumentChange>
  <DocumentChange __id="818" _type="Replace" date="Wed Apr 13 11:16:43 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" endLine="19" insertionLength="21" int_docASTNodeCount="132" int_docActiveCodeLength="902" int_docExpressionCount="84" int_docLength="1012" length="21" offset="618" startLine="19" starttimestamp="1649862007572" timestamp="996404">
    <deletedText><![CDATA[NIOManagerPrintServer]]></deletedText>
    <insertedText><![CDATA[ServerRemoteObjectNIO]]></insertedText>
  </DocumentChange>
  <Command __id="825" _type="PauseCommand" date="Wed Apr 13 11:16:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1001676">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3551]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="826" _type="SelectTextCommand" caretOffset="208" date="Wed Apr 13 11:16:49 EDT 2022" end="250" start="208" starttimestamp="1649862007572" timestamp="1001770" />
  <Command __id="824" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:16:49 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="1001676">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="828" _type="PauseCommand" date="Wed Apr 13 11:16:51 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1003806">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2036]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="829" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 11:16:51 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="1003955" />
  <Command __id="827" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:16:51 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="1003806">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶"), Diff(EQUAL,"import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{"), Diff(INSERT,"¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}"), Diff(EQUAL,"¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.NIOManagerPrintServer;
import server.remote.ServerRemoteObjectNIO;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})
public class ServerReadThread implements ReadThreadInterface{
	
	final ServerRemoteObjectNIO server;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ServerReadThread (final ServerRemoteObjectNIO aServer) {
		server = aServer;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}


}
]]></snapshot>
  </Command>
  <Command __id="831" _type="PauseCommand" date="Wed Apr 13 11:16:56 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1008570">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4615]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="832" _type="MoveCaretCommand" caretOffset="1041" date="Wed Apr 13 11:16:56 EDT 2022" docOffset="1041" starttimestamp="1649862007572" timestamp="1008653" />
  <Command __id="830" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:16:56 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" projectName="A6" starttimestamp="1649862007572" timestamp="1008570">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶"), Diff(INSERT,"import java.util.ArrayList;¶"), Diff(EQUAL,"import java.util.List;¶"), Diff(DELETE,""), Diff(EQUAL,"import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶"), Diff(INSERT,"import readThread.ReadThreadInterface;¶"), Diff(EQUAL,"import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶"), Diff(DELETE,""), Diff(EQUAL,"	int aServerPort;¶	¶	"), Diff(INSERT,"List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	"), Diff(EQUAL,"@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="834" _type="PauseCommand" date="Wed Apr 13 11:17:24 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="1037152">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[28499]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="835" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:17:24 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1037344" />
  <Command __id="833" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:17:24 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="1037152">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <Command __id="837" _type="PauseCommand" date="Wed Apr 13 11:17:32 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1044494">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7150]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="838" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:17:32 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1044694" />
  <Command __id="836" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:17:32 EDT 2022" docASTNodeCount="1200" docActiveCodeLength="9207" docExpressionCount="857" docLength="10076" projectName="A6" starttimestamp="1649862007572" timestamp="1044494">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientConfigure.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteObjectRMI;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;
import util.trace.Tracer;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PerformanceExperimentEnded;
import util.trace.port.PerformanceExperimentStarted;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.CLIENT_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO})
public class ClientConfigure  extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI {
	
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	public void atomicBroadcast(boolean fake) {
		return;
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC((ClientRemoteInterfaceGIPC) this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI((ClientRemoteInterfaceGIPC) this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, (ClientRemoteInterfaceGIPC) this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, (ClientRemoteInterfaceGIPC) this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}

}
]]></snapshot>
  </Command>
  <Command __id="840" _type="PauseCommand" date="Wed Apr 13 11:17:37 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1050394">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5700]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="841" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:17:38 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1050512" />
  <Command __id="843" _type="PauseCommand" date="Wed Apr 13 11:18:03 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="1075828">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[25316]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="844" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:09 EDT 2022" starttimestamp="1649862007572" timestamp="1082285" />
  <Command __id="846" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:09 EDT 2022" starttimestamp="1649862007572" timestamp="1082301" />
  <Command __id="847" _type="ShellCommand" date="Wed Apr 13 11:18:09 EDT 2022" starttimestamp="1649862007572" timestamp="1082373" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="849" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:18:10 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1082962" />
  <Command __id="851" _type="PauseCommand" date="Wed Apr 13 11:18:23 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1095542">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12580]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="839" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:17:37 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="1050394">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="848" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:18:10 EDT 2022" docASTNodeCount="6" docActiveCodeLength="62" docExpressionCount="2" docLength="62" projectName="A6" starttimestamp="1649862007572" timestamp="1082780">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

public class ClientRemoteObjectNIO {

}
]]></snapshot>
  </Command>
  <Command __id="850" _type="MoveCaretCommand" caretOffset="54" date="Wed Apr 13 11:18:23 EDT 2022" docOffset="54" starttimestamp="1649862007572" timestamp="1095542" />
  <Command __id="853" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1095781" timestamp2="1095781">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="855" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1095978" timestamp2="1095978">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="857" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1096173" timestamp2="1096173">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="859" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1096257" timestamp2="1096257">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="861" _type="InsertStringCommand" date="Wed Apr 13 11:18:23 EDT 2022" starttimestamp="1649862007572" timestamp="1096391" timestamp2="1096391">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="863" _type="InsertStringCommand" date="Wed Apr 13 11:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="1096468" timestamp2="1096468">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="865" _type="InsertStringCommand" date="Wed Apr 13 11:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="1096545" timestamp2="1096545">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="867" _type="InsertStringCommand" date="Wed Apr 13 11:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="1096764" timestamp2="1096764">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="870" _type="PauseCommand" date="Wed Apr 13 11:18:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1097913">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1149]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="869" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1097913" timestamp2="1097913">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="872" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1098059" timestamp2="1098059">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="874" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1098175" timestamp2="1098175">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="876" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1098260" timestamp2="1098260">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="878" _type="InsertStringCommand" date="Wed Apr 13 11:18:25 EDT 2022" starttimestamp="1649862007572" timestamp="1098385" timestamp2="1098385">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="880" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1098463" timestamp2="1098463">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="882" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1098764" timestamp2="1098764">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="884" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1098961" timestamp2="1098961">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="886" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1099235" timestamp2="1099235">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="888" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1099341" timestamp2="1099341">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="890" _type="InsertStringCommand" date="Wed Apr 13 11:18:26 EDT 2022" starttimestamp="1649862007572" timestamp="1099401" timestamp2="1099401">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="892" _type="InsertStringCommand" date="Wed Apr 13 11:18:27 EDT 2022" starttimestamp="1649862007572" timestamp="1099561" timestamp2="1099561">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="894" _type="InsertStringCommand" date="Wed Apr 13 11:18:27 EDT 2022" starttimestamp="1649862007572" timestamp="1099884" timestamp2="1099884">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="896" _type="InsertStringCommand" date="Wed Apr 13 11:18:27 EDT 2022" starttimestamp="1649862007572" timestamp="1100191" timestamp2="1100191">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="898" _type="InsertStringCommand" date="Wed Apr 13 11:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="1100432" timestamp2="1100432">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="900" _type="InsertStringCommand" date="Wed Apr 13 11:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="1100536" timestamp2="1100536">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="902" _type="InsertStringCommand" date="Wed Apr 13 11:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="1100729" timestamp2="1100729">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="904" _type="InsertStringCommand" date="Wed Apr 13 11:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="1100913" timestamp2="1100913">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="906" _type="PauseCommand" date="Wed Apr 13 11:18:29 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1102070">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1157]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="905" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:18:29 EDT 2022" starttimestamp="1649862007572" timestamp="1102070" />
  <Command __id="907" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:29 EDT 2022" starttimestamp="1649862007572" timestamp="1102166" />
  <Command __id="908" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:29 EDT 2022" starttimestamp="1649862007572" timestamp="1102194" />
  <DocumentChange __id="852" _type="Insert" date="Wed Apr 13 11:18:23 EDT 2022" docASTNodeCount="8" docActiveCodeLength="88" docExpressionCount="3" docLength="88" length="26" offset="54" repeat="26" starttimestamp="1649862007572" timestamp="1095777" timestamp2="1100910">
    <text><![CDATA[extends ClientRemoteObject]]></text>
  </DocumentChange>
  <Command __id="910" _type="PauseCommand" date="Wed Apr 13 11:18:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1105071">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2877]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="911" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:18:32 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1105246" />
  <Command __id="913" _type="PauseCommand" date="Wed Apr 13 11:18:34 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1107413">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2167]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="912" _type="MoveCaretCommand" caretOffset="327" date="Wed Apr 13 11:18:34 EDT 2022" docOffset="362" starttimestamp="1649862007572" timestamp="1107413" />
  <Command __id="915" _type="InsertStringCommand" date="Wed Apr 13 11:18:35 EDT 2022" starttimestamp="1649862007572" timestamp="1107979" timestamp2="1107979">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="917" _type="InsertStringCommand" date="Wed Apr 13 11:18:35 EDT 2022" starttimestamp="1649862007572" timestamp="1108014" timestamp2="1108014">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="919" _type="InsertStringCommand" date="Wed Apr 13 11:18:35 EDT 2022" starttimestamp="1649862007572" timestamp="1108064" timestamp2="1108064">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="921" _type="PauseCommand" date="Wed Apr 13 11:18:36 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1109112">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1048]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="920" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:18:36 EDT 2022" starttimestamp="1649862007572" timestamp="1109112" />
  <Command __id="922" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:36 EDT 2022" starttimestamp="1649862007572" timestamp="1109207" />
  <Command __id="923" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:18:36 EDT 2022" starttimestamp="1649862007572" timestamp="1109225" />
  <Command __id="909" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:18:32 EDT 2022" docASTNodeCount="71" docActiveCodeLength="440" docExpressionCount="43" docLength="463" projectName="A6" starttimestamp="1649862007572" timestamp="1105071">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\Client.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({ DistributedTags.CLIENT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class Client {
	public static void main(final String[] args) {
		try {

			// create client object
			final ClientRemoteInterfaceRMI client = new ClientRemoteObject();

			client.start(args);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="914" _type="Insert" date="Wed Apr 13 11:18:35 EDT 2022" docASTNodeCount="71" docActiveCodeLength="443" docExpressionCount="43" docLength="466" length="3" offset="362" repeat="3" starttimestamp="1649862007572" timestamp="1107975" timestamp2="1108059">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <Command __id="925" _type="PauseCommand" date="Wed Apr 13 11:18:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1111640">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2415]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="926" _type="UndoCommand" date="Wed Apr 13 11:18:39 EDT 2022" starttimestamp="1649862007572" timestamp="1111651" />
  <Command __id="928" _type="PauseCommand" date="Wed Apr 13 11:18:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1113302">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1651]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="927" _type="MoveCaretCommand" caretOffset="265" date="Wed Apr 13 11:18:40 EDT 2022" docOffset="300" starttimestamp="1649862007572" timestamp="1113302" />
  <Command __id="930" _type="InsertStringCommand" date="Wed Apr 13 11:18:41 EDT 2022" starttimestamp="1649862007572" timestamp="1113754" timestamp2="1113754">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="931" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:18:41 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="1113763" />
  <Command __id="932" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:18:41 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="1114035" />
  <Command __id="934" _type="InsertStringCommand" date="Wed Apr 13 11:18:41 EDT 2022" starttimestamp="1649862007572" timestamp="1114043" timestamp2="1114043">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="935" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:18:41 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="1114053" />
  <Command __id="943" _type="PauseCommand" date="Wed Apr 13 11:18:43 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1116245">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[1510]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="945" _type="PauseCommand" date="Wed Apr 13 11:18:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1117358">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1113]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="944" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:18:44 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="1117358" />
  <Command __id="947" _type="InsertStringCommand" date="Wed Apr 13 11:18:44 EDT 2022" starttimestamp="1649862007572" timestamp="1117367" timestamp2="1117367">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="949" _type="PauseCommand" date="Wed Apr 13 11:18:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1119649">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2282]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="948" _type="SelectTextCommand" caretOffset="267" date="Wed Apr 13 11:18:47 EDT 2022" end="332" start="267" starttimestamp="1649862007572" timestamp="1119649" />
  <Command __id="950" _type="CopyCommand" date="Wed Apr 13 11:18:47 EDT 2022" starttimestamp="1649862007572" timestamp="1120058" />
  <Command __id="951" _type="MoveCaretCommand" caretOffset="334" date="Wed Apr 13 11:18:48 EDT 2022" docOffset="369" starttimestamp="1649862007572" timestamp="1120656" />
  <Command __id="953" _type="InsertStringCommand" date="Wed Apr 13 11:18:48 EDT 2022" starttimestamp="1649862007572" timestamp="1121041" timestamp2="1121041">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Apr 13 11:18:49 EDT 2022" starttimestamp="1649862007572" timestamp="1121821" />
  <Command __id="956" _type="InsertStringCommand" date="Wed Apr 13 11:18:49 EDT 2022" starttimestamp="1649862007572" timestamp="1122321" timestamp2="1122321">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="958" _type="PasteCommand" date="Wed Apr 13 11:18:50 EDT 2022" starttimestamp="1649862007572" timestamp="1122969" />
  <Command __id="960" _type="PauseCommand" date="Wed Apr 13 11:18:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1125553">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2584]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="970" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Wed Apr 13 11:19:01 EDT 2022" starttimestamp="1649862007572" timestamp="1134300" />
  <Command __id="972" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1134352" type="Debug" />
  <Command __id="973" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:19:01 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1134352" type="Run" />
  <Command __id="974" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1134352" type="Debug" />
  <Command __id="975" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:19:01 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1134352" type="Run" />
  <Command __id="977" _type="PauseCommand" date="Wed Apr 13 11:19:08 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1140589">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6237]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="976" _type="ShellCommand" date="Wed Apr 13 11:19:08 EDT 2022" starttimestamp="1649862007572" timestamp="1140589" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="978" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Wed Apr 13 11:19:08 EDT 2022" starttimestamp="1649862007572" timestamp="1140816" />
  <Command __id="979" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:19:08 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1141205" type="Run" />
  <Command __id="980" _type="RunCommand" className="/A6/src/server/Server.java" date="Wed Apr 13 11:19:08 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1141205" type="Run" />
  <Command __id="981" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1141420" type="Run" />
  <Command __id="982" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:09 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1141438" type="Run" />
  <Command __id="983" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1141441" type="Run" />
  <Command __id="984" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1142039" type="Run" />
  <Command __id="985" _type="ConsoleOutput" date="Wed Apr 13 11:19:09 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1142101" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.9563812044815038
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(EQUAL,"Re"), Diff(DELETE,"adCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:63625 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9563812044815038¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="986" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1142495" type="Run" />
  <Command __id="987" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1142529" type="Run" />
  <Command __id="988" _type="ConsoleOutput" date="Wed Apr 13 11:19:10 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1142631" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9563812044815038¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="990" _type="PauseCommand" date="Wed Apr 13 11:19:11 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1143769">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="989" _type="ShellCommand" date="Wed Apr 13 11:19:11 EDT 2022" starttimestamp="1649862007572" timestamp="1143769" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="992" _type="PauseCommand" date="Wed Apr 13 11:19:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1148172">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4403]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="998" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1151660" type="Run" />
  <Command __id="1001" _type="PauseCommand" date="Wed Apr 13 11:19:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1153150">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1489]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1011" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1157573" type="Run" />
  <Command __id="1013" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1157574" type="Run" />
  <Command __id="1014" _type="ShellCommand" date="Wed Apr 13 11:19:25 EDT 2022" starttimestamp="1649862007572" timestamp="1157761" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1016" _type="PauseCommand" date="Wed Apr 13 11:19:31 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1164133">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6372]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1024" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1169680" type="Run" />
  <Command __id="1026" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1170409" type="Run" />
  <Command __id="1027" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1170667" type="Run" />
  <Command __id="1028" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1170696" type="Run" />
  <Command __id="1029" _type="ConsoleOutput" date="Wed Apr 13 11:19:38 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1170710" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.40620601268491363 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@a527092
[com.sun.proxy.$Proxy1@65dd0f14, com.sun.proxy.$Proxy1@a527092]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.40620601268491363"), Diff(INSERT,"Server0<-->Generic Client:0.40620601268491363 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@a527092¶[com.sun.proxy.$Proxy1@65dd0f14, com.sun.proxy.$Proxy1@a527092]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1030" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1170749" type="Run" />
  <Command __id="1031" _type="ConsoleOutput" date="Wed Apr 13 11:19:38 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1170935" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.40620601268491363 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@a527092¶[com.sun.proxy.$Proxy1@65dd0f14, com.sun.proxy.$Proxy1@a527092]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1032" _type="ConsoleOutput" date="Wed Apr 13 11:19:38 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1170956" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1034" _type="PauseCommand" date="Wed Apr 13 11:19:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1175480">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4524]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1033" _type="ShellCommand" date="Wed Apr 13 11:19:43 EDT 2022" starttimestamp="1649862007572" timestamp="1175480" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1036" _type="PauseCommand" date="Wed Apr 13 11:19:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1176871">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1391]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1035" _type="ShellCommand" date="Wed Apr 13 11:19:44 EDT 2022" starttimestamp="1649862007572" timestamp="1176871" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1038" _type="PauseCommand" date="Wed Apr 13 11:19:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1180070">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3199]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1042" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1185757" type="Run" />
  <Command __id="1045" _type="PauseCommand" date="Wed Apr 13 11:19:57 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1190087">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4330]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1044" _type="ConsoleInput" date="Wed Apr 13 11:19:57 EDT 2022" starttimestamp="1649862007572" timestamp="1190087" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="1046" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1190091" type="Run" />
  <Command __id="1047" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:19:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1190124" type="Run" />
  <Command __id="1048" _type="ConsoleOutput" date="Wed Apr 13 11:19:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1190145" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
NIO
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1049" _type="ConsoleOutput" date="Wed Apr 13 11:19:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1190163" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: NIO
USING RMI IN SERVER
Command recieved for broadcast: move 50 -50
USING RMI IN SERVER
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]
2
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]]
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(INSERT,"IPC Mechanism recieved for broadcast: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: move 50 -50¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1050" _type="ConsoleOutput" date="Wed Apr 13 11:19:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1190191" type="ConsoleOutput">
    <outputString><![CDATA[recieved broadcased command: move 50 -50
PROPERTY CHANGE
executed command
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism "), Diff(EQUAL,"recieved "), Diff(DELETE,"for "), Diff(EQUAL,"broadcas"), Diff(DELETE,"t: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: move 50 -50¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63755](remote),objID:[16d5a6f:1802381f8a4:-7ffe, 8702329948209630933]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63766](remote),objID:[-d7c465e:1802382379c:-7ffe, -2455751305861641205]]]]]"), Diff(INSERT,"ed command: move 50 -50¶PROPERTY CHANGE¶executed command"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1051" _type="ConsoleOutput" date="Wed Apr 13 11:19:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1190341" type="ConsoleOutput">
    <outputString><![CDATA[Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcased command: move 50 -50¶PROPERTY CHANGE¶execu"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separa"), Diff(EQUAL,"ted "), Diff(INSERT,"by "), Diff(EQUAL,"comma"), Diff(DELETE,"nd"), Diff(INSERT,"s:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1053" _type="PauseCommand" date="Wed Apr 13 11:20:00 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1193185">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2844]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1056" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:20:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1200702" type="Run" />
  <Command __id="1058" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:20:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1200718" type="Run" />
  <Command __id="1059" _type="ConsoleInput" date="Wed Apr 13 11:20:08 EDT 2022" starttimestamp="1649862007572" timestamp="1201221" type="Exception">
    <outputString><![CDATA[i GIPC
]]></outputString>
  </Command>
  <Command __id="1060" _type="ConsoleOutput" date="Wed Apr 13 11:20:08 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1201276" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]¶"), Diff(EQUAL,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="1062" _type="PauseCommand" date="Wed Apr 13 11:20:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1204365">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3089]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1061" _type="ShellCommand" date="Wed Apr 13 11:20:11 EDT 2022" starttimestamp="1649862007572" timestamp="1204365" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1063" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:20:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1205163" type="Run" />
  <Command __id="1064" _type="ShellCommand" date="Wed Apr 13 11:20:12 EDT 2022" starttimestamp="1649862007572" timestamp="1205421" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1066" _type="PauseCommand" date="Wed Apr 13 11:20:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1208124">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2703]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1076" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:20:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1223141" type="Run" />
  <Command __id="1079" _type="PauseCommand" date="Wed Apr 13 11:20:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1225453">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2312]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1080" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:20:38 EDT 2022" starttimestamp="1649862007572" timestamp="1231141" />
  <Command __id="1082" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:20:38 EDT 2022" starttimestamp="1649862007572" timestamp="1231161" />
  <Command __id="1083" _type="ShellCommand" date="Wed Apr 13 11:20:38 EDT 2022" starttimestamp="1649862007572" timestamp="1231207" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1085" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:20:39 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1231827" />
  <DocumentChange __id="924" _type="Delete" date="Wed Apr 13 11:18:39 EDT 2022" docASTNodeCount="71" docActiveCodeLength="440" docExpressionCount="43" docLength="463" endLine="11" length="3" offset="362" startLine="11" starttimestamp="1649862007572" timestamp="1111640">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <DocumentChange __id="929" _type="Insert" date="Wed Apr 13 11:18:41 EDT 2022" docASTNodeCount="72" docActiveCodeLength="446" docExpressionCount="45" docLength="469" length="6" offset="300" repeat="2" starttimestamp="1649862007572" timestamp="1113750" timestamp2="1114039">
    <text><![CDATA[.args.]]></text>
  </DocumentChange>
  <DocumentChange __id="936" _type="Delete" date="Wed Apr 13 11:18:42 EDT 2022" docASTNodeCount="71" docActiveCodeLength="440" docExpressionCount="43" docLength="463" endLine="11" length="6" offset="300" repeat="6" startLine="11" starttimestamp="1649862007572" timestamp="1114735" timestamp2="1115625">
    <text><![CDATA[.args.]]></text>
  </DocumentChange>
  <DocumentChange __id="942" _type="Insert" date="Wed Apr 13 11:18:43 EDT 2022" docASTNodeCount="62" docActiveCodeLength="375" docExpressionCount="39" docLength="465" length="2" offset="300" repeat="2" starttimestamp="1649862007572" timestamp="1116245" timestamp2="1117361">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="952" _type="Insert" date="Wed Apr 13 11:18:48 EDT 2022" docASTNodeCount="62" docActiveCodeLength="383" docExpressionCount="39" docLength="473" length="8" offset="369" repeat="2" starttimestamp="1649862007572" timestamp="1121032" timestamp2="1122319">
    <text><![CDATA[			
			]]></text>
  </DocumentChange>
  <DocumentChange __id="957" _type="Replace" date="Wed Apr 13 11:18:50 EDT 2022" docASTNodeCount="71" docActiveCodeLength="448" docExpressionCount="43" docLength="538" endLine="12" insertionLength="68" int_docASTNodeCount="62" int_docActiveCodeLength="380" int_docExpressionCount="39" int_docLength="470" length="3" offset="369" startLine="12" starttimestamp="1649862007572" timestamp="1122964">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			final ClientRemoteInterfaceRMI client = new ClientRemoteObject();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="961" _type="Insert" date="Wed Apr 13 11:18:53 EDT 2022" docASTNodeCount="71" docActiveCodeLength="451" docExpressionCount="43" docLength="541" length="3" offset="434" repeat="3" starttimestamp="1649862007572" timestamp="1125955" timestamp2="1126119">
    <text><![CDATA[NIO]]></text>
  </DocumentChange>
  <Command __id="1084" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:20:39 EDT 2022" docASTNodeCount="6" docActiveCodeLength="69" docExpressionCount="2" docLength="69" projectName="A6" starttimestamp="1649862007572" timestamp="1231621">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

public interface ClientRemoteInterfaceNIO {

}
]]></snapshot>
  </Command>
  <Command __id="1087" _type="PauseCommand" date="Wed Apr 13 11:20:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1235372">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3545]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1088" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:20:43 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1235579" />
  <Command __id="1086" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:20:42 EDT 2022" docASTNodeCount="90" docActiveCodeLength="652" docExpressionCount="66" docLength="652" projectName="A6" starttimestamp="1649862007572" timestamp="1235372">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;


import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

public interface ServerRemoteInterfaceNIO extends SocketChannelAcceptListener, SocketChannelReadListener, SocketChannelWriteListener {

	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	List<SocketChannel> getSocketList();

	SocketChannel getSocketChannel();

}]]></snapshot>
  </Command>
  <Command __id="1090" _type="PauseCommand" date="Wed Apr 13 11:20:53 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1245832">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10253]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1091" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:20:53 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1246049" />
  <Command __id="1093" _type="PauseCommand" date="Wed Apr 13 11:21:01 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1253901">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7852]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1092" _type="SelectTextCommand" caretOffset="102" date="Wed Apr 13 11:21:01 EDT 2022" end="215" start="102" starttimestamp="1649862007572" timestamp="1253901" />
  <Command __id="1094" _type="CopyCommand" date="Wed Apr 13 11:21:01 EDT 2022" starttimestamp="1649862007572" timestamp="1254376" />
  <Command __id="1089" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:20:53 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1245832">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1096" _type="PauseCommand" date="Wed Apr 13 11:21:09 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1261973">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[7597]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1097" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:21:09 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1262041" />
  <Command __id="1099" _type="PauseCommand" date="Wed Apr 13 11:21:11 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1263784">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1743]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1098" _type="MoveCaretCommand" caretOffset="61" date="Wed Apr 13 11:21:11 EDT 2022" docOffset="61" starttimestamp="1649862007572" timestamp="1263784" />
  <Command __id="1101" _type="InsertStringCommand" date="Wed Apr 13 11:21:11 EDT 2022" starttimestamp="1649862007572" timestamp="1264293" timestamp2="1264293">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1103" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1264486" timestamp2="1264486">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="1105" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1264736" timestamp2="1264736">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1107" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1264831" timestamp2="1264831">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1109" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1265049" timestamp2="1265049">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1111" _type="InsertStringCommand" date="Wed Apr 13 11:21:12 EDT 2022" starttimestamp="1649862007572" timestamp="1265368" timestamp2="1265368">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1113" _type="InsertStringCommand" date="Wed Apr 13 11:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="1265469" timestamp2="1265469">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1115" _type="InsertStringCommand" date="Wed Apr 13 11:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="1265652" timestamp2="1265652">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1127" _type="PasteCommand" date="Wed Apr 13 11:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="1266201" />
  <Command __id="1129" _type="PauseCommand" date="Wed Apr 13 11:21:15 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1267440">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1239]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1128" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:21:15 EDT 2022" starttimestamp="1649862007572" timestamp="1267440" />
  <Command __id="1130" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:21:15 EDT 2022" starttimestamp="1649862007572" timestamp="1267538" />
  <Command __id="1131" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:21:15 EDT 2022" starttimestamp="1649862007572" timestamp="1267553" />
  <Command __id="1095" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:21:09 EDT 2022" docASTNodeCount="6" docActiveCodeLength="69" docExpressionCount="2" docLength="69" projectName="A6" starttimestamp="1649862007572" timestamp="1261973">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶public interface ClientRemoteInterfaceNIO {¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1100" _type="Insert" date="Wed Apr 13 11:21:11 EDT 2022" docASTNodeCount="14" docActiveCodeLength="190" docExpressionCount="6" docLength="190" length="121" offset="61" repeat="9" starttimestamp="1649862007572" timestamp="1264287" timestamp2="1266123">
    <text><![CDATA[extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener]]></text>
  </DocumentChange>
  <DocumentChange __id="1117" _type="Delete" date="Wed Apr 13 11:21:13 EDT 2022" docASTNodeCount="14" docActiveCodeLength="186" docExpressionCount="6" docLength="186" endLine="2" length="4" offset="15" startLine="0" starttimestamp="1649862007572" timestamp="1266167">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1118" _type="Insert" date="Wed Apr 13 11:21:13 EDT 2022" docASTNodeCount="54" docActiveCodeLength="466" docExpressionCount="42" docLength="466" length="280" offset="15" repeat="9" starttimestamp="1649862007572" timestamp="1266167" timestamp2="1266172">
    <text><![CDATA[

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

]]></text>
  </DocumentChange>
  <Command __id="1133" _type="PauseCommand" date="Wed Apr 13 11:21:31 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1284177">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[16624]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1134" _type="MoveCaretCommand" caretOffset="80" date="Wed Apr 13 11:21:31 EDT 2022" docOffset="80" starttimestamp="1649862007572" timestamp="1284363" />
  <Command __id="1132" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:21:31 EDT 2022" docASTNodeCount="8" docActiveCodeLength="88" docExpressionCount="3" docLength="88" projectName="A6" starttimestamp="1649862007572" timestamp="1284177">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶public class ClientRemoteObjectNIO "), Diff(INSERT,"extends ClientRemoteObject"), Diff(EQUAL,"{¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

public class ClientRemoteObjectNIO extends ClientRemoteObject{

}
]]></snapshot>
  </Command>
  <Command __id="1136" _type="PauseCommand" date="Wed Apr 13 11:21:33 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1285732">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1369]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1135" _type="Insert" date="Wed Apr 13 11:21:33 EDT 2022" docASTNodeCount="10" docActiveCodeLength="104" docExpressionCount="4" docLength="104" length="16" offset="80" repeat="16" starttimestamp="1649862007572" timestamp="1285732" timestamp2="1288190">
    <text><![CDATA[ implements Clin]]></text>
  </DocumentChange>
  <Command __id="1137" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1285737" timestamp2="1285737">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1139" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1285870" timestamp2="1285870">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1141" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1286040" timestamp2="1286040">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1143" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1286179" timestamp2="1286179">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1145" _type="InsertStringCommand" date="Wed Apr 13 11:21:33 EDT 2022" starttimestamp="1649862007572" timestamp="1286348" timestamp2="1286348">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1147" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1286442" timestamp2="1286442">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1149" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1286561" timestamp2="1286561">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1151" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1286693" timestamp2="1286693">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1153" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1287011" timestamp2="1287011">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1155" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1287102" timestamp2="1287102">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1157" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1287288" timestamp2="1287288">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1159" _type="InsertStringCommand" date="Wed Apr 13 11:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="1287423" timestamp2="1287423">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1161" _type="InsertStringCommand" date="Wed Apr 13 11:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="1287719" timestamp2="1287719">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1163" _type="InsertStringCommand" date="Wed Apr 13 11:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="1287921" timestamp2="1287921">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1165" _type="InsertStringCommand" date="Wed Apr 13 11:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="1287986" timestamp2="1287986">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1167" _type="InsertStringCommand" date="Wed Apr 13 11:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="1288194" timestamp2="1288194">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="1168" _type="Delete" date="Wed Apr 13 11:21:36 EDT 2022" docASTNodeCount="10" docActiveCodeLength="103" docExpressionCount="4" docLength="103" endLine="2" length="1" offset="95" startLine="2" starttimestamp="1649862007572" timestamp="1288485">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <Command __id="1169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1288487" />
  <DocumentChange __id="1170" _type="Insert" date="Wed Apr 13 11:21:36 EDT 2022" docASTNodeCount="10" docActiveCodeLength="123" docExpressionCount="4" docLength="123" length="20" offset="95" repeat="20" starttimestamp="1649862007572" timestamp="1288586" timestamp2="1292049">
    <text><![CDATA[entRemoteInterfaceNO]]></text>
  </DocumentChange>
  <Command __id="1171" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1288591" timestamp2="1288591">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1173" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1288728" timestamp2="1288728">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1175" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1288858" timestamp2="1288858">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1177" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1289182" timestamp2="1289182">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="1179" _type="InsertStringCommand" date="Wed Apr 13 11:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="1289341" timestamp2="1289341">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1181" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289467" timestamp2="1289467">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1183" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289531" timestamp2="1289531">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1185" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289589" timestamp2="1289589">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1187" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289683" timestamp2="1289683">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1189" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1289970" timestamp2="1289970">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1191" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1290094" timestamp2="1290094">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1193" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1290182" timestamp2="1290182">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1195" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1290339" timestamp2="1290339">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1197" _type="InsertStringCommand" date="Wed Apr 13 11:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="1290413" timestamp2="1290413">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1199" _type="InsertStringCommand" date="Wed Apr 13 11:21:38 EDT 2022" starttimestamp="1649862007572" timestamp="1290588" timestamp2="1290588">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="1201" _type="InsertStringCommand" date="Wed Apr 13 11:21:38 EDT 2022" starttimestamp="1649862007572" timestamp="1290653" timestamp2="1290653">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1203" _type="InsertStringCommand" date="Wed Apr 13 11:21:38 EDT 2022" starttimestamp="1649862007572" timestamp="1290822" timestamp2="1290822">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1205" _type="InsertStringCommand" date="Wed Apr 13 11:21:38 EDT 2022" starttimestamp="1649862007572" timestamp="1290999" timestamp2="1290999">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1207" _type="InsertStringCommand" date="Wed Apr 13 11:21:39 EDT 2022" starttimestamp="1649862007572" timestamp="1291857" timestamp2="1291857">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="1209" _type="InsertStringCommand" date="Wed Apr 13 11:21:39 EDT 2022" starttimestamp="1649862007572" timestamp="1292053" timestamp2="1292053">
    <data><![CDATA[O]]></data>
  </Command>
  <DocumentChange __id="1210" _type="Delete" date="Wed Apr 13 11:21:40 EDT 2022" docASTNodeCount="10" docActiveCodeLength="122" docExpressionCount="4" docLength="122" endLine="2" length="1" offset="114" startLine="2" starttimestamp="1649862007572" timestamp="1292555">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <Command __id="1211" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:21:40 EDT 2022" starttimestamp="1649862007572" timestamp="1292556" />
  <Command __id="1213" _type="InsertStringCommand" date="Wed Apr 13 11:21:40 EDT 2022" starttimestamp="1649862007572" timestamp="1292771" timestamp2="1292771">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1215" _type="InsertStringCommand" date="Wed Apr 13 11:21:40 EDT 2022" starttimestamp="1649862007572" timestamp="1292801" timestamp2="1292801">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1217" _type="PauseCommand" date="Wed Apr 13 11:21:42 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1294761">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1960]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1223" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:21:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1296591" type="Debug" />
  <Command __id="1225" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:21:44 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1296592" type="Run" />
  <Command __id="1226" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:21:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1296592" type="Debug" />
  <Command __id="1227" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:21:44 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1296592" type="Run" />
  <Command __id="1228" _type="ShellCommand" date="Wed Apr 13 11:21:44 EDT 2022" starttimestamp="1649862007572" timestamp="1296597" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1229" _type="ConsoleOutput" date="Wed Apr 13 11:21:44 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1296687" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63752]:An existing connection was forcibly closed by the remote host
Server0<-->Generic Client:0.13283619649975464 (Closed)
Explanation: An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcased command: take 3¶PROPERTY CHANGE¶executed command"), Diff(INSERT,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63752]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0.13283619649975464 (Closed)¶Explanation: An existing connection was forcibly closed by the remote host"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1231" _type="PauseCommand" date="Wed Apr 13 11:21:46 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1298718">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2031]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1230" _type="ShellCommand" date="Wed Apr 13 11:21:46 EDT 2022" starttimestamp="1649862007572" timestamp="1298718" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1232" _type="ShellCommand" date="Wed Apr 13 11:21:46 EDT 2022" starttimestamp="1649862007572" timestamp="1298787" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1262" _type="PauseCommand" date="Wed Apr 13 11:21:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1299927">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1027]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1266" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:21:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1301778" type="Debug" />
  <Command __id="1268" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:21:49 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1301778" type="Run" />
  <Command __id="1269" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:21:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1301778" type="Debug" />
  <Command __id="1270" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 11:21:49 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1301778" type="Run" />
  <Command __id="1271" _type="ShellCommand" date="Wed Apr 13 11:21:49 EDT 2022" starttimestamp="1649862007572" timestamp="1301783" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1272" _type="ConsoleOutput" date="Wed Apr 13 11:21:49 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1301944" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63763]:An existing connection was forcibly closed by the remote host
Server0<-->Generic Client:0.40620601268491363 (Closed)
Explanation: An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:637"), Diff(DELETE,"52"), Diff(INSERT,"63"), Diff(EQUAL,"]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0."), Diff(DELETE,"13283619649975464"), Diff(INSERT,"40620601268491363"), Diff(EQUAL," (Closed)¶Explanation: An existing connection was forcibly closed by the remote host¶")]]]></diff>
  </Command>
  <DocumentChange __id="1212" _type="Insert" date="Wed Apr 13 11:21:40 EDT 2022" docASTNodeCount="10" docActiveCodeLength="124" docExpressionCount="4" docLength="124" length="2" offset="114" repeat="2" starttimestamp="1649862007572" timestamp="1292767" timestamp2="1292796">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="1233" _type="Insert" date="Wed Apr 13 11:21:46 EDT 2022" docASTNodeCount="87" docActiveCodeLength="601" docExpressionCount="39" docLength="771" length="647" offset="117" repeat="20" starttimestamp="1649862007572" timestamp="1298891" timestamp2="1298899">
    <text><![CDATA[

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="1253" _type="Delete" date="Wed Apr 13 11:21:46 EDT 2022" docASTNodeCount="87" docActiveCodeLength="597" docExpressionCount="39" docLength="767" endLine="2" length="4" offset="15" startLine="0" starttimestamp="1649862007572" timestamp="1298899">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1254" _type="Insert" date="Wed Apr 13 11:21:46 EDT 2022" docASTNodeCount="109" docActiveCodeLength="720" docExpressionCount="58" docLength="890" length="123" offset="15" repeat="7" starttimestamp="1649862007572" timestamp="1298900" timestamp2="1298902">
    <text><![CDATA[

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

]]></text>
  </DocumentChange>
  <Command __id="1274" _type="PauseCommand" date="Wed Apr 13 11:22:08 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1320785">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18841]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1275" _type="SelectTextCommand" caretOffset="102" date="Wed Apr 13 11:22:08 EDT 2022" end="215" start="102" starttimestamp="1649862007572" timestamp="1320975" />
  <Command __id="1277" _type="PauseCommand" date="Wed Apr 13 11:22:24 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1336473">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[15498]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1276" _type="MoveCaretCommand" caretOffset="327" date="Wed Apr 13 11:22:24 EDT 2022" docOffset="1619" starttimestamp="1649862007572" timestamp="1336473" />
  <Command __id="1279" _type="PauseCommand" date="Wed Apr 13 11:22:34 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1346443">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9970]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1278" _type="ShellCommand" date="Wed Apr 13 11:22:34 EDT 2022" starttimestamp="1649862007572" timestamp="1346443" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1281" _type="PauseCommand" date="Wed Apr 13 11:22:47 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1359597">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13154]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1280" _type="ShellCommand" date="Wed Apr 13 11:22:47 EDT 2022" starttimestamp="1649862007572" timestamp="1359597" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1283" _type="PauseCommand" date="Wed Apr 13 11:22:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1361650">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2053]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1282" _type="ShellCommand" date="Wed Apr 13 11:22:49 EDT 2022" starttimestamp="1649862007572" timestamp="1361650" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1285" _type="PauseCommand" date="Wed Apr 13 11:22:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1365554">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3904]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1284" _type="ShellCommand" date="Wed Apr 13 11:22:53 EDT 2022" starttimestamp="1649862007572" timestamp="1365554" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1286" _type="ShellCommand" date="Wed Apr 13 11:22:53 EDT 2022" starttimestamp="1649862007572" timestamp="1365590" type="ECLIPSE_MINIMIZED" />
  <Command __id="1287" _type="ShellCommand" date="Wed Apr 13 11:22:53 EDT 2022" starttimestamp="1649862007572" timestamp="1365605" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1289" _type="PauseCommand" date="Wed Apr 13 11:23:19 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="1391684">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26079]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1288" _type="ShellCommand" date="Wed Apr 13 11:23:19 EDT 2022" starttimestamp="1649862007572" timestamp="1391684" type="ECLIPSE_MAXIMIZED" />
  <Command __id="1290" _type="ShellCommand" date="Wed Apr 13 11:23:19 EDT 2022" starttimestamp="1649862007572" timestamp="1391743" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1292" _type="PauseCommand" date="Wed Apr 13 11:23:57 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="1429910">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[38167]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1291" _type="SelectTextCommand" caretOffset="1339" date="Wed Apr 13 11:23:57 EDT 2022" end="1903" start="1339" starttimestamp="1649862007572" timestamp="1429910" />
  <Command __id="1293" _type="CopyCommand" date="Wed Apr 13 11:23:57 EDT 2022" starttimestamp="1649862007572" timestamp="1430360" />
  <Command __id="1273" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:22:08 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1320785">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1295" _type="PauseCommand" date="Wed Apr 13 11:23:59 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1432214">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1854]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1296" _type="MoveCaretCommand" caretOffset="458" date="Wed Apr 13 11:23:59 EDT 2022" docOffset="458" starttimestamp="1649862007572" timestamp="1432285" />
  <Command __id="1294" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:23:59 EDT 2022" docASTNodeCount="54" docActiveCodeLength="466" docExpressionCount="42" docLength="466" projectName="A6" starttimestamp="1649862007572" timestamp="1432214">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶"), Diff(DELETE,"public interface ClientRemoteInterfaceNIO "), Diff(INSERT,"import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener"), Diff(EQUAL,"{¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{

}
]]></snapshot>
  </Command>
  <Command __id="1298" _type="PauseCommand" date="Wed Apr 13 11:24:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1433917">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1632]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1299" _type="SelectTextCommand" caretOffset="1339" date="Wed Apr 13 11:24:01 EDT 2022" end="1903" start="1339" starttimestamp="1649862007572" timestamp="1434048" />
  <Command __id="1297" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:01 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1433917">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1301" _type="PauseCommand" date="Wed Apr 13 11:24:03 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1436167">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2119]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1302" _type="MoveCaretCommand" caretOffset="235" date="Wed Apr 13 11:24:03 EDT 2022" docOffset="235" starttimestamp="1649862007572" timestamp="1436234" />
  <Command __id="1300" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:03 EDT 2022" docASTNodeCount="109" docActiveCodeLength="720" docExpressionCount="58" docLength="890" projectName="A6" starttimestamp="1649862007572" timestamp="1436167">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶"), Diff(DELETE,"public class ClientRemoteObjectNIO extends ClientRemoteObject{"), Diff(INSERT,"import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}"), Diff(EQUAL,"¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1304" _type="PauseCommand" date="Wed Apr 13 11:24:07 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1440151">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3917]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1305" _type="InsertStringCommand" date="Wed Apr 13 11:24:07 EDT 2022" starttimestamp="1649862007572" timestamp="1440157" timestamp2="1440157">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="1303" _type="Insert" date="Wed Apr 13 11:24:07 EDT 2022" docASTNodeCount="109" docActiveCodeLength="722" docExpressionCount="58" docLength="892" length="2" offset="235" starttimestamp="1649862007572" timestamp="1440151">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="1307" _type="PauseCommand" date="Wed Apr 13 11:24:09 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1441765">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1608]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="1306" _type="Delete" date="Wed Apr 13 11:24:09 EDT 2022" docASTNodeCount="109" docActiveCodeLength="720" docExpressionCount="58" docLength="890" endLine="7" length="2" offset="235" startLine="6" starttimestamp="1649862007572" timestamp="1441765">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="1308" _type="UndoCommand" date="Wed Apr 13 11:24:09 EDT 2022" starttimestamp="1649862007572" timestamp="1441774" />
  <Command __id="1309" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="1442493" />
  <Command __id="1310" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:24:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1442531" type="Run" />
  <Command __id="1311" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:24:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1442532" type="Run" />
  <Command __id="1313" _type="InsertStringCommand" date="Wed Apr 13 11:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="1442781" timestamp2="1442781">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1315" _type="InsertStringCommand" date="Wed Apr 13 11:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="1443194" timestamp2="1443194">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1318" _type="PauseCommand" date="Wed Apr 13 11:24:11 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1444291">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1097]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1317" _type="InsertStringCommand" date="Wed Apr 13 11:24:11 EDT 2022" starttimestamp="1649862007572" timestamp="1444291" timestamp2="1444291">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="1320" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1444723" timestamp2="1444723">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1322" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1444890" timestamp2="1444890">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1324" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1445029" timestamp2="1445029">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1326" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1445141" timestamp2="1445141">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1328" _type="InsertStringCommand" date="Wed Apr 13 11:24:12 EDT 2022" starttimestamp="1649862007572" timestamp="1445346" timestamp2="1445346">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1330" _type="InsertStringCommand" date="Wed Apr 13 11:24:13 EDT 2022" starttimestamp="1649862007572" timestamp="1445509" timestamp2="1445509">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1332" _type="InsertStringCommand" date="Wed Apr 13 11:24:13 EDT 2022" starttimestamp="1649862007572" timestamp="1445649" timestamp2="1445649">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1334" _type="InsertStringCommand" date="Wed Apr 13 11:24:13 EDT 2022" starttimestamp="1649862007572" timestamp="1445827" timestamp2="1445827">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="1312" _type="Insert" date="Wed Apr 13 11:24:10 EDT 2022" docASTNodeCount="111" docActiveCodeLength="735" docExpressionCount="60" docLength="905" length="15" offset="236" repeat="11" starttimestamp="1649862007572" timestamp="1442775" timestamp2="1445823">
    <text><![CDATA[
	
	@Override]]></text>
  </DocumentChange>
  <Command __id="1336" _type="PauseCommand" date="Wed Apr 13 11:24:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1447851">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2024]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1337" _type="InsertStringCommand" date="Wed Apr 13 11:24:15 EDT 2022" starttimestamp="1649862007572" timestamp="1447858" timestamp2="1447858">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1339" _type="InsertStringCommand" date="Wed Apr 13 11:24:15 EDT 2022" starttimestamp="1649862007572" timestamp="1448126" timestamp2="1448126">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1341" _type="InsertStringCommand" date="Wed Apr 13 11:24:15 EDT 2022" starttimestamp="1649862007572" timestamp="1448270" timestamp2="1448270">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1343" _type="InsertStringCommand" date="Wed Apr 13 11:24:15 EDT 2022" starttimestamp="1649862007572" timestamp="1448392" timestamp2="1448392">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1345" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1448661" timestamp2="1448661">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1347" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1448778" timestamp2="1448778">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1349" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1448920" timestamp2="1448920">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1351" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1449083" timestamp2="1449083">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1353" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1449256" timestamp2="1449256">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="1355" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1449329" timestamp2="1449329">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1357" _type="InsertStringCommand" date="Wed Apr 13 11:24:16 EDT 2022" starttimestamp="1649862007572" timestamp="1449393" timestamp2="1449393">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1359" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1449522" timestamp2="1449522">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1361" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1449663" timestamp2="1449663">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1363" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1449909" timestamp2="1449909">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1365" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1450025" timestamp2="1450025">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1367" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1450145" timestamp2="1450145">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1369" _type="InsertStringCommand" date="Wed Apr 13 11:24:17 EDT 2022" starttimestamp="1649862007572" timestamp="1450258" timestamp2="1450258">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1371" _type="InsertStringCommand" date="Wed Apr 13 11:24:18 EDT 2022" starttimestamp="1649862007572" timestamp="1450550" timestamp2="1450550">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1373" _type="PauseCommand" date="Wed Apr 13 11:24:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1452168">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1618]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1381" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:24:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1457540" type="Run" />
  <DocumentChange __id="1335" _type="Insert" date="Wed Apr 13 11:24:15 EDT 2022" docASTNodeCount="116" docActiveCodeLength="756" docExpressionCount="61" docLength="926" length="21" offset="251" repeat="18" starttimestamp="1649862007572" timestamp="1447851" timestamp2="1450545">
    <text><![CDATA[
	public void init()]]></text>
  </DocumentChange>
  <DocumentChange __id="1374" _type="Insert" date="Wed Apr 13 11:24:20 EDT 2022" docASTNodeCount="116" docActiveCodeLength="766" docExpressionCount="61" docLength="936" length="10" offset="272" repeat="3" starttimestamp="1649862007572" timestamp="1452568" timestamp2="1453644">
    <text><![CDATA[ {
		
	}]]></text>
  </DocumentChange>
  <Command __id="1384" _type="PauseCommand" date="Wed Apr 13 11:24:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1460607">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3067]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1385" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:24:28 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1460685" />
  <Command __id="1383" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:28 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="1460607">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1387" _type="PauseCommand" date="Wed Apr 13 11:24:31 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1463853">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3168]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1388" _type="MoveCaretCommand" caretOffset="278" date="Wed Apr 13 11:24:31 EDT 2022" docOffset="278" starttimestamp="1649862007572" timestamp="1463930" />
  <Command __id="1390" _type="PauseCommand" date="Wed Apr 13 11:24:32 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1465143">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1213]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1386" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:31 EDT 2022" docASTNodeCount="116" docActiveCodeLength="766" docExpressionCount="61" docLength="936" projectName="A6" starttimestamp="1649862007572" timestamp="1463853">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{"), Diff(INSERT,"¶	¶	@Override¶	public void init() {¶		¶	}"), Diff(EQUAL,"¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	
	@Override
	public void init() {
		
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1389" _type="MoveCaretCommand" caretOffset="271" date="Wed Apr 13 11:24:32 EDT 2022" docOffset="271" starttimestamp="1649862007572" timestamp="1465143" />
  <DocumentChange __id="1391" _type="Insert" date="Wed Apr 13 11:24:33 EDT 2022" docASTNodeCount="120" docActiveCodeLength="777" docExpressionCount="63" docLength="947" length="11" offset="271" repeat="11" starttimestamp="1649862007572" timestamp="1465640" timestamp2="1468301">
    <text><![CDATA[String args]]></text>
  </DocumentChange>
  <Command __id="1392" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1465646" timestamp2="1465646">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1394" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1465886" timestamp2="1465886">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1396" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1466087" timestamp2="1466087">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1398" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1466186" timestamp2="1466186">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1400" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1466293" timestamp2="1466293">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1402" _type="InsertStringCommand" date="Wed Apr 13 11:24:33 EDT 2022" starttimestamp="1649862007572" timestamp="1466365" timestamp2="1466365">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1404" _type="InsertStringCommand" date="Wed Apr 13 11:24:34 EDT 2022" starttimestamp="1649862007572" timestamp="1466740" timestamp2="1466740">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1407" _type="PauseCommand" date="Wed Apr 13 11:24:35 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1467770">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1030]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1406" _type="InsertStringCommand" date="Wed Apr 13 11:24:35 EDT 2022" starttimestamp="1649862007572" timestamp="1467770" timestamp2="1467770">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1409" _type="InsertStringCommand" date="Wed Apr 13 11:24:35 EDT 2022" starttimestamp="1649862007572" timestamp="1467903" timestamp2="1467903">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1411" _type="InsertStringCommand" date="Wed Apr 13 11:24:35 EDT 2022" starttimestamp="1649862007572" timestamp="1468131" timestamp2="1468131">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1413" _type="InsertStringCommand" date="Wed Apr 13 11:24:35 EDT 2022" starttimestamp="1649862007572" timestamp="1468305" timestamp2="1468305">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="1414" _type="Delete" date="Wed Apr 13 11:24:36 EDT 2022" docASTNodeCount="116" docActiveCodeLength="772" docExpressionCount="61" docLength="942" endLine="9" length="5" offset="277" repeat="5" startLine="9" starttimestamp="1649862007572" timestamp="1468612" timestamp2="1469232">
    <text><![CDATA[ args]]></text>
  </DocumentChange>
  <Command __id="1415" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1468615" />
  <Command __id="1417" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1468774" />
  <Command __id="1419" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1468936" />
  <Command __id="1421" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1469110" />
  <Command __id="1423" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:36 EDT 2022" starttimestamp="1649862007572" timestamp="1469234" />
  <Command __id="1425" _type="InsertStringCommand" date="Wed Apr 13 11:24:37 EDT 2022" starttimestamp="1649862007572" timestamp="1469894" timestamp2="1469894">
    <data><![CDATA[[]]></data>
  </Command>
  <Command __id="1426" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:37 EDT 2022" starttimestamp="1649862007572" timestamp="1470324" />
  <Command __id="1428" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1470672" timestamp2="1470672">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1430" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1470804" timestamp2="1470804">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1432" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1470876" timestamp2="1470876">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1434" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1471031" timestamp2="1471031">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1436" _type="InsertStringCommand" date="Wed Apr 13 11:24:38 EDT 2022" starttimestamp="1649862007572" timestamp="1471091" timestamp2="1471091">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1438" _type="PauseCommand" date="Wed Apr 13 11:24:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1472778">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1687]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1437" _type="MoveCaretCommand" caretOffset="291" date="Wed Apr 13 11:24:40 EDT 2022" docOffset="291" starttimestamp="1649862007572" timestamp="1472778" />
  <DocumentChange __id="1424" _type="Insert" date="Wed Apr 13 11:24:37 EDT 2022" docASTNodeCount="121" docActiveCodeLength="779" docExpressionCount="63" docLength="949" length="7" offset="277" repeat="6" starttimestamp="1649862007572" timestamp="1469890" timestamp2="1471087">
    <text><![CDATA[[] args]]></text>
  </DocumentChange>
  <Command __id="1440" _type="PauseCommand" date="Wed Apr 13 11:24:41 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1474027">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1249]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1439" _type="Insert" date="Wed Apr 13 11:24:41 EDT 2022" docASTNodeCount="123" docActiveCodeLength="782" docExpressionCount="64" docLength="952" length="3" offset="291" repeat="3" starttimestamp="1649862007572" timestamp="1474027" timestamp2="1474336">
    <text><![CDATA[sub]]></text>
  </DocumentChange>
  <Command __id="1441" _type="InsertStringCommand" date="Wed Apr 13 11:24:41 EDT 2022" starttimestamp="1649862007572" timestamp="1474031" timestamp2="1474031">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1443" _type="InsertStringCommand" date="Wed Apr 13 11:24:41 EDT 2022" starttimestamp="1649862007572" timestamp="1474201" timestamp2="1474201">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1445" _type="InsertStringCommand" date="Wed Apr 13 11:24:41 EDT 2022" starttimestamp="1649862007572" timestamp="1474339" timestamp2="1474339">
    <data><![CDATA[b]]></data>
  </Command>
  <DocumentChange __id="1446" _type="Delete" date="Wed Apr 13 11:24:42 EDT 2022" docASTNodeCount="123" docActiveCodeLength="781" docExpressionCount="64" docLength="951" endLine="10" length="1" offset="293" startLine="10" starttimestamp="1649862007572" timestamp="1474715">
    <text><![CDATA[b]]></text>
  </DocumentChange>
  <Command __id="1447" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1474718" />
  <DocumentChange __id="1448" _type="Insert" date="Wed Apr 13 11:24:42 EDT 2022" docASTNodeCount="126" docActiveCodeLength="787" docExpressionCount="67" docLength="957" length="6" offset="293" repeat="6" starttimestamp="1649862007572" timestamp="1474947" timestamp2="1475828">
    <text><![CDATA[per.in]]></text>
  </DocumentChange>
  <Command __id="1449" _type="InsertStringCommand" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1474951" timestamp2="1474951">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1451" _type="InsertStringCommand" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1475008" timestamp2="1475008">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1453" _type="InsertStringCommand" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1475126" timestamp2="1475126">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1455" _type="InsertStringCommand" date="Wed Apr 13 11:24:42 EDT 2022" starttimestamp="1649862007572" timestamp="1475259" timestamp2="1475259">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1456" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 11:24:42 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="1475261" />
  <Command __id="1459" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 11:24:43 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="1476171" />
  <DocumentChange __id="1460" _type="Replace" date="Wed Apr 13 11:24:43 EDT 2022" docASTNodeCount="125" docActiveCodeLength="796" docExpressionCount="66" docLength="966" endLine="10" insertionLength="11" int_docASTNodeCount="121" int_docActiveCodeLength="785" int_docExpressionCount="63" int_docLength="955" length="2" offset="297" startLine="10" starttimestamp="1649862007572" timestamp="1476173">
    <deletedText><![CDATA[in]]></deletedText>
    <insertedText><![CDATA[init(args);]]></insertedText>
  </DocumentChange>
  <Command __id="1461" _type="InsertStringCommand" date="Wed Apr 13 11:24:43 EDT 2022" starttimestamp="1649862007572" timestamp="1476218" timestamp2="1476218">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1462" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:44 EDT 2022" starttimestamp="1649862007572" timestamp="1477097" />
  <Command __id="1463" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:44 EDT 2022" starttimestamp="1649862007572" timestamp="1477275" />
  <Command __id="1464" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 11:24:45 EDT 2022" starttimestamp="1649862007572" timestamp="1477625" />
  <DocumentChange __id="1465" _type="Insert" date="Wed Apr 13 11:24:45 EDT 2022" docASTNodeCount="125" docActiveCodeLength="804" docExpressionCount="66" docLength="974" length="8" offset="308" repeat="2" starttimestamp="1649862007572" timestamp="1477865" timestamp2="1478139">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <Command __id="1466" _type="InsertStringCommand" date="Wed Apr 13 11:24:45 EDT 2022" starttimestamp="1649862007572" timestamp="1477870" timestamp2="1477870">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1468" _type="InsertStringCommand" date="Wed Apr 13 11:24:45 EDT 2022" starttimestamp="1649862007572" timestamp="1478144" timestamp2="1478144">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1478" _type="PasteCommand" date="Wed Apr 13 11:24:46 EDT 2022" starttimestamp="1649862007572" timestamp="1479217" />
  <DocumentChange __id="1469" _type="Replace" date="Wed Apr 13 11:24:46 EDT 2022" docASTNodeCount="181" docActiveCodeLength="1236" docExpressionCount="105" docLength="1537" endLine="12" insertionLength="565" int_docASTNodeCount="125" int_docActiveCodeLength="802" int_docExpressionCount="66" int_docLength="972" length="2" offset="314" startLine="12" starttimestamp="1649862007572" timestamp="1479133">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1470" _type="Insert" date="Wed Apr 13 11:24:46 EDT 2022" docASTNodeCount="185" docActiveCodeLength="1282" docExpressionCount="108" docLength="1583" length="46" offset="134" repeat="2" starttimestamp="1649862007572" timestamp="1479179" timestamp2="1479181">
    <text><![CDATA[

import nioExample.exampleClientReadThread;]]></text>
  </DocumentChange>
  <DocumentChange __id="1472" _type="Insert" date="Wed Apr 13 11:24:46 EDT 2022" docASTNodeCount="193" docActiveCodeLength="1322" docExpressionCount="115" docLength="1623" length="40" offset="46" repeat="2" starttimestamp="1649862007572" timestamp="1479182" timestamp2="1479183">
    <text><![CDATA[
import java.nio.channels.SelectionKey;]]></text>
  </DocumentChange>
  <DocumentChange __id="1474" _type="Insert" date="Wed Apr 13 11:24:46 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1381" docExpressionCount="125" docLength="1682" length="59" offset="19" repeat="4" starttimestamp="1649862007572" timestamp="1479184" timestamp2="1479187">
    <text><![CDATA[import java.io.IOException;
import java.net.InetAddress;
]]></text>
  </DocumentChange>
  <Command __id="1480" _type="PauseCommand" date="Wed Apr 13 11:24:54 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1487344">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[8127]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1481" _type="MoveCaretCommand" caretOffset="1041" date="Wed Apr 13 11:24:55 EDT 2022" docOffset="1041" starttimestamp="1649862007572" timestamp="1487435" />
  <Command __id="1483" _type="PauseCommand" date="Wed Apr 13 11:24:59 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1492043">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4608]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1482" _type="SelectTextCommand" caretOffset="774" date="Wed Apr 13 11:24:59 EDT 2022" end="860" start="774" starttimestamp="1649862007572" timestamp="1492043" />
  <Command __id="1484" _type="SelectTextCommand" caretOffset="774" date="Wed Apr 13 11:24:59 EDT 2022" end="860" start="774" starttimestamp="1649862007572" timestamp="1492043" />
  <Command __id="1485" _type="CopyCommand" date="Wed Apr 13 11:24:59 EDT 2022" starttimestamp="1649862007572" timestamp="1492143" />
  <Command __id="1479" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:24:54 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" projectName="A6" starttimestamp="1649862007572" timestamp="1487344">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1487" _type="PauseCommand" date="Wed Apr 13 11:25:00 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1493420">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1277]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1488" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 11:25:01 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="1493495" />
  <Command __id="1486" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:00 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="1493420">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1490" _type="PauseCommand" date="Wed Apr 13 11:25:04 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1496830">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3335]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1491" _type="MoveCaretCommand" caretOffset="1024" date="Wed Apr 13 11:25:04 EDT 2022" docOffset="1024" starttimestamp="1649862007572" timestamp="1496910" />
  <Command __id="1493" _type="PauseCommand" date="Wed Apr 13 11:25:05 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1498011">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1101]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1492" _type="MoveCaretCommand" caretOffset="384" date="Wed Apr 13 11:25:05 EDT 2022" docOffset="384" starttimestamp="1649862007572" timestamp="1498011" />
  <Command __id="1489" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:04 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1381" docExpressionCount="125" docLength="1682" projectName="A6" starttimestamp="1649862007572" timestamp="1496830">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java."), Diff(DELETE,"nio.ByteBuffer"), Diff(INSERT,"io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey"), Diff(EQUAL,";¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import nioExample.exampleClientReadThread;¶¶"), Diff(EQUAL,"public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	¶	@Override¶	public void init("), Diff(DELETE,") {¶		"), Diff(INSERT,"String[] args) {¶		super.init(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import nioExample.exampleClientReadThread;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	
	@Override
	public void init(String[] args) {
		super.init(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1495" _type="PauseCommand" date="Wed Apr 13 11:25:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1499325">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1314]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="1494" _type="Replace" date="Wed Apr 13 11:25:06 EDT 2022" docASTNodeCount="218" docActiveCodeLength="1467" docExpressionCount="131" docLength="1768" endLine="12" insertionLength="87" int_docASTNodeCount="205" int_docActiveCodeLength="1380" int_docExpressionCount="125" int_docLength="1681" length="1" offset="383" startLine="12" starttimestamp="1649862007572" timestamp="1499325">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1496" _type="Delete" date="Wed Apr 13 11:25:06 EDT 2022" docASTNodeCount="218" docActiveCodeLength="1463" docExpressionCount="131" docLength="1764" endLine="9" length="4" offset="233" startLine="7" starttimestamp="1649862007572" timestamp="1499364">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1497" _type="Insert" date="Wed Apr 13 11:25:06 EDT 2022" docASTNodeCount="234" docActiveCodeLength="1558" docExpressionCount="145" docLength="1859" length="95" offset="233" repeat="5" starttimestamp="1649862007572" timestamp="1499365" timestamp2="1499369">
    <text><![CDATA[

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
]]></text>
  </DocumentChange>
  <Command __id="1502" _type="PasteCommand" date="Wed Apr 13 11:25:06 EDT 2022" starttimestamp="1649862007572" timestamp="1499398" />
  <Command __id="1504" _type="InsertStringCommand" date="Wed Apr 13 11:25:07 EDT 2022" starttimestamp="1649862007572" timestamp="1499714" timestamp2="1499714">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1506" _type="PauseCommand" date="Wed Apr 13 11:25:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1500727">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1013]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1505" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:25:08 EDT 2022" starttimestamp="1649862007572" timestamp="1500727" />
  <Command __id="1507" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:08 EDT 2022" starttimestamp="1649862007572" timestamp="1500821" />
  <Command __id="1508" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:08 EDT 2022" starttimestamp="1649862007572" timestamp="1500857" />
  <Command __id="1510" _type="SelectTextCommand" caretOffset="774" date="Wed Apr 13 11:25:09 EDT 2022" end="860" start="774" starttimestamp="1649862007572" timestamp="1501715" />
  <Command __id="1512" _type="PauseCommand" date="Wed Apr 13 11:25:19 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1511901">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[10186]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1511" _type="SelectTextCommand" caretOffset="1202" date="Wed Apr 13 11:25:19 EDT 2022" end="1259" start="1202" starttimestamp="1649862007572" timestamp="1511901" />
  <Command __id="1513" _type="SelectTextCommand" caretOffset="1202" date="Wed Apr 13 11:25:19 EDT 2022" end="1259" start="1202" starttimestamp="1649862007572" timestamp="1511901" />
  <Command __id="1514" _type="CopyCommand" date="Wed Apr 13 11:25:19 EDT 2022" starttimestamp="1649862007572" timestamp="1512163" />
  <DocumentChange __id="1503" _type="Insert" date="Wed Apr 13 11:25:07 EDT 2022" docASTNodeCount="234" docActiveCodeLength="1561" docExpressionCount="145" docLength="1862" length="3" offset="561" starttimestamp="1649862007572" timestamp="1499708">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="1509" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:09 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" projectName="A6" starttimestamp="1649862007572" timestamp="1501632">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1516" _type="PauseCommand" date="Wed Apr 13 11:25:21 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1513675">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1512]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1517" _type="MoveCaretCommand" caretOffset="564" date="Wed Apr 13 11:25:21 EDT 2022" docOffset="564" starttimestamp="1649862007572" timestamp="1513759" />
  <Command __id="1519" _type="PauseCommand" date="Wed Apr 13 11:25:23 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1515854">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2094]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1518" _type="MoveCaretCommand" caretOffset="637" date="Wed Apr 13 11:25:23 EDT 2022" docOffset="637" starttimestamp="1649862007572" timestamp="1515853" />
  <Command __id="1525" _type="PasteCommand" date="Wed Apr 13 11:25:23 EDT 2022" starttimestamp="1649862007572" timestamp="1516302" />
  <Command __id="1527" _type="InsertStringCommand" date="Wed Apr 13 11:25:24 EDT 2022" starttimestamp="1649862007572" timestamp="1517030" timestamp2="1517030">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1529" _type="PauseCommand" date="Wed Apr 13 11:25:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1518065">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1035]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1528" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:25:25 EDT 2022" starttimestamp="1649862007572" timestamp="1518065" />
  <Command __id="1530" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:25 EDT 2022" starttimestamp="1649862007572" timestamp="1518220" />
  <Command __id="1531" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:25 EDT 2022" starttimestamp="1649862007572" timestamp="1518246" />
  <Command __id="1515" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:21 EDT 2022" docASTNodeCount="234" docActiveCodeLength="1561" docExpressionCount="145" docLength="1862" projectName="A6" starttimestamp="1649862007572" timestamp="1513675">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶"), Diff(EQUAL,"import nioExample.exampleClientReadThread;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	"), Diff(INSERT,"protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	"), Diff(EQUAL,"¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1520" _type="Replace" date="Wed Apr 13 11:25:23 EDT 2022" docASTNodeCount="241" docActiveCodeLength="1618" docExpressionCount="151" docLength="1919" endLine="20" insertionLength="59" int_docASTNodeCount="234" int_docActiveCodeLength="1559" int_docExpressionCount="145" int_docLength="1860" length="2" offset="635" startLine="20" starttimestamp="1649862007572" timestamp="1516189">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		aServerPort = ServerArgsProcessor.getNIOServerPort(args);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1521" _type="Delete" date="Wed Apr 13 11:25:23 EDT 2022" docASTNodeCount="241" docActiveCodeLength="1614" docExpressionCount="151" docLength="1915" endLine="9" length="4" offset="233" startLine="7" starttimestamp="1649862007572" timestamp="1516258">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1522" _type="Insert" date="Wed Apr 13 11:25:23 EDT 2022" docASTNodeCount="249" docActiveCodeLength="1673" docExpressionCount="158" docLength="1974" length="59" offset="233" repeat="3" starttimestamp="1649862007572" timestamp="1516260" timestamp2="1516263">
    <text><![CDATA[

import assignments.util.mainArgs.ServerArgsProcessor;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1526" _type="Insert" date="Wed Apr 13 11:25:24 EDT 2022" docASTNodeCount="249" docActiveCodeLength="1677" docExpressionCount="158" docLength="1978" length="4" offset="749" starttimestamp="1649862007572" timestamp="1517025">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="1533" _type="PauseCommand" date="Wed Apr 13 11:25:34 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1527244">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8998]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1534" _type="SelectTextCommand" caretOffset="1339" date="Wed Apr 13 11:25:34 EDT 2022" end="1903" start="1339" starttimestamp="1649862007572" timestamp="1527328" />
  <Command __id="1536" _type="PauseCommand" date="Wed Apr 13 11:25:45 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="1537820">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[10492]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1535" _type="SelectTextCommand" caretOffset="218" date="Wed Apr 13 11:25:45 EDT 2022" end="327" start="218" starttimestamp="1649862007572" timestamp="1537820" />
  <Command __id="1537" _type="SelectTextCommand" caretOffset="218" date="Wed Apr 13 11:25:45 EDT 2022" end="327" start="218" starttimestamp="1649862007572" timestamp="1537820" />
  <Command __id="1538" _type="CopyCommand" date="Wed Apr 13 11:25:45 EDT 2022" starttimestamp="1649862007572" timestamp="1538126" />
  <Command __id="1532" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:34 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1527244">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1540" _type="PauseCommand" date="Wed Apr 13 11:25:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1539489">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1363]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1541" _type="MoveCaretCommand" caretOffset="753" date="Wed Apr 13 11:25:47 EDT 2022" docOffset="753" starttimestamp="1649862007572" timestamp="1539564" />
  <Command __id="1543" _type="PauseCommand" date="Wed Apr 13 11:25:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1541230">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1666]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1542" _type="MoveCaretCommand" caretOffset="616" date="Wed Apr 13 11:25:48 EDT 2022" docOffset="616" starttimestamp="1649862007572" timestamp="1541230" />
  <Command __id="1545" _type="InsertStringCommand" date="Wed Apr 13 11:25:49 EDT 2022" starttimestamp="1649862007572" timestamp="1541467" timestamp2="1541467">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1547" _type="PasteCommand" date="Wed Apr 13 11:25:49 EDT 2022" starttimestamp="1649862007572" timestamp="1541774" />
  <Command __id="1549" _type="PauseCommand" date="Wed Apr 13 11:25:51 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1544361">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2587]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1548" _type="SelectTextCommand" caretOffset="619" date="Wed Apr 13 11:25:51 EDT 2022" end="686" start="619" starttimestamp="1649862007572" timestamp="1544361" />
  <Command __id="1551" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:25:52 EDT 2022" starttimestamp="1649862007572" timestamp="1544882" />
  <Command __id="1553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:25:52 EDT 2022" starttimestamp="1649862007572" timestamp="1545357" />
  <Command __id="1555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:25:53 EDT 2022" starttimestamp="1649862007572" timestamp="1545770" />
  <Command __id="1539" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:25:47 EDT 2022" docASTNodeCount="249" docActiveCodeLength="1677" docExpressionCount="158" docLength="1978" projectName="A6" starttimestamp="1649862007572" timestamp="1539489">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import assignments.util.mainArgs.ServerArgsProcessor;¶"), Diff(EQUAL,"import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		"), Diff(INSERT,"aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		"), Diff(EQUAL,"¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1544" _type="Insert" date="Wed Apr 13 11:25:49 EDT 2022" docASTNodeCount="249" docActiveCodeLength="1680" docExpressionCount="158" docLength="1981" length="3" offset="616" starttimestamp="1649862007572" timestamp="1541463">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="1546" _type="Replace" date="Wed Apr 13 11:25:49 EDT 2022" docASTNodeCount="264" docActiveCodeLength="1788" docExpressionCount="165" docLength="2089" endLine="17" insertionLength="109" int_docASTNodeCount="249" int_docActiveCodeLength="1679" int_docExpressionCount="158" int_docLength="1980" length="1" offset="618" startLine="17" starttimestamp="1649862007572" timestamp="1541720">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	protected SocketChannel socketChannel;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1550" _type="Delete" date="Wed Apr 13 11:25:52 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1718" docExpressionCount="160" docLength="2019" endLine="17" length="70" offset="616" repeat="3" startLine="16" starttimestamp="1649862007572" timestamp="1544879" timestamp2="1545766">
    <text><![CDATA[
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();]]></text>
  </DocumentChange>
  <Command __id="1557" _type="PauseCommand" date="Wed Apr 13 11:25:54 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1547024">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1254]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1558" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.delete.line" date="Wed Apr 13 11:25:54 EDT 2022" starttimestamp="1649862007572" timestamp="1547028" />
  <DocumentChange __id="1556" _type="Delete" date="Wed Apr 13 11:25:54 EDT 2022" docASTNodeCount="251" docActiveCodeLength="1699" docExpressionCount="159" docLength="2000" endLine="17" length="19" offset="599" startLine="16" starttimestamp="1649862007572" timestamp="1547024">
    <text><![CDATA[	int aServerPort;
]]></text>
  </DocumentChange>
  <Command __id="1560" _type="PauseCommand" date="Wed Apr 13 11:25:55 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1548232">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1204]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1561" _type="UndoCommand" date="Wed Apr 13 11:25:55 EDT 2022" starttimestamp="1649862007572" timestamp="1548236" />
  <Command __id="1563" _type="PauseCommand" date="Wed Apr 13 11:25:57 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1550174">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1938]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1562" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:25:57 EDT 2022" starttimestamp="1649862007572" timestamp="1550174" />
  <Command __id="1564" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:57 EDT 2022" starttimestamp="1649862007572" timestamp="1550272" />
  <Command __id="1565" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:25:57 EDT 2022" starttimestamp="1649862007572" timestamp="1550317" />
  <Command __id="1567" _type="PauseCommand" date="Wed Apr 13 11:26:04 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1556456">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6139]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1566" _type="SelectTextCommand" caretOffset="1194" date="Wed Apr 13 11:26:04 EDT 2022" end="1201" start="1194" starttimestamp="1649862007572" timestamp="1556456" />
  <Command __id="1569" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:26:04 EDT 2022" starttimestamp="1649862007572" timestamp="1556844" />
  <Command __id="1571" _type="PauseCommand" date="Wed Apr 13 11:26:05 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1557967">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1123]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1570" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:26:05 EDT 2022" starttimestamp="1649862007572" timestamp="1557967" />
  <Command __id="1572" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:05 EDT 2022" starttimestamp="1649862007572" timestamp="1558068" />
  <Command __id="1573" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:05 EDT 2022" starttimestamp="1649862007572" timestamp="1558091" />
  <DocumentChange __id="1559" _type="Insert" date="Wed Apr 13 11:25:55 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1718" docExpressionCount="160" docLength="2019" length="19" offset="599" starttimestamp="1649862007572" timestamp="1548232">
    <text><![CDATA[	int aServerPort;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1568" _type="Delete" date="Wed Apr 13 11:26:04 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1711" docExpressionCount="160" docLength="2012" endLine="37" length="7" offset="1194" startLine="37" starttimestamp="1649862007572" timestamp="1556838">
    <text><![CDATA[example]]></text>
  </DocumentChange>
  <Command __id="1575" _type="PauseCommand" date="Wed Apr 13 11:26:08 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1560526">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2435]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1576" _type="SelectTextCommand" caretOffset="218" date="Wed Apr 13 11:26:08 EDT 2022" end="327" start="218" starttimestamp="1649862007572" timestamp="1560606" />
  <Command __id="1578" _type="PauseCommand" date="Wed Apr 13 11:26:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1563871">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3265]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1577" _type="SelectTextCommand" caretOffset="387" date="Wed Apr 13 11:26:11 EDT 2022" end="539" start="387" starttimestamp="1649862007572" timestamp="1563871" />
  <Command __id="1579" _type="SelectTextCommand" caretOffset="387" date="Wed Apr 13 11:26:11 EDT 2022" end="539" start="387" starttimestamp="1649862007572" timestamp="1563871" />
  <Command __id="1580" _type="CopyCommand" date="Wed Apr 13 11:26:11 EDT 2022" starttimestamp="1649862007572" timestamp="1564288" />
  <Command __id="1574" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:08 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="1560526">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="1582" _type="PauseCommand" date="Wed Apr 13 11:26:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1565409">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1121]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1583" _type="MoveCaretCommand" caretOffset="1194" date="Wed Apr 13 11:26:13 EDT 2022" docOffset="1194" starttimestamp="1649862007572" timestamp="1565481" />
  <Command __id="1585" _type="PauseCommand" date="Wed Apr 13 11:26:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1568055">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2574]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1584" _type="MoveCaretCommand" caretOffset="657" date="Wed Apr 13 11:26:15 EDT 2022" docOffset="657" starttimestamp="1649862007572" timestamp="1568055" />
  <Command __id="1587" _type="InsertStringCommand" date="Wed Apr 13 11:26:15 EDT 2022" starttimestamp="1649862007572" timestamp="1568293" timestamp2="1568293">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1589" _type="InsertStringCommand" date="Wed Apr 13 11:26:15 EDT 2022" starttimestamp="1649862007572" timestamp="1568420" timestamp2="1568420">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1595" _type="PasteCommand" date="Wed Apr 13 11:26:16 EDT 2022" starttimestamp="1649862007572" timestamp="1568695" />
  <Command __id="1596" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:26:16 EDT 2022" starttimestamp="1649862007572" timestamp="1569038" />
  <Command __id="1597" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:16 EDT 2022" starttimestamp="1649862007572" timestamp="1569133" />
  <Command __id="1598" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:16 EDT 2022" starttimestamp="1649862007572" timestamp="1569163" />
  <Command __id="1581" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:12 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1711" docExpressionCount="160" docLength="2012" projectName="A6" starttimestamp="1649862007572" timestamp="1565409">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	"), Diff(INSERT,"protected SocketChannel socketChannel;¶	"), Diff(EQUAL,"¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new "), Diff(DELETE,"example"), Diff(EQUAL,"ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1586" _type="Insert" date="Wed Apr 13 11:26:15 EDT 2022" docASTNodeCount="255" docActiveCodeLength="1717" docExpressionCount="160" docLength="2018" length="6" offset="657" repeat="2" starttimestamp="1649862007572" timestamp="1568288" timestamp2="1568414">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="1590" _type="Replace" date="Wed Apr 13 11:26:16 EDT 2022" docASTNodeCount="282" docActiveCodeLength="1869" docExpressionCount="173" docLength="2170" endLine="19" insertionLength="153" int_docASTNodeCount="255" int_docActiveCodeLength="1716" int_docExpressionCount="160" int_docLength="2017" length="1" offset="662" startLine="19" starttimestamp="1649862007572" timestamp="1568617">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1591" _type="Insert" date="Wed Apr 13 11:26:16 EDT 2022" docASTNodeCount="286" docActiveCodeLength="1909" docExpressionCount="176" docLength="2210" length="40" offset="425" repeat="2" starttimestamp="1649862007572" timestamp="1568662" timestamp2="1568663">
    <text><![CDATA[
import readThread.ReadThreadInterface;]]></text>
  </DocumentChange>
  <DocumentChange __id="1593" _type="Insert" date="Wed Apr 13 11:26:16 EDT 2022" docASTNodeCount="294" docActiveCodeLength="1958" docExpressionCount="183" docLength="2259" length="49" offset="233" repeat="2" starttimestamp="1649862007572" timestamp="1568663" timestamp2="1568664">
    <text><![CDATA[
import java.util.concurrent.ArrayBlockingQueue;]]></text>
  </DocumentChange>
  <Command __id="1600" _type="PauseCommand" date="Wed Apr 13 11:26:22 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1574933">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5770]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1601" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:26:22 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1575131" />
  <Command __id="1599" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:22 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1471" docExpressionCount="123" docLength="1668" projectName="A6" starttimestamp="1649862007572" timestamp="1574933">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleClientReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import readThread.ReadThreadInterface;

public class exampleClientReadThread implements ReadThreadInterface{
	final AnNIOManagerPrintClient client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {
		client = aClient;
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
		
		}
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1603" _type="PauseCommand" date="Wed Apr 13 11:26:25 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1578062">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2931]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1604" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:26:25 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1578271" />
  <Command __id="1602" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:25 EDT 2022" docASTNodeCount="80" docActiveCodeLength="539" docExpressionCount="51" docLength="649" projectName="A6" starttimestamp="1649862007572" timestamp="1578062">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1606" _type="PauseCommand" date="Wed Apr 13 11:26:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1579967">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1696]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1607" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:26:27 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1580062" />
  <Command __id="1609" _type="PauseCommand" date="Wed Apr 13 11:26:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1584550">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4488]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1608" _type="SelectTextCommand" caretOffset="125" date="Wed Apr 13 11:26:32 EDT 2022" end="335" start="125" starttimestamp="1649862007572" timestamp="1584550" />
  <Command __id="1610" _type="CopyCommand" date="Wed Apr 13 11:26:32 EDT 2022" starttimestamp="1649862007572" timestamp="1584933" />
  <Command __id="1605" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:27 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1471" docExpressionCount="123" docLength="1668" projectName="A6" starttimestamp="1649862007572" timestamp="1579967">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleClientReadThread implements ReadThreadInterface{¶	final AnNIOManagerPrintClient client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {¶		client = aClient;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1612" _type="PauseCommand" date="Wed Apr 13 11:26:33 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1586138">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1205]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1613" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 11:26:33 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="1586211" />
  <Command __id="1615" _type="PauseCommand" date="Wed Apr 13 11:26:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1587389">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1178]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1614" _type="MoveCaretCommand" caretOffset="185" date="Wed Apr 13 11:26:34 EDT 2022" docOffset="294" starttimestamp="1649862007572" timestamp="1587389" />
  <Command __id="1617" _type="InsertStringCommand" date="Wed Apr 13 11:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="1587707" timestamp2="1587707">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1618" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Wed Apr 13 11:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="1588198" />
  <Command __id="1620" _type="InsertStringCommand" date="Wed Apr 13 11:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="1588755" timestamp2="1588755">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="1630" _type="PasteCommand" date="Wed Apr 13 11:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="1589390" />
  <Command __id="1631" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="1589962" />
  <Command __id="1632" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="1590060" />
  <Command __id="1633" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="1590098" />
  <Command __id="1635" _type="PauseCommand" date="Wed Apr 13 11:26:46 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1598597">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8499]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1634" _type="SelectTextCommand" caretOffset="192" date="Wed Apr 13 11:26:46 EDT 2022" end="215" start="192" starttimestamp="1649862007572" timestamp="1598597" />
  <Command __id="1637" _type="InsertStringCommand" date="Wed Apr 13 11:26:46 EDT 2022" starttimestamp="1649862007572" timestamp="1599222" timestamp2="1599222">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1639" _type="InsertStringCommand" date="Wed Apr 13 11:26:46 EDT 2022" starttimestamp="1649862007572" timestamp="1599427" timestamp2="1599427">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1641" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1599477" timestamp2="1599477">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1643" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1599556" timestamp2="1599556">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1645" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1599694" timestamp2="1599694">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1647" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1599780" timestamp2="1599780">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1649" _type="InsertStringCommand" date="Wed Apr 13 11:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="1600101" timestamp2="1600101">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1651" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600473" />
  <Command __id="1653" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600616" timestamp2="1600616">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="1655" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600753" timestamp2="1600753">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1657" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600908" timestamp2="1600908">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1659" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1600974" timestamp2="1600974">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1661" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1601038" timestamp2="1601038">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1663" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1601108" timestamp2="1601108">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1665" _type="InsertStringCommand" date="Wed Apr 13 11:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="1601408" timestamp2="1601408">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1667" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1601580" timestamp2="1601580">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1669" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1601675" timestamp2="1601675">
    <data><![CDATA[j]]></data>
  </Command>
  <Command __id="1671" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1601798" timestamp2="1601798">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1673" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1601976" timestamp2="1601976">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1675" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1602139" timestamp2="1602139">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1677" _type="InsertStringCommand" date="Wed Apr 13 11:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="1602397" timestamp2="1602397">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="1679" _type="InsertStringCommand" date="Wed Apr 13 11:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="1602548" timestamp2="1602548">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1681" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="1602996" />
  <Command __id="1683" _type="InsertStringCommand" date="Wed Apr 13 11:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="1603197" timestamp2="1603197">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1685" _type="InsertStringCommand" date="Wed Apr 13 11:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="1603268" timestamp2="1603268">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="1687" _type="PauseCommand" date="Wed Apr 13 11:26:54 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1606998">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3730]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1686" _type="ShellCommand" date="Wed Apr 13 11:26:54 EDT 2022" starttimestamp="1649862007572" timestamp="1606998" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1688" _type="ShellCommand" date="Wed Apr 13 11:26:54 EDT 2022" starttimestamp="1649862007572" timestamp="1607105" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1694" _type="PauseCommand" date="Wed Apr 13 11:26:55 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1608134">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1016]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1693" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:26:55 EDT 2022" starttimestamp="1649862007572" timestamp="1608134" />
  <Command __id="1695" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:55 EDT 2022" starttimestamp="1649862007572" timestamp="1608237" />
  <Command __id="1696" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:26:55 EDT 2022" starttimestamp="1649862007572" timestamp="1608280" />
  <Command __id="1698" _type="PauseCommand" date="Wed Apr 13 11:26:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1610502">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2222]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1697" _type="SelectTextCommand" caretOffset="304" date="Wed Apr 13 11:26:58 EDT 2022" end="311" start="304" starttimestamp="1649862007572" timestamp="1610502" />
  <Command __id="1700" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 11:26:58 EDT 2022" starttimestamp="1649862007572" timestamp="1610969" />
  <Command __id="1702" _type="PauseCommand" date="Wed Apr 13 11:27:01 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1613992">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3023]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1747" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:27:06 EDT 2022" starttimestamp="1649862007572" timestamp="1618641" />
  <Command __id="1611" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:26:33 EDT 2022" docASTNodeCount="80" docActiveCodeLength="539" docExpressionCount="51" docLength="649" projectName="A6" starttimestamp="1649862007572" timestamp="1586138">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1616" _type="Insert" date="Wed Apr 13 11:26:35 EDT 2022" docASTNodeCount="80" docActiveCodeLength="543" docExpressionCount="51" docLength="653" length="4" offset="294" repeat="2" starttimestamp="1649862007572" timestamp="1587701" timestamp2="1588753">
    <text><![CDATA[	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="1621" _type="Replace" date="Wed Apr 13 11:26:36 EDT 2022" docASTNodeCount="108" docActiveCodeLength="753" docExpressionCount="64" docLength="863" endLine="11" insertionLength="211" int_docASTNodeCount="80" int_docActiveCodeLength="542" int_docExpressionCount="51" int_docLength="652" length="1" offset="294" startLine="11" starttimestamp="1649862007572" timestamp="1589296">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	final AnNIOManagerPrintClient client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {
		client = aClient;
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1622" _type="Delete" date="Wed Apr 13 11:26:36 EDT 2022" docASTNodeCount="108" docActiveCodeLength="749" docExpressionCount="64" docLength="859" endLine="5" length="4" offset="91" startLine="3" starttimestamp="1649862007572" timestamp="1589346">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1623" _type="Insert" date="Wed Apr 13 11:26:36 EDT 2022" docASTNodeCount="128" docActiveCodeLength="888" docExpressionCount="81" docLength="998" length="139" offset="91" repeat="7" starttimestamp="1649862007572" timestamp="1589347" timestamp2="1589353">
    <text><![CDATA[

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1636" _type="Replace" date="Wed Apr 13 11:26:46 EDT 2022" docASTNodeCount="128" docActiveCodeLength="866" docExpressionCount="81" docLength="976" endLine="14" insertionLength="1" int_docASTNodeCount="122" int_docActiveCodeLength="865" int_docExpressionCount="79" int_docLength="975" length="23" offset="436" startLine="14" starttimestamp="1649862007572" timestamp="1599215">
    <deletedText><![CDATA[AnNIOManagerPrintClient]]></deletedText>
    <insertedText><![CDATA[C]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1638" _type="Insert" date="Wed Apr 13 11:26:46 EDT 2022" docASTNodeCount="128" docActiveCodeLength="872" docExpressionCount="81" docLength="982" length="6" offset="437" repeat="6" starttimestamp="1649862007572" timestamp="1599423" timestamp2="1600095">
    <text><![CDATA[lientr]]></text>
  </DocumentChange>
  <DocumentChange __id="1650" _type="Delete" date="Wed Apr 13 11:26:48 EDT 2022" docASTNodeCount="128" docActiveCodeLength="871" docExpressionCount="81" docLength="981" endLine="14" length="1" offset="442" startLine="14" starttimestamp="1649862007572" timestamp="1600470">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="1652" _type="Insert" date="Wed Apr 13 11:26:48 EDT 2022" docASTNodeCount="128" docActiveCodeLength="885" docExpressionCount="81" docLength="995" length="14" offset="442" repeat="14" starttimestamp="1649862007572" timestamp="1600611" timestamp2="1602545">
    <text><![CDATA[RemoteObjectNO]]></text>
  </DocumentChange>
  <DocumentChange __id="1680" _type="Delete" date="Wed Apr 13 11:26:50 EDT 2022" docASTNodeCount="128" docActiveCodeLength="884" docExpressionCount="81" docLength="994" endLine="14" length="1" offset="455" startLine="14" starttimestamp="1649862007572" timestamp="1602993">
    <text><![CDATA[O]]></text>
  </DocumentChange>
  <DocumentChange __id="1682" _type="Insert" date="Wed Apr 13 11:26:50 EDT 2022" docASTNodeCount="128" docActiveCodeLength="886" docExpressionCount="81" docLength="996" length="2" offset="455" repeat="2" starttimestamp="1649862007572" timestamp="1603193" timestamp2="1603264">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <DocumentChange __id="1689" _type="Delete" date="Wed Apr 13 11:26:54 EDT 2022" docASTNodeCount="128" docActiveCodeLength="882" docExpressionCount="81" docLength="992" endLine="5" length="4" offset="91" startLine="3" starttimestamp="1649862007572" timestamp="1607117">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="1690" _type="Insert" date="Wed Apr 13 11:26:54 EDT 2022" docASTNodeCount="132" docActiveCodeLength="924" docExpressionCount="84" docLength="1034" length="42" offset="91" repeat="3" starttimestamp="1649862007572" timestamp="1607118" timestamp2="1607119">
    <text><![CDATA[

import client.ClientRemoteObjectNIO;
]]></text>
  </DocumentChange>
  <DocumentChange __id="1699" _type="Delete" date="Wed Apr 13 11:26:58 EDT 2022" docASTNodeCount="132" docActiveCodeLength="917" docExpressionCount="84" docLength="1027" endLine="18" length="7" offset="586" startLine="18" starttimestamp="1649862007572" timestamp="1610964">
    <text><![CDATA[example]]></text>
  </DocumentChange>
  <DocumentChange __id="1703" _type="Replace" date="Wed Apr 13 11:27:01 EDT 2022" docASTNodeCount="132" docActiveCodeLength="895" docExpressionCount="84" docLength="1005" endLine="18" insertionLength="1" int_docASTNodeCount="130" int_docActiveCodeLength="894" int_docExpressionCount="82" int_docLength="1004" length="23" offset="610" startLine="18" starttimestamp="1649862007572" timestamp="1614340">
    <deletedText><![CDATA[AnNIOManagerPrintClient]]></deletedText>
    <insertedText><![CDATA[C]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1705" _type="Insert" date="Wed Apr 13 11:27:02 EDT 2022" docASTNodeCount="132" docActiveCodeLength="915" docExpressionCount="84" docLength="1025" length="20" offset="611" repeat="20" starttimestamp="1649862007572" timestamp="1614629" timestamp2="1617613">
    <text><![CDATA[lientRemoteObjectNIO]]></text>
  </DocumentChange>
  <Command __id="1749" _type="PauseCommand" date="Wed Apr 13 11:27:09 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1622189">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3548]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1750" _type="MoveCaretCommand" caretOffset="904" date="Wed Apr 13 11:27:09 EDT 2022" docOffset="904" starttimestamp="1649862007572" timestamp="1622272" />
  <Command __id="1752" _type="PauseCommand" date="Wed Apr 13 11:27:45 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="1658403">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[36131]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1751" _type="ShellCommand" date="Wed Apr 13 11:27:45 EDT 2022" starttimestamp="1649862007572" timestamp="1658403" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1753" _type="ShellCommand" date="Wed Apr 13 11:27:46 EDT 2022" starttimestamp="1649862007572" timestamp="1658610" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1757" _type="PauseCommand" date="Wed Apr 13 11:27:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1660477">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1853]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1756" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 11:27:48 EDT 2022" starttimestamp="1649862007572" timestamp="1660477" />
  <Command __id="1758" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:27:48 EDT 2022" starttimestamp="1649862007572" timestamp="1660576" />
  <Command __id="1759" _type="EclipseCommand" commandID="" date="Wed Apr 13 11:27:48 EDT 2022" starttimestamp="1649862007572" timestamp="1660601" />
  <Command __id="1761" _type="PauseCommand" date="Wed Apr 13 11:27:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1665402">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4801]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1760" _type="ShellCommand" date="Wed Apr 13 11:27:52 EDT 2022" starttimestamp="1649862007572" timestamp="1665402" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1763" _type="PauseCommand" date="Wed Apr 13 11:28:39 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="1711790">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[46388]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1768" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Wed Apr 13 11:29:33 EDT 2022" starttimestamp="1649862007572" timestamp="1765940" />
  <Command __id="1770" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:33 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1765957" type="Debug" />
  <Command __id="1771" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:33 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1765957" type="Debug" />
  <Command __id="1772" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:29:33 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1765957" type="Run" />
  <Command __id="1774" _type="PauseCommand" date="Wed Apr 13 11:29:39 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1771750">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5793]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1773" _type="ShellCommand" date="Wed Apr 13 11:29:39 EDT 2022" starttimestamp="1649862007572" timestamp="1771750" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1775" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Wed Apr 13 11:29:39 EDT 2022" starttimestamp="1649862007572" timestamp="1772094" />
  <Command __id="1776" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1772588" type="Run" />
  <Command __id="1777" _type="RunCommand" className="/A6/src/server/Server.java" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1772588" type="Run" />
  <Command __id="1778" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1772812" type="Run" />
  <Command __id="1779" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:40 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1772834" type="Run" />
  <Command __id="1780" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1772837" type="Run" />
  <Command __id="1781" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1773418" type="Run" />
  <Command __id="1782" _type="ConsoleOutput" date="Wed Apr 13 11:29:41 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1773474" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.7996663870986356
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(EQUAL,"Re"), Diff(DELETE,"adCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63763]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0.40620601268491363 (Closed)¶Explanation: An existing connection was forcibly closed by the remote host"), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.7996663870986356¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1783" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1773865" type="Run" />
  <Command __id="1784" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1773901" type="Run" />
  <Command __id="1785" _type="ConsoleOutput" date="Wed Apr 13 11:29:41 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1773989" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.7996663870986356¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1787" _type="PauseCommand" date="Wed Apr 13 11:29:48 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1781122">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7133]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1786" _type="ShellCommand" date="Wed Apr 13 11:29:48 EDT 2022" starttimestamp="1649862007572" timestamp="1781122" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1789" _type="PauseCommand" date="Wed Apr 13 11:29:54 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1786531">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5409]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1788" _type="ShellCommand" date="Wed Apr 13 11:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="1786531" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1790" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Wed Apr 13 11:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="1786724" />
  <Command __id="1791" _type="RunCommand" className="/A6/src/client/Client.java" date="Wed Apr 13 11:29:54 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="1786768" type="Run" />
  <Command __id="1792" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:54 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1787014" type="Run" />
  <Command __id="1793" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1787017" type="Run" />
  <Command __id="1794" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1787604" type="Run" />
  <Command __id="1795" _type="ConsoleOutput" date="Wed Apr 13 11:29:55 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1787662" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.32184598126359243
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.32184598126359243"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1796" _type="ShellCommand" date="Wed Apr 13 11:29:56 EDT 2022" starttimestamp="1649862007572" timestamp="1788557" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1797" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1788944" type="Run" />
  <Command __id="1798" _type="ShellCommand" date="Wed Apr 13 11:29:56 EDT 2022" starttimestamp="1649862007572" timestamp="1788947" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1799" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:29:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1788948" type="Run" />
  <Command __id="1801" _type="PauseCommand" date="Wed Apr 13 11:29:58 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1790461">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1513]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1803" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1793784" type="Run" />
  <Command __id="1805" _type="ConsoleOutput" date="Wed Apr 13 11:30:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1793797" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.32184598126359243 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:"), Diff(INSERT,"Server0<-->"), Diff(EQUAL,"Generic Client:0.32184598126359243"), Diff(INSERT," (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1806" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1793899" type="Run" />
  <Command __id="1807" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1793943" type="Run" />
  <Command __id="1808" _type="ConsoleOutput" date="Wed Apr 13 11:30:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1793947" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@6cf8dc3c
[com.sun.proxy.$Proxy1@6cf8dc3c]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.32184598126359243 (Opened)"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@6cf8dc3c¶[com.sun.proxy.$Proxy1@6cf8dc3c]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1809" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1794004" type="Run" />
  <Command __id="1810" _type="ConsoleOutput" date="Wed Apr 13 11:30:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1794127" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@6cf8dc3c¶[com.sun.proxy.$Proxy1@6cf8dc3c]"), Diff(INSERT,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1811" _type="ConsoleOutput" date="Wed Apr 13 11:30:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1794148" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1813" _type="PauseCommand" date="Wed Apr 13 11:30:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1795462">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1314]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1820" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1800081" type="Run" />
  <Command __id="1823" _type="PauseCommand" date="Wed Apr 13 11:30:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1803585">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3503]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1822" _type="ConsoleOutput" date="Wed Apr 13 11:30:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1803584" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.09261083902577771 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:"), Diff(INSERT,"Server0<-->"), Diff(EQUAL,"Generic Client:0.09261083902577771"), Diff(INSERT," (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1824" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1803715" type="Run" />
  <Command __id="1825" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1803758" type="Run" />
  <Command __id="1826" _type="ConsoleOutput" date="Wed Apr 13 11:30:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1803761" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@733e800b
[com.sun.proxy.$Proxy1@6cf8dc3c, com.sun.proxy.$Proxy1@733e800b]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.09261083902577771 (Opened)"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@733e800b¶[com.sun.proxy.$Proxy1@6cf8dc3c, com.sun.proxy.$Proxy1@733e800b]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1827" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1803822" type="Run" />
  <Command __id="1828" _type="ConsoleOutput" date="Wed Apr 13 11:30:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1803943" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@733e800b¶[com.sun.proxy.$Proxy1@6cf8dc3c, com.sun.proxy.$Proxy1@733e800b]"), Diff(INSERT,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1829" _type="ConsoleOutput" date="Wed Apr 13 11:30:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1803951" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener o"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRe"), Diff(EQUAL,"f "), Diff(DELETE,"c"), Diff(INSERT,"["), Diff(EQUAL,"li"), Diff(DELETE,"ent¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"veRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1831" _type="PauseCommand" date="Wed Apr 13 11:30:13 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1805457">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1505]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1830" _type="ShellCommand" date="Wed Apr 13 11:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="1805456" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1832" _type="MoveCaretCommand" caretOffset="1750" date="Wed Apr 13 11:30:13 EDT 2022" docOffset="1750" starttimestamp="1649862007572" timestamp="1805525" />
  <Command __id="1748" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:27:09 EDT 2022" docASTNodeCount="294" docActiveCodeLength="1958" docExpressionCount="183" docLength="2259" projectName="A6" starttimestamp="1649862007572" timestamp="1622189">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;"), Diff(INSERT,"¶import java.util.concurrent.ArrayBlockingQueue;"), Diff(EQUAL,"¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;"), Diff(INSERT,"¶import readThread.ReadThreadInterface;"), Diff(EQUAL,"¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶"), Diff(DELETE,""), Diff(EQUAL,"	protected SocketChannel socketChannel;¶	¶	"), Diff(INSERT,"ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	"), Diff(EQUAL,"@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ReadThreadInterface;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1754" _type="Insert" date="Wed Apr 13 11:27:46 EDT 2022" docASTNodeCount="298" docActiveCodeLength="1995" docExpressionCount="186" docLength="2296" length="37" offset="474" repeat="2" starttimestamp="1649862007572" timestamp="1658624" timestamp2="1658625">
    <text><![CDATA[
import readThread.ClientReadThread;]]></text>
  </DocumentChange>
  <Command __id="1834" _type="PauseCommand" date="Wed Apr 13 11:30:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="1806862">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1337]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1843" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1833761" type="Run" />
  <Command __id="1845" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:30:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1833792" type="Run" />
  <Command __id="1847" _type="PauseCommand" date="Wed Apr 13 11:30:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1841979">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8187]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1846" _type="ShellCommand" date="Wed Apr 13 11:30:49 EDT 2022" starttimestamp="1649862007572" timestamp="1841979" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1849" _type="PauseCommand" date="Wed Apr 13 11:30:55 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1847958">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5979]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1848" _type="ShellCommand" date="Wed Apr 13 11:30:55 EDT 2022" starttimestamp="1649862007572" timestamp="1847958" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1851" _type="PauseCommand" date="Wed Apr 13 11:31:03 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1855883">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7925]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1850" _type="ConsoleInput" date="Wed Apr 13 11:31:03 EDT 2022" starttimestamp="1649862007572" timestamp="1855883" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="1852" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:31:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1855888" type="Run" />
  <Command __id="1853" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:31:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1855929" type="Run" />
  <Command __id="1854" _type="ConsoleOutput" date="Wed Apr 13 11:31:03 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1855940" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
NIO
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1855" _type="ConsoleOutput" date="Wed Apr 13 11:31:03 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1855959" type="ConsoleOutput">
    <outputString><![CDATA[IPC Mechanism recieved for broadcast: NIO
USING RMI IN SERVER
Command recieved for broadcast: move 50 -50
USING RMI IN SERVER
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]
2
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(INSERT,"IPC Mechanism recieved for broadcast: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: move 50 -50¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1856" _type="ConsoleOutput" date="Wed Apr 13 11:31:03 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1855984" type="ConsoleOutput">
    <outputString><![CDATA[recieved broadcased command: move 50 -50
PROPERTY CHANGE
executed command
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism "), Diff(EQUAL,"recieved "), Diff(DELETE,"for "), Diff(EQUAL,"broadcas"), Diff(DELETE,"t: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: move 50 -50¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63899](remote),objID:[-42ece1f3:180238bb9ef:-7ffe, -1559783672974752410]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.51.143:63910](remote),objID:[5c8a0dbc:180238be04e:-7ffe, 439477624810049140]]]]]"), Diff(INSERT,"ed command: move 50 -50¶PROPERTY CHANGE¶executed command"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1857" _type="ConsoleOutput" date="Wed Apr 13 11:31:03 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="1856146" type="ConsoleOutput">
    <outputString><![CDATA[Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcased command: move 50 -50¶PROPERTY CHANGE¶execu"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separa"), Diff(EQUAL,"ted "), Diff(INSERT,"by "), Diff(EQUAL,"comma"), Diff(DELETE,"nd"), Diff(INSERT,"s:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1859" _type="PauseCommand" date="Wed Apr 13 11:31:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="1859064">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2918]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1862" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 11:31:33 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="1885911" type="Run" />
  <Command __id="1865" _type="PauseCommand" date="Wed Apr 13 11:32:11 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="1924211">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[38300]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1864" _type="ShellCommand" date="Wed Apr 13 11:32:11 EDT 2022" starttimestamp="1649862007572" timestamp="1924211" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1866" _type="ShellCommand" date="Wed Apr 13 11:32:12 EDT 2022" starttimestamp="1649862007572" timestamp="1925109" type="ECLIPSE_MINIMIZED" />
  <Command __id="1867" _type="ShellCommand" date="Wed Apr 13 11:32:12 EDT 2022" starttimestamp="1649862007572" timestamp="1925118" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1869" _type="PauseCommand" date="Wed Apr 13 11:32:20 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="1932521">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7403]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1900" _type="ShellCommand" date="Wed Apr 13 12:22:24 EDT 2022" starttimestamp="1649862007572" timestamp="4936663" type="ECLIPSE_MAXIMIZED" />
  <Command __id="1902" _type="ShellCommand" date="Wed Apr 13 12:22:24 EDT 2022" starttimestamp="1649862007572" timestamp="4936757" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1903" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:25 EDT 2022" starttimestamp="1649862007572" timestamp="4937605" />
  <Command __id="1904" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:25 EDT 2022" starttimestamp="1649862007572" timestamp="4937621" />
  <Command __id="1905" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:25 EDT 2022" starttimestamp="1649862007572" timestamp="4937622" />
  <Command __id="1906" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:25 EDT 2022" starttimestamp="1649862007572" timestamp="4937628" />
  <Command __id="1907" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:25 EDT 2022" starttimestamp="1649862007572" timestamp="4937628" />
  <Command __id="1908" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:25 EDT 2022" starttimestamp="1649862007572" timestamp="4937637" />
  <Command __id="1909" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:25 EDT 2022" starttimestamp="1649862007572" timestamp="4937637" />
  <Command __id="1910" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:25 EDT 2022" starttimestamp="1649862007572" timestamp="4937646" />
  <Command __id="1833" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 11:30:14 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" projectName="A6" starttimestamp="1649862007572" timestamp="1806862">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1912" _type="PauseCommand" date="Wed Apr 13 12:22:38 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="4950829">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[13183]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1913" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 12:22:38 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="4951194" />
  <Command __id="1915" _type="PauseCommand" date="Wed Apr 13 12:22:44 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="4957031">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5837]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1914" _type="SelectTextCommand" caretOffset="1780" date="Wed Apr 13 12:22:44 EDT 2022" end="1829" start="1780" starttimestamp="1649862007572" timestamp="4957031" />
  <Command __id="1917" _type="PauseCommand" date="Wed Apr 13 12:22:46 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="4959104">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2073]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1916" _type="SelectTextCommand" caretOffset="1780" date="Wed Apr 13 12:22:46 EDT 2022" end="1892" start="1780" starttimestamp="1649862007572" timestamp="4959104" />
  <Command __id="1918" _type="CopyCommand" date="Wed Apr 13 12:22:47 EDT 2022" starttimestamp="1649862007572" timestamp="4959536" />
  <Command __id="1911" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:22:38 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="4950829">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1920" _type="PauseCommand" date="Wed Apr 13 12:22:51 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="4963470">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3934]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1921" _type="SelectTextCommand" caretOffset="1202" date="Wed Apr 13 12:22:51 EDT 2022" end="1259" start="1202" starttimestamp="1649862007572" timestamp="4964070" />
  <Command __id="1923" _type="PauseCommand" date="Wed Apr 13 12:22:55 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="4967701">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3631]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1922" _type="SelectTextCommand" caretOffset="2132" date="Wed Apr 13 12:22:55 EDT 2022" end="2166" start="2132" starttimestamp="1649862007572" timestamp="4967701" />
  <Command __id="1924" _type="SelectTextCommand" caretOffset="2132" date="Wed Apr 13 12:22:55 EDT 2022" end="2166" start="2132" starttimestamp="1649862007572" timestamp="4967701" />
  <Command __id="1926" _type="PasteCommand" date="Wed Apr 13 12:22:55 EDT 2022" starttimestamp="1649862007572" timestamp="4968256" />
  <Command __id="1927" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:22:56 EDT 2022" starttimestamp="1649862007572" timestamp="4969128" />
  <Command __id="1928" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:56 EDT 2022" starttimestamp="1649862007572" timestamp="4969206" />
  <Command __id="1929" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:22:56 EDT 2022" starttimestamp="1649862007572" timestamp="4969253" />
  <Command __id="1931" _type="PauseCommand" date="Wed Apr 13 12:23:01 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="4973715">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4462]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1930" _type="MoveCaretCommand" caretOffset="2105" date="Wed Apr 13 12:23:01 EDT 2022" docOffset="2105" starttimestamp="1649862007572" timestamp="4973715" />
  <Command __id="1932" _type="MoveCaretCommand" caretOffset="2105" date="Wed Apr 13 12:23:01 EDT 2022" docOffset="2105" starttimestamp="1649862007572" timestamp="4973715" />
  <Command __id="1934" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:02 EDT 2022" starttimestamp="1649862007572" timestamp="4974456" />
  <Command __id="1935" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:02 EDT 2022" starttimestamp="1649862007572" timestamp="4974456" />
  <Command __id="1919" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:22:51 EDT 2022" docASTNodeCount="360" docActiveCodeLength="2485" docExpressionCount="228" docLength="2821" projectName="A6" starttimestamp="1649862007572" timestamp="4963470">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1925" _type="Replace" date="Wed Apr 13 12:22:55 EDT 2022" docASTNodeCount="371" docActiveCodeLength="2575" docExpressionCount="237" docLength="2899" endLine="60" insertionLength="114" int_docASTNodeCount="360" int_docActiveCodeLength="2483" int_docExpressionCount="228" int_docLength="2785" length="36" offset="2130" startLine="60" starttimestamp="1649862007572" timestamp="4968248">
    <deletedText><![CDATA[		// TODO Auto-generated method stub]]></deletedText>
    <insertedText><![CDATA[		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="1933" _type="Delete" date="Wed Apr 13 12:23:02 EDT 2022" docASTNodeCount="371" docActiveCodeLength="2574" docExpressionCount="237" docLength="2898" endLine="59" length="1" offset="2104" startLine="59" starttimestamp="1649862007572" timestamp="4974448">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="1937" _type="PauseCommand" date="Wed Apr 13 12:23:04 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="4976796">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2340]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1938" _type="UndoCommand" date="Wed Apr 13 12:23:04 EDT 2022" starttimestamp="1649862007572" timestamp="4976802" />
  <Command __id="1940" _type="PauseCommand" date="Wed Apr 13 12:23:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="4979301">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2499]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1939" _type="MoveCaretCommand" caretOffset="2124" date="Wed Apr 13 12:23:06 EDT 2022" docOffset="2124" starttimestamp="1649862007572" timestamp="4979301" />
  <Command __id="1941" _type="MoveCaretCommand" caretOffset="2124" date="Wed Apr 13 12:23:06 EDT 2022" docOffset="2124" starttimestamp="1649862007572" timestamp="4979301" />
  <Command __id="1942" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 12:23:07 EDT 2022" starttimestamp="1649862007572" timestamp="4979889" />
  <Command __id="1943" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 12:23:07 EDT 2022" starttimestamp="1649862007572" timestamp="4979889" />
  <Command __id="1945" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:07 EDT 2022" starttimestamp="1649862007572" timestamp="4980212" />
  <Command __id="1946" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:07 EDT 2022" starttimestamp="1649862007572" timestamp="4980212" />
  <Command __id="1948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:07 EDT 2022" starttimestamp="1649862007572" timestamp="4980374" />
  <Command __id="1949" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:07 EDT 2022" starttimestamp="1649862007572" timestamp="4980374" />
  <Command __id="1951" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:08 EDT 2022" starttimestamp="1649862007572" timestamp="4980538" />
  <Command __id="1952" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:08 EDT 2022" starttimestamp="1649862007572" timestamp="4980538" />
  <Command __id="1954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:08 EDT 2022" starttimestamp="1649862007572" timestamp="4980853" />
  <Command __id="1955" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:23:08 EDT 2022" starttimestamp="1649862007572" timestamp="4980853" />
  <Command __id="1957" _type="InsertStringCommand" date="Wed Apr 13 12:23:08 EDT 2022" starttimestamp="1649862007572" timestamp="4981317" timestamp2="4981317">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1958" _type="InsertStringCommand" date="Wed Apr 13 12:23:08 EDT 2022" starttimestamp="1649862007572" timestamp="4981317" timestamp2="4981317">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1960" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4981682" timestamp2="4981682">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1961" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4981682" timestamp2="4981682">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1963" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4981866" timestamp2="4981866">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1964" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4981866" timestamp2="4981866">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1966" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4981932" timestamp2="4981932">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1967" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4981932" timestamp2="4981932">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1969" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4982057" timestamp2="4982057">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1970" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4982057" timestamp2="4982057">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="1972" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4982175" timestamp2="4982175">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1973" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4982175" timestamp2="4982175">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1975" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4982370" timestamp2="4982370">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1976" _type="InsertStringCommand" date="Wed Apr 13 12:23:09 EDT 2022" starttimestamp="1649862007572" timestamp="4982370" timestamp2="4982370">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1978" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4982740" timestamp2="4982740">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1979" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4982740" timestamp2="4982740">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1981" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4982925" timestamp2="4982925">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1982" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4982925" timestamp2="4982925">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1984" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4983009" timestamp2="4983009">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1985" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4983009" timestamp2="4983009">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1987" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4983159" timestamp2="4983159">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1988" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4983159" timestamp2="4983159">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1990" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4983297" timestamp2="4983297">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1991" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4983297" timestamp2="4983297">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1993" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4983362" timestamp2="4983362">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1994" _type="InsertStringCommand" date="Wed Apr 13 12:23:10 EDT 2022" starttimestamp="1649862007572" timestamp="4983362" timestamp2="4983362">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1996" _type="InsertStringCommand" date="Wed Apr 13 12:23:11 EDT 2022" starttimestamp="1649862007572" timestamp="4983452" timestamp2="4983452">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1997" _type="InsertStringCommand" date="Wed Apr 13 12:23:11 EDT 2022" starttimestamp="1649862007572" timestamp="4983452" timestamp2="4983452">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1999" _type="PauseCommand" date="Wed Apr 13 12:23:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="4984948">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1496]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1998" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:23:12 EDT 2022" starttimestamp="1649862007572" timestamp="4984948" />
  <Command __id="2000" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:23:12 EDT 2022" starttimestamp="1649862007572" timestamp="4985041" />
  <Command __id="2001" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:23:12 EDT 2022" starttimestamp="1649862007572" timestamp="4985092" />
  <DocumentChange __id="1936" _type="Insert" date="Wed Apr 13 12:23:04 EDT 2022" docASTNodeCount="371" docActiveCodeLength="2575" docExpressionCount="237" docLength="2899" length="1" offset="2104" starttimestamp="1649862007572" timestamp="4976796">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <DocumentChange __id="1944" _type="Delete" date="Wed Apr 13 12:23:07 EDT 2022" docASTNodeCount="356" docActiveCodeLength="2571" docExpressionCount="226" docLength="2895" endLine="59" length="4" offset="2121" repeat="4" startLine="59" starttimestamp="1649862007572" timestamp="4980204" timestamp2="4980847">
    <text><![CDATA[arg1]]></text>
  </DocumentChange>
  <DocumentChange __id="1956" _type="Insert" date="Wed Apr 13 12:23:08 EDT 2022" docASTNodeCount="371" docActiveCodeLength="2585" docExpressionCount="237" docLength="2909" length="14" offset="2121" repeat="14" starttimestamp="1649862007572" timestamp="4981317" timestamp2="4983446">
    <text><![CDATA[aSocketChannel]]></text>
  </DocumentChange>
  <Command __id="2003" _type="PauseCommand" date="Wed Apr 13 12:23:17 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="4990022">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4930]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2004" _type="SelectTextCommand" caretOffset="1780" date="Wed Apr 13 12:23:17 EDT 2022" end="1892" start="1780" starttimestamp="1649862007572" timestamp="4990352" />
  <Command __id="2006" _type="PauseCommand" date="Wed Apr 13 12:23:22 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="4995406">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5054]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="2005" _type="BalloonCommand" date="Wed Apr 13 12:23:22 EDT 2022" message="*******************************************
Worked 30 minutes(fixed)/31 minutes(context based) from
Wed Apr 13 11:00:24 EDT 2022 to Wed Apr 13 12:23:17 EDT 2022
Edited 1 Projects: 
	A6
Edited 6 Files: 
	C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java
	C:\Users\mannu\COMP_533\A6\src\client\Client.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java
Number of insert: 2930
Number of delete: 436
" starttimestamp="1649862007572" timestamp="4995406">
    <fineGrainedWorkTime><![CDATA[31]]></fineGrainedWorkTime>
    <insert><![CDATA[2930]]></insert>
    <startTime><![CDATA[1649862024266]]></startTime>
    <endTime><![CDATA[1649866997924]]></endTime>
    <workTime><![CDATA[30]]></workTime>
    <delete><![CDATA[436]]></delete>
  </Command>
  <Command __id="2008" _type="PauseCommand" date="Wed Apr 13 12:24:07 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="5039551">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[44145]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2007" _type="SelectTextCommand" caretOffset="2012" date="Wed Apr 13 12:24:07 EDT 2022" end="2292" start="2012" starttimestamp="1649862007572" timestamp="5039551" />
  <Command __id="2009" _type="CopyCommand" date="Wed Apr 13 12:24:07 EDT 2022" starttimestamp="1649862007572" timestamp="5040359" />
  <Command __id="2011" _type="PauseCommand" date="Wed Apr 13 12:24:10 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5043378">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3019]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2010" _type="ShellCommand" date="Wed Apr 13 12:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="5043378" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2013" _type="PauseCommand" date="Wed Apr 13 12:25:53 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="5146176">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[102798]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2012" _type="ShellCommand" date="Wed Apr 13 12:25:53 EDT 2022" starttimestamp="1649862007572" timestamp="5146176" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2002" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:23:17 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="4990022">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2015" _type="PauseCommand" date="Wed Apr 13 12:26:00 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5153151">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6975]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2016" _type="MoveCaretCommand" caretOffset="2135" date="Wed Apr 13 12:26:01 EDT 2022" docOffset="2135" starttimestamp="1649862007572" timestamp="5153428" />
  <Command __id="2014" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:26:00 EDT 2022" docASTNodeCount="371" docActiveCodeLength="2585" docExpressionCount="237" docLength="2909" projectName="A6" starttimestamp="1649862007572" timestamp="5153151">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel a"), Diff(DELETE,"rg1) {¶		// TODO Auto-generated method stub"), Diff(INSERT,"SocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);"), Diff(EQUAL,"¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="2018" _type="PauseCommand" date="Wed Apr 13 12:26:07 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5159767">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6339]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2017" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:26:07 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="5159767">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2019" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 12:26:07 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="5160135" />
  <Command __id="2020" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:26:08 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="5160991">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2021" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 12:26:08 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="5161171" />
  <Command __id="2022" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:26:09 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="5161969">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2023" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 12:26:09 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="5162249" />
  <Command __id="2025" _type="MoveCaretCommand" caretOffset="1750" date="Wed Apr 13 12:26:11 EDT 2022" docOffset="1750" starttimestamp="1649862007572" timestamp="5163800" />
  <Command __id="2024" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:26:10 EDT 2022" docASTNodeCount="298" docActiveCodeLength="1995" docExpressionCount="186" docLength="2296" projectName="A6" starttimestamp="1649862007572" timestamp="5163083">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶"), Diff(INSERT,"import readThread.ClientReadThread;¶"), Diff(EQUAL,"import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="2027" _type="PauseCommand" date="Wed Apr 13 12:26:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5166766">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2966]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2028" _type="MoveCaretCommand" caretOffset="2135" date="Wed Apr 13 12:26:14 EDT 2022" docOffset="2135" starttimestamp="1649862007572" timestamp="5167041" />
  <Command __id="2030" _type="PauseCommand" date="Wed Apr 13 12:26:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5170492">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3451]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2029" _type="SelectTextCommand" caretOffset="2361" date="Wed Apr 13 12:26:18 EDT 2022" end="2395" start="2361" starttimestamp="1649862007572" timestamp="5170492" />
  <Command __id="2031" _type="SelectTextCommand" caretOffset="2361" date="Wed Apr 13 12:26:18 EDT 2022" end="2395" start="2361" starttimestamp="1649862007572" timestamp="5170492" />
  <Command __id="2037" _type="PasteCommand" date="Wed Apr 13 12:26:18 EDT 2022" starttimestamp="1649862007572" timestamp="5171312" />
  <Command __id="2038" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:26:19 EDT 2022" starttimestamp="1649862007572" timestamp="5172095" />
  <Command __id="2039" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:26:19 EDT 2022" starttimestamp="1649862007572" timestamp="5172191" />
  <Command __id="2040" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:26:19 EDT 2022" starttimestamp="1649862007572" timestamp="5172260" />
  <Command __id="2042" _type="PauseCommand" date="Wed Apr 13 12:26:22 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5174574">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2314]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2041" _type="MoveCaretCommand" caretOffset="2373" date="Wed Apr 13 12:26:22 EDT 2022" docOffset="2373" starttimestamp="1649862007572" timestamp="5174574" />
  <Command __id="2043" _type="MoveCaretCommand" caretOffset="2373" date="Wed Apr 13 12:26:22 EDT 2022" docOffset="2373" starttimestamp="1649862007572" timestamp="5174574" />
  <Command __id="2045" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:22 EDT 2022" starttimestamp="1649862007572" timestamp="5175234" />
  <Command __id="2046" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:22 EDT 2022" starttimestamp="1649862007572" timestamp="5175234" />
  <Command __id="2048" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:22 EDT 2022" starttimestamp="1649862007572" timestamp="5175252" />
  <Command __id="2049" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:22 EDT 2022" starttimestamp="1649862007572" timestamp="5175252" />
  <Command __id="2051" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:22 EDT 2022" starttimestamp="1649862007572" timestamp="5175395" />
  <Command __id="2052" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:22 EDT 2022" starttimestamp="1649862007572" timestamp="5175395" />
  <Command __id="2054" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5175563" />
  <Command __id="2055" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5175563" />
  <Command __id="2057" _type="InsertStringCommand" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5175832" timestamp2="5175832">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2058" _type="InsertStringCommand" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5175832" timestamp2="5175832">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2060" _type="InsertStringCommand" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5176147" timestamp2="5176147">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2061" _type="InsertStringCommand" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5176147" timestamp2="5176147">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2063" _type="InsertStringCommand" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5176362" timestamp2="5176362">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2064" _type="InsertStringCommand" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5176362" timestamp2="5176362">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2066" _type="InsertStringCommand" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5176427" timestamp2="5176427">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2067" _type="InsertStringCommand" date="Wed Apr 13 12:26:23 EDT 2022" starttimestamp="1649862007572" timestamp="5176427" timestamp2="5176427">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2069" _type="InsertStringCommand" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5176649" timestamp2="5176649">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2070" _type="InsertStringCommand" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5176649" timestamp2="5176649">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2072" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5176966" />
  <Command __id="2073" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5176966" />
  <Command __id="2075" _type="InsertStringCommand" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5177134" timestamp2="5177134">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2076" _type="InsertStringCommand" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5177134" timestamp2="5177134">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2078" _type="InsertStringCommand" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5177228" timestamp2="5177228">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2079" _type="InsertStringCommand" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5177228" timestamp2="5177228">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2081" _type="InsertStringCommand" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5177396" timestamp2="5177396">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2082" _type="InsertStringCommand" date="Wed Apr 13 12:26:24 EDT 2022" starttimestamp="1649862007572" timestamp="5177396" timestamp2="5177396">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2084" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5177781" timestamp2="5177781">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2085" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5177781" timestamp2="5177781">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2087" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5177950" timestamp2="5177950">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2088" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5177950" timestamp2="5177950">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2090" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178001" timestamp2="5178001">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2091" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178001" timestamp2="5178001">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2093" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178142" timestamp2="5178142">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2094" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178142" timestamp2="5178142">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2096" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178261" timestamp2="5178261">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2097" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178261" timestamp2="5178261">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2099" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178345" timestamp2="5178345">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2100" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178345" timestamp2="5178345">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2102" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178420" timestamp2="5178420">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2103" _type="InsertStringCommand" date="Wed Apr 13 12:26:25 EDT 2022" starttimestamp="1649862007572" timestamp="5178420" timestamp2="5178420">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2105" _type="PauseCommand" date="Wed Apr 13 12:26:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5180955">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2535]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2104" _type="SelectTextCommand" caretOffset="2396" date="Wed Apr 13 12:26:28 EDT 2022" end="2400" start="2396" starttimestamp="1649862007572" timestamp="5180955" />
  <Command __id="2106" _type="SelectTextCommand" caretOffset="2396" date="Wed Apr 13 12:26:28 EDT 2022" end="2400" start="2396" starttimestamp="1649862007572" timestamp="5180955" />
  <Command __id="2108" _type="InsertStringCommand" date="Wed Apr 13 12:26:29 EDT 2022" starttimestamp="1649862007572" timestamp="5181487" timestamp2="5181487">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2109" _type="InsertStringCommand" date="Wed Apr 13 12:26:29 EDT 2022" starttimestamp="1649862007572" timestamp="5181487" timestamp2="5181487">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2111" _type="InsertStringCommand" date="Wed Apr 13 12:26:29 EDT 2022" starttimestamp="1649862007572" timestamp="5181933" timestamp2="5181933">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2112" _type="InsertStringCommand" date="Wed Apr 13 12:26:29 EDT 2022" starttimestamp="1649862007572" timestamp="5181933" timestamp2="5181933">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2114" _type="InsertStringCommand" date="Wed Apr 13 12:26:29 EDT 2022" starttimestamp="1649862007572" timestamp="5182202" timestamp2="5182202">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2115" _type="InsertStringCommand" date="Wed Apr 13 12:26:29 EDT 2022" starttimestamp="1649862007572" timestamp="5182202" timestamp2="5182202">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2117" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5182525" />
  <Command __id="2118" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5182525" />
  <Command __id="2120" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5182682" />
  <Command __id="2121" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5182682" />
  <Command __id="2123" _type="InsertStringCommand" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5182822" timestamp2="5182822">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="2124" _type="InsertStringCommand" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5182822" timestamp2="5182822">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="2126" _type="InsertStringCommand" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5183021" timestamp2="5183021">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2127" _type="InsertStringCommand" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5183021" timestamp2="5183021">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2129" _type="InsertStringCommand" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5183215" timestamp2="5183215">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2130" _type="InsertStringCommand" date="Wed Apr 13 12:26:30 EDT 2022" starttimestamp="1649862007572" timestamp="5183215" timestamp2="5183215">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2132" _type="InsertStringCommand" date="Wed Apr 13 12:26:31 EDT 2022" starttimestamp="1649862007572" timestamp="5183434" timestamp2="5183434">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2133" _type="InsertStringCommand" date="Wed Apr 13 12:26:31 EDT 2022" starttimestamp="1649862007572" timestamp="5183434" timestamp2="5183434">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2135" _type="InsertStringCommand" date="Wed Apr 13 12:26:31 EDT 2022" starttimestamp="1649862007572" timestamp="5183510" timestamp2="5183510">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2136" _type="InsertStringCommand" date="Wed Apr 13 12:26:31 EDT 2022" starttimestamp="1649862007572" timestamp="5183510" timestamp2="5183510">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2138" _type="InsertStringCommand" date="Wed Apr 13 12:26:31 EDT 2022" starttimestamp="1649862007572" timestamp="5183631" timestamp2="5183631">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2139" _type="InsertStringCommand" date="Wed Apr 13 12:26:31 EDT 2022" starttimestamp="1649862007572" timestamp="5183631" timestamp2="5183631">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2141" _type="InsertStringCommand" date="Wed Apr 13 12:26:31 EDT 2022" starttimestamp="1649862007572" timestamp="5183728" timestamp2="5183728">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2142" _type="InsertStringCommand" date="Wed Apr 13 12:26:31 EDT 2022" starttimestamp="1649862007572" timestamp="5183728" timestamp2="5183728">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2144" _type="PauseCommand" date="Wed Apr 13 12:26:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5186376">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2648]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2143" _type="SelectTextCommand" caretOffset="2410" date="Wed Apr 13 12:26:33 EDT 2022" end="2414" start="2410" starttimestamp="1649862007572" timestamp="5186376" />
  <Command __id="2145" _type="SelectTextCommand" caretOffset="2410" date="Wed Apr 13 12:26:33 EDT 2022" end="2414" start="2410" starttimestamp="1649862007572" timestamp="5186376" />
  <Command __id="2147" _type="InsertStringCommand" date="Wed Apr 13 12:26:34 EDT 2022" starttimestamp="1649862007572" timestamp="5186486" timestamp2="5186486">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2148" _type="InsertStringCommand" date="Wed Apr 13 12:26:34 EDT 2022" starttimestamp="1649862007572" timestamp="5186486" timestamp2="5186486">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2150" _type="InsertStringCommand" date="Wed Apr 13 12:26:34 EDT 2022" starttimestamp="1649862007572" timestamp="5187213" timestamp2="5187213">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2151" _type="InsertStringCommand" date="Wed Apr 13 12:26:34 EDT 2022" starttimestamp="1649862007572" timestamp="5187213" timestamp2="5187213">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2153" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5187512" timestamp2="5187512">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2154" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5187513" timestamp2="5187513">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2156" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5187611" timestamp2="5187611">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2157" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5187611" timestamp2="5187611">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2159" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5187735" timestamp2="5187735">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2160" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5187735" timestamp2="5187735">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2162" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5188046" timestamp2="5188046">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2163" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5188055" timestamp2="5188055">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2165" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5188130" timestamp2="5188130">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2166" _type="InsertStringCommand" date="Wed Apr 13 12:26:35 EDT 2022" starttimestamp="1649862007572" timestamp="5188130" timestamp2="5188130">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2168" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="5188940" />
  <Command __id="2169" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="5188940" />
  <Command __id="2171" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="5189117" />
  <Command __id="2172" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="5189117" />
  <Command __id="2174" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="5189301" />
  <Command __id="2175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="5189301" />
  <Command __id="2177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5189455" />
  <Command __id="2178" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5189455" />
  <Command __id="2180" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5189624" />
  <Command __id="2181" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5189624" />
  <Command __id="2183" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5189779" />
  <Command __id="2184" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5189779" />
  <Command __id="2186" _type="InsertStringCommand" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5190015" timestamp2="5190015">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2187" _type="InsertStringCommand" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5190015" timestamp2="5190015">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2189" _type="InsertStringCommand" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5190209" timestamp2="5190209">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2190" _type="InsertStringCommand" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5190209" timestamp2="5190209">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2192" _type="InsertStringCommand" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5190283" timestamp2="5190283">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2193" _type="InsertStringCommand" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5190283" timestamp2="5190283">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2195" _type="InsertStringCommand" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5190420" timestamp2="5190420">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2196" _type="InsertStringCommand" date="Wed Apr 13 12:26:37 EDT 2022" starttimestamp="1649862007572" timestamp="5190420" timestamp2="5190420">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2198" _type="InsertStringCommand" date="Wed Apr 13 12:26:38 EDT 2022" starttimestamp="1649862007572" timestamp="5190652" timestamp2="5190652">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2199" _type="InsertStringCommand" date="Wed Apr 13 12:26:38 EDT 2022" starttimestamp="1649862007572" timestamp="5190652" timestamp2="5190652">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2201" _type="InsertStringCommand" date="Wed Apr 13 12:26:38 EDT 2022" starttimestamp="1649862007572" timestamp="5190725" timestamp2="5190725">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2202" _type="InsertStringCommand" date="Wed Apr 13 12:26:38 EDT 2022" starttimestamp="1649862007572" timestamp="5190725" timestamp2="5190725">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2203" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:26:38 EDT 2022" starttimestamp="1649862007572" timestamp="5191366" />
  <Command __id="2204" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:26:39 EDT 2022" starttimestamp="1649862007572" timestamp="5191452" />
  <Command __id="2205" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:26:39 EDT 2022" starttimestamp="1649862007572" timestamp="5191508" />
  <Command __id="2026" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:26:14 EDT 2022" docASTNodeCount="371" docActiveCodeLength="2585" docExpressionCount="237" docLength="2909" projectName="A6" starttimestamp="1649862007572" timestamp="5166766">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2032" _type="Replace" date="Wed Apr 13 12:26:18 EDT 2022" docASTNodeCount="414" docActiveCodeLength="2865" docExpressionCount="270" docLength="3155" endLine="69" insertionLength="282" int_docASTNodeCount="371" int_docActiveCodeLength="2583" int_docExpressionCount="237" int_docLength="2873" length="36" offset="2359" startLine="69" starttimestamp="1649862007572" timestamp="5171101">
    <deletedText><![CDATA[		// TODO Auto-generated method stub]]></deletedText>
    <insertedText><![CDATA[		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2033" _type="Delete" date="Wed Apr 13 12:26:18 EDT 2022" docASTNodeCount="414" docActiveCodeLength="2861" docExpressionCount="270" docLength="3151" endLine="12" length="4" offset="348" startLine="10" starttimestamp="1649862007572" timestamp="5171254">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="2034" _type="Insert" date="Wed Apr 13 12:26:18 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2911" docExpressionCount="275" docLength="3201" length="50" offset="348" repeat="3" starttimestamp="1649862007572" timestamp="5171254" timestamp2="5171262">
    <text><![CDATA[

import assignments.util.MiscAssignmentUtils;
]]></text>
  </DocumentChange>
  <DocumentChange __id="2044" _type="Delete" date="Wed Apr 13 12:26:22 EDT 2022" docASTNodeCount="366" docActiveCodeLength="2907" docExpressionCount="237" docLength="3197" endLine="69" length="4" offset="2369" repeat="4" startLine="69" starttimestamp="1649862007572" timestamp="5175226" timestamp2="5175560">
    <text><![CDATA[arg0]]></text>
  </DocumentChange>
  <DocumentChange __id="2056" _type="Insert" date="Wed Apr 13 12:26:23 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2912" docExpressionCount="275" docLength="3202" length="5" offset="2369" repeat="5" starttimestamp="1649862007572" timestamp="5175823" timestamp2="5176641">
    <text><![CDATA[aSoce]]></text>
  </DocumentChange>
  <DocumentChange __id="2071" _type="Delete" date="Wed Apr 13 12:26:24 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2911" docExpressionCount="275" docLength="3201" endLine="69" length="1" offset="2373" startLine="69" starttimestamp="1649862007572" timestamp="5176966">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2074" _type="Insert" date="Wed Apr 13 12:26:24 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2921" docExpressionCount="275" docLength="3211" length="10" offset="2373" repeat="10" starttimestamp="1649862007572" timestamp="5177126" timestamp2="5178411">
    <text><![CDATA[ketChannel]]></text>
  </DocumentChange>
  <DocumentChange __id="2107" _type="Replace" date="Wed Apr 13 12:26:29 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2918" docExpressionCount="275" docLength="3208" endLine="69" insertionLength="1" int_docASTNodeCount="370" int_docActiveCodeLength="2917" int_docExpressionCount="239" int_docLength="3207" length="4" offset="2396" startLine="69" starttimestamp="1649862007572" timestamp="5181475">
    <deletedText><![CDATA[arg1]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2110" _type="Insert" date="Wed Apr 13 12:26:29 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2920" docExpressionCount="275" docLength="3210" length="2" offset="2397" repeat="2" starttimestamp="1649862007572" timestamp="5181925" timestamp2="5182194">
    <text><![CDATA[me]]></text>
  </DocumentChange>
  <DocumentChange __id="2116" _type="Delete" date="Wed Apr 13 12:26:30 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2918" docExpressionCount="275" docLength="3208" endLine="69" length="2" offset="2397" repeat="2" startLine="69" starttimestamp="1649862007572" timestamp="5182525" timestamp2="5182682">
    <text><![CDATA[me]]></text>
  </DocumentChange>
  <DocumentChange __id="2122" _type="Insert" date="Wed Apr 13 12:26:30 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2925" docExpressionCount="275" docLength="3215" length="7" offset="2397" repeat="7" starttimestamp="1649862007572" timestamp="5182814" timestamp2="5183720">
    <text><![CDATA[Message]]></text>
  </DocumentChange>
  <DocumentChange __id="2146" _type="Replace" date="Wed Apr 13 12:26:34 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2922" docExpressionCount="275" docLength="3212" endLine="69" insertionLength="1" int_docASTNodeCount="374" int_docActiveCodeLength="2921" int_docExpressionCount="241" int_docLength="3211" length="4" offset="2410" startLine="69" starttimestamp="1649862007572" timestamp="5186478">
    <deletedText><![CDATA[arg2]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2149" _type="Insert" date="Wed Apr 13 12:26:34 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2928" docExpressionCount="275" docLength="3218" length="6" offset="2411" repeat="6" starttimestamp="1649862007572" timestamp="5187205" timestamp2="5188125">
    <text><![CDATA[length]]></text>
  </DocumentChange>
  <DocumentChange __id="2167" _type="Delete" date="Wed Apr 13 12:26:36 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2922" docExpressionCount="275" docLength="3212" endLine="69" length="6" offset="2411" repeat="6" startLine="69" starttimestamp="1649862007572" timestamp="5188940" timestamp2="5189771">
    <text><![CDATA[length]]></text>
  </DocumentChange>
  <DocumentChange __id="2185" _type="Insert" date="Wed Apr 13 12:26:37 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2928" docExpressionCount="275" docLength="3218" length="6" offset="2411" repeat="6" starttimestamp="1649862007572" timestamp="5190007" timestamp2="5190715">
    <text><![CDATA[Length]]></text>
  </DocumentChange>
  <Command __id="2207" _type="PauseCommand" date="Wed Apr 13 12:26:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5196293">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4785]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2208" _type="SelectTextCommand" caretOffset="2012" date="Wed Apr 13 12:26:44 EDT 2022" end="2292" start="2012" starttimestamp="1649862007572" timestamp="5196725" />
  <Command __id="2210" _type="PauseCommand" date="Wed Apr 13 12:26:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5201484">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4759]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2209" _type="SelectTextCommand" caretOffset="2778" date="Wed Apr 13 12:26:49 EDT 2022" end="2799" start="2778" starttimestamp="1649862007572" timestamp="5201484" />
  <Command __id="2211" _type="CopyCommand" date="Wed Apr 13 12:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="5201782" />
  <Command __id="2206" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:26:43 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="5196293">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2213" _type="PauseCommand" date="Wed Apr 13 12:26:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5203402">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1620]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2214" _type="MoveCaretCommand" caretOffset="2417" date="Wed Apr 13 12:26:51 EDT 2022" docOffset="2417" starttimestamp="1649862007572" timestamp="5203590" />
  <Command __id="2215" _type="MoveCaretCommand" caretOffset="2682" date="Wed Apr 13 12:26:52 EDT 2022" docOffset="2682" starttimestamp="1649862007572" timestamp="5204510" />
  <Command __id="2216" _type="MoveCaretCommand" caretOffset="2682" date="Wed Apr 13 12:26:52 EDT 2022" docOffset="2682" starttimestamp="1649862007572" timestamp="5204510" />
  <Command __id="2218" _type="PauseCommand" date="Wed Apr 13 12:26:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5205705">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1195]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2217" _type="MoveCaretCommand" caretOffset="2704" date="Wed Apr 13 12:26:53 EDT 2022" docOffset="2704" starttimestamp="1649862007572" timestamp="5205705" />
  <Command __id="2219" _type="MoveCaretCommand" caretOffset="2704" date="Wed Apr 13 12:26:53 EDT 2022" docOffset="2704" starttimestamp="1649862007572" timestamp="5205705" />
  <Command __id="2221" _type="InsertStringCommand" date="Wed Apr 13 12:26:53 EDT 2022" starttimestamp="1649862007572" timestamp="5205936" timestamp2="5205936">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2222" _type="InsertStringCommand" date="Wed Apr 13 12:26:53 EDT 2022" starttimestamp="1649862007572" timestamp="5205936" timestamp2="5205936">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2224" _type="InsertStringCommand" date="Wed Apr 13 12:26:53 EDT 2022" starttimestamp="1649862007572" timestamp="5206061" timestamp2="5206061">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2225" _type="InsertStringCommand" date="Wed Apr 13 12:26:53 EDT 2022" starttimestamp="1649862007572" timestamp="5206061" timestamp2="5206061">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2227" _type="PasteCommand" date="Wed Apr 13 12:26:53 EDT 2022" starttimestamp="1649862007572" timestamp="5206285" />
  <Command __id="2228" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:26:54 EDT 2022" starttimestamp="1649862007572" timestamp="5206742" />
  <Command __id="2229" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:26:54 EDT 2022" starttimestamp="1649862007572" timestamp="5206831" />
  <Command __id="2230" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:26:54 EDT 2022" starttimestamp="1649862007572" timestamp="5206921" />
  <Command __id="2212" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:26:50 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2928" docExpressionCount="275" docLength="3218" projectName="A6" starttimestamp="1649862007572" timestamp="5203402">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(INSERT,"import assignments.util.MiscAssignmentUtils;¶"), Diff(EQUAL,"import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel a"), Diff(DELETE,"rg0"), Diff(INSERT,"SocketChannel"), Diff(EQUAL,", ByteBuffer a"), Diff(DELETE,"rg1"), Diff(INSERT,"Message"), Diff(EQUAL,", int a"), Diff(DELETE,"rg2"), Diff(INSERT,"Length"), Diff(EQUAL,") {¶		"), Diff(DELETE,"// TODO Auto-generated method stub"), Diff(INSERT,"ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;"), Diff(EQUAL,"¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2220" _type="Insert" date="Wed Apr 13 12:26:53 EDT 2022" docASTNodeCount="420" docActiveCodeLength="2936" docExpressionCount="275" docLength="3226" length="8" offset="2704" repeat="2" starttimestamp="1649862007572" timestamp="5205928" timestamp2="5206056">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2226" _type="Replace" date="Wed Apr 13 12:26:53 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2957" docExpressionCount="278" docLength="3247" endLine="78" insertionLength="23" int_docASTNodeCount="420" int_docActiveCodeLength="2934" int_docExpressionCount="275" int_docLength="3224" length="2" offset="2710" startLine="78" starttimestamp="1649862007572" timestamp="5206277">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		reader.notifyThread()]]></insertedText>
  </DocumentChange>
  <Command __id="2232" _type="PauseCommand" date="Wed Apr 13 12:26:57 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5209746">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2825]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2233" _type="InsertStringCommand" date="Wed Apr 13 12:26:57 EDT 2022" starttimestamp="1649862007572" timestamp="5209755" timestamp2="5209755">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2234" _type="InsertStringCommand" date="Wed Apr 13 12:26:57 EDT 2022" starttimestamp="1649862007572" timestamp="5209755" timestamp2="5209755">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2236" _type="PauseCommand" date="Wed Apr 13 12:26:58 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5210819">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1064]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2235" _type="EclipseCommand" commandID="org.eclipse.ui.edit.selectAll" date="Wed Apr 13 12:26:58 EDT 2022" starttimestamp="1649862007572" timestamp="5210819" />
  <Command __id="2238" _type="PauseCommand" date="Wed Apr 13 12:26:59 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5211857">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1038]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2237" _type="MoveCaretCommand" caretOffset="2699" date="Wed Apr 13 12:26:59 EDT 2022" docOffset="2699" starttimestamp="1649862007572" timestamp="5211857" />
  <Command __id="2239" _type="MoveCaretCommand" caretOffset="2699" date="Wed Apr 13 12:26:59 EDT 2022" docOffset="2699" starttimestamp="1649862007572" timestamp="5211857" />
  <DocumentChange __id="2231" _type="Insert" date="Wed Apr 13 12:26:57 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2958" docExpressionCount="278" docLength="3248" length="1" offset="2733" starttimestamp="1649862007572" timestamp="5209746">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="2241" _type="PauseCommand" date="Wed Apr 13 12:27:00 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5213281">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1424]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2242" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 12:27:01 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="5213506" />
  <Command __id="2240" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:27:00 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="5213281">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2244" _type="PauseCommand" date="Wed Apr 13 12:27:06 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5219022">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5516]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2245" _type="MoveCaretCommand" caretOffset="2699" date="Wed Apr 13 12:27:06 EDT 2022" docOffset="2699" starttimestamp="1649862007572" timestamp="5219220" />
  <Command __id="2247" _type="PauseCommand" date="Wed Apr 13 12:27:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5221161">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1941]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2246" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:27:08 EDT 2022" starttimestamp="1649862007572" timestamp="5221161" />
  <Command __id="2248" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:27:08 EDT 2022" starttimestamp="1649862007572" timestamp="5221249" />
  <Command __id="2249" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:27:08 EDT 2022" starttimestamp="1649862007572" timestamp="5221284" />
  <Command __id="2243" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:27:06 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2958" docExpressionCount="278" docLength="3248" projectName="A6" starttimestamp="1649862007572" timestamp="5219022">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶	"), Diff(INSERT,"	reader.notifyThread();¶		¶	"), Diff(EQUAL,"}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="2251" _type="PauseCommand" date="Wed Apr 13 12:27:15 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5227548">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6264]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2252" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 12:27:15 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="5227665" />
  <Command __id="2250" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:27:15 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="5227548">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2254" _type="PauseCommand" date="Wed Apr 13 12:27:40 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="5252566">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[24901]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2255" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 12:27:40 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="5253136" />
  <Command __id="2257" _type="PauseCommand" date="Wed Apr 13 12:27:48 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5261086">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7950]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2256" _type="SelectTextCommand" caretOffset="1488" date="Wed Apr 13 12:27:48 EDT 2022" end="1488" start="550" starttimestamp="1649862007572" timestamp="5261086" />
  <Command __id="2258" _type="CopyCommand" date="Wed Apr 13 12:27:49 EDT 2022" starttimestamp="1649862007572" timestamp="5261553" />
  <Command __id="2253" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:27:40 EDT 2022" docASTNodeCount="225" docActiveCodeLength="1609" docExpressionCount="133" docLength="1877" projectName="A6" starttimestamp="1649862007572" timestamp="5252566">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleServerReadThread implements ReadThreadInterface{¶	final NIOManagerPrintServer server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleServerReadThread (final NIOManagerPrintServer aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2260" _type="PauseCommand" date="Wed Apr 13 12:27:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5262728">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1175]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2261" _type="MoveCaretCommand" caretOffset="352" date="Wed Apr 13 12:27:50 EDT 2022" docOffset="639" starttimestamp="1649862007572" timestamp="5262942" />
  <Command __id="2263" _type="PauseCommand" date="Wed Apr 13 12:27:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5265969">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3027]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2262" _type="MoveCaretCommand" caretOffset="466" date="Wed Apr 13 12:27:53 EDT 2022" docOffset="753" starttimestamp="1649862007572" timestamp="5265969" />
  <Command __id="2264" _type="MoveCaretCommand" caretOffset="466" date="Wed Apr 13 12:27:53 EDT 2022" docOffset="753" starttimestamp="1649862007572" timestamp="5265969" />
  <Command __id="2270" _type="PasteCommand" date="Wed Apr 13 12:27:54 EDT 2022" starttimestamp="1649862007572" timestamp="5266801" />
  <Command __id="2271" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:27:54 EDT 2022" starttimestamp="1649862007572" timestamp="5267375" />
  <Command __id="2272" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:27:55 EDT 2022" starttimestamp="1649862007572" timestamp="5267470" />
  <Command __id="2273" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:27:55 EDT 2022" starttimestamp="1649862007572" timestamp="5267503" />
  <Command __id="2259" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:27:50 EDT 2022" docASTNodeCount="134" docActiveCodeLength="923" docExpressionCount="86" docLength="1033" projectName="A6" starttimestamp="1649862007572" timestamp="5262728">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2265" _type="Replace" date="Wed Apr 13 12:27:54 EDT 2022" docASTNodeCount="238" docActiveCodeLength="1703" docExpressionCount="145" docLength="1971" endLine="26" insertionLength="940" int_docASTNodeCount="134" int_docActiveCodeLength="921" int_docExpressionCount="86" int_docLength="1031" length="2" offset="751" startLine="26" starttimestamp="1649862007572" timestamp="5266633">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();
			List<SocketChannel> socketList = server.getSocketList();
			SocketChannel currentSocket = server.getSocketChannel();
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			// Echo recieve message to all clients (except original message sender)
			for (SocketChannel socket : socketList) {
				if (!socket.equals(currentSocket)) {
					nioManager.write(socket, originalMessage, server);
				}
			}
		
		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2266" _type="Insert" date="Wed Apr 13 12:27:54 EDT 2022" docASTNodeCount="252" docActiveCodeLength="1776" docExpressionCount="157" docLength="2044" length="73" offset="91" repeat="4" starttimestamp="1649862007572" timestamp="5266758" timestamp2="5266758">
    <text><![CDATA[
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;]]></text>
  </DocumentChange>
  <Command __id="2275" _type="PauseCommand" date="Wed Apr 13 12:28:03 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5276317">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8814]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2276" _type="MoveCaretCommand" caretOffset="2699" date="Wed Apr 13 12:28:04 EDT 2022" docOffset="2699" starttimestamp="1649862007572" timestamp="5276491" />
  <Command __id="2278" _type="PauseCommand" date="Wed Apr 13 12:28:22 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="5295202">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[18711]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2277" _type="SelectTextCommand" caretOffset="2997" date="Wed Apr 13 12:28:22 EDT 2022" end="3001" start="2997" starttimestamp="1649862007572" timestamp="5295202" />
  <Command __id="2279" _type="SelectTextCommand" caretOffset="2997" date="Wed Apr 13 12:28:22 EDT 2022" end="3001" start="2997" starttimestamp="1649862007572" timestamp="5295202" />
  <Command __id="2281" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5295546" timestamp2="5295546">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="2282" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5295546" timestamp2="5295546">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="2284" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5295800" timestamp2="5295800">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2285" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5295800" timestamp2="5295800">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2287" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5295897" timestamp2="5295897">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2288" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5295897" timestamp2="5295897">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2290" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5296121" timestamp2="5296121">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2291" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5296121" timestamp2="5296121">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2293" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5296259" timestamp2="5296259">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2294" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5296259" timestamp2="5296259">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2296" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5296413" timestamp2="5296413">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2297" _type="InsertStringCommand" date="Wed Apr 13 12:28:23 EDT 2022" starttimestamp="1649862007572" timestamp="5296413" timestamp2="5296413">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2299" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5296605" timestamp2="5296605">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2300" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5296605" timestamp2="5296605">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2302" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5296869" timestamp2="5296869">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="2303" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5296869" timestamp2="5296869">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="2305" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5297092" timestamp2="5297092">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2306" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5297092" timestamp2="5297092">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2308" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5297149" timestamp2="5297149">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2309" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5297149" timestamp2="5297149">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2311" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5297313" timestamp2="5297313">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2312" _type="InsertStringCommand" date="Wed Apr 13 12:28:24 EDT 2022" starttimestamp="1649862007572" timestamp="5297313" timestamp2="5297313">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2314" _type="InsertStringCommand" date="Wed Apr 13 12:28:25 EDT 2022" starttimestamp="1649862007572" timestamp="5297438" timestamp2="5297438">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2315" _type="InsertStringCommand" date="Wed Apr 13 12:28:25 EDT 2022" starttimestamp="1649862007572" timestamp="5297438" timestamp2="5297438">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2317" _type="InsertStringCommand" date="Wed Apr 13 12:28:25 EDT 2022" starttimestamp="1649862007572" timestamp="5297508" timestamp2="5297508">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2318" _type="InsertStringCommand" date="Wed Apr 13 12:28:25 EDT 2022" starttimestamp="1649862007572" timestamp="5297508" timestamp2="5297508">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2320" _type="PauseCommand" date="Wed Apr 13 12:28:26 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5298656">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1148]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2319" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:28:26 EDT 2022" starttimestamp="1649862007572" timestamp="5298656" />
  <Command __id="2321" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:28:26 EDT 2022" starttimestamp="1649862007572" timestamp="5298757" />
  <Command __id="2322" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:28:26 EDT 2022" starttimestamp="1649862007572" timestamp="5298826" />
  <Command __id="2324" _type="PauseCommand" date="Wed Apr 13 12:28:30 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5302525">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3699]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2323" _type="SelectTextCommand" caretOffset="3124" date="Wed Apr 13 12:28:30 EDT 2022" end="3129" start="3124" starttimestamp="1649862007572" timestamp="5302525" />
  <Command __id="2325" _type="SelectTextCommand" caretOffset="3124" date="Wed Apr 13 12:28:30 EDT 2022" end="3129" start="3124" starttimestamp="1649862007572" timestamp="5302525" />
  <Command __id="2327" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:28:30 EDT 2022" starttimestamp="1649862007572" timestamp="5302992" />
  <Command __id="2328" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 12:28:30 EDT 2022" starttimestamp="1649862007572" timestamp="5302992" />
  <Command __id="2330" _type="InsertStringCommand" date="Wed Apr 13 12:28:30 EDT 2022" starttimestamp="1649862007572" timestamp="5303209" timestamp2="5303209">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2331" _type="InsertStringCommand" date="Wed Apr 13 12:28:30 EDT 2022" starttimestamp="1649862007572" timestamp="5303209" timestamp2="5303209">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2333" _type="InsertStringCommand" date="Wed Apr 13 12:28:30 EDT 2022" starttimestamp="1649862007572" timestamp="5303344" timestamp2="5303344">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2334" _type="InsertStringCommand" date="Wed Apr 13 12:28:30 EDT 2022" starttimestamp="1649862007572" timestamp="5303344" timestamp2="5303344">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2336" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303471" timestamp2="5303471">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2337" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303471" timestamp2="5303471">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2339" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303569" timestamp2="5303569">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2340" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303569" timestamp2="5303569">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2342" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303665" timestamp2="5303665">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2343" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303665" timestamp2="5303665">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2345" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303806" timestamp2="5303806">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2346" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303806" timestamp2="5303806">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2348" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303942" timestamp2="5303942">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2349" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5303942" timestamp2="5303942">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2351" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5304196" timestamp2="5304196">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2352" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5304196" timestamp2="5304196">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2354" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5304386" timestamp2="5304386">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2355" _type="InsertStringCommand" date="Wed Apr 13 12:28:31 EDT 2022" starttimestamp="1649862007572" timestamp="5304386" timestamp2="5304386">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2357" _type="InsertStringCommand" date="Wed Apr 13 12:28:32 EDT 2022" starttimestamp="1649862007572" timestamp="5304459" timestamp2="5304459">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2358" _type="InsertStringCommand" date="Wed Apr 13 12:28:32 EDT 2022" starttimestamp="1649862007572" timestamp="5304459" timestamp2="5304459">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2360" _type="InsertStringCommand" date="Wed Apr 13 12:28:32 EDT 2022" starttimestamp="1649862007572" timestamp="5304623" timestamp2="5304623">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2361" _type="InsertStringCommand" date="Wed Apr 13 12:28:32 EDT 2022" starttimestamp="1649862007572" timestamp="5304631" timestamp2="5304631">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2362" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:28:32 EDT 2022" starttimestamp="1649862007572" timestamp="5305128" />
  <Command __id="2363" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:28:32 EDT 2022" starttimestamp="1649862007572" timestamp="5305221" />
  <Command __id="2364" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:28:32 EDT 2022" starttimestamp="1649862007572" timestamp="5305289" />
  <Command __id="2366" _type="PauseCommand" date="Wed Apr 13 12:28:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5309807">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4518]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2365" _type="SelectTextCommand" caretOffset="3247" date="Wed Apr 13 12:28:37 EDT 2022" end="3251" start="3247" starttimestamp="1649862007572" timestamp="5309807" />
  <Command __id="2367" _type="SelectTextCommand" caretOffset="3247" date="Wed Apr 13 12:28:37 EDT 2022" end="3251" start="3247" starttimestamp="1649862007572" timestamp="5309807" />
  <Command __id="2369" _type="InsertStringCommand" date="Wed Apr 13 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="5310018" timestamp2="5310018">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2370" _type="InsertStringCommand" date="Wed Apr 13 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="5310018" timestamp2="5310018">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2372" _type="InsertStringCommand" date="Wed Apr 13 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="5310169" timestamp2="5310169">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2373" _type="InsertStringCommand" date="Wed Apr 13 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="5310169" timestamp2="5310169">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2375" _type="InsertStringCommand" date="Wed Apr 13 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="5310301" timestamp2="5310301">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2376" _type="InsertStringCommand" date="Wed Apr 13 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="5310301" timestamp2="5310301">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2378" _type="InsertStringCommand" date="Wed Apr 13 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="5310388" timestamp2="5310388">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2379" _type="InsertStringCommand" date="Wed Apr 13 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="5310388" timestamp2="5310388">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2381" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5310541" timestamp2="5310541">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2382" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5310541" timestamp2="5310541">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2384" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5310693" timestamp2="5310693">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2385" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5310693" timestamp2="5310693">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2387" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5311101" timestamp2="5311101">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2388" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5311101" timestamp2="5311101">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2390" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5311278" timestamp2="5311278">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2391" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5311278" timestamp2="5311278">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2393" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5311335" timestamp2="5311335">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2394" _type="InsertStringCommand" date="Wed Apr 13 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="5311335" timestamp2="5311335">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2396" _type="InsertStringCommand" date="Wed Apr 13 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="5311518" timestamp2="5311518">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2397" _type="InsertStringCommand" date="Wed Apr 13 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="5311518" timestamp2="5311518">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2399" _type="InsertStringCommand" date="Wed Apr 13 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="5311622" timestamp2="5311622">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2400" _type="InsertStringCommand" date="Wed Apr 13 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="5311622" timestamp2="5311622">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2402" _type="InsertStringCommand" date="Wed Apr 13 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="5311703" timestamp2="5311703">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2403" _type="InsertStringCommand" date="Wed Apr 13 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="5311703" timestamp2="5311703">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2405" _type="InsertStringCommand" date="Wed Apr 13 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="5311777" timestamp2="5311777">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2406" _type="InsertStringCommand" date="Wed Apr 13 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="5311777" timestamp2="5311777">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2407" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:28:40 EDT 2022" starttimestamp="1649862007572" timestamp="5312625" />
  <Command __id="2408" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:28:40 EDT 2022" starttimestamp="1649862007572" timestamp="5312723" />
  <Command __id="2409" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:28:40 EDT 2022" starttimestamp="1649862007572" timestamp="5312782" />
  <Command __id="2411" _type="PauseCommand" date="Wed Apr 13 12:28:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5322380">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9598]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2410" _type="SelectTextCommand" caretOffset="1148" date="Wed Apr 13 12:28:49 EDT 2022" end="1161" start="1148" starttimestamp="1649862007572" timestamp="5322380" />
  <Command __id="2412" _type="SelectTextCommand" caretOffset="1148" date="Wed Apr 13 12:28:49 EDT 2022" end="1161" start="1148" starttimestamp="1649862007572" timestamp="5322380" />
  <Command __id="2413" _type="CopyCommand" date="Wed Apr 13 12:28:50 EDT 2022" starttimestamp="1649862007572" timestamp="5322553" />
  <Command __id="2415" _type="PauseCommand" date="Wed Apr 13 12:28:51 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="5324024">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1471]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2414" _type="MoveCaretCommand" caretOffset="1235" date="Wed Apr 13 12:28:51 EDT 2022" docOffset="1235" starttimestamp="1649862007572" timestamp="5324024" />
  <Command __id="2416" _type="MoveCaretCommand" caretOffset="1235" date="Wed Apr 13 12:28:51 EDT 2022" docOffset="1235" starttimestamp="1649862007572" timestamp="5324024" />
  <Command __id="2418" _type="PauseCommand" date="Wed Apr 13 12:28:54 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5326824">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2800]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2417" _type="SelectTextCommand" caretOffset="3247" date="Wed Apr 13 12:28:54 EDT 2022" end="3260" start="3247" starttimestamp="1649862007572" timestamp="5326824" />
  <Command __id="2419" _type="SelectTextCommand" caretOffset="3247" date="Wed Apr 13 12:28:54 EDT 2022" end="3260" start="3247" starttimestamp="1649862007572" timestamp="5326824" />
  <Command __id="2421" _type="PasteCommand" date="Wed Apr 13 12:28:54 EDT 2022" starttimestamp="1649862007572" timestamp="5326937" />
  <Command __id="2422" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 12:28:54 EDT 2022" starttimestamp="1649862007572" timestamp="5327373" />
  <Command __id="2423" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:28:55 EDT 2022" starttimestamp="1649862007572" timestamp="5327474" />
  <Command __id="2424" _type="EclipseCommand" commandID="" date="Wed Apr 13 12:28:55 EDT 2022" starttimestamp="1649862007572" timestamp="5327506" />
  <Command __id="2274" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:28:03 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2958" docExpressionCount="278" docLength="3248" projectName="A6" starttimestamp="1649862007572" timestamp="5276317">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return null;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2280" _type="Replace" date="Wed Apr 13 12:28:23 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2955" docExpressionCount="278" docLength="3245" endLine="91" insertionLength="1" int_docASTNodeCount="423" int_docActiveCodeLength="2954" int_docExpressionCount="277" int_docLength="3244" length="4" offset="2997" startLine="91" starttimestamp="1649862007572" timestamp="5295538">
    <deletedText><![CDATA[null]]></deletedText>
    <insertedText><![CDATA[b]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2283" _type="Insert" date="Wed Apr 13 12:28:23 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2967" docExpressionCount="278" docLength="3257" length="12" offset="2998" repeat="12" starttimestamp="1649862007572" timestamp="5295791" timestamp2="5297508">
    <text><![CDATA[oundedBuffer]]></text>
  </DocumentChange>
  <DocumentChange __id="2326" _type="Delete" date="Wed Apr 13 12:28:30 EDT 2022" docASTNodeCount="423" docActiveCodeLength="2962" docExpressionCount="277" docLength="3252" endLine="97" length="5" offset="3124" startLine="97" starttimestamp="1649862007572" timestamp="5302980">
    <text><![CDATA[ null]]></text>
  </DocumentChange>
  <DocumentChange __id="2329" _type="Insert" date="Wed Apr 13 12:28:30 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2973" docExpressionCount="278" docLength="3263" length="11" offset="3124" repeat="11" starttimestamp="1649862007572" timestamp="5303205" timestamp2="5304623">
    <text><![CDATA[ socketList]]></text>
  </DocumentChange>
  <DocumentChange __id="2368" _type="Replace" date="Wed Apr 13 12:28:37 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2970" docExpressionCount="278" docLength="3260" endLine="103" insertionLength="1" int_docASTNodeCount="423" int_docActiveCodeLength="2969" int_docExpressionCount="277" int_docLength="3259" length="4" offset="3247" startLine="103" starttimestamp="1649862007572" timestamp="5310010">
    <deletedText><![CDATA[null]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2371" _type="Insert" date="Wed Apr 13 12:28:37 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" length="12" offset="3248" repeat="12" starttimestamp="1649862007572" timestamp="5310161" timestamp2="5311769">
    <text><![CDATA[ocketChannel]]></text>
  </DocumentChange>
  <DocumentChange __id="2420" _type="Replace" date="Wed Apr 13 12:28:54 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" endLine="103" insertionLength="13" int_docASTNodeCount="423" int_docActiveCodeLength="2969" int_docExpressionCount="277" int_docLength="3259" length="13" offset="3247" startLine="103" starttimestamp="1649862007572" timestamp="5326921">
    <deletedText><![CDATA[socketChannel]]></deletedText>
    <insertedText><![CDATA[currentSocket]]></insertedText>
  </DocumentChange>
  <Command __id="2426" _type="PauseCommand" date="Wed Apr 13 12:29:24 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="5357395">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[29889]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2427" _type="MoveCaretCommand" caretOffset="1404" date="Wed Apr 13 12:29:25 EDT 2022" docOffset="1764" starttimestamp="1649862007572" timestamp="5357606" />
  <Command __id="2425" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:29:24 EDT 2022" docASTNodeCount="252" docActiveCodeLength="1776" docExpressionCount="157" docLength="2044" projectName="A6" starttimestamp="1649862007572" timestamp="5357395">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;"), Diff(INSERT,"¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;"), Diff(EQUAL,"¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		"), Diff(INSERT,"while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.NIOManagerPrintServer;
import server.remote.ServerRemoteObjectNIO;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})
public class ServerReadThread implements ReadThreadInterface{
	
	final ServerRemoteObjectNIO server;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ServerReadThread (final ServerRemoteObjectNIO aServer) {
		server = aServer;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();
			List<SocketChannel> socketList = server.getSocketList();
			SocketChannel currentSocket = server.getSocketChannel();
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			// Echo recieve message to all clients (except original message sender)
			for (SocketChannel socket : socketList) {
				if (!socket.equals(currentSocket)) {
					nioManager.write(socket, originalMessage, server);
				}
			}
		
		}
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}


}
]]></snapshot>
  </Command>
  <Command __id="2429" _type="PauseCommand" date="Wed Apr 13 12:29:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5361029">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3423]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2430" _type="SelectTextCommand" caretOffset="387" date="Wed Apr 13 12:29:28 EDT 2022" end="539" start="387" starttimestamp="1649862007572" timestamp="5361267" />
  <Command __id="2428" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:29:28 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="5361029">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2432" _type="PauseCommand" date="Wed Apr 13 12:29:33 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5366407">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5140]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2433" _type="SelectTextCommand" caretOffset="2778" date="Wed Apr 13 12:29:34 EDT 2022" end="2799" start="2778" starttimestamp="1649862007572" timestamp="5366804" />
  <Command __id="2431" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:29:33 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="5366407">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2435" _type="PauseCommand" date="Wed Apr 13 12:29:36 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="5368897">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2093]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2437" _type="SelectTextCommand" caretOffset="387" date="Wed Apr 13 12:29:36 EDT 2022" end="539" start="387" starttimestamp="1649862007572" timestamp="5369302" />
  <Command __id="2438" _type="SelectTextCommand" caretOffset="2778" date="Wed Apr 13 12:29:36 EDT 2022" end="2799" start="2778" starttimestamp="1649862007572" timestamp="5369304" />
  <Command __id="2434" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:29:36 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="5368897">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2436" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:29:36 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="5368955">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2440" _type="PauseCommand" date="Wed Apr 13 12:29:44 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="5376787">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7483]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2441" _type="MoveCaretCommand" caretOffset="3260" date="Wed Apr 13 12:29:44 EDT 2022" docOffset="3260" starttimestamp="1649862007572" timestamp="5376976" />
  <Command __id="2443" _type="PauseCommand" date="Wed Apr 13 12:30:00 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="5392452">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15476]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2442" _type="ShellCommand" date="Wed Apr 13 12:30:00 EDT 2022" starttimestamp="1649862007572" timestamp="5392452" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2445" _type="PauseCommand" date="Wed Apr 13 13:37:37 EDT 2022" range=">1h" starttimestamp="1649862007572" timestamp="9449884">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4057432]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2444" _type="ShellCommand" date="Wed Apr 13 13:37:37 EDT 2022" starttimestamp="1649862007572" timestamp="9449884" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2439" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 12:29:44 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" projectName="A6" starttimestamp="1649862007572" timestamp="5376787">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return "), Diff(DELETE,"null"), Diff(INSERT,"boundedBuffer"), Diff(EQUAL,";¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return "), Diff(DELETE,"null"), Diff(INSERT,"socketList"), Diff(EQUAL,";¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return "), Diff(DELETE,"null"), Diff(INSERT,"currentSocket"), Diff(EQUAL,";¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.port.nio.SocketChannelBound;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}

}
]]></snapshot>
  </Command>
  <Command __id="2447" _type="PauseCommand" date="Wed Apr 13 13:38:29 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="9502314">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[52430]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2448" _type="SelectTextCommand" caretOffset="2778" date="Wed Apr 13 13:38:30 EDT 2022" end="2799" start="2778" starttimestamp="1649862007572" timestamp="9502518" />
  <Command __id="2446" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:38:29 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="9502314">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2450" _type="PauseCommand" date="Wed Apr 13 13:38:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9506141">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3623]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2451" _type="SelectTextCommand" caretOffset="387" date="Wed Apr 13 13:38:33 EDT 2022" end="539" start="387" starttimestamp="1649862007572" timestamp="9506372" />
  <Command __id="2453" _type="PauseCommand" date="Wed Apr 13 13:38:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9509726">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3354]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2452" _type="MoveCaretCommand" caretOffset="327" date="Wed Apr 13 13:38:37 EDT 2022" docOffset="1619" starttimestamp="1649862007572" timestamp="9509726" />
  <Command __id="2454" _type="MoveCaretCommand" caretOffset="327" date="Wed Apr 13 13:38:37 EDT 2022" docOffset="1619" starttimestamp="1649862007572" timestamp="9509726" />
  <Command __id="2449" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:38:33 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="9506141">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2456" _type="PauseCommand" date="Wed Apr 13 13:39:03 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="9535926">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[26200]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2457" _type="MoveCaretCommand" caretOffset="3260" date="Wed Apr 13 13:39:03 EDT 2022" docOffset="3260" starttimestamp="1649862007572" timestamp="9536135" />
  <Command __id="2455" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:39:03 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" projectName="A6" starttimestamp="1649862007572" timestamp="9535926">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2459" _type="PauseCommand" date="Wed Apr 13 13:39:14 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="9546511">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10376]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2460" _type="SelectTextCommand" caretOffset="2778" date="Wed Apr 13 13:39:14 EDT 2022" end="2799" start="2778" starttimestamp="1649862007572" timestamp="9546686" />
  <Command __id="2461" _type="BalloonCommand" date="Wed Apr 13 13:39:14 EDT 2022" message="*******************************************
Worked 6 minutes(fixed)/8 minutes(context based) from
Wed Apr 13 12:23:22 EDT 2022 to Wed Apr 13 13:39:14 EDT 2022
Edited 1 Projects: 
	A6
Edited 2 Files: 
	C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java
Number of insert: 203
Number of delete: 22
" starttimestamp="1649862007572" timestamp="9546728">
    <fineGrainedWorkTime><![CDATA[8]]></fineGrainedWorkTime>
    <insert><![CDATA[203]]></insert>
    <startTime><![CDATA[1649867002978]]></startTime>
    <endTime><![CDATA[1649871554258]]></endTime>
    <workTime><![CDATA[6]]></workTime>
    <delete><![CDATA[22]]></delete>
  </Command>
  <Command __id="2458" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:39:14 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="9546511">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2463" _type="PauseCommand" date="Wed Apr 13 13:39:17 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9549547">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[2819]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2464" _type="MoveCaretCommand" caretOffset="1619" date="Wed Apr 13 13:39:17 EDT 2022" docOffset="1619" starttimestamp="1649862007572" timestamp="9549785" />
  <Command __id="2462" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:39:17 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="9549547">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2466" _type="PauseCommand" date="Wed Apr 13 13:39:31 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="9563660">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13875]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2467" _type="MoveCaretCommand" caretOffset="1750" date="Wed Apr 13 13:39:31 EDT 2022" docOffset="1750" starttimestamp="1649862007572" timestamp="9563817" />
  <Command __id="2469" _type="PauseCommand" date="Wed Apr 13 13:39:44 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="9577057">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13240]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2468" _type="MoveCaretCommand" caretOffset="1740" date="Wed Apr 13 13:39:44 EDT 2022" docOffset="1740" starttimestamp="1649862007572" timestamp="9577057" />
  <Command __id="2471" _type="InsertStringCommand" date="Wed Apr 13 13:39:44 EDT 2022" starttimestamp="1649862007572" timestamp="9577385" timestamp2="9577385">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2465" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:39:31 EDT 2022" docASTNodeCount="298" docActiveCodeLength="1995" docExpressionCount="186" docLength="2296" projectName="A6" starttimestamp="1649862007572" timestamp="9563660">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2470" _type="Insert" date="Wed Apr 13 13:39:44 EDT 2022" docASTNodeCount="298" docActiveCodeLength="1999" docExpressionCount="186" docLength="2300" length="4" offset="1740" starttimestamp="1649862007572" timestamp="9577354">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="2473" _type="PauseCommand" date="Wed Apr 13 13:39:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9579436">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2051]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="2472" _type="Insert" date="Wed Apr 13 13:39:47 EDT 2022" docASTNodeCount="300" docActiveCodeLength="2000" docExpressionCount="187" docLength="2301" length="1" offset="1744" starttimestamp="1649862007572" timestamp="9579436">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="2474" _type="InsertStringCommand" date="Wed Apr 13 13:39:47 EDT 2022" starttimestamp="1649862007572" timestamp="9579447" timestamp2="9579447">
    <data><![CDATA[y]]></data>
  </Command>
  <DocumentChange __id="2475" _type="Delete" date="Wed Apr 13 13:39:47 EDT 2022" docASTNodeCount="298" docActiveCodeLength="1999" docExpressionCount="186" docLength="2300" endLine="56" length="1" offset="1744" startLine="56" starttimestamp="1649862007572" timestamp="9579750">
    <text><![CDATA[y]]></text>
  </DocumentChange>
  <Command __id="2476" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:39:47 EDT 2022" starttimestamp="1649862007572" timestamp="9579750" />
  <DocumentChange __id="2477" _type="Insert" date="Wed Apr 13 13:39:47 EDT 2022" docASTNodeCount="302" docActiveCodeLength="2008" docExpressionCount="189" docLength="2309" length="9" offset="1744" repeat="9" starttimestamp="1649862007572" timestamp="9579963" timestamp2="9581605">
    <text><![CDATA[System.ou]]></text>
  </DocumentChange>
  <Command __id="2478" _type="InsertStringCommand" date="Wed Apr 13 13:39:47 EDT 2022" starttimestamp="1649862007572" timestamp="9579963" timestamp2="9579963">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2480" _type="InsertStringCommand" date="Wed Apr 13 13:39:47 EDT 2022" starttimestamp="1649862007572" timestamp="9580295" timestamp2="9580295">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2482" _type="InsertStringCommand" date="Wed Apr 13 13:39:48 EDT 2022" starttimestamp="1649862007572" timestamp="9580504" timestamp2="9580504">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2484" _type="InsertStringCommand" date="Wed Apr 13 13:39:48 EDT 2022" starttimestamp="1649862007572" timestamp="9580646" timestamp2="9580646">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2486" _type="InsertStringCommand" date="Wed Apr 13 13:39:48 EDT 2022" starttimestamp="1649862007572" timestamp="9580773" timestamp2="9580773">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2488" _type="InsertStringCommand" date="Wed Apr 13 13:39:48 EDT 2022" starttimestamp="1649862007572" timestamp="9580868" timestamp2="9580868">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2490" _type="InsertStringCommand" date="Wed Apr 13 13:39:48 EDT 2022" starttimestamp="1649862007572" timestamp="9581104" timestamp2="9581104">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2491" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 13:39:48 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="9581119" />
  <Command __id="2494" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 13:39:49 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="9581987" />
  <DocumentChange __id="2495" _type="Replace" date="Wed Apr 13 13:39:49 EDT 2022" docASTNodeCount="302" docActiveCodeLength="2009" docExpressionCount="189" docLength="2310" endLine="56" insertionLength="3" int_docASTNodeCount="300" int_docActiveCodeLength="2006" int_docExpressionCount="187" int_docLength="2307" length="2" offset="1751" startLine="56" starttimestamp="1649862007572" timestamp="9581993">
    <deletedText><![CDATA[ou]]></deletedText>
    <insertedText><![CDATA[out]]></insertedText>
  </DocumentChange>
  <Command __id="2496" _type="InsertStringCommand" date="Wed Apr 13 13:39:49 EDT 2022" starttimestamp="1649862007572" timestamp="9582002" timestamp2="9582002">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2498" _type="InsertStringCommand" date="Wed Apr 13 13:39:49 EDT 2022" starttimestamp="1649862007572" timestamp="9582284" timestamp2="9582284">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2499" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 13:39:49 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="9582284" />
  <Command __id="2510" _type="PauseCommand" date="Wed Apr 13 13:39:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9585022">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2738]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2509" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 13:39:52 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="9585022" />
  <Command __id="2512" _type="InsertStringCommand" date="Wed Apr 13 13:39:53 EDT 2022" starttimestamp="1649862007572" timestamp="9585478" timestamp2="9585478">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="2514" _type="InsertStringCommand" date="Wed Apr 13 13:39:53 EDT 2022" starttimestamp="1649862007572" timestamp="9585651" timestamp2="9585651">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2516" _type="InsertStringCommand" date="Wed Apr 13 13:39:53 EDT 2022" starttimestamp="1649862007572" timestamp="9585733" timestamp2="9585733">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="2518" _type="InsertStringCommand" date="Wed Apr 13 13:39:53 EDT 2022" starttimestamp="1649862007572" timestamp="9585864" timestamp2="9585864">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2520" _type="InsertStringCommand" date="Wed Apr 13 13:39:53 EDT 2022" starttimestamp="1649862007572" timestamp="9586292" timestamp2="9586292">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2522" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9586465" timestamp2="9586465">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2524" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9586527" timestamp2="9586527">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2526" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9586673" timestamp2="9586673">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2528" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9586806" timestamp2="9586806">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2530" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9586905" timestamp2="9586905">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2532" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9587061" timestamp2="9587061">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2534" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9587220" timestamp2="9587220">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2536" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9587325" timestamp2="9587325">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2538" _type="InsertStringCommand" date="Wed Apr 13 13:39:54 EDT 2022" starttimestamp="1649862007572" timestamp="9587371" timestamp2="9587371">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2540" _type="InsertStringCommand" date="Wed Apr 13 13:39:55 EDT 2022" starttimestamp="1649862007572" timestamp="9587513" timestamp2="9587513">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2542" _type="InsertStringCommand" date="Wed Apr 13 13:39:55 EDT 2022" starttimestamp="1649862007572" timestamp="9587609" timestamp2="9587609">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2544" _type="InsertStringCommand" date="Wed Apr 13 13:39:55 EDT 2022" starttimestamp="1649862007572" timestamp="9587824" timestamp2="9587824">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2546" _type="InsertStringCommand" date="Wed Apr 13 13:39:55 EDT 2022" starttimestamp="1649862007572" timestamp="9588000" timestamp2="9588000">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2548" _type="InsertStringCommand" date="Wed Apr 13 13:39:55 EDT 2022" starttimestamp="1649862007572" timestamp="9588234" timestamp2="9588234">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2550" _type="InsertStringCommand" date="Wed Apr 13 13:39:56 EDT 2022" starttimestamp="1649862007572" timestamp="9588531" timestamp2="9588531">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2552" _type="InsertStringCommand" date="Wed Apr 13 13:39:56 EDT 2022" starttimestamp="1649862007572" timestamp="9588734" timestamp2="9588734">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2554" _type="InsertStringCommand" date="Wed Apr 13 13:39:56 EDT 2022" starttimestamp="1649862007572" timestamp="9588803" timestamp2="9588803">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2556" _type="InsertStringCommand" date="Wed Apr 13 13:39:56 EDT 2022" starttimestamp="1649862007572" timestamp="9588902" timestamp2="9588902">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2558" _type="InsertStringCommand" date="Wed Apr 13 13:39:56 EDT 2022" starttimestamp="1649862007572" timestamp="9588964" timestamp2="9588964">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2560" _type="InsertStringCommand" date="Wed Apr 13 13:39:56 EDT 2022" starttimestamp="1649862007572" timestamp="9589388" timestamp2="9589388">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2562" _type="InsertStringCommand" date="Wed Apr 13 13:39:57 EDT 2022" starttimestamp="1649862007572" timestamp="9589537" timestamp2="9589537">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2564" _type="InsertStringCommand" date="Wed Apr 13 13:39:57 EDT 2022" starttimestamp="1649862007572" timestamp="9589620" timestamp2="9589620">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2566" _type="InsertStringCommand" date="Wed Apr 13 13:39:57 EDT 2022" starttimestamp="1649862007572" timestamp="9589865" timestamp2="9589865">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="2568" _type="InsertStringCommand" date="Wed Apr 13 13:39:57 EDT 2022" starttimestamp="1649862007572" timestamp="9590011" timestamp2="9590011">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2570" _type="InsertStringCommand" date="Wed Apr 13 13:39:57 EDT 2022" starttimestamp="1649862007572" timestamp="9590084" timestamp2="9590084">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2572" _type="InsertStringCommand" date="Wed Apr 13 13:39:58 EDT 2022" starttimestamp="1649862007572" timestamp="9590458" timestamp2="9590458">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2574" _type="InsertStringCommand" date="Wed Apr 13 13:39:58 EDT 2022" starttimestamp="1649862007572" timestamp="9590667" timestamp2="9590667">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2576" _type="InsertStringCommand" date="Wed Apr 13 13:39:58 EDT 2022" starttimestamp="1649862007572" timestamp="9590823" timestamp2="9590823">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="2577" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 13:39:58 EDT 2022" starttimestamp="1649862007572" timestamp="9591198" />
  <Command __id="2578" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 13:39:58 EDT 2022" starttimestamp="1649862007572" timestamp="9591355" />
  <Command __id="2580" _type="InsertStringCommand" date="Wed Apr 13 13:39:59 EDT 2022" starttimestamp="1649862007572" timestamp="9591714" timestamp2="9591714">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2581" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:39:59 EDT 2022" starttimestamp="1649862007572" timestamp="9592122" />
  <Command __id="2582" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:39:59 EDT 2022" starttimestamp="1649862007572" timestamp="9592224" />
  <Command __id="2583" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:39:59 EDT 2022" starttimestamp="1649862007572" timestamp="9592262" />
  <DocumentChange __id="2497" _type="Insert" date="Wed Apr 13 13:39:49 EDT 2022" docASTNodeCount="305" docActiveCodeLength="2055" docExpressionCount="192" docLength="2356" length="46" offset="1754" repeat="44" starttimestamp="1649862007572" timestamp="9582268" timestamp2="9591699">
    <text><![CDATA[.println("New Client connected to server!!!");]]></text>
  </DocumentChange>
  <Command __id="2585" _type="PauseCommand" date="Wed Apr 13 13:40:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9593527">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1265]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2586" _type="MoveCaretCommand" caretOffset="1619" date="Wed Apr 13 13:40:01 EDT 2022" docOffset="1619" starttimestamp="1649862007572" timestamp="9593898" />
  <Command __id="2588" _type="PauseCommand" date="Wed Apr 13 13:40:07 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9599619">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5721]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2587" _type="SelectTextCommand" caretOffset="3273" date="Wed Apr 13 13:40:07 EDT 2022" end="3322" start="3273" starttimestamp="1649862007572" timestamp="9599619" />
  <Command __id="2589" _type="SelectTextCommand" caretOffset="3273" date="Wed Apr 13 13:40:07 EDT 2022" end="3322" start="3273" starttimestamp="1649862007572" timestamp="9599619" />
  <Command __id="2590" _type="CopyCommand" date="Wed Apr 13 13:40:07 EDT 2022" starttimestamp="1649862007572" timestamp="9599828" />
  <Command __id="2584" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:40:01 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="9593527">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2592" _type="PauseCommand" date="Wed Apr 13 13:40:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9601375">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1547]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2593" _type="MoveCaretCommand" caretOffset="1800" date="Wed Apr 13 13:40:09 EDT 2022" docOffset="1800" starttimestamp="1649862007572" timestamp="9601608" />
  <Command __id="2595" _type="PauseCommand" date="Wed Apr 13 13:40:10 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9602635">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1027]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2594" _type="MoveCaretCommand" caretOffset="1740" date="Wed Apr 13 13:40:10 EDT 2022" docOffset="1740" starttimestamp="1649862007572" timestamp="9602635" />
  <Command __id="2597" _type="InsertStringCommand" date="Wed Apr 13 13:40:10 EDT 2022" starttimestamp="1649862007572" timestamp="9602932" timestamp2="9602932">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2599" _type="PasteCommand" date="Wed Apr 13 13:40:10 EDT 2022" starttimestamp="1649862007572" timestamp="9603184" />
  <Command __id="2601" _type="PauseCommand" date="Wed Apr 13 13:40:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9606861">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3677]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2600" _type="SelectTextCommand" caretOffset="1695" date="Wed Apr 13 13:40:14 EDT 2022" end="1699" start="1695" starttimestamp="1649862007572" timestamp="9606861" />
  <Command __id="2603" _type="InsertStringCommand" date="Wed Apr 13 13:40:14 EDT 2022" starttimestamp="1649862007572" timestamp="9606987" timestamp2="9606987">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2605" _type="InsertStringCommand" date="Wed Apr 13 13:40:15 EDT 2022" starttimestamp="1649862007572" timestamp="9607433" timestamp2="9607433">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2607" _type="InsertStringCommand" date="Wed Apr 13 13:40:15 EDT 2022" starttimestamp="1649862007572" timestamp="9607553" timestamp2="9607553">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2609" _type="InsertStringCommand" date="Wed Apr 13 13:40:15 EDT 2022" starttimestamp="1649862007572" timestamp="9607616" timestamp2="9607616">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2611" _type="InsertStringCommand" date="Wed Apr 13 13:40:15 EDT 2022" starttimestamp="1649862007572" timestamp="9607747" timestamp2="9607747">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="2613" _type="InsertStringCommand" date="Wed Apr 13 13:40:15 EDT 2022" starttimestamp="1649862007572" timestamp="9607874" timestamp2="9607874">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2615" _type="InsertStringCommand" date="Wed Apr 13 13:40:15 EDT 2022" starttimestamp="1649862007572" timestamp="9608000" timestamp2="9608000">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2617" _type="InsertStringCommand" date="Wed Apr 13 13:40:16 EDT 2022" starttimestamp="1649862007572" timestamp="9608532" timestamp2="9608532">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2619" _type="InsertStringCommand" date="Wed Apr 13 13:40:16 EDT 2022" starttimestamp="1649862007572" timestamp="9608751" timestamp2="9608751">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2621" _type="InsertStringCommand" date="Wed Apr 13 13:40:16 EDT 2022" starttimestamp="1649862007572" timestamp="9608862" timestamp2="9608862">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2623" _type="InsertStringCommand" date="Wed Apr 13 13:40:16 EDT 2022" starttimestamp="1649862007572" timestamp="9608988" timestamp2="9608988">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2625" _type="InsertStringCommand" date="Wed Apr 13 13:40:16 EDT 2022" starttimestamp="1649862007572" timestamp="9609114" timestamp2="9609114">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2627" _type="InsertStringCommand" date="Wed Apr 13 13:40:16 EDT 2022" starttimestamp="1649862007572" timestamp="9609257" timestamp2="9609257">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2629" _type="InsertStringCommand" date="Wed Apr 13 13:40:16 EDT 2022" starttimestamp="1649862007572" timestamp="9609305" timestamp2="9609305">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2630" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:40:17 EDT 2022" starttimestamp="1649862007572" timestamp="9610026" />
  <Command __id="2631" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:40:17 EDT 2022" starttimestamp="1649862007572" timestamp="9610111" />
  <Command __id="2632" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:40:17 EDT 2022" starttimestamp="1649862007572" timestamp="9610150" />
  <Command __id="2591" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:40:08 EDT 2022" docASTNodeCount="305" docActiveCodeLength="2055" docExpressionCount="192" docLength="2356" projectName="A6" starttimestamp="1649862007572" timestamp="9601375">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel arg0) {¶		// TODO Auto-generated method stub¶		"), Diff(INSERT,"System.out.println("New Client connected to server!!!");¶		"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel arg0) {
		// TODO Auto-generated method stub
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2596" _type="Insert" date="Wed Apr 13 13:40:10 EDT 2022" docASTNodeCount="305" docActiveCodeLength="2059" docExpressionCount="192" docLength="2360" length="4" offset="1740" starttimestamp="1649862007572" timestamp="9602916">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2598" _type="Replace" date="Wed Apr 13 13:40:10 EDT 2022" docASTNodeCount="311" docActiveCodeLength="2108" docExpressionCount="197" docLength="2409" endLine="56" insertionLength="51" int_docASTNodeCount="305" int_docActiveCodeLength="2057" int_docExpressionCount="192" int_docLength="2358" length="2" offset="1742" startLine="56" starttimestamp="1649862007572" timestamp="9603169">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		nioManager.addReadListener(aSocketChannel, this);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2602" _type="Replace" date="Wed Apr 13 13:40:14 EDT 2022" docASTNodeCount="311" docActiveCodeLength="2105" docExpressionCount="197" docLength="2406" endLine="54" insertionLength="1" int_docASTNodeCount="294" int_docActiveCodeLength="2104" int_docExpressionCount="184" int_docLength="2405" length="4" offset="1695" startLine="54" starttimestamp="1649862007572" timestamp="9606972">
    <deletedText><![CDATA[arg0]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2604" _type="Insert" date="Wed Apr 13 13:40:14 EDT 2022" docASTNodeCount="311" docActiveCodeLength="2118" docExpressionCount="197" docLength="2419" length="13" offset="1696" repeat="13" starttimestamp="1649862007572" timestamp="9607423" timestamp2="9609305">
    <text><![CDATA[SocketChannel]]></text>
  </DocumentChange>
  <Command __id="2634" _type="PauseCommand" date="Wed Apr 13 13:40:21 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9614190">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4040]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2635" _type="SelectTextCommand" caretOffset="3273" date="Wed Apr 13 13:40:22 EDT 2022" end="3322" start="3273" starttimestamp="1649862007572" timestamp="9614474" />
  <Command __id="2637" _type="PauseCommand" date="Wed Apr 13 13:40:29 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9622318">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7844]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2636" _type="SelectTextCommand" caretOffset="3749" date="Wed Apr 13 13:40:29 EDT 2022" end="3870" start="3749" starttimestamp="1649862007572" timestamp="9622318" />
  <Command __id="2638" _type="SelectTextCommand" caretOffset="3749" date="Wed Apr 13 13:40:29 EDT 2022" end="3870" start="3749" starttimestamp="1649862007572" timestamp="9622318" />
  <Command __id="2640" _type="PauseCommand" date="Wed Apr 13 13:40:31 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9623779">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1461]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="2639" _type="CopyCommand" date="Wed Apr 13 13:40:31 EDT 2022" starttimestamp="1649862007572" timestamp="9623779" />
  <Command __id="2633" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:40:21 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="9614190">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2642" _type="PauseCommand" date="Wed Apr 13 13:40:32 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9625024">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1245]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2643" _type="MoveCaretCommand" caretOffset="1709" date="Wed Apr 13 13:40:32 EDT 2022" docOffset="1709" starttimestamp="1649862007572" timestamp="9625244" />
  <Command __id="2645" _type="PauseCommand" date="Wed Apr 13 13:40:38 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9630509">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5265]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2644" _type="MoveCaretCommand" caretOffset="2404" date="Wed Apr 13 13:40:38 EDT 2022" docOffset="2404" starttimestamp="1649862007572" timestamp="9630509" />
  <Command __id="2647" _type="InsertStringCommand" date="Wed Apr 13 13:40:38 EDT 2022" starttimestamp="1649862007572" timestamp="9630875" timestamp2="9630875">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2653" _type="PasteCommand" date="Wed Apr 13 13:40:38 EDT 2022" starttimestamp="1649862007572" timestamp="9631374" />
  <Command __id="2655" _type="PauseCommand" date="Wed Apr 13 13:40:41 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9633440">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2066]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2654" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:40:41 EDT 2022" starttimestamp="1649862007572" timestamp="9633440" />
  <Command __id="2656" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:40:41 EDT 2022" starttimestamp="1649862007572" timestamp="9633519" />
  <Command __id="2657" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:40:41 EDT 2022" starttimestamp="1649862007572" timestamp="9633554" />
  <Command __id="2659" _type="PauseCommand" date="Wed Apr 13 13:40:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9637519">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3965]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2658" _type="SelectTextCommand" caretOffset="2395" date="Wed Apr 13 13:40:45 EDT 2022" end="2399" start="2395" starttimestamp="1649862007572" timestamp="9637519" />
  <Command __id="2661" _type="InsertStringCommand" date="Wed Apr 13 13:40:45 EDT 2022" starttimestamp="1649862007572" timestamp="9637648" timestamp2="9637648">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2663" _type="InsertStringCommand" date="Wed Apr 13 13:40:45 EDT 2022" starttimestamp="1649862007572" timestamp="9638168" timestamp2="9638168">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="2665" _type="InsertStringCommand" date="Wed Apr 13 13:40:45 EDT 2022" starttimestamp="1649862007572" timestamp="9638340" timestamp2="9638340">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2667" _type="InsertStringCommand" date="Wed Apr 13 13:40:46 EDT 2022" starttimestamp="1649862007572" timestamp="9638451" timestamp2="9638451">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2669" _type="InsertStringCommand" date="Wed Apr 13 13:40:46 EDT 2022" starttimestamp="1649862007572" timestamp="9638640" timestamp2="9638640">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2671" _type="InsertStringCommand" date="Wed Apr 13 13:40:46 EDT 2022" starttimestamp="1649862007572" timestamp="9638762" timestamp2="9638762">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2673" _type="InsertStringCommand" date="Wed Apr 13 13:40:46 EDT 2022" starttimestamp="1649862007572" timestamp="9638900" timestamp2="9638900">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2675" _type="InsertStringCommand" date="Wed Apr 13 13:40:46 EDT 2022" starttimestamp="1649862007572" timestamp="9638948" timestamp2="9638948">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2677" _type="PauseCommand" date="Wed Apr 13 13:40:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9640594">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1646]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2676" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="9640594" />
  <Command __id="2678" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="9640672" />
  <Command __id="2679" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="9640714" />
  <Command __id="2641" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:40:32 EDT 2022" docASTNodeCount="311" docActiveCodeLength="2118" docExpressionCount="197" docLength="2419" projectName="A6" starttimestamp="1649862007572" timestamp="9625024">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel a"), Diff(DELETE,"rg0"), Diff(INSERT,"SocketChannel"), Diff(EQUAL,") {¶		// TODO Auto-generated method stub¶		"), Diff(INSERT,"nioManager.addReadListener(aSocketChannel, this);¶		"), Diff(EQUAL,"System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2646" _type="Insert" date="Wed Apr 13 13:40:38 EDT 2022" docASTNodeCount="311" docActiveCodeLength="2122" docExpressionCount="197" docLength="2423" length="4" offset="2404" starttimestamp="1649862007572" timestamp="9630859">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2648" _type="Replace" date="Wed Apr 13 13:40:38 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2243" docExpressionCount="210" docLength="2544" endLine="82" insertionLength="123" int_docASTNodeCount="311" int_docActiveCodeLength="2120" int_docExpressionCount="197" int_docLength="2421" length="2" offset="2406" startLine="82" starttimestamp="1649862007572" timestamp="9631158">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2649" _type="Delete" date="Wed Apr 13 13:40:38 EDT 2022" docASTNodeCount="329" docActiveCodeLength="2239" docExpressionCount="210" docLength="2540" endLine="10" length="4" offset="282" startLine="8" starttimestamp="1649862007572" timestamp="9631300">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="2650" _type="Insert" date="Wed Apr 13 13:40:38 EDT 2022" docASTNodeCount="335" docActiveCodeLength="2289" docExpressionCount="215" docLength="2590" length="50" offset="282" repeat="3" starttimestamp="1649862007572" timestamp="9631300" timestamp2="9631300">
    <text><![CDATA[

import assignments.util.MiscAssignmentUtils;
]]></text>
  </DocumentChange>
  <DocumentChange __id="2660" _type="Replace" date="Wed Apr 13 13:40:45 EDT 2022" docASTNodeCount="335" docActiveCodeLength="2286" docExpressionCount="215" docLength="2587" endLine="81" insertionLength="1" int_docASTNodeCount="310" int_docActiveCodeLength="2285" int_docExpressionCount="199" int_docLength="2586" length="4" offset="2395" startLine="81" starttimestamp="1649862007572" timestamp="9637633">
    <deletedText><![CDATA[arg1]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2662" _type="Insert" date="Wed Apr 13 13:40:45 EDT 2022" docASTNodeCount="335" docActiveCodeLength="2293" docExpressionCount="215" docLength="2594" length="7" offset="2396" repeat="7" starttimestamp="1649862007572" timestamp="9638152" timestamp2="9638933">
    <text><![CDATA[Message]]></text>
  </DocumentChange>
  <Command __id="2681" _type="PauseCommand" date="Wed Apr 13 13:40:51 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9643798">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3084]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2682" _type="SelectTextCommand" caretOffset="3749" date="Wed Apr 13 13:40:51 EDT 2022" end="3870" start="3749" starttimestamp="1649862007572" timestamp="9643977" />
  <Command __id="2680" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:40:51 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="9643798">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2684" _type="PauseCommand" date="Wed Apr 13 13:40:59 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9651565">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7588]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2685" _type="MoveCaretCommand" caretOffset="2403" date="Wed Apr 13 13:40:59 EDT 2022" docOffset="2403" starttimestamp="1649862007572" timestamp="9651756" />
  <Command __id="2683" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:40:59 EDT 2022" docASTNodeCount="335" docActiveCodeLength="2293" docExpressionCount="215" docLength="2594" projectName="A6" starttimestamp="1649862007572" timestamp="9651565">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(INSERT,"import assignments.util.MiscAssignmentUtils;¶"), Diff(EQUAL,"import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer a"), Diff(DELETE,"rg1"), Diff(INSERT,"Message"), Diff(EQUAL,", int arg2) {¶		// TODO Auto-generated method stub¶		"), Diff(INSERT,"ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		"), Diff(EQUAL,"¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="2687" _type="PauseCommand" date="Wed Apr 13 13:41:09 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9661639">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9883]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2688" _type="SelectTextCommand" caretOffset="3749" date="Wed Apr 13 13:41:09 EDT 2022" end="3870" start="3749" starttimestamp="1649862007572" timestamp="9661830" />
  <Command __id="2690" _type="PauseCommand" date="Wed Apr 13 13:41:11 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9664292">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2462]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2689" _type="MoveCaretCommand" caretOffset="3985" date="Wed Apr 13 13:41:11 EDT 2022" docOffset="3985" starttimestamp="1649862007572" timestamp="9664292" />
  <Command __id="2691" _type="MoveCaretCommand" caretOffset="3985" date="Wed Apr 13 13:41:11 EDT 2022" docOffset="3985" starttimestamp="1649862007572" timestamp="9664292" />
  <Command __id="2693" _type="InsertStringCommand" date="Wed Apr 13 13:41:12 EDT 2022" starttimestamp="1649862007572" timestamp="9664858" timestamp2="9664858">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2694" _type="InsertStringCommand" date="Wed Apr 13 13:41:12 EDT 2022" starttimestamp="1649862007572" timestamp="9664858" timestamp2="9664858">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2696" _type="InsertStringCommand" date="Wed Apr 13 13:41:13 EDT 2022" starttimestamp="1649862007572" timestamp="9665816" timestamp2="9665816">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2697" _type="InsertStringCommand" date="Wed Apr 13 13:41:13 EDT 2022" starttimestamp="1649862007572" timestamp="9665816" timestamp2="9665816">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2699" _type="InsertStringCommand" date="Wed Apr 13 13:41:13 EDT 2022" starttimestamp="1649862007572" timestamp="9666150" timestamp2="9666150">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2700" _type="InsertStringCommand" date="Wed Apr 13 13:41:13 EDT 2022" starttimestamp="1649862007572" timestamp="9666150" timestamp2="9666150">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2702" _type="InsertStringCommand" date="Wed Apr 13 13:41:13 EDT 2022" starttimestamp="1649862007572" timestamp="9666313" timestamp2="9666313">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="2703" _type="InsertStringCommand" date="Wed Apr 13 13:41:13 EDT 2022" starttimestamp="1649862007572" timestamp="9666314" timestamp2="9666314">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="2705" _type="InsertStringCommand" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9666474" timestamp2="9666474">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2706" _type="InsertStringCommand" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9666474" timestamp2="9666474">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2708" _type="InsertStringCommand" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9666584" timestamp2="9666584">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2709" _type="InsertStringCommand" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9666584" timestamp2="9666584">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2711" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9667079" />
  <Command __id="2712" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9667079" />
  <Command __id="2714" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9667220" />
  <Command __id="2715" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9667220" />
  <Command __id="2717" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9667362" />
  <Command __id="2718" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:14 EDT 2022" starttimestamp="1649862007572" timestamp="9667362" />
  <Command __id="2720" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:15 EDT 2022" starttimestamp="1649862007572" timestamp="9667534" />
  <Command __id="2721" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:15 EDT 2022" starttimestamp="1649862007572" timestamp="9667534" />
  <Command __id="2723" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:15 EDT 2022" starttimestamp="1649862007572" timestamp="9667675" />
  <Command __id="2724" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:41:15 EDT 2022" starttimestamp="1649862007572" timestamp="9667675" />
  <Command __id="2726" _type="PauseCommand" date="Wed Apr 13 13:41:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9670596">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2921]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2725" _type="SelectTextCommand" caretOffset="3990" date="Wed Apr 13 13:41:18 EDT 2022" end="4116" start="3990" starttimestamp="1649862007572" timestamp="9670596" />
  <Command __id="2727" _type="SelectTextCommand" caretOffset="3990" date="Wed Apr 13 13:41:18 EDT 2022" end="4116" start="3990" starttimestamp="1649862007572" timestamp="9670596" />
  <Command __id="2728" _type="CopyCommand" date="Wed Apr 13 13:41:18 EDT 2022" starttimestamp="1649862007572" timestamp="9670820" />
  <Command __id="2686" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:41:09 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3774" docExpressionCount="382" docLength="4118" projectName="A6" starttimestamp="1649862007572" timestamp="9661639">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <DocumentChange __id="2692" _type="Insert" date="Wed Apr 13 13:41:12 EDT 2022" docASTNodeCount="553" docActiveCodeLength="3782" docExpressionCount="384" docLength="4126" length="8" offset="3985" repeat="6" starttimestamp="1649862007572" timestamp="9664858" timestamp2="9666584">
    <text><![CDATA[
	@Over]]></text>
  </DocumentChange>
  <DocumentChange __id="2710" _type="Delete" date="Wed Apr 13 13:41:14 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3777" docExpressionCount="382" docLength="4121" endLine="117" length="5" offset="3988" repeat="5" startLine="117" starttimestamp="1649862007572" timestamp="9667064" timestamp2="9667675">
    <text><![CDATA[@Over]]></text>
  </DocumentChange>
  <Command __id="2730" _type="PauseCommand" date="Wed Apr 13 13:41:25 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9678090">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[7270]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2731" _type="MoveCaretCommand" caretOffset="2403" date="Wed Apr 13 13:41:25 EDT 2022" docOffset="2403" starttimestamp="1649862007572" timestamp="9678269" />
  <Command __id="2733" _type="PauseCommand" date="Wed Apr 13 13:41:29 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9681591">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3322]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2732" _type="MoveCaretCommand" caretOffset="2587" date="Wed Apr 13 13:41:29 EDT 2022" docOffset="2587" starttimestamp="1649862007572" timestamp="9681591" />
  <Command __id="2735" _type="InsertStringCommand" date="Wed Apr 13 13:41:29 EDT 2022" starttimestamp="1649862007572" timestamp="9681843" timestamp2="9681843">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2737" _type="InsertStringCommand" date="Wed Apr 13 13:41:29 EDT 2022" starttimestamp="1649862007572" timestamp="9682095" timestamp2="9682095">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2739" _type="InsertStringCommand" date="Wed Apr 13 13:41:30 EDT 2022" starttimestamp="1649862007572" timestamp="9682568" timestamp2="9682568">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="2741" _type="InsertStringCommand" date="Wed Apr 13 13:41:30 EDT 2022" starttimestamp="1649862007572" timestamp="9682926" timestamp2="9682926">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="2743" _type="InsertStringCommand" date="Wed Apr 13 13:41:30 EDT 2022" starttimestamp="1649862007572" timestamp="9683021" timestamp2="9683021">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="2745" _type="InsertStringCommand" date="Wed Apr 13 13:41:30 EDT 2022" starttimestamp="1649862007572" timestamp="9683193" timestamp2="9683193">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2747" _type="InsertStringCommand" date="Wed Apr 13 13:41:30 EDT 2022" starttimestamp="1649862007572" timestamp="9683312" timestamp2="9683312">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2749" _type="InsertStringCommand" date="Wed Apr 13 13:41:31 EDT 2022" starttimestamp="1649862007572" timestamp="9683499" timestamp2="9683499">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2751" _type="InsertStringCommand" date="Wed Apr 13 13:41:31 EDT 2022" starttimestamp="1649862007572" timestamp="9683640" timestamp2="9683640">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2753" _type="InsertStringCommand" date="Wed Apr 13 13:41:31 EDT 2022" starttimestamp="1649862007572" timestamp="9683782" timestamp2="9683782">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2755" _type="InsertStringCommand" date="Wed Apr 13 13:41:31 EDT 2022" starttimestamp="1649862007572" timestamp="9683907" timestamp2="9683907">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2757" _type="InsertStringCommand" date="Wed Apr 13 13:41:31 EDT 2022" starttimestamp="1649862007572" timestamp="9684159" timestamp2="9684159">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2759" _type="PasteCommand" date="Wed Apr 13 13:41:32 EDT 2022" starttimestamp="1649862007572" timestamp="9684595" />
  <Command __id="2761" _type="PauseCommand" date="Wed Apr 13 13:41:33 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9685738">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1143]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2760" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:41:33 EDT 2022" starttimestamp="1649862007572" timestamp="9685738" />
  <Command __id="2762" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:41:33 EDT 2022" starttimestamp="1649862007572" timestamp="9685831" />
  <Command __id="2763" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:41:33 EDT 2022" starttimestamp="1649862007572" timestamp="9685875" />
  <Command __id="2765" _type="PauseCommand" date="Wed Apr 13 13:41:39 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9692360">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6485]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2775" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:41:42 EDT 2022" starttimestamp="1649862007572" timestamp="9694761" />
  <Command __id="2777" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:41:42 EDT 2022" starttimestamp="1649862007572" timestamp="9694820" />
  <Command __id="2778" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:41:42 EDT 2022" starttimestamp="1649862007572" timestamp="9694914" />
  <Command __id="2729" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:41:25 EDT 2022" docASTNodeCount="335" docActiveCodeLength="2293" docExpressionCount="215" docLength="2594" projectName="A6" starttimestamp="1649862007572" timestamp="9678090">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2734" _type="Insert" date="Wed Apr 13 13:41:29 EDT 2022" docASTNodeCount="335" docActiveCodeLength="2311" docExpressionCount="215" docLength="2612" length="18" offset="2587" repeat="12" starttimestamp="1649862007572" timestamp="9681843" timestamp2="9684143">
    <text><![CDATA[
	
	@Override
	]]></text>
  </DocumentChange>
  <DocumentChange __id="2758" _type="Replace" date="Wed Apr 13 13:41:32 EDT 2022" docASTNodeCount="348" docActiveCodeLength="2402" docExpressionCount="221" docLength="2737" endLine="91" insertionLength="126" int_docASTNodeCount="335" int_docActiveCodeLength="2310" int_docExpressionCount="215" int_docLength="2611" length="1" offset="2604" startLine="91" starttimestamp="1649862007572" timestamp="9684440">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}]]></insertedText>
  </DocumentChange>
  <Command __id="2767" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:41:40 EDT 2022" docASTNodeCount="54" docActiveCodeLength="466" docExpressionCount="42" docLength="466" projectName="A6" starttimestamp="1649862007572" timestamp="9692828">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2768" _type="Insert" date="Wed Apr 13 13:41:40 EDT 2022" docASTNodeCount="61" docActiveCodeLength="521" docExpressionCount="45" docLength="521" length="55" offset="459" repeat="2" starttimestamp="1649862007572" timestamp="9692859" timestamp2="9692874">
    <text><![CDATA[

	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();]]></text>
  </DocumentChange>
  <DocumentChange __id="2770" _type="Insert" date="Wed Apr 13 13:41:40 EDT 2022" docASTNodeCount="75" docActiveCodeLength="601" docExpressionCount="57" docLength="601" length="80" offset="19" repeat="4" starttimestamp="1649862007572" timestamp="9692874" timestamp2="9692874">
    <text><![CDATA[import java.nio.ByteBuffer;
import java.util.concurrent.ArrayBlockingQueue;

]]></text>
  </DocumentChange>
  <Command __id="2780" _type="PauseCommand" date="Wed Apr 13 13:41:44 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9697023">
    <prevType><![CDATA[Save]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2109]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2781" _type="SelectTextCommand" caretOffset="3990" date="Wed Apr 13 13:41:44 EDT 2022" end="4116" start="3990" starttimestamp="1649862007572" timestamp="9697189" />
  <Command __id="2782" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:41:45 EDT 2022" starttimestamp="1649862007572" timestamp="9697797" />
  <Command __id="2783" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:41:45 EDT 2022" starttimestamp="1649862007572" timestamp="9697847" />
  <Command __id="2784" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:41:45 EDT 2022" starttimestamp="1649862007572" timestamp="9697887" />
  <Command __id="2786" _type="PauseCommand" date="Wed Apr 13 13:41:48 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9700856">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2969]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2785" _type="MoveCaretCommand" caretOffset="4112" date="Wed Apr 13 13:41:48 EDT 2022" docOffset="4112" starttimestamp="1649862007572" timestamp="9700856" />
  <Command __id="2787" _type="MoveCaretCommand" caretOffset="4112" date="Wed Apr 13 13:41:48 EDT 2022" docOffset="4112" starttimestamp="1649862007572" timestamp="9700856" />
  <Command __id="2779" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:41:44 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3777" docExpressionCount="382" docLength="4121" projectName="A6" starttimestamp="1649862007572" timestamp="9697023">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶"), Diff(INSERT,"	¶"), Diff(EQUAL,"	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;
import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import readThread.ReadThreadInterface;
import util.trace.factories.FactoryTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;

public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	protected SocketChannel socketChannel;
	protected Scanner scanner = new Scanner(System.in);
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;

	protected AnNIOManagerPrintClient(int aServerPort) {
		setTracing();
//		setFactories();
		initialize(aServerPort);
	}

//	protected void setFactories() {
//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
//	}

	public void processInput() {
		scanner = new Scanner(System.in);
		while (true) {
			System.out.println("Enter a line of input to be printed remotely");
			String aNextLine = scanner.nextLine();
			// wrap writes to the buffer and then flips it
			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
			nioManager.write(socketChannel, aWriteMessage, this);
		}
	}

	protected void setTracing() {
		FactoryTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
	}

	protected void initialize(int aServerPort) {
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("Client Connect to Server");
	}

	@Override
	public void notConnected(SocketChannel theSocketChannel, Exception e) {

	}

	@Override
	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {
		System.out.println("client channel has written");
	}

	@Override
	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
				
	}

	
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

}]]></snapshot>
  </Command>
  <Command __id="2789" _type="PauseCommand" date="Wed Apr 13 13:41:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9704675">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3819]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2790" _type="MoveCaretCommand" caretOffset="349" date="Wed Apr 13 13:41:52 EDT 2022" docOffset="631" starttimestamp="1649862007572" timestamp="9704888" />
  <Command __id="2788" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:41:52 EDT 2022" docASTNodeCount="132" docActiveCodeLength="915" docExpressionCount="84" docLength="1025" projectName="A6" starttimestamp="1649862007572" timestamp="9704675">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶"), Diff(INSERT,"import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶"), Diff(EQUAL,"import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶"), Diff(INSERT,"	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	"), Diff(EQUAL,"¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="2792" _type="PauseCommand" date="Wed Apr 13 13:42:00 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9712619">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7731]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2793" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 13:42:00 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="9713006" />
  <Command __id="2795" _type="PauseCommand" date="Wed Apr 13 13:42:11 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="9723797">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10791]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2794" _type="MoveCaretCommand" caretOffset="852" date="Wed Apr 13 13:42:11 EDT 2022" docOffset="1099" starttimestamp="1649862007572" timestamp="9723797" />
  <Command __id="2797" _type="InsertStringCommand" date="Wed Apr 13 13:42:11 EDT 2022" starttimestamp="1649862007572" timestamp="9724110" timestamp2="9724110">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2799" _type="InsertStringCommand" date="Wed Apr 13 13:42:11 EDT 2022" starttimestamp="1649862007572" timestamp="9724332" timestamp2="9724332">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2801" _type="InsertStringCommand" date="Wed Apr 13 13:42:11 EDT 2022" starttimestamp="1649862007572" timestamp="9724427" timestamp2="9724427">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2803" _type="InsertStringCommand" date="Wed Apr 13 13:42:12 EDT 2022" starttimestamp="1649862007572" timestamp="9724516" timestamp2="9724516">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2805" _type="InsertStringCommand" date="Wed Apr 13 13:42:12 EDT 2022" starttimestamp="1649862007572" timestamp="9724661" timestamp2="9724661">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2807" _type="InsertStringCommand" date="Wed Apr 13 13:42:12 EDT 2022" starttimestamp="1649862007572" timestamp="9724819" timestamp2="9724819">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="2809" _type="InsertStringCommand" date="Wed Apr 13 13:42:12 EDT 2022" starttimestamp="1649862007572" timestamp="9724945" timestamp2="9724945">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="2810" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:42:13 EDT 2022" starttimestamp="1649862007572" timestamp="9725603" />
  <Command __id="2811" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:42:13 EDT 2022" starttimestamp="1649862007572" timestamp="9725681" />
  <Command __id="2812" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:42:13 EDT 2022" starttimestamp="1649862007572" timestamp="9725709" />
  <Command __id="2791" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:42:00 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1471" docExpressionCount="123" docLength="1668" projectName="A6" starttimestamp="1649862007572" timestamp="9712619">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleClientReadThread implements ReadThreadInterface{¶	final AnNIOManagerPrintClient client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {¶		client = aClient;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2796" _type="Insert" date="Wed Apr 13 13:42:11 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1478" docExpressionCount="123" docLength="1675" length="7" offset="1099" repeat="7" starttimestamp="1649862007572" timestamp="9724095" timestamp2="9724929">
    <text><![CDATA[ CLIENT]]></text>
  </DocumentChange>
  <Command __id="2814" _type="PauseCommand" date="Wed Apr 13 13:42:34 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="9747164">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[21455]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2813" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:42:34 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3777" docExpressionCount="382" docLength="4121" projectName="A6" starttimestamp="1649862007572" timestamp="9747164">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2815" _type="MoveCaretCommand" caretOffset="4112" date="Wed Apr 13 13:42:35 EDT 2022" docOffset="4112" starttimestamp="1649862007572" timestamp="9747462" />
  <Command __id="2817" _type="MoveCaretCommand" caretOffset="2730" date="Wed Apr 13 13:42:35 EDT 2022" docOffset="2730" starttimestamp="1649862007572" timestamp="9748004" />
  <Command __id="2816" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:42:35 EDT 2022" docASTNodeCount="348" docActiveCodeLength="2402" docExpressionCount="221" docLength="2737" projectName="A6" starttimestamp="1649862007572" timestamp="9747827">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}"), Diff(INSERT,"¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}"), Diff(EQUAL,"¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

}
]]></snapshot>
  </Command>
  <Command __id="2819" _type="PauseCommand" date="Wed Apr 13 13:42:40 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9753406">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5402]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2820" _type="MoveCaretCommand" caretOffset="4112" date="Wed Apr 13 13:42:41 EDT 2022" docOffset="4112" starttimestamp="1649862007572" timestamp="9753582" />
  <Command __id="2822" _type="PauseCommand" date="Wed Apr 13 13:42:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9762383">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8801]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2821" _type="SelectTextCommand" caretOffset="2409" date="Wed Apr 13 13:42:49 EDT 2022" end="2462" start="2409" starttimestamp="1649862007572" timestamp="9762383" />
  <Command __id="2823" _type="SelectTextCommand" caretOffset="2409" date="Wed Apr 13 13:42:49 EDT 2022" end="2462" start="2409" starttimestamp="1649862007572" timestamp="9762383" />
  <Command __id="2824" _type="CopyCommand" date="Wed Apr 13 13:42:50 EDT 2022" starttimestamp="1649862007572" timestamp="9762818" />
  <Command __id="2826" _type="PauseCommand" date="Wed Apr 13 13:43:00 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9772502">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[9684]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2825" _type="SelectTextCommand" caretOffset="2245" date="Wed Apr 13 13:43:00 EDT 2022" end="2462" start="2245" starttimestamp="1649862007572" timestamp="9772502" />
  <Command __id="2827" _type="SelectTextCommand" caretOffset="2245" date="Wed Apr 13 13:43:00 EDT 2022" end="2462" start="2245" starttimestamp="1649862007572" timestamp="9772502" />
  <Command __id="2828" _type="CopyCommand" date="Wed Apr 13 13:43:00 EDT 2022" starttimestamp="1649862007572" timestamp="9772821" />
  <Command __id="2818" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:42:40 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3777" docExpressionCount="382" docLength="4121" projectName="A6" starttimestamp="1649862007572" timestamp="9753406">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="2830" _type="PauseCommand" date="Wed Apr 13 13:43:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9774110">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1289]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2831" _type="MoveCaretCommand" caretOffset="2730" date="Wed Apr 13 13:43:01 EDT 2022" docOffset="2730" starttimestamp="1649862007572" timestamp="9774323" />
  <Command __id="2833" _type="PauseCommand" date="Wed Apr 13 13:43:05 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9778369">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4046]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2832" _type="MoveCaretCommand" caretOffset="1684" date="Wed Apr 13 13:43:05 EDT 2022" docOffset="1684" starttimestamp="1649862007572" timestamp="9778369" />
  <Command __id="2835" _type="InsertStringCommand" date="Wed Apr 13 13:43:06 EDT 2022" starttimestamp="1649862007572" timestamp="9778620" timestamp2="9778620">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2837" _type="InsertStringCommand" date="Wed Apr 13 13:43:06 EDT 2022" starttimestamp="1649862007572" timestamp="9778762" timestamp2="9778762">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2839" _type="PasteCommand" date="Wed Apr 13 13:43:06 EDT 2022" starttimestamp="1649862007572" timestamp="9779218" />
  <Command __id="2841" _type="PauseCommand" date="Wed Apr 13 13:43:09 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9781921">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2703]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2840" _type="SelectTextCommand" caretOffset="1711" date="Wed Apr 13 13:43:09 EDT 2022" end="1730" start="1711" starttimestamp="1649862007572" timestamp="9781921" />
  <Command __id="2843" _type="InsertStringCommand" date="Wed Apr 13 13:43:10 EDT 2022" starttimestamp="1649862007572" timestamp="9782846" timestamp2="9782846">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2844" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 13:43:11 EDT 2022" starttimestamp="1649862007572" timestamp="9783784" />
  <Command __id="2846" _type="InsertStringCommand" date="Wed Apr 13 13:43:11 EDT 2022" starttimestamp="1649862007572" timestamp="9783990" timestamp2="9783990">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2847" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Apr 13 13:43:11 EDT 2022" starttimestamp="1649862007572" timestamp="9784242" />
  <Command __id="2848" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Apr 13 13:43:11 EDT 2022" starttimestamp="1649862007572" timestamp="9784400" />
  <Command __id="2850" _type="InsertStringCommand" date="Wed Apr 13 13:43:12 EDT 2022" starttimestamp="1649862007572" timestamp="9785139" timestamp2="9785139">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2852" _type="InsertStringCommand" date="Wed Apr 13 13:43:12 EDT 2022" starttimestamp="1649862007572" timestamp="9785296" timestamp2="9785296">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2854" _type="InsertStringCommand" date="Wed Apr 13 13:43:12 EDT 2022" starttimestamp="1649862007572" timestamp="9785408" timestamp2="9785408">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2856" _type="InsertStringCommand" date="Wed Apr 13 13:43:13 EDT 2022" starttimestamp="1649862007572" timestamp="9785796" timestamp2="9785796">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="2858" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:43:13 EDT 2022" starttimestamp="1649862007572" timestamp="9786268" />
  <Command __id="2860" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:43:13 EDT 2022" starttimestamp="1649862007572" timestamp="9786410" />
  <Command __id="2862" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:43:14 EDT 2022" starttimestamp="1649862007572" timestamp="9786566" />
  <Command __id="2864" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 13:43:14 EDT 2022" starttimestamp="1649862007572" timestamp="9786880" />
  <Command __id="2866" _type="InsertStringCommand" date="Wed Apr 13 13:43:14 EDT 2022" starttimestamp="1649862007572" timestamp="9787006" timestamp2="9787006">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2868" _type="InsertStringCommand" date="Wed Apr 13 13:43:14 EDT 2022" starttimestamp="1649862007572" timestamp="9787100" timestamp2="9787100">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2870" _type="InsertStringCommand" date="Wed Apr 13 13:43:14 EDT 2022" starttimestamp="1649862007572" timestamp="9787225" timestamp2="9787225">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2872" _type="InsertStringCommand" date="Wed Apr 13 13:43:14 EDT 2022" starttimestamp="1649862007572" timestamp="9787335" timestamp2="9787335">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2874" _type="InsertStringCommand" date="Wed Apr 13 13:43:14 EDT 2022" starttimestamp="1649862007572" timestamp="9787383" timestamp2="9787383">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="2876" _type="InsertStringCommand" date="Wed Apr 13 13:43:15 EDT 2022" starttimestamp="1649862007572" timestamp="9787541" timestamp2="9787541">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2878" _type="InsertStringCommand" date="Wed Apr 13 13:43:15 EDT 2022" starttimestamp="1649862007572" timestamp="9787714" timestamp2="9787714">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2880" _type="InsertStringCommand" date="Wed Apr 13 13:43:15 EDT 2022" starttimestamp="1649862007572" timestamp="9787840" timestamp2="9787840">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2882" _type="InsertStringCommand" date="Wed Apr 13 13:43:15 EDT 2022" starttimestamp="1649862007572" timestamp="9787905" timestamp2="9787905">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2884" _type="InsertStringCommand" date="Wed Apr 13 13:43:15 EDT 2022" starttimestamp="1649862007572" timestamp="9788029" timestamp2="9788029">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2829" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:43:01 EDT 2022" docASTNodeCount="348" docActiveCodeLength="2402" docExpressionCount="221" docLength="2737" projectName="A6" starttimestamp="1649862007572" timestamp="9774110">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2834" _type="Insert" date="Wed Apr 13 13:43:06 EDT 2022" docASTNodeCount="348" docActiveCodeLength="2410" docExpressionCount="221" docLength="2745" length="8" offset="1684" repeat="2" starttimestamp="1649862007572" timestamp="9778604" timestamp2="9778746">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2838" _type="Replace" date="Wed Apr 13 13:43:06 EDT 2022" docASTNodeCount="374" docActiveCodeLength="2578" docExpressionCount="240" docLength="2959" endLine="53" insertionLength="216" int_docASTNodeCount="348" int_docActiveCodeLength="2408" int_docExpressionCount="221" int_docLength="2743" length="2" offset="1690" startLine="53" starttimestamp="1649862007572" timestamp="9779090">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		String aNextLine = scanner.nextLine();
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2842" _type="Replace" date="Wed Apr 13 13:43:10 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2561" docExpressionCount="238" docLength="2942" endLine="53" insertionLength="2" int_docASTNodeCount="370" int_docActiveCodeLength="2559" int_docExpressionCount="238" int_docLength="2940" length="19" offset="1711" startLine="53" starttimestamp="1649862007572" timestamp="9782830">
    <deletedText><![CDATA[scanner.nextLine();]]></deletedText>
    <insertedText><![CDATA[""]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2845" _type="Insert" date="Wed Apr 13 13:43:11 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2562" docExpressionCount="238" docLength="2943" length="1" offset="1713" starttimestamp="1649862007572" timestamp="9783990">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2849" _type="Insert" date="Wed Apr 13 13:43:12 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2566" docExpressionCount="238" docLength="2947" length="4" offset="1712" repeat="4" starttimestamp="1649862007572" timestamp="9785139" timestamp2="9785796">
    <text><![CDATA[CLIE]]></text>
  </DocumentChange>
  <DocumentChange __id="2857" _type="Delete" date="Wed Apr 13 13:43:13 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2562" docExpressionCount="238" docLength="2943" endLine="53" length="4" offset="1712" repeat="4" startLine="53" starttimestamp="1649862007572" timestamp="9786253" timestamp2="9786864">
    <text><![CDATA[CLIE]]></text>
  </DocumentChange>
  <Command __id="2886" _type="InsertStringCommand" date="Wed Apr 13 13:43:15 EDT 2022" starttimestamp="1649862007572" timestamp="9788140" timestamp2="9788140">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2888" _type="InsertStringCommand" date="Wed Apr 13 13:43:15 EDT 2022" starttimestamp="1649862007572" timestamp="9788266" timestamp2="9788266">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2890" _type="InsertStringCommand" date="Wed Apr 13 13:43:16 EDT 2022" starttimestamp="1649862007572" timestamp="9788643" timestamp2="9788643">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2893" _type="PauseCommand" date="Wed Apr 13 13:43:17 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9789899">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1256]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="2892" _type="InsertStringCommand" date="Wed Apr 13 13:43:17 EDT 2022" starttimestamp="1649862007572" timestamp="9789899" timestamp2="9789899">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2895" _type="InsertStringCommand" date="Wed Apr 13 13:43:17 EDT 2022" starttimestamp="1649862007572" timestamp="9789984" timestamp2="9789984">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2897" _type="InsertStringCommand" date="Wed Apr 13 13:43:17 EDT 2022" starttimestamp="1649862007572" timestamp="9790103" timestamp2="9790103">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2899" _type="InsertStringCommand" date="Wed Apr 13 13:43:17 EDT 2022" starttimestamp="1649862007572" timestamp="9790242" timestamp2="9790242">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2901" _type="InsertStringCommand" date="Wed Apr 13 13:43:17 EDT 2022" starttimestamp="1649862007572" timestamp="9790341" timestamp2="9790341">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="2903" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9790476" timestamp2="9790476">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2905" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9790633" timestamp2="9790633">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2907" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9790696" timestamp2="9790696">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2909" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9790775" timestamp2="9790775">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2911" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9790885" timestamp2="9790885">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2913" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9790948" timestamp2="9790948">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2915" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9791074" timestamp2="9791074">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2917" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9791121" timestamp2="9791121">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2919" _type="InsertStringCommand" date="Wed Apr 13 13:43:18 EDT 2022" starttimestamp="1649862007572" timestamp="9791262" timestamp2="9791262">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2921" _type="InsertStringCommand" date="Wed Apr 13 13:43:19 EDT 2022" starttimestamp="1649862007572" timestamp="9791498" timestamp2="9791498">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2923" _type="InsertStringCommand" date="Wed Apr 13 13:43:19 EDT 2022" starttimestamp="1649862007572" timestamp="9791824" timestamp2="9791824">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2925" _type="InsertStringCommand" date="Wed Apr 13 13:43:19 EDT 2022" starttimestamp="1649862007572" timestamp="9791918" timestamp2="9791918">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2927" _type="InsertStringCommand" date="Wed Apr 13 13:43:19 EDT 2022" starttimestamp="1649862007572" timestamp="9792090" timestamp2="9792090">
    <data><![CDATA[z]]></data>
  </Command>
  <Command __id="2929" _type="InsertStringCommand" date="Wed Apr 13 13:43:19 EDT 2022" starttimestamp="1649862007572" timestamp="9792247" timestamp2="9792247">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2931" _type="InsertStringCommand" date="Wed Apr 13 13:43:20 EDT 2022" starttimestamp="1649862007572" timestamp="9792436" timestamp2="9792436">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2933" _type="PauseCommand" date="Wed Apr 13 13:43:22 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9795371">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2935]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2932" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:43:22 EDT 2022" starttimestamp="1649862007572" timestamp="9795371" />
  <Command __id="2934" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:43:23 EDT 2022" starttimestamp="1649862007572" timestamp="9795469" />
  <Command __id="2935" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:43:23 EDT 2022" starttimestamp="1649862007572" timestamp="9795516" />
  <Command __id="2937" _type="PauseCommand" date="Wed Apr 13 13:43:33 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="9805988">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10472]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2938" _type="ProgramExecutionEvent" className="/A6/src/registry/TrickOrTreatRegistry.java" date="Wed Apr 13 13:43:35 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="9807864" type="Run" />
  <Command __id="2940" _type="RunCommand" className="/A6/src/registry/TrickOrTreatRegistry.java" date="Wed Apr 13 13:43:35 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="9807864" type="Run" />
  <Command __id="2941" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9808089" type="Run" />
  <Command __id="2942" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:35 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9808125" type="Run" />
  <Command __id="2943" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9808131" type="Run" />
  <Command __id="2945" _type="PauseCommand" date="Wed Apr 13 13:43:37 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9809907">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1776]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2944" _type="ShellCommand" date="Wed Apr 13 13:43:37 EDT 2022" starttimestamp="1649862007572" timestamp="9809907" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2946" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Wed Apr 13 13:43:37 EDT 2022" starttimestamp="1649862007572" timestamp="9810254" />
  <Command __id="2947" _type="RunCommand" className="/A6/src/server/Server.java" date="Wed Apr 13 13:43:37 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="9810341" type="Run" />
  <Command __id="2948" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:38 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9810586" type="Run" />
  <Command __id="2949" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9810586" type="Run" />
  <Command __id="2950" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9811301" type="Run" />
  <Command __id="2951" _type="ConsoleOutput" date="Wed Apr 13 13:43:39 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="9811430" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.5370733486414104
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(EQUAL,"Re"), Diff(DELETE,"adCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:63896 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote "), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:local"), Diff(EQUAL,"host¶"), Diff(DELETE,"AR"), Diff(INSERT,"H"), Diff(EQUAL,"ead"), Diff(DELETE,"Command for java.nio.channels.SocketChannel[connected local=/127.0.0.1:63901 remote=localhost/127.0.0.1:9000]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"less:false¶Client name:Generic Client:0.5370733486414104¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2952" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9811907" type="Run" />
  <Command __id="2953" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9812031" type="Run" />
  <Command __id="2954" _type="ConsoleOutput" date="Wed Apr 13 13:43:39 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="9812115" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5370733486414104¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2956" _type="PauseCommand" date="Wed Apr 13 13:43:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9815896">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3781]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2955" _type="ShellCommand" date="Wed Apr 13 13:43:43 EDT 2022" starttimestamp="1649862007572" timestamp="9815896" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2958" _type="PauseCommand" date="Wed Apr 13 13:43:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9819733">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3837]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2957" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Wed Apr 13 13:43:47 EDT 2022" starttimestamp="1649862007572" timestamp="9819733" />
  <Command __id="2959" _type="RunCommand" className="/A6/src/client/Client.java" date="Wed Apr 13 13:43:47 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="9819824" type="Run" />
  <Command __id="2960" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:47 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9820060" type="Run" />
  <Command __id="2961" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:47 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9820078" type="Run" />
  <Command __id="2962" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9820762" type="Run" />
  <Command __id="2963" _type="ConsoleOutput" date="Wed Apr 13 13:43:48 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="9820831" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.8556837456113894
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.8556837456113894"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2965" _type="PauseCommand" date="Wed Apr 13 13:43:49 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9821865">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1034]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2964" _type="ShellCommand" date="Wed Apr 13 13:43:49 EDT 2022" starttimestamp="1649862007572" timestamp="9821865" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2967" _type="PauseCommand" date="Wed Apr 13 13:43:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9823307">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1442]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2978" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9829766" type="Run" />
  <Command __id="2980" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9829956" type="Run" />
  <Command __id="2981" _type="ConsoleOutput" date="Wed Apr 13 13:43:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="9829996" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.8556837456113894 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@501cb5f9
[com.sun.proxy.$Proxy1@501cb5f9]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.8556837456113894"), Diff(INSERT,"Server0<-->Generic Client:0.8556837456113894 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@501cb5f9¶[com.sun.proxy.$Proxy1@501cb5f9]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2982" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9830011" type="Run" />
  <Command __id="2983" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9830121" type="Run" />
  <Command __id="2984" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:43:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9830148" type="Run" />
  <Command __id="2985" _type="ConsoleOutput" date="Wed Apr 13 13:43:58 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="9830469" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
New Client connected to server!!!
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.8556837456113894 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(INSERT,"New "), Diff(EQUAL,"Client "), Diff(DELETE,"registered GIPC¶com.sun.proxy.$Proxy1@501cb5f9¶[com.sun.proxy.$Proxy1@501cb5f9]"), Diff(INSERT,"connected to server!!!¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2986" _type="ConsoleOutput" date="Wed Apr 13 13:43:58 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="9830472" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[172.17.96.1:64556](remote),objID:[1c5d3058:1802406587a:-7ffe, 3626982859742799515]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[172.17.96.1:64556](remote),objID:[1c5d3058:1802406587a:-7ffe, 3626982859742799515]]]]]]
a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:64558]
IN RUN METHOD OF READ THREAD
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶New Client connected to server!!!¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[172.17.96.1:64556](remote),objID:[1c5d3058:1802406587a:-7ffe, 3626982859742799515]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[172.17.96.1:64556](remote),objID:[1c5d3058:1802406587a:-7ffe, 3626982859742799515]]]]]]¶a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:64558]¶IN RUN METHOD OF READ THREAD"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2987" _type="ConsoleOutput" date="Wed Apr 13 13:43:58 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="9830472" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.919898124550763
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[172.17.96.1:64556](remote),objID:[1c5d3058:1802406587a:-7ffe, 3626982859742799515]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[172.17.96.1:64556](remote),objID:[1c5d3058:1802406587a:-7ffe, 3626982859742799515]]]]]]¶a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:64558]¶IN RUN METHOD OF READ THREAD"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.919898124550763"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2989" _type="PauseCommand" date="Wed Apr 13 13:43:59 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="9832337">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1865]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3010" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:44:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9870353" type="Run" />
  <Command __id="3012" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:44:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="9870385" type="Run" />
  <DocumentChange __id="2865" _type="Insert" date="Wed Apr 13 13:43:14 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2595" docExpressionCount="238" docLength="2976" length="33" offset="1712" repeat="33" starttimestamp="1649862007572" timestamp="9787006" timestamp2="9792436">
    <text><![CDATA[a new client has been initialized]]></text>
  </DocumentChange>
  <Command __id="3014" _type="PauseCommand" date="Wed Apr 13 13:45:21 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="9914042">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[43657]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3015" _type="MoveCaretCommand" caretOffset="1404" date="Wed Apr 13 13:45:21 EDT 2022" docOffset="1764" starttimestamp="1649862007572" timestamp="9914301" />
  <Command __id="3013" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:45:21 EDT 2022" docASTNodeCount="252" docActiveCodeLength="1776" docExpressionCount="157" docLength="2044" projectName="A6" starttimestamp="1649862007572" timestamp="9914042">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3017" _type="PauseCommand" date="Wed Apr 13 13:45:27 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="9920237">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5936]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3018" _type="SelectTextCommand" caretOffset="2778" date="Wed Apr 13 13:45:27 EDT 2022" end="2799" start="2778" starttimestamp="1649862007572" timestamp="9920419" />
  <Command __id="3016" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:45:27 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="9920237">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3020" _type="PauseCommand" date="Wed Apr 13 13:45:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="9925007">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4588]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3021" _type="MoveCaretCommand" caretOffset="3260" date="Wed Apr 13 13:45:32 EDT 2022" docOffset="3260" starttimestamp="1649862007572" timestamp="9925203" />
  <Command __id="3019" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:45:32 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" projectName="A6" starttimestamp="1649862007572" timestamp="9925007">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3023" _type="PauseCommand" date="Wed Apr 13 13:46:18 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="9970742">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[45539]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3024" _type="MoveCaretCommand" caretOffset="1745" date="Wed Apr 13 13:46:18 EDT 2022" docOffset="1745" starttimestamp="1649862007572" timestamp="9971052" />
  <Command __id="3022" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:46:18 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2595" docExpressionCount="238" docLength="2976" projectName="A6" starttimestamp="1649862007572" timestamp="9970742">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	"), Diff(INSERT,"	¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	"), Diff(EQUAL,"}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

}
]]></snapshot>
  </Command>
  <Command __id="3026" _type="PauseCommand" date="Wed Apr 13 13:46:56 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="10008706">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[37654]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3027" _type="MoveCaretCommand" caretOffset="349" date="Wed Apr 13 13:46:56 EDT 2022" docOffset="631" starttimestamp="1649862007572" timestamp="10008899" />
  <Command __id="3025" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:46:56 EDT 2022" docASTNodeCount="132" docActiveCodeLength="915" docExpressionCount="84" docLength="1025" projectName="A6" starttimestamp="1649862007572" timestamp="10008706">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3029" _type="PauseCommand" date="Wed Apr 13 13:47:10 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="10023185">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14286]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3030" _type="MoveCaretCommand" caretOffset="859" date="Wed Apr 13 13:47:10 EDT 2022" docOffset="1106" starttimestamp="1649862007572" timestamp="10023384" />
  <Command __id="3032" _type="PauseCommand" date="Wed Apr 13 13:47:20 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="10032984">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9600]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3031" _type="SelectTextCommand" caretOffset="1286" date="Wed Apr 13 13:47:20 EDT 2022" end="1286" start="554" starttimestamp="1649862007572" timestamp="10032984" />
  <Command __id="3033" _type="CopyCommand" date="Wed Apr 13 13:47:21 EDT 2022" starttimestamp="1649862007572" timestamp="10033679" />
  <Command __id="3028" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:47:10 EDT 2022" docASTNodeCount="205" docActiveCodeLength="1478" docExpressionCount="123" docLength="1675" projectName="A6" starttimestamp="1649862007572" timestamp="10023185">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\exampleClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import readThread.ReadThreadInterface;¶¶public class exampleClientReadThread implements ReadThreadInterface{¶	final AnNIOManagerPrintClient client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {¶		client = aClient;¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF "), Diff(INSERT,"CLIENT "), Diff(EQUAL,"READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶		¶		}¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import readThread.ReadThreadInterface;

public class exampleClientReadThread implements ReadThreadInterface{
	final AnNIOManagerPrintClient client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public exampleClientReadThread (final AnNIOManagerPrintClient aClient) {
		client = aClient;
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
		
		}
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="3035" _type="PauseCommand" date="Wed Apr 13 13:47:23 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="10035838">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2159]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3036" _type="MoveCaretCommand" caretOffset="1745" date="Wed Apr 13 13:47:23 EDT 2022" docOffset="1745" starttimestamp="1649862007572" timestamp="10036000" />
  <Command __id="3034" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:47:23 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2595" docExpressionCount="238" docLength="2976" projectName="A6" starttimestamp="1649862007572" timestamp="10035838">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3038" _type="PauseCommand" date="Wed Apr 13 13:47:26 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="10039259">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3259]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3039" _type="MoveCaretCommand" caretOffset="349" date="Wed Apr 13 13:47:27 EDT 2022" docOffset="631" starttimestamp="1649862007572" timestamp="10039435" />
  <Command __id="3041" _type="PauseCommand" date="Wed Apr 13 13:47:29 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="10041907">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2456]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3040" _type="MoveCaretCommand" caretOffset="464" date="Wed Apr 13 13:47:29 EDT 2022" docOffset="746" starttimestamp="1649862007572" timestamp="10041891" />
  <Command __id="3042" _type="MoveCaretCommand" caretOffset="460" date="Wed Apr 13 13:47:30 EDT 2022" docOffset="742" starttimestamp="1649862007572" timestamp="10042635" />
  <Command __id="3044" _type="InsertStringCommand" date="Wed Apr 13 13:47:30 EDT 2022" starttimestamp="1649862007572" timestamp="10042872" timestamp2="10042872">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3048" _type="PasteCommand" date="Wed Apr 13 13:47:30 EDT 2022" starttimestamp="1649862007572" timestamp="10043321" />
  <Command __id="3049" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 13:47:31 EDT 2022" starttimestamp="1649862007572" timestamp="10043881" />
  <Command __id="3050" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:47:31 EDT 2022" starttimestamp="1649862007572" timestamp="10043984" />
  <Command __id="3051" _type="EclipseCommand" commandID="" date="Wed Apr 13 13:47:31 EDT 2022" starttimestamp="1649862007572" timestamp="10044004" />
  <Command __id="3052" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:47:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10044171" type="Run" />
  <Command __id="3053" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:47:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10044171" type="Run" />
  <Command __id="3055" _type="PauseCommand" date="Wed Apr 13 13:47:44 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="10057216">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[13045]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3068" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Wed Apr 13 13:47:49 EDT 2022" starttimestamp="1649862007572" timestamp="10061476" />
  <Command __id="3070" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:47:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10061497" type="Debug" />
  <Command __id="3071" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 13:47:49 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="10061497" type="Run" />
  <Command __id="3072" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:47:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10061497" type="Debug" />
  <Command __id="3073" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 13:47:49 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="10061497" type="Run" />
  <Command __id="3075" _type="PauseCommand" date="Wed Apr 13 13:47:57 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="10070085">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8588]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3077" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Wed Apr 13 13:47:59 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="10071594" type="Run" />
  <Command __id="3079" _type="RunCommand" className="/A6/src/server/Server.java" date="Wed Apr 13 13:47:59 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="10071595" type="Run" />
  <Command __id="3080" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:47:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10071824" type="Run" />
  <Command __id="3081" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:47:59 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10071841" type="Run" />
  <Command __id="3082" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:47:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10071841" type="Run" />
  <Command __id="3083" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:48:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10072622" type="Run" />
  <Command __id="3084" _type="ConsoleOutput" date="Wed Apr 13 13:48:00 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="10072766" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.5558743307808846
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(EQUAL,"Re"), Diff(DELETE,"adCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:64565]:An existing connection was forcibly closed by the remote "), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:local"), Diff(EQUAL,"host¶"), Diff(DELETE,"AR"), Diff(INSERT,"H"), Diff(EQUAL,"ead"), Diff(DELETE,"Command for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:64560]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0.919898124550763 (Closed)¶Explanation: An existing connection was forcibly closed by the remote host"), Diff(INSERT,"less:false¶Client name:Generic Client:0.5558743307808846¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3085" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:48:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10073155" type="Run" />
  <Command __id="3086" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 13:48:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="10073195" type="Run" />
  <Command __id="3087" _type="ConsoleOutput" date="Wed Apr 13 13:48:00 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="10073287" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5558743307808846¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3089" _type="PauseCommand" date="Wed Apr 13 13:48:06 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="10079044">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5757]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3088" _type="ShellCommand" date="Wed Apr 13 13:48:06 EDT 2022" starttimestamp="1649862007572" timestamp="10079044" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3091" _type="PauseCommand" date="Wed Apr 13 13:48:09 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="10082233">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3189]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3090" _type="ShellCommand" date="Wed Apr 13 13:48:09 EDT 2022" starttimestamp="1649862007572" timestamp="10082233" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3093" _type="PauseCommand" date="Wed Apr 13 13:48:12 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="10084468">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2235]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3293" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Wed Apr 13 16:20:00 EDT 2022" starttimestamp="1649862007572" timestamp="19193336" />
  <Command __id="3295" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:20:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19193433" type="Debug" />
  <Command __id="3296" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 16:20:01 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="19193433" type="Run" />
  <Command __id="3297" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:20:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19193433" type="Debug" />
  <Command __id="3298" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Wed Apr 13 16:20:01 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="19193433" type="Run" />
  <Command __id="3037" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 13:47:26 EDT 2022" docASTNodeCount="132" docActiveCodeLength="915" docExpressionCount="84" docLength="1025" projectName="A6" starttimestamp="1649862007572" timestamp="10039259">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3043" _type="Insert" date="Wed Apr 13 13:47:30 EDT 2022" docASTNodeCount="132" docActiveCodeLength="919" docExpressionCount="84" docLength="1029" length="4" offset="742" starttimestamp="1649862007572" timestamp="10042857">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="3045" _type="Replace" date="Wed Apr 13 13:47:30 EDT 2022" docASTNodeCount="216" docActiveCodeLength="1564" docExpressionCount="133" docLength="1761" endLine="25" insertionLength="734" int_docASTNodeCount="132" int_docActiveCodeLength="917" int_docExpressionCount="84" int_docLength="1027" length="2" offset="744" startLine="25" starttimestamp="1649862007572" timestamp="10043147">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
		
		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3046" _type="Insert" date="Wed Apr 13 13:47:30 EDT 2022" docASTNodeCount="224" docActiveCodeLength="1613" docExpressionCount="140" docLength="1810" length="49" offset="91" repeat="2" starttimestamp="1649862007572" timestamp="10043289" timestamp2="10043289">
    <text><![CDATA[
import java.util.concurrent.ArrayBlockingQueue;]]></text>
  </DocumentChange>
  <Command __id="3300" _type="PauseCommand" date="Wed Apr 13 16:20:11 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="19203546">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10113]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3301" _type="MoveCaretCommand" caretOffset="0" date="Wed Apr 13 16:20:11 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="19204228" />
  <Command __id="3303" _type="PauseCommand" date="Wed Apr 13 16:20:59 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="19252212">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[47984]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3302" _type="SelectTextCommand" caretOffset="6033" date="Wed Apr 13 16:20:59 EDT 2022" end="6203" start="6033" starttimestamp="1649862007572" timestamp="19252212" />
  <Command __id="3304" _type="CopyCommand" date="Wed Apr 13 16:21:00 EDT 2022" starttimestamp="1649862007572" timestamp="19252514" />
  <Command __id="3306" _type="PauseCommand" date="Wed Apr 13 16:21:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19254061">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1547]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3305" _type="MoveCaretCommand" caretOffset="6203" date="Wed Apr 13 16:21:01 EDT 2022" docOffset="7878" starttimestamp="1649862007572" timestamp="19254061" />
  <Command __id="3308" _type="PauseCommand" date="Wed Apr 13 16:21:02 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19255219">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1158]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3307" _type="SelectTextCommand" caretOffset="5967" date="Wed Apr 13 16:21:02 EDT 2022" end="6477" start="5967" starttimestamp="1649862007572" timestamp="19255219" />
  <Command __id="3309" _type="MoveCaretCommand" caretOffset="6158" date="Wed Apr 13 16:21:03 EDT 2022" docOffset="7833" starttimestamp="1649862007572" timestamp="19255707" />
  <Command __id="3311" _type="PauseCommand" date="Wed Apr 13 16:21:07 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19259716">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4009]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3310" _type="SelectTextCommand" caretOffset="5792" date="Wed Apr 13 16:21:07 EDT 2022" end="6203" start="5792" starttimestamp="1649862007572" timestamp="19259716" />
  <Command __id="3312" _type="CopyCommand" date="Wed Apr 13 16:21:07 EDT 2022" starttimestamp="1649862007572" timestamp="19260083" />
  <Command __id="3299" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:20:11 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="19203546">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3314" _type="PauseCommand" date="Wed Apr 13 16:21:09 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19262048">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1965]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3315" _type="MoveCaretCommand" caretOffset="1745" date="Wed Apr 13 16:21:10 EDT 2022" docOffset="1745" starttimestamp="1649862007572" timestamp="19262521" />
  <Command __id="3317" _type="PauseCommand" date="Wed Apr 13 16:21:13 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19265548">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3027]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3316" _type="MoveCaretCommand" caretOffset="2969" date="Wed Apr 13 16:21:13 EDT 2022" docOffset="2969" starttimestamp="1649862007572" timestamp="19265548" />
  <Command __id="3319" _type="InsertStringCommand" date="Wed Apr 13 16:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="19265814" timestamp2="19265814">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3321" _type="InsertStringCommand" date="Wed Apr 13 16:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="19265939" timestamp2="19265939">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3325" _type="PasteCommand" date="Wed Apr 13 16:21:13 EDT 2022" starttimestamp="1649862007572" timestamp="19266274" />
  <Command __id="3313" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:21:09 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2595" docExpressionCount="238" docLength="2976" projectName="A6" starttimestamp="1649862007572" timestamp="19262048">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3318" _type="Insert" date="Wed Apr 13 16:21:13 EDT 2022" docASTNodeCount="372" docActiveCodeLength="2601" docExpressionCount="238" docLength="2982" length="6" offset="2969" repeat="2" starttimestamp="1649862007572" timestamp="19265806" timestamp2="19265931">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="3322" _type="Replace" date="Wed Apr 13 16:21:13 EDT 2022" docASTNodeCount="383" docActiveCodeLength="2854" docExpressionCount="243" docLength="3393" endLine="101" insertionLength="412" int_docASTNodeCount="372" int_docActiveCodeLength="2600" int_docExpressionCount="238" int_docLength="2981" length="1" offset="2974" startLine="101" starttimestamp="1649862007572" timestamp="19266164">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3323" _type="Insert" date="Wed Apr 13 16:21:13 EDT 2022" docASTNodeCount="389" docActiveCodeLength="2909" docExpressionCount="248" docLength="3448" length="55" offset="597" repeat="2" starttimestamp="1649862007572" timestamp="19266222" timestamp2="19266222">
    <text><![CDATA[
import util.interactiveMethodInvocation.IPCMechanism;]]></text>
  </DocumentChange>
  <Command __id="3327" _type="PauseCommand" date="Wed Apr 13 16:21:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19267282">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1008]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3326" _type="Insert" date="Wed Apr 13 16:21:14 EDT 2022" docASTNodeCount="418" docActiveCodeLength="2924" docExpressionCount="270" docLength="3463" length="15" offset="3441" repeat="2" starttimestamp="1649862007572" timestamp="19267282" timestamp2="19267802">
    <text><![CDATA[
			
			
		}]]></text>
  </DocumentChange>
  <Command __id="3328" _type="InsertStringCommand" date="Wed Apr 13 16:21:14 EDT 2022" starttimestamp="1649862007572" timestamp="19267306" timestamp2="19267306">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3330" _type="InsertStringCommand" date="Wed Apr 13 16:21:15 EDT 2022" starttimestamp="1649862007572" timestamp="19267810" timestamp2="19267810">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="3331" _type="Replace" date="Wed Apr 13 16:21:16 EDT 2022" docASTNodeCount="418" docActiveCodeLength="2924" docExpressionCount="270" docLength="3463" endLine="118" insertionLength="3" int_docASTNodeCount="418" int_docActiveCodeLength="2921" int_docExpressionCount="270" int_docLength="3460" length="3" offset="3448" startLine="118" starttimestamp="1649862007572" timestamp="19268675">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[		}]]></insertedText>
  </DocumentChange>
  <Command __id="3332" _type="InsertStringCommand" date="Wed Apr 13 16:21:16 EDT 2022" starttimestamp="1649862007572" timestamp="19268683" timestamp2="19268683">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="3334" _type="InsertStringCommand" date="Wed Apr 13 16:21:16 EDT 2022" starttimestamp="1649862007572" timestamp="19269262" timestamp2="19269262">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="3335" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Apr 13 16:21:17 EDT 2022" starttimestamp="1649862007572" timestamp="19269978" />
  <Command __id="3337" _type="InsertStringCommand" date="Wed Apr 13 16:21:17 EDT 2022" starttimestamp="1649862007572" timestamp="19270355" timestamp2="19270355">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="3333" _type="Insert" date="Wed Apr 13 16:21:16 EDT 2022" docASTNodeCount="418" docActiveCodeLength="2929" docExpressionCount="270" docLength="3468" length="5" offset="3451" repeat="2" starttimestamp="1649862007572" timestamp="19269242" timestamp2="19270331">
    <text><![CDATA[
		}]]></text>
  </DocumentChange>
  <Command __id="3339" _type="PauseCommand" date="Wed Apr 13 16:21:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19271529">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1174]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3340" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:21:19 EDT 2022" starttimestamp="1649862007572" timestamp="19271537" />
  <Command __id="3342" _type="PauseCommand" date="Wed Apr 13 16:21:26 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19279341">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7804]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3341" _type="MoveCaretCommand" caretOffset="3403" date="Wed Apr 13 16:21:26 EDT 2022" docOffset="3403" starttimestamp="1649862007572" timestamp="19279341" />
  <Command __id="3344" _type="InsertStringCommand" date="Wed Apr 13 16:21:27 EDT 2022" starttimestamp="1649862007572" timestamp="19280106" timestamp2="19280106">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="3346" _type="PauseCommand" date="Wed Apr 13 16:21:29 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19282342">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2236]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3345" _type="SelectTextCommand" caretOffset="3433" date="Wed Apr 13 16:21:29 EDT 2022" end="3437" start="3433" starttimestamp="1649862007572" timestamp="19282342" />
  <Command __id="3348" _type="InsertStringCommand" date="Wed Apr 13 16:21:30 EDT 2022" starttimestamp="1649862007572" timestamp="19282984" timestamp2="19282984">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="3350" _type="InsertStringCommand" date="Wed Apr 13 16:21:30 EDT 2022" starttimestamp="1649862007572" timestamp="19283080" timestamp2="19283080">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3352" _type="InsertStringCommand" date="Wed Apr 13 16:21:30 EDT 2022" starttimestamp="1649862007572" timestamp="19283145" timestamp2="19283145">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="3354" _type="PauseCommand" date="Wed Apr 13 16:21:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19285150">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2005]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3353" _type="MoveCaretCommand" caretOffset="3446" date="Wed Apr 13 16:21:32 EDT 2022" docOffset="3446" starttimestamp="1649862007572" timestamp="19285150" />
  <DocumentChange __id="3338" _type="Delete" date="Wed Apr 13 16:21:19 EDT 2022" docASTNodeCount="418" docActiveCodeLength="2928" docExpressionCount="270" docLength="3467" endLine="119" length="1" offset="3454" startLine="119" starttimestamp="1649862007572" timestamp="19271529">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="3343" _type="Insert" date="Wed Apr 13 16:21:27 EDT 2022" docASTNodeCount="419" docActiveCodeLength="2929" docExpressionCount="271" docLength="3468" length="1" offset="3403" starttimestamp="1649862007572" timestamp="19280090">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="3347" _type="Replace" date="Wed Apr 13 16:21:30 EDT 2022" docASTNodeCount="419" docActiveCodeLength="2926" docExpressionCount="271" docLength="3465" endLine="116" insertionLength="1" int_docASTNodeCount="419" int_docActiveCodeLength="2925" int_docExpressionCount="271" int_docLength="3464" length="4" offset="3433" startLine="116" starttimestamp="1649862007572" timestamp="19282967">
    <deletedText><![CDATA[GIPC]]></deletedText>
    <insertedText><![CDATA[N]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3349" _type="Insert" date="Wed Apr 13 16:21:30 EDT 2022" docASTNodeCount="419" docActiveCodeLength="2928" docExpressionCount="271" docLength="3467" length="2" offset="3434" repeat="2" starttimestamp="1649862007572" timestamp="19283080" timestamp2="19283145">
    <text><![CDATA[IO]]></text>
  </DocumentChange>
  <Command __id="3356" _type="PauseCommand" date="Wed Apr 13 16:21:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19286987">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1837]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3355" _type="Insert" date="Wed Apr 13 16:21:34 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2935" docExpressionCount="275" docLength="3474" length="7" offset="3446" repeat="7" starttimestamp="1649862007572" timestamp="19286987" timestamp2="19287833">
    <text><![CDATA[super.s]]></text>
  </DocumentChange>
  <Command __id="3357" _type="InsertStringCommand" date="Wed Apr 13 16:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="19286995" timestamp2="19286995">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3359" _type="InsertStringCommand" date="Wed Apr 13 16:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="19287092" timestamp2="19287092">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3361" _type="InsertStringCommand" date="Wed Apr 13 16:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="19287164" timestamp2="19287164">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3363" _type="InsertStringCommand" date="Wed Apr 13 16:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="19287244" timestamp2="19287244">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3365" _type="InsertStringCommand" date="Wed Apr 13 16:21:34 EDT 2022" starttimestamp="1649862007572" timestamp="19287340" timestamp2="19287340">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3367" _type="InsertStringCommand" date="Wed Apr 13 16:21:35 EDT 2022" starttimestamp="1649862007572" timestamp="19287501" timestamp2="19287501">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3368" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 16:21:35 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="19287501" />
  <Command __id="3371" _type="PauseCommand" date="Wed Apr 13 16:21:36 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19288544">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1043]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3370" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 16:21:36 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="19288544" />
  <Command __id="3373" _type="InsertStringCommand" date="Wed Apr 13 16:21:36 EDT 2022" starttimestamp="1649862007572" timestamp="19288644" timestamp2="19288644">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3375" _type="PauseCommand" date="Wed Apr 13 16:21:37 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19289897">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1253]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3374" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="19289897" />
  <Command __id="3376" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="19289994" />
  <Command __id="3377" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:21:37 EDT 2022" starttimestamp="1649862007572" timestamp="19290071" />
  <Command __id="3378" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 16:21:37 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="19290071" />
  <Command __id="3380" _type="PauseCommand" date="Wed Apr 13 16:21:48 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="19301366">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[11295]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3379" _type="SelectTextCommand" caretOffset="3358" date="Wed Apr 13 16:21:48 EDT 2022" end="3388" start="3358" starttimestamp="1649862007572" timestamp="19301366" />
  <Command __id="3382" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:21:49 EDT 2022" starttimestamp="1649862007572" timestamp="19301683" />
  <Command __id="3384" _type="PauseCommand" date="Wed Apr 13 16:21:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19303191">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1508]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3383" _type="SelectTextCommand" caretOffset="3173" date="Wed Apr 13 16:21:50 EDT 2022" end="3267" start="3173" starttimestamp="1649862007572" timestamp="19303191" />
  <Command __id="3386" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:21:51 EDT 2022" starttimestamp="1649862007572" timestamp="19303459" />
  <Command __id="3388" _type="PauseCommand" date="Wed Apr 13 16:21:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19305801">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2342]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3387" _type="MoveCaretCommand" caretOffset="3375" date="Wed Apr 13 16:21:53 EDT 2022" docOffset="3375" starttimestamp="1649862007572" timestamp="19305801" />
  <Command __id="3390" _type="PauseCommand" date="Wed Apr 13 16:21:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19310632">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4831]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3389" _type="MoveCaretCommand" caretOffset="3370" date="Wed Apr 13 16:21:58 EDT 2022" docOffset="3370" starttimestamp="1649862007572" timestamp="19310632" />
  <DocumentChange __id="3372" _type="Replace" date="Wed Apr 13 16:21:36 EDT 2022" docASTNodeCount="423" docActiveCodeLength="2962" docExpressionCount="274" docLength="3501" endLine="117" insertionLength="28" int_docASTNodeCount="419" int_docActiveCodeLength="2934" int_docExpressionCount="271" int_docLength="3473" length="1" offset="3452" startLine="117" starttimestamp="1649862007572" timestamp="19288544">
    <deletedText><![CDATA[s]]></deletedText>
    <insertedText><![CDATA[simulationCommand(aCommand);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3381" _type="Delete" date="Wed Apr 13 16:21:49 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2932" docExpressionCount="268" docLength="3471" endLine="113" length="30" offset="3358" startLine="113" starttimestamp="1649862007572" timestamp="19301666">
    <text><![CDATA[System.out.println(mechanism);]]></text>
  </DocumentChange>
  <DocumentChange __id="3385" _type="Delete" date="Wed Apr 13 16:21:51 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2919" docExpressionCount="268" docLength="3377" endLine="110" length="94" offset="3173" startLine="107" starttimestamp="1649862007572" timestamp="19303459">
    <text><![CDATA[	//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}]]></text>
  </DocumentChange>
  <Command __id="3392" _type="PauseCommand" date="Wed Apr 13 16:22:00 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19312432">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1800]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3393" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:22:00 EDT 2022" starttimestamp="1649862007572" timestamp="19312440" />
  <Command __id="3395" _type="PauseCommand" date="Wed Apr 13 16:22:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19313746">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1306]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3394" _type="MoveCaretCommand" caretOffset="3365" date="Wed Apr 13 16:22:01 EDT 2022" docOffset="3365" starttimestamp="1649862007572" timestamp="19313746" />
  <Command __id="3397" _type="PauseCommand" date="Wed Apr 13 16:22:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19315677">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1931]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3396" _type="MoveCaretCommand" caretOffset="3361" date="Wed Apr 13 16:22:03 EDT 2022" docOffset="3361" starttimestamp="1649862007572" timestamp="19315677" />
  <Command __id="3399" _type="PauseCommand" date="Wed Apr 13 16:22:05 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19317662">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1985]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3398" _type="SelectTextCommand" caretOffset="3121" date="Wed Apr 13 16:22:05 EDT 2022" end="3365" start="3121" starttimestamp="1649862007572" timestamp="19317662" />
  <Command __id="3403" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.format" date="Wed Apr 13 16:22:06 EDT 2022" starttimestamp="1649862007572" timestamp="19318572" />
  <Command __id="3405" _type="PauseCommand" date="Wed Apr 13 16:22:07 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19319906">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1334]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3404" _type="MoveCaretCommand" caretOffset="3261" date="Wed Apr 13 16:22:07 EDT 2022" docOffset="3261" starttimestamp="1649862007572" timestamp="19319906" />
  <Command __id="3407" _type="PauseCommand" date="Wed Apr 13 16:22:10 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19322566">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2660]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3406" _type="SelectTextCommand" caretOffset="3041" date="Wed Apr 13 16:22:10 EDT 2022" end="3119" start="3041" starttimestamp="1649862007572" timestamp="19322566" />
  <Command __id="3409" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:22:10 EDT 2022" starttimestamp="1649862007572" timestamp="19322833" />
  <Command __id="3411" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Apr 13 16:22:11 EDT 2022" starttimestamp="1649862007572" timestamp="19323642" />
  <Command __id="3413" _type="PauseCommand" date="Wed Apr 13 16:22:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19325171">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1529]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3412" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:22:12 EDT 2022" starttimestamp="1649862007572" timestamp="19325171" />
  <Command __id="3414" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:22:12 EDT 2022" starttimestamp="1649862007572" timestamp="19325244" />
  <Command __id="3415" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:22:12 EDT 2022" starttimestamp="1649862007572" timestamp="19325301" />
  <DocumentChange __id="3391" _type="Delete" date="Wed Apr 13 16:22:00 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2918" docExpressionCount="268" docLength="3376" endLine="117" length="1" offset="3369" startLine="117" starttimestamp="1649862007572" timestamp="19312432">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="3400" _type="Insert" date="Wed Apr 13 16:22:06 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2919" docExpressionCount="268" docLength="3377" length="1" offset="3278" starttimestamp="1649862007572" timestamp="19318552">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3401" _type="Replace" date="Wed Apr 13 16:22:06 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2909" docExpressionCount="268" docLength="3367" endLine="113" insertionLength="6" int_docASTNodeCount="416" int_docActiveCodeLength="2903" int_docExpressionCount="268" int_docLength="3361" length="16" offset="3260" startLine="109" starttimestamp="1649862007572" timestamp="19318552">
    <deletedText><![CDATA[
		
		
		
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3402" _type="Replace" date="Wed Apr 13 16:22:06 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2908" docExpressionCount="268" docLength="3366" endLine="108" insertionLength="6" int_docASTNodeCount="416" int_docActiveCodeLength="2902" int_docExpressionCount="268" int_docLength="3360" length="7" offset="3170" startLine="106" starttimestamp="1649862007572" timestamp="19318552">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3408" _type="Delete" date="Wed Apr 13 16:22:10 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2905" docExpressionCount="268" docLength="3286" endLine="106" length="80" offset="3041" repeat="2" startLine="103" starttimestamp="1649862007572" timestamp="19322825" timestamp2="19323633">
    <text><![CDATA[	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
]]></text>
  </DocumentChange>
  <Command __id="3417" _type="PauseCommand" date="Wed Apr 13 16:22:17 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19329866">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4565]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3418" _type="SelectTextCommand" caretOffset="5792" date="Wed Apr 13 16:22:18 EDT 2022" end="6203" start="5792" starttimestamp="1649862007572" timestamp="19330468" />
  <Command __id="3420" _type="PauseCommand" date="Wed Apr 13 16:22:31 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="19344111">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[13643]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3419" _type="MoveCaretCommand" caretOffset="6029" date="Wed Apr 13 16:22:31 EDT 2022" docOffset="7704" starttimestamp="1649862007572" timestamp="19344111" />
  <Command __id="3422" _type="PauseCommand" date="Wed Apr 13 16:23:11 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="19383452">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[39341]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3421" _type="SelectTextCommand" caretOffset="6792" date="Wed Apr 13 16:23:11 EDT 2022" end="7185" start="6792" starttimestamp="1649862007572" timestamp="19383452" />
  <Command __id="3423" _type="CopyCommand" date="Wed Apr 13 16:23:11 EDT 2022" starttimestamp="1649862007572" timestamp="19384138" />
  <Command __id="3416" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:22:17 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="19329866">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3425" _type="PauseCommand" date="Wed Apr 13 16:23:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19386997">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2859]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3426" _type="SelectTextCommand" caretOffset="2778" date="Wed Apr 13 16:23:14 EDT 2022" end="2799" start="2778" starttimestamp="1649862007572" timestamp="19387277" />
  <Command __id="3424" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:23:14 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="19386997">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3428" _type="PauseCommand" date="Wed Apr 13 16:23:21 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19393854">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[6577]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3429" _type="MoveCaretCommand" caretOffset="3041" date="Wed Apr 13 16:23:22 EDT 2022" docOffset="3041" starttimestamp="1649862007572" timestamp="19394558" />
  <Command __id="3431" _type="PauseCommand" date="Wed Apr 13 16:23:25 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19397759">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3201]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3430" _type="MoveCaretCommand" caretOffset="3271" date="Wed Apr 13 16:23:25 EDT 2022" docOffset="3271" starttimestamp="1649862007572" timestamp="19397759" />
  <Command __id="3427" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:23:21 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2905" docExpressionCount="268" docLength="3286" projectName="A6" starttimestamp="1649862007572" timestamp="19393854">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;"), Diff(INSERT,"¶import util.interactiveMethodInvocation.IPCMechanism;"), Diff(EQUAL,"¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}"), Diff(INSERT,"¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			super.simulationCommand(aCommand);¶		}¶	}¶		"), Diff(EQUAL,"¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import util.interactiveMethodInvocation.IPCMechanism;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");

		if (!mechanism.toString().equals("NIO")) {
			super.simulationCommand(aCommand);
		}
	}
		

}
]]></snapshot>
  </Command>
  <Command __id="3433" _type="PauseCommand" date="Wed Apr 13 16:23:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19399701">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1942]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3432" _type="Insert" date="Wed Apr 13 16:23:27 EDT 2022" docASTNodeCount="416" docActiveCodeLength="2913" docExpressionCount="268" docLength="3294" length="8" offset="3271" repeat="2" starttimestamp="1649862007572" timestamp="19399701" timestamp2="19399908">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <Command __id="3434" _type="InsertStringCommand" date="Wed Apr 13 16:23:27 EDT 2022" starttimestamp="1649862007572" timestamp="19399709" timestamp2="19399709">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3436" _type="InsertStringCommand" date="Wed Apr 13 16:23:27 EDT 2022" starttimestamp="1649862007572" timestamp="19399908" timestamp2="19399908">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3442" _type="PasteCommand" date="Wed Apr 13 16:23:28 EDT 2022" starttimestamp="1649862007572" timestamp="19400949" />
  <Command __id="3444" _type="PauseCommand" date="Wed Apr 13 16:23:29 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19402065">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1116]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3443" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:23:29 EDT 2022" starttimestamp="1649862007572" timestamp="19402065" />
  <Command __id="3445" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:23:29 EDT 2022" starttimestamp="1649862007572" timestamp="19402152" />
  <Command __id="3446" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:23:29 EDT 2022" starttimestamp="1649862007572" timestamp="19402195" />
  <Command __id="3448" _type="PauseCommand" date="Wed Apr 13 16:23:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19404531">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2336]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3447" _type="MoveCaretCommand" caretOffset="3352" date="Wed Apr 13 16:23:32 EDT 2022" docOffset="3352" starttimestamp="1649862007572" timestamp="19404531" />
  <Command __id="3450" _type="InsertStringCommand" date="Wed Apr 13 16:23:32 EDT 2022" starttimestamp="1649862007572" timestamp="19404793" timestamp2="19404793">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3452" _type="InsertStringCommand" date="Wed Apr 13 16:23:32 EDT 2022" starttimestamp="1649862007572" timestamp="19404941" timestamp2="19404941">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3454" _type="InsertStringCommand" date="Wed Apr 13 16:23:32 EDT 2022" starttimestamp="1649862007572" timestamp="19405022" timestamp2="19405022">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3456" _type="InsertStringCommand" date="Wed Apr 13 16:23:32 EDT 2022" starttimestamp="1649862007572" timestamp="19405168" timestamp2="19405168">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3458" _type="InsertStringCommand" date="Wed Apr 13 16:23:32 EDT 2022" starttimestamp="1649862007572" timestamp="19405257" timestamp2="19405257">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3460" _type="InsertStringCommand" date="Wed Apr 13 16:23:33 EDT 2022" starttimestamp="1649862007572" timestamp="19405436" timestamp2="19405436">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3462" _type="InsertStringCommand" date="Wed Apr 13 16:23:33 EDT 2022" starttimestamp="1649862007572" timestamp="19405493" timestamp2="19405493">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3464" _type="InsertStringCommand" date="Wed Apr 13 16:23:33 EDT 2022" starttimestamp="1649862007572" timestamp="19405664" timestamp2="19405664">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3465" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:23:33 EDT 2022" starttimestamp="1649862007572" timestamp="19406260" />
  <Command __id="3466" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:23:33 EDT 2022" starttimestamp="1649862007572" timestamp="19406348" />
  <Command __id="3467" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:23:33 EDT 2022" starttimestamp="1649862007572" timestamp="19406425" />
  <Command __id="3469" _type="PauseCommand" date="Wed Apr 13 16:23:40 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19412716">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6291]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3468" _type="MoveCaretCommand" caretOffset="3436" date="Wed Apr 13 16:23:40 EDT 2022" docOffset="3436" starttimestamp="1649862007572" timestamp="19412716" />
  <Command __id="3471" _type="InsertStringCommand" date="Wed Apr 13 16:23:40 EDT 2022" starttimestamp="1649862007572" timestamp="19413274" timestamp2="19413274">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3473" _type="InsertStringCommand" date="Wed Apr 13 16:23:40 EDT 2022" starttimestamp="1649862007572" timestamp="19413391" timestamp2="19413391">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3475" _type="InsertStringCommand" date="Wed Apr 13 16:23:41 EDT 2022" starttimestamp="1649862007572" timestamp="19413433" timestamp2="19413433">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3477" _type="InsertStringCommand" date="Wed Apr 13 16:23:41 EDT 2022" starttimestamp="1649862007572" timestamp="19413587" timestamp2="19413587">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3479" _type="InsertStringCommand" date="Wed Apr 13 16:23:41 EDT 2022" starttimestamp="1649862007572" timestamp="19413652" timestamp2="19413652">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3481" _type="InsertStringCommand" date="Wed Apr 13 16:23:41 EDT 2022" starttimestamp="1649862007572" timestamp="19413780" timestamp2="19413780">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3482" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 16:23:41 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="19413788" />
  <Command __id="3484" _type="PauseCommand" date="Wed Apr 13 16:23:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19416110">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2322]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3483" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 16:23:43 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="19416110" />
  <Command __id="3485" _type="MoveCaretCommand" caretOffset="3373" date="Wed Apr 13 16:23:43 EDT 2022" docOffset="3373" starttimestamp="1649862007572" timestamp="19416174" />
  <Command __id="3487" _type="PauseCommand" date="Wed Apr 13 16:23:49 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19422154">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5980]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3495" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:23:52 EDT 2022" starttimestamp="1649862007572" timestamp="19424754" />
  <Command __id="3497" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:23:52 EDT 2022" starttimestamp="1649862007572" timestamp="19424859" />
  <Command __id="3498" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:23:52 EDT 2022" starttimestamp="1649862007572" timestamp="19424912" />
  <DocumentChange __id="3437" _type="Replace" date="Wed Apr 13 16:23:28 EDT 2022" docASTNodeCount="449" docActiveCodeLength="3220" docExpressionCount="291" docLength="3703" endLine="112" insertionLength="411" int_docASTNodeCount="416" int_docActiveCodeLength="2911" int_docExpressionCount="268" int_docLength="3292" length="2" offset="3277" startLine="112" starttimestamp="1649862007572" timestamp="19400791">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		//IPC Mechanism Change
				ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
				try {
					server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				commandProcessor.setInputString(aCommand); // all commands go to the first command window]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3438" _type="Insert" date="Wed Apr 13 16:23:28 EDT 2022" docASTNodeCount="459" docActiveCodeLength="3272" docExpressionCount="300" docLength="3755" length="52" offset="652" repeat="2" starttimestamp="1649862007572" timestamp="19400882" timestamp2="19400882">
    <text><![CDATA[
import util.trace.port.consensus.ProposedStateSet;]]></text>
  </DocumentChange>
  <DocumentChange __id="3440" _type="Insert" date="Wed Apr 13 16:23:28 EDT 2022" docASTNodeCount="465" docActiveCodeLength="3306" docExpressionCount="305" docLength="3789" length="34" offset="233" repeat="2" starttimestamp="1649862007572" timestamp="19400890" timestamp2="19400890">
    <text><![CDATA[
import java.rmi.RemoteException;]]></text>
  </DocumentChange>
  <DocumentChange __id="3449" _type="Insert" date="Wed Apr 13 16:23:32 EDT 2022" docASTNodeCount="466" docActiveCodeLength="3318" docExpressionCount="305" docLength="3801" length="12" offset="3352" repeat="8" starttimestamp="1649862007572" timestamp="19404776" timestamp2="19405656">
    <text><![CDATA[
			return;]]></text>
  </DocumentChange>
  <DocumentChange __id="3470" _type="Insert" date="Wed Apr 13 16:23:40 EDT 2022" docASTNodeCount="467" docActiveCodeLength="3324" docExpressionCount="306" docLength="3807" length="6" offset="3436" repeat="6" starttimestamp="1649862007572" timestamp="19413266" timestamp2="19413772">
    <text><![CDATA[super.]]></text>
  </DocumentChange>
  <Command __id="3489" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:23:50 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8894" docExpressionCount="826" docLength="9763" projectName="A6" starttimestamp="1649862007572" timestamp="19422655">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3490" _type="Delete" date="Wed Apr 13 16:23:50 EDT 2022" docASTNodeCount="1154" docActiveCodeLength="8886" docExpressionCount="826" docLength="9755" endLine="58" length="8" offset="2456" repeat="2" startLine="58" starttimestamp="1649862007572" timestamp="19422700" timestamp2="19422706">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="3492" _type="Insert" date="Wed Apr 13 16:23:50 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8896" docExpressionCount="826" docLength="9765" length="10" offset="2456" repeat="2" starttimestamp="1649862007572" timestamp="19422708" timestamp2="19422709">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <Command __id="3500" _type="PauseCommand" date="Wed Apr 13 16:23:54 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19427084">
    <prevType><![CDATA[Save]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2172]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3501" _type="MoveCaretCommand" caretOffset="3373" date="Wed Apr 13 16:23:54 EDT 2022" docOffset="3373" starttimestamp="1649862007572" timestamp="19427383" />
  <Command __id="3503" _type="PauseCommand" date="Wed Apr 13 16:23:56 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19428862">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1479]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3502" _type="MoveCaretCommand" caretOffset="3455" date="Wed Apr 13 16:23:56 EDT 2022" docOffset="3455" starttimestamp="1649862007572" timestamp="19428862" />
  <Command __id="3505" _type="InsertStringCommand" date="Wed Apr 13 16:23:57 EDT 2022" starttimestamp="1649862007572" timestamp="19429630" timestamp2="19429630">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3507" _type="InsertStringCommand" date="Wed Apr 13 16:23:57 EDT 2022" starttimestamp="1649862007572" timestamp="19429814" timestamp2="19429814">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3509" _type="InsertStringCommand" date="Wed Apr 13 16:23:57 EDT 2022" starttimestamp="1649862007572" timestamp="19429895" timestamp2="19429895">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3511" _type="InsertStringCommand" date="Wed Apr 13 16:23:58 EDT 2022" starttimestamp="1649862007572" timestamp="19430754" timestamp2="19430754">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3513" _type="InsertStringCommand" date="Wed Apr 13 16:23:58 EDT 2022" starttimestamp="1649862007572" timestamp="19430884" timestamp2="19430884">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3515" _type="InsertStringCommand" date="Wed Apr 13 16:23:58 EDT 2022" starttimestamp="1649862007572" timestamp="19431057" timestamp2="19431057">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="3517" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:23:59 EDT 2022" starttimestamp="1649862007572" timestamp="19431710" />
  <Command __id="3519" _type="InsertStringCommand" date="Wed Apr 13 16:23:59 EDT 2022" starttimestamp="1649862007572" timestamp="19432381" timestamp2="19432381">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3520" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 16:23:59 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="19432381" />
  <Command __id="3522" _type="PauseCommand" date="Wed Apr 13 16:24:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19434212">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1831]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3521" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:24:01 EDT 2022" starttimestamp="1649862007572" timestamp="19434212" />
  <Command __id="3523" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:24:01 EDT 2022" starttimestamp="1649862007572" timestamp="19434301" />
  <Command __id="3524" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:24:01 EDT 2022" starttimestamp="1649862007572" timestamp="19434375" />
  <Command __id="3525" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 16:24:01 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="19434404" />
  <Command __id="3527" _type="PauseCommand" date="Wed Apr 13 16:24:09 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19441519">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[7115]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3534" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="19443228" />
  <Command __id="3536" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="19443323" />
  <Command __id="3537" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:24:10 EDT 2022" starttimestamp="1649862007572" timestamp="19443406" />
  <Command __id="3538" _type="SelectTextCommand" caretOffset="1023" date="Wed Apr 13 16:24:11 EDT 2022" end="1023" start="1014" starttimestamp="1649862007572" timestamp="19443463" />
  <Command __id="3499" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:23:54 EDT 2022" docASTNodeCount="467" docActiveCodeLength="3324" docExpressionCount="306" docLength="3807" projectName="A6" starttimestamp="1649862007572" timestamp="19427084">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶"), Diff(INSERT,"import java.rmi.RemoteException;¶"), Diff(EQUAL,"import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;"), Diff(INSERT,"¶import util.trace.port.consensus.ProposedStateSet;"), Diff(EQUAL,"¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			super.simulationCommand(aCommand);¶		"), Diff(DELETE,"}"), Diff(INSERT,"	return;¶		}¶		¶		//IPC Mechanism Change¶				ProposedStateSet.newCase(this, super.CLIENT_NAME, aProposalNumber, mechanism);¶				try {¶					server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				commandProcessor.setInputString(aCommand); // all commands go to the first command window"), Diff(EQUAL,"¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");

		if (!mechanism.toString().equals("NIO")) {
			super.simulationCommand(aCommand);
			return;
		}
		
		//IPC Mechanism Change
				ProposedStateSet.newCase(this, super.CLIENT_NAME, aProposalNumber, mechanism);
				try {
					server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
		

}
]]></snapshot>
  </Command>
  <DocumentChange __id="3504" _type="Insert" date="Wed Apr 13 16:23:57 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3330" docExpressionCount="307" docLength="3813" length="6" offset="3455" repeat="6" starttimestamp="1649862007572" timestamp="19429622" timestamp2="19431046">
    <text><![CDATA[super,]]></text>
  </DocumentChange>
  <DocumentChange __id="3516" _type="Delete" date="Wed Apr 13 16:23:59 EDT 2022" docASTNodeCount="467" docActiveCodeLength="3329" docExpressionCount="306" docLength="3812" endLine="116" length="1" offset="3460" startLine="116" starttimestamp="1649862007572" timestamp="19431710">
    <text><![CDATA[,]]></text>
  </DocumentChange>
  <DocumentChange __id="3518" _type="Insert" date="Wed Apr 13 16:23:59 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3330" docExpressionCount="307" docLength="3813" length="1" offset="3460" starttimestamp="1649862007572" timestamp="19432365">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="3529" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:24:09 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8896" docExpressionCount="826" docLength="9765" projectName="A6" starttimestamp="1649862007572" timestamp="19441994">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	pr"), Diff(DELETE,"ivate"), Diff(INSERT,"otected"), Diff(EQUAL," static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	protected static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <DocumentChange __id="3530" _type="Delete" date="Wed Apr 13 16:24:09 EDT 2022" docASTNodeCount="1154" docActiveCodeLength="8888" docExpressionCount="826" docLength="9757" endLine="65" length="8" offset="2689" repeat="2" startLine="65" starttimestamp="1649862007572" timestamp="19442044" timestamp2="19442054">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="3532" _type="Insert" date="Wed Apr 13 16:24:09 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8898" docExpressionCount="826" docLength="9767" length="10" offset="2689" repeat="2" starttimestamp="1649862007572" timestamp="19442057" timestamp2="19442061">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <Command __id="3540" _type="PauseCommand" date="Wed Apr 13 16:24:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19444904">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1441]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3541" _type="MoveCaretCommand" caretOffset="3461" date="Wed Apr 13 16:24:12 EDT 2022" docOffset="3461" starttimestamp="1649862007572" timestamp="19445126" />
  <Command __id="3542" _type="MoveCaretCommand" caretOffset="3373" date="Wed Apr 13 16:24:13 EDT 2022" docOffset="3373" starttimestamp="1649862007572" timestamp="19446071" />
  <Command __id="3544" _type="PauseCommand" date="Wed Apr 13 16:24:19 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19452120">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6049]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3543" _type="ShellCommand" date="Wed Apr 13 16:24:19 EDT 2022" starttimestamp="1649862007572" timestamp="19452120" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3545" _type="ShellCommand" date="Wed Apr 13 16:24:19 EDT 2022" starttimestamp="1649862007572" timestamp="19452350" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3549" _type="MoveCaretCommand" caretOffset="791" date="Wed Apr 13 16:24:20 EDT 2022" docOffset="2466" starttimestamp="1649862007572" timestamp="19453150" />
  <Command __id="3550" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:24:21 EDT 2022" starttimestamp="1649862007572" timestamp="19453983" />
  <Command __id="3551" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:24:21 EDT 2022" starttimestamp="1649862007572" timestamp="19454103" />
  <Command __id="3552" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:24:21 EDT 2022" starttimestamp="1649862007572" timestamp="19454120" />
  <Command __id="3539" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:24:12 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3330" docExpressionCount="307" docLength="3813" projectName="A6" starttimestamp="1649862007572" timestamp="19444904">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		//IPC Mechanism Change¶				ProposedStateSet.newCase(this, super.CLIENT_NAME, "), Diff(INSERT,"super."), Diff(EQUAL,"aProposalNumber, mechanism);¶				try {¶					server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");

		if (!mechanism.toString().equals("NIO")) {
			super.simulationCommand(aCommand);
			return;
		}
		
		//IPC Mechanism Change
				ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
				try {
					server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
		

}
]]></snapshot>
  </Command>
  <Command __id="3546" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:24:20 EDT 2022" docASTNodeCount="1155" docActiveCodeLength="8898" docExpressionCount="826" docLength="9767" projectName="A6" starttimestamp="1649862007572" timestamp="19452609">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	pr"), Diff(DELETE,"ivate"), Diff(INSERT,"otected"), Diff(EQUAL," static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	protected static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	protected static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <DocumentChange __id="3547" _type="Delete" date="Wed Apr 13 16:24:20 EDT 2022" docASTNodeCount="1154" docActiveCodeLength="8891" docExpressionCount="826" docLength="9760" endLine="58" length="7" offset="2465" repeat="2" startLine="58" starttimestamp="1649862007572" timestamp="19452649" timestamp2="19452657">
    <text><![CDATA[ static]]></text>
  </DocumentChange>
  <Command __id="3554" _type="PauseCommand" date="Wed Apr 13 16:24:24 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19456814">
    <prevType><![CDATA[Save]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2694]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3555" _type="MoveCaretCommand" caretOffset="3373" date="Wed Apr 13 16:24:24 EDT 2022" docOffset="3373" starttimestamp="1649862007572" timestamp="19457086" />
  <Command __id="3557" _type="PauseCommand" date="Wed Apr 13 16:24:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19461138">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4052]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3556" _type="ShellCommand" date="Wed Apr 13 16:24:28 EDT 2022" starttimestamp="1649862007572" timestamp="19461138" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3558" _type="ShellCommand" date="Wed Apr 13 16:24:28 EDT 2022" starttimestamp="1649862007572" timestamp="19461341" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3562" _type="MoveCaretCommand" caretOffset="1017" date="Wed Apr 13 16:24:29 EDT 2022" docOffset="2692" starttimestamp="1649862007572" timestamp="19461913" />
  <Command __id="3563" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:24:30 EDT 2022" starttimestamp="1649862007572" timestamp="19462657" />
  <Command __id="3564" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:24:30 EDT 2022" starttimestamp="1649862007572" timestamp="19462764" />
  <Command __id="3565" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:24:30 EDT 2022" starttimestamp="1649862007572" timestamp="19462842" />
  <Command __id="3553" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:24:24 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3330" docExpressionCount="307" docLength="3813" projectName="A6" starttimestamp="1649862007572" timestamp="19456814">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		//IPC Mechanism Change¶				ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶				try {¶					server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3559" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:24:29 EDT 2022" docASTNodeCount="1154" docActiveCodeLength="8891" docExpressionCount="826" docLength="9760" projectName="A6" starttimestamp="1649862007572" timestamp="19461547">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected "), Diff(DELETE,"static "), Diff(EQUAL,"String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	protected static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	protected String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	protected static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <DocumentChange __id="3560" _type="Delete" date="Wed Apr 13 16:24:29 EDT 2022" docASTNodeCount="1153" docActiveCodeLength="8884" docExpressionCount="826" docLength="9753" endLine="65" length="7" offset="2691" repeat="2" startLine="65" starttimestamp="1649862007572" timestamp="19461587" timestamp2="19461590">
    <text><![CDATA[ static]]></text>
  </DocumentChange>
  <Command __id="3567" _type="PauseCommand" date="Wed Apr 13 16:25:06 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="19498532">
    <prevType><![CDATA[Save]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[35690]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3568" _type="MoveCaretCommand" caretOffset="3373" date="Wed Apr 13 16:25:06 EDT 2022" docOffset="3373" starttimestamp="1649862007572" timestamp="19498740" />
  <Command __id="3570" _type="PauseCommand" date="Wed Apr 13 16:25:10 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19502910">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4170]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3569" _type="SelectTextCommand" caretOffset="3180" date="Wed Apr 13 16:25:10 EDT 2022" end="3802" start="3180" starttimestamp="1649862007572" timestamp="19502910" />
  <Command __id="3566" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:25:06 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3330" docExpressionCount="307" docLength="3813" projectName="A6" starttimestamp="1649862007572" timestamp="19498532">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		//IPC Mechanism Change¶				ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶				try {¶					server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3572" _type="PauseCommand" date="Wed Apr 13 16:25:11 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19503968">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1058]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="3582" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.format" date="Wed Apr 13 16:25:11 EDT 2022" starttimestamp="1649862007572" timestamp="19504001" />
  <Command __id="3583" _type="MoveCaretCommand" caretOffset="3495" date="Wed Apr 13 16:25:12 EDT 2022" docOffset="3495" starttimestamp="1649862007572" timestamp="19504953" />
  <Command __id="3585" _type="PauseCommand" date="Wed Apr 13 16:25:18 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19510684">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5731]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3584" _type="ShellCommand" date="Wed Apr 13 16:25:18 EDT 2022" starttimestamp="1649862007572" timestamp="19510684" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3586" _type="ShellCommand" date="Wed Apr 13 16:25:18 EDT 2022" starttimestamp="1649862007572" timestamp="19510928" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3592" _type="SelectTextCommand" caretOffset="960" date="Wed Apr 13 16:25:19 EDT 2022" end="960" start="951" starttimestamp="1649862007572" timestamp="19511830" />
  <Command __id="3594" _type="PauseCommand" date="Wed Apr 13 16:25:21 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19513587">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1757]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3593" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:25:21 EDT 2022" starttimestamp="1649862007572" timestamp="19513587" />
  <Command __id="3595" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:25:21 EDT 2022" starttimestamp="1649862007572" timestamp="19513672" />
  <Command __id="3596" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:25:21 EDT 2022" starttimestamp="1649862007572" timestamp="19513756" />
  <Command __id="3598" _type="PauseCommand" date="Wed Apr 13 16:25:23 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19515912">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2156]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <DocumentChange __id="3571" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3328" docExpressionCount="307" docLength="3811" endLine="123" insertionLength="4" int_docASTNodeCount="468" int_docActiveCodeLength="3324" int_docExpressionCount="307" int_docLength="3807" length="6" offset="3703" startLine="122" starttimestamp="1649862007572" timestamp="19503968">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3573" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3326" docExpressionCount="307" docLength="3809" endLine="122" insertionLength="4" int_docASTNodeCount="468" int_docActiveCodeLength="3322" int_docExpressionCount="307" int_docLength="3805" length="6" offset="3696" startLine="121" starttimestamp="1649862007572" timestamp="19503976">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3574" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3324" docExpressionCount="307" docLength="3807" endLine="121" insertionLength="5" int_docASTNodeCount="464" int_docActiveCodeLength="3299" int_docExpressionCount="304" int_docLength="3802" length="7" offset="3669" startLine="120" starttimestamp="1649862007572" timestamp="19503984">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3575" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3322" docExpressionCount="307" docLength="3805" endLine="120" insertionLength="5" int_docASTNodeCount="468" int_docActiveCodeLength="3317" int_docExpressionCount="307" int_docLength="3800" length="7" offset="3628" startLine="119" starttimestamp="1649862007572" timestamp="19503985">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3576" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3320" docExpressionCount="307" docLength="3803" endLine="119" insertionLength="4" int_docASTNodeCount="468" int_docActiveCodeLength="3316" int_docExpressionCount="307" int_docLength="3799" length="6" offset="3593" startLine="118" starttimestamp="1649862007572" timestamp="19503985">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3577" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3318" docExpressionCount="307" docLength="3801" endLine="118" insertionLength="5" int_docASTNodeCount="468" int_docActiveCodeLength="3313" int_docExpressionCount="307" int_docLength="3796" length="7" offset="3500" startLine="117" starttimestamp="1649862007572" timestamp="19503985">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3578" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3316" docExpressionCount="307" docLength="3799" endLine="117" insertionLength="4" int_docASTNodeCount="468" int_docActiveCodeLength="3312" int_docExpressionCount="307" int_docLength="3795" length="6" offset="3489" startLine="116" starttimestamp="1649862007572" timestamp="19503985">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3579" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3314" docExpressionCount="307" docLength="3797" endLine="116" insertionLength="4" int_docASTNodeCount="458" int_docActiveCodeLength="3226" int_docExpressionCount="298" int_docLength="3793" length="6" offset="3399" startLine="115" starttimestamp="1649862007572" timestamp="19503993">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3580" _type="Insert" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3314" docExpressionCount="307" docLength="3798" length="1" offset="3379" starttimestamp="1649862007572" timestamp="19503993">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3581" _type="Replace" date="Wed Apr 13 16:25:11 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3312" docExpressionCount="307" docLength="3796" endLine="115" insertionLength="6" int_docASTNodeCount="468" int_docActiveCodeLength="3306" int_docExpressionCount="307" int_docLength="3790" length="8" offset="3369" startLine="113" starttimestamp="1649862007572" timestamp="19503993">
    <deletedText><![CDATA[
		
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <Command __id="3587" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:25:18 EDT 2022" docASTNodeCount="1153" docActiveCodeLength="8884" docExpressionCount="826" docLength="9753" projectName="A6" starttimestamp="1649862007572" timestamp="19511136">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	protected "), Diff(DELETE,"static "), Diff(EQUAL,"int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	protected String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	protected int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <DocumentChange __id="3588" _type="Delete" date="Wed Apr 13 16:25:18 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8876" docExpressionCount="826" docLength="9745" endLine="64" length="8" offset="2626" repeat="2" startLine="64" starttimestamp="1649862007572" timestamp="19511161" timestamp2="19511169">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="3590" _type="Insert" date="Wed Apr 13 16:25:18 EDT 2022" docASTNodeCount="1153" docActiveCodeLength="8886" docExpressionCount="826" docLength="9755" length="10" offset="2626" repeat="2" starttimestamp="1649862007572" timestamp="19511169" timestamp2="19511177">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <Command __id="3597" _type="SelectTextCommand" caretOffset="961" date="Wed Apr 13 16:25:23 EDT 2022" end="967" start="961" starttimestamp="1649862007572" timestamp="19515912" />
  <Command __id="3600" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:25:23 EDT 2022" starttimestamp="1649862007572" timestamp="19516378" />
  <Command __id="3603" _type="PauseCommand" date="Wed Apr 13 16:25:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19517633">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1255]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3602" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Apr 13 16:25:25 EDT 2022" starttimestamp="1649862007572" timestamp="19517633" />
  <Command __id="3604" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:25:26 EDT 2022" starttimestamp="1649862007572" timestamp="19518617" />
  <Command __id="3605" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:25:26 EDT 2022" starttimestamp="1649862007572" timestamp="19518702" />
  <Command __id="3606" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:25:26 EDT 2022" starttimestamp="1649862007572" timestamp="19518796" />
  <DocumentChange __id="3599" _type="Delete" date="Wed Apr 13 16:25:23 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8879" docExpressionCount="826" docLength="9748" endLine="64" length="7" offset="2636" repeat="2" startLine="64" starttimestamp="1649862007572" timestamp="19516370" timestamp2="19517624">
    <text><![CDATA[static ]]></text>
  </DocumentChange>
  <Command __id="3608" _type="PauseCommand" date="Wed Apr 13 16:25:31 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19523900">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5104]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3609" _type="MoveCaretCommand" caretOffset="3495" date="Wed Apr 13 16:25:32 EDT 2022" docOffset="3495" starttimestamp="1649862007572" timestamp="19524760" />
  <Command __id="3611" _type="PauseCommand" date="Wed Apr 13 16:25:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19526723">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1963]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3610" _type="MoveCaretCommand" caretOffset="3563" date="Wed Apr 13 16:25:34 EDT 2022" docOffset="3563" starttimestamp="1649862007572" timestamp="19526723" />
  <Command __id="3613" _type="InsertStringCommand" date="Wed Apr 13 16:25:34 EDT 2022" starttimestamp="1649862007572" timestamp="19527100" timestamp2="19527100">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3615" _type="InsertStringCommand" date="Wed Apr 13 16:25:34 EDT 2022" starttimestamp="1649862007572" timestamp="19527382" timestamp2="19527382">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3617" _type="InsertStringCommand" date="Wed Apr 13 16:25:34 EDT 2022" starttimestamp="1649862007572" timestamp="19527397" timestamp2="19527397">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3619" _type="InsertStringCommand" date="Wed Apr 13 16:25:35 EDT 2022" starttimestamp="1649862007572" timestamp="19527455" timestamp2="19527455">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3621" _type="InsertStringCommand" date="Wed Apr 13 16:25:35 EDT 2022" starttimestamp="1649862007572" timestamp="19527523" timestamp2="19527523">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3623" _type="InsertStringCommand" date="Wed Apr 13 16:25:35 EDT 2022" starttimestamp="1649862007572" timestamp="19527671" timestamp2="19527671">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3624" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 16:25:35 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="19527671" />
  <Command __id="3626" _type="PauseCommand" date="Wed Apr 13 16:25:37 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19529570">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1899]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3625" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 16:25:37 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="19529570" />
  <Command __id="3627" _type="MoveCaretCommand" caretOffset="3552" date="Wed Apr 13 16:25:37 EDT 2022" docOffset="3552" starttimestamp="1649862007572" timestamp="19529713" />
  <Command __id="3628" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:25:37 EDT 2022" starttimestamp="1649862007572" timestamp="19530369" />
  <Command __id="3629" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:25:38 EDT 2022" starttimestamp="1649862007572" timestamp="19530439" />
  <Command __id="3630" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:25:38 EDT 2022" starttimestamp="1649862007572" timestamp="19530509" />
  <Command __id="3632" _type="PauseCommand" date="Wed Apr 13 16:25:45 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19538228">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7719]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3631" _type="MoveCaretCommand" caretOffset="3369" date="Wed Apr 13 16:25:45 EDT 2022" docOffset="3369" starttimestamp="1649862007572" timestamp="19538228" />
  <Command __id="3607" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:25:31 EDT 2022" docASTNodeCount="468" docActiveCodeLength="3312" docExpressionCount="307" docLength="3796" projectName="A6" starttimestamp="1649862007572" timestamp="19523900">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			super.simulationCommand(aCommand);¶			return;¶		}¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		//"), Diff(INSERT," "), Diff(EQUAL,"IPC Mechanism Change¶		"), Diff(DELETE,"		"), Diff(EQUAL,"ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		"), Diff(DELETE,"		"), Diff(EQUAL,"try {¶			"), Diff(DELETE,"		"), Diff(EQUAL,"server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		"), Diff(DELETE,"	"), Diff(DELETE,"	"), Diff(EQUAL,"} catch (RemoteException e) {¶			"), Diff(DELETE,"		"), Diff(EQUAL,"// TODO Auto-generated catch block¶			"), Diff(DELETE,"		"), Diff(EQUAL,"e.printStackTrace();¶		"), Diff(DELETE,"		"), Diff(EQUAL,"}¶		"), Diff(DELETE,"		"), Diff(EQUAL,"commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");

		if (!mechanism.toString().equals("NIO")) {
			super.simulationCommand(aCommand);
			return;
		}

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
		

}
]]></snapshot>
  </Command>
  <DocumentChange __id="3612" _type="Insert" date="Wed Apr 13 16:25:34 EDT 2022" docASTNodeCount="469" docActiveCodeLength="3318" docExpressionCount="308" docLength="3802" length="6" offset="3563" repeat="6" starttimestamp="1649862007572" timestamp="19527100" timestamp2="19527663">
    <text><![CDATA[super.]]></text>
  </DocumentChange>
  <Command __id="3634" _type="PauseCommand" date="Wed Apr 13 16:25:46 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19539287">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1059]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3633" _type="Insert" date="Wed Apr 13 16:25:46 EDT 2022" docASTNodeCount="469" docActiveCodeLength="3325" docExpressionCount="308" docLength="3809" length="7" offset="3369" repeat="4" starttimestamp="1649862007572" timestamp="19539287" timestamp2="19539969">
    <text><![CDATA[
		els]]></text>
  </DocumentChange>
  <Command __id="3635" _type="InsertStringCommand" date="Wed Apr 13 16:25:46 EDT 2022" starttimestamp="1649862007572" timestamp="19539295" timestamp2="19539295">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3637" _type="InsertStringCommand" date="Wed Apr 13 16:25:47 EDT 2022" starttimestamp="1649862007572" timestamp="19539726" timestamp2="19539726">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3639" _type="InsertStringCommand" date="Wed Apr 13 16:25:47 EDT 2022" starttimestamp="1649862007572" timestamp="19539864" timestamp2="19539864">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3641" _type="InsertStringCommand" date="Wed Apr 13 16:25:47 EDT 2022" starttimestamp="1649862007572" timestamp="19539977" timestamp2="19539977">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3643" _type="InsertStringCommand" date="Wed Apr 13 16:25:47 EDT 2022" starttimestamp="1649862007572" timestamp="19540050" timestamp2="19540050">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="3642" _type="Replace" date="Wed Apr 13 16:25:47 EDT 2022" docASTNodeCount="469" docActiveCodeLength="3326" docExpressionCount="308" docLength="3810" endLine="114" insertionLength="6" int_docASTNodeCount="469" int_docActiveCodeLength="3320" int_docExpressionCount="308" int_docLength="3804" length="5" offset="3371" startLine="114" starttimestamp="1649862007572" timestamp="19540042">
    <deletedText><![CDATA[		els]]></deletedText>
    <insertedText><![CDATA[		else]]></insertedText>
  </DocumentChange>
  <Command __id="3645" _type="PauseCommand" date="Wed Apr 13 16:25:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19541309">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1259]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="3646" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:25:48 EDT 2022" starttimestamp="1649862007572" timestamp="19541317" />
  <Command __id="3648" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:25:49 EDT 2022" starttimestamp="1649862007572" timestamp="19541497" />
  <Command __id="3650" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:25:49 EDT 2022" starttimestamp="1649862007572" timestamp="19541654" />
  <Command __id="3652" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:25:49 EDT 2022" starttimestamp="1649862007572" timestamp="19542049" />
  <DocumentChange __id="3644" _type="Delete" date="Wed Apr 13 16:25:48 EDT 2022" docASTNodeCount="469" docActiveCodeLength="3322" docExpressionCount="308" docLength="3806" endLine="114" length="4" offset="3373" repeat="4" startLine="114" starttimestamp="1649862007572" timestamp="19541309" timestamp2="19542040">
    <text><![CDATA[else]]></text>
  </DocumentChange>
  <Command __id="3654" _type="PauseCommand" date="Wed Apr 13 16:25:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19543055">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1006]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3655" _type="InsertStringCommand" date="Wed Apr 13 16:25:50 EDT 2022" starttimestamp="1649862007572" timestamp="19543060" timestamp2="19543060">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3657" _type="PauseCommand" date="Wed Apr 13 16:25:54 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19546581">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3521]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3656" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:25:54 EDT 2022" starttimestamp="1649862007572" timestamp="19546581" />
  <Command __id="3658" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:25:54 EDT 2022" starttimestamp="1649862007572" timestamp="19546653" />
  <Command __id="3659" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:25:54 EDT 2022" starttimestamp="1649862007572" timestamp="19546710" />
  <Command __id="3661" _type="PauseCommand" date="Wed Apr 13 16:26:10 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="19563219">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[16509]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3660" _type="SelectTextCommand" caretOffset="1833" date="Wed Apr 13 16:26:10 EDT 2022" end="2064" start="1833" starttimestamp="1649862007572" timestamp="19563219" />
  <Command __id="3662" _type="CopyCommand" date="Wed Apr 13 16:26:11 EDT 2022" starttimestamp="1649862007572" timestamp="19563473" />
  <Command __id="3664" _type="PauseCommand" date="Wed Apr 13 16:26:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19566763">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3290]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3663" _type="MoveCaretCommand" caretOffset="3377" date="Wed Apr 13 16:26:14 EDT 2022" docOffset="3377" starttimestamp="1649862007572" timestamp="19566763" />
  <Command __id="3666" _type="PasteCommand" date="Wed Apr 13 16:26:14 EDT 2022" starttimestamp="1649862007572" timestamp="19567017" />
  <Command __id="3668" _type="PauseCommand" date="Wed Apr 13 16:26:21 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19573932">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[6915]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3667" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:26:21 EDT 2022" starttimestamp="1649862007572" timestamp="19573932" />
  <Command __id="3669" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:26:21 EDT 2022" starttimestamp="1649862007572" timestamp="19574005" />
  <Command __id="3670" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:26:21 EDT 2022" starttimestamp="1649862007572" timestamp="19574072" />
  <Command __id="3672" _type="PauseCommand" date="Wed Apr 13 16:26:25 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19577865">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3793]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3671" _type="SelectTextCommand" caretOffset="3384" date="Wed Apr 13 16:26:25 EDT 2022" end="3393" start="3384" starttimestamp="1649862007572" timestamp="19577865" />
  <Command __id="3674" _type="PauseCommand" date="Wed Apr 13 16:26:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19580987">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3122]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3673" _type="SelectTextCommand" caretOffset="3378" date="Wed Apr 13 16:26:28 EDT 2022" end="3432" start="3378" starttimestamp="1649862007572" timestamp="19580987" />
  <Command __id="3676" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:28 EDT 2022" starttimestamp="1649862007572" timestamp="19581255" />
  <Command __id="3678" _type="PauseCommand" date="Wed Apr 13 16:26:31 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19584356">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3101]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3677" _type="SelectTextCommand" caretOffset="3376" date="Wed Apr 13 16:26:31 EDT 2022" end="3428" start="3376" starttimestamp="1649862007572" timestamp="19584356" />
  <Command __id="3680" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:32 EDT 2022" starttimestamp="1649862007572" timestamp="19584583" />
  <Command __id="3682" _type="PauseCommand" date="Wed Apr 13 16:26:40 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19593125">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8542]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3681" _type="SelectTextCommand" caretOffset="3392" date="Wed Apr 13 16:26:40 EDT 2022" end="3404" start="3392" starttimestamp="1649862007572" timestamp="19593125" />
  <DocumentChange __id="3653" _type="Insert" date="Wed Apr 13 16:25:50 EDT 2022" docASTNodeCount="469" docActiveCodeLength="3326" docExpressionCount="308" docLength="3810" length="4" offset="3373" starttimestamp="1649862007572" timestamp="19543055">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="3665" _type="Replace" date="Wed Apr 13 16:26:14 EDT 2022" docASTNodeCount="493" docActiveCodeLength="3511" docExpressionCount="325" docLength="4041" endLine="115" insertionLength="233" int_docASTNodeCount="469" int_docActiveCodeLength="3324" int_docExpressionCount="308" int_docLength="3808" length="2" offset="3375" startLine="115" starttimestamp="1649862007572" timestamp="19567000">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3675" _type="Delete" date="Wed Apr 13 16:26:28 EDT 2022" docASTNodeCount="490" docActiveCodeLength="3457" docExpressionCount="324" docLength="3987" endLine="115" length="54" offset="3378" startLine="115" starttimestamp="1649862007572" timestamp="19581247">
    <text><![CDATA[tring aNextLine = "a new client has been initialized";]]></text>
  </DocumentChange>
  <DocumentChange __id="3679" _type="Delete" date="Wed Apr 13 16:26:32 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3451" docExpressionCount="322" docLength="3935" endLine="116" length="52" offset="3376" startLine="115" starttimestamp="1649862007572" timestamp="19584578">
    <text><![CDATA[	S
		// wrap writes to the buffer and then flips it]]></text>
  </DocumentChange>
  <Command __id="3684" _type="PauseCommand" date="Wed Apr 13 16:26:44 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19596633">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3508]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="3683" _type="Delete" date="Wed Apr 13 16:26:44 EDT 2022" docASTNodeCount="485" docActiveCodeLength="3438" docExpressionCount="322" docLength="3922" endLine="116" length="13" offset="3391" repeat="2" startLine="116" starttimestamp="1649862007572" timestamp="19596633" timestamp2="19596793">
    <text><![CDATA[aWriteMessage]]></text>
  </DocumentChange>
  <Command __id="3685" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:44 EDT 2022" starttimestamp="1649862007572" timestamp="19596640" />
  <Command __id="3687" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:44 EDT 2022" starttimestamp="1649862007572" timestamp="19596793" />
  <DocumentChange __id="3688" _type="Insert" date="Wed Apr 13 16:26:44 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3444" docExpressionCount="322" docLength="3928" length="6" offset="3391" repeat="6" starttimestamp="1649862007572" timestamp="19596969" timestamp2="19598475">
    <text><![CDATA[aComma]]></text>
  </DocumentChange>
  <Command __id="3689" _type="InsertStringCommand" date="Wed Apr 13 16:26:44 EDT 2022" starttimestamp="1649862007572" timestamp="19596977" timestamp2="19596977">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3691" _type="InsertStringCommand" date="Wed Apr 13 16:26:45 EDT 2022" starttimestamp="1649862007572" timestamp="19597614" timestamp2="19597614">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3693" _type="InsertStringCommand" date="Wed Apr 13 16:26:45 EDT 2022" starttimestamp="1649862007572" timestamp="19597896" timestamp2="19597896">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3695" _type="InsertStringCommand" date="Wed Apr 13 16:26:45 EDT 2022" starttimestamp="1649862007572" timestamp="19598171" timestamp2="19598171">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3697" _type="InsertStringCommand" date="Wed Apr 13 16:26:45 EDT 2022" starttimestamp="1649862007572" timestamp="19598366" timestamp2="19598366">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3699" _type="InsertStringCommand" date="Wed Apr 13 16:26:46 EDT 2022" starttimestamp="1649862007572" timestamp="19598483" timestamp2="19598483">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3701" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:46 EDT 2022" starttimestamp="1649862007572" timestamp="19599188" />
  <Command __id="3703" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:46 EDT 2022" starttimestamp="1649862007572" timestamp="19599388" />
  <Command __id="3705" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="19599544" />
  <Command __id="3707" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="19599709" />
  <Command __id="3709" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="19599875" />
  <Command __id="3711" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="19600268" />
  <DocumentChange __id="3700" _type="Delete" date="Wed Apr 13 16:26:46 EDT 2022" docASTNodeCount="485" docActiveCodeLength="3438" docExpressionCount="322" docLength="3922" endLine="116" length="6" offset="3391" repeat="6" startLine="116" starttimestamp="1649862007572" timestamp="19599180" timestamp2="19600268">
    <text><![CDATA[aComma]]></text>
  </DocumentChange>
  <Command __id="3713" _type="PauseCommand" date="Wed Apr 13 16:26:49 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19601750">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1482]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3712" _type="Insert" date="Wed Apr 13 16:26:49 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3445" docExpressionCount="322" docLength="3929" length="7" offset="3391" repeat="7" starttimestamp="1649862007572" timestamp="19601750" timestamp2="19603094">
    <text><![CDATA[buffer_]]></text>
  </DocumentChange>
  <Command __id="3714" _type="InsertStringCommand" date="Wed Apr 13 16:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="19601764" timestamp2="19601764">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="3716" _type="InsertStringCommand" date="Wed Apr 13 16:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="19601968" timestamp2="19601968">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3718" _type="InsertStringCommand" date="Wed Apr 13 16:26:49 EDT 2022" starttimestamp="1649862007572" timestamp="19602122" timestamp2="19602122">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3720" _type="InsertStringCommand" date="Wed Apr 13 16:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="19602547" timestamp2="19602547">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3722" _type="InsertStringCommand" date="Wed Apr 13 16:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="19602698" timestamp2="19602698">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3724" _type="InsertStringCommand" date="Wed Apr 13 16:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="19602793" timestamp2="19602793">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3726" _type="InsertStringCommand" date="Wed Apr 13 16:26:50 EDT 2022" starttimestamp="1649862007572" timestamp="19603102" timestamp2="19603102">
    <data><![CDATA[_]]></data>
  </Command>
  <DocumentChange __id="3727" _type="Delete" date="Wed Apr 13 16:26:51 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3444" docExpressionCount="322" docLength="3928" endLine="116" length="1" offset="3397" startLine="116" starttimestamp="1649862007572" timestamp="19603498">
    <text><![CDATA[_]]></text>
  </DocumentChange>
  <Command __id="3728" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:26:51 EDT 2022" starttimestamp="1649862007572" timestamp="19603506" />
  <Command __id="3730" _type="InsertStringCommand" date="Wed Apr 13 16:26:51 EDT 2022" starttimestamp="1649862007572" timestamp="19603666" timestamp2="19603666">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3732" _type="InsertStringCommand" date="Wed Apr 13 16:26:51 EDT 2022" starttimestamp="1649862007572" timestamp="19603854" timestamp2="19603854">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3734" _type="InsertStringCommand" date="Wed Apr 13 16:26:51 EDT 2022" starttimestamp="1649862007572" timestamp="19604063" timestamp2="19604063">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3736" _type="InsertStringCommand" date="Wed Apr 13 16:26:51 EDT 2022" starttimestamp="1649862007572" timestamp="19604217" timestamp2="19604217">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3738" _type="InsertStringCommand" date="Wed Apr 13 16:26:51 EDT 2022" starttimestamp="1649862007572" timestamp="19604276" timestamp2="19604276">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3740" _type="InsertStringCommand" date="Wed Apr 13 16:26:51 EDT 2022" starttimestamp="1649862007572" timestamp="19604390" timestamp2="19604390">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3742" _type="InsertStringCommand" date="Wed Apr 13 16:26:52 EDT 2022" starttimestamp="1649862007572" timestamp="19604496" timestamp2="19604496">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3744" _type="PauseCommand" date="Wed Apr 13 16:26:55 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19607663">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3167]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3743" _type="SelectTextCommand" caretOffset="3423" date="Wed Apr 13 16:26:55 EDT 2022" end="3432" start="3423" starttimestamp="1649862007572" timestamp="19607663" />
  <Command __id="3746" _type="InsertStringCommand" date="Wed Apr 13 16:26:55 EDT 2022" starttimestamp="1649862007572" timestamp="19608049" timestamp2="19608049">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3748" _type="InsertStringCommand" date="Wed Apr 13 16:26:56 EDT 2022" starttimestamp="1649862007572" timestamp="19609039" timestamp2="19609039">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3750" _type="InsertStringCommand" date="Wed Apr 13 16:26:56 EDT 2022" starttimestamp="1649862007572" timestamp="19609045" timestamp2="19609045">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3752" _type="InsertStringCommand" date="Wed Apr 13 16:26:56 EDT 2022" starttimestamp="1649862007572" timestamp="19609052" timestamp2="19609052">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3754" _type="InsertStringCommand" date="Wed Apr 13 16:26:56 EDT 2022" starttimestamp="1649862007572" timestamp="19609064" timestamp2="19609064">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3756" _type="InsertStringCommand" date="Wed Apr 13 16:26:56 EDT 2022" starttimestamp="1649862007572" timestamp="19609072" timestamp2="19609072">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3758" _type="InsertStringCommand" date="Wed Apr 13 16:26:56 EDT 2022" starttimestamp="1649862007572" timestamp="19609086" timestamp2="19609086">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3760" _type="InsertStringCommand" date="Wed Apr 13 16:26:56 EDT 2022" starttimestamp="1649862007572" timestamp="19609427" timestamp2="19609427">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3762" _type="PauseCommand" date="Wed Apr 13 16:27:00 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19612442">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3015]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3761" _type="SelectTextCommand" caretOffset="3481" date="Wed Apr 13 16:27:00 EDT 2022" end="3493" start="3481" starttimestamp="1649862007572" timestamp="19612442" />
  <Command __id="3764" _type="InsertStringCommand" date="Wed Apr 13 16:27:00 EDT 2022" starttimestamp="1649862007572" timestamp="19612640" timestamp2="19612640">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3766" _type="InsertStringCommand" date="Wed Apr 13 16:27:00 EDT 2022" starttimestamp="1649862007572" timestamp="19613321" timestamp2="19613321">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3768" _type="InsertStringCommand" date="Wed Apr 13 16:27:01 EDT 2022" starttimestamp="1649862007572" timestamp="19614014" timestamp2="19614014">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3770" _type="InsertStringCommand" date="Wed Apr 13 16:27:02 EDT 2022" starttimestamp="1649862007572" timestamp="19614614" timestamp2="19614614">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3772" _type="InsertStringCommand" date="Wed Apr 13 16:27:02 EDT 2022" starttimestamp="1649862007572" timestamp="19614730" timestamp2="19614730">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3774" _type="InsertStringCommand" date="Wed Apr 13 16:27:02 EDT 2022" starttimestamp="1649862007572" timestamp="19614858" timestamp2="19614858">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3776" _type="InsertStringCommand" date="Wed Apr 13 16:27:02 EDT 2022" starttimestamp="1649862007572" timestamp="19614964" timestamp2="19614964">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3778" _type="PauseCommand" date="Wed Apr 13 16:27:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19616235">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1271]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3777" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:27:03 EDT 2022" starttimestamp="1649862007572" timestamp="19616235" />
  <Command __id="3779" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:27:03 EDT 2022" starttimestamp="1649862007572" timestamp="19616323" />
  <Command __id="3780" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:27:03 EDT 2022" starttimestamp="1649862007572" timestamp="19616396" />
  <Command __id="3782" _type="PauseCommand" date="Wed Apr 13 16:27:24 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="19636504">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[20108]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3781" _type="ShellCommand" date="Wed Apr 13 16:27:24 EDT 2022" starttimestamp="1649862007572" timestamp="19636504" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3784" _type="PauseCommand" date="Wed Apr 13 16:27:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19637999">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1495]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3783" _type="ShellCommand" date="Wed Apr 13 16:27:25 EDT 2022" starttimestamp="1649862007572" timestamp="19637999" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3785" _type="MoveCaretCommand" caretOffset="3488" date="Wed Apr 13 16:27:26 EDT 2022" docOffset="3488" starttimestamp="1649862007572" timestamp="19638452" />
  <DocumentChange __id="3729" _type="Insert" date="Wed Apr 13 16:26:51 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3451" docExpressionCount="322" docLength="3935" length="7" offset="3397" repeat="7" starttimestamp="1649862007572" timestamp="19603662" timestamp2="19604480">
    <text><![CDATA[Command]]></text>
  </DocumentChange>
  <DocumentChange __id="3745" _type="Replace" date="Wed Apr 13 16:26:55 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3443" docExpressionCount="322" docLength="3927" endLine="116" insertionLength="1" int_docASTNodeCount="486" int_docActiveCodeLength="3442" int_docExpressionCount="321" int_docLength="3926" length="9" offset="3423" startLine="116" starttimestamp="1649862007572" timestamp="19608041">
    <deletedText><![CDATA[aNextLine]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3747" _type="Insert" date="Wed Apr 13 16:26:56 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3450" docExpressionCount="322" docLength="3934" length="7" offset="3424" repeat="7" starttimestamp="1649862007572" timestamp="19609039" timestamp2="19609419">
    <text><![CDATA[Command]]></text>
  </DocumentChange>
  <DocumentChange __id="3763" _type="Replace" date="Wed Apr 13 16:27:00 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3439" docExpressionCount="322" docLength="3923" endLine="117" insertionLength="1" int_docASTNodeCount="487" int_docActiveCodeLength="3438" int_docExpressionCount="322" int_docLength="3922" length="12" offset="3481" startLine="117" starttimestamp="1649862007572" timestamp="19612633">
    <deletedText><![CDATA[WriteMessage]]></deletedText>
    <insertedText><![CDATA[C]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3765" _type="Insert" date="Wed Apr 13 16:27:00 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3445" docExpressionCount="322" docLength="3929" length="6" offset="3482" repeat="6" starttimestamp="1649862007572" timestamp="19613317" timestamp2="19614956">
    <text><![CDATA[ommand]]></text>
  </DocumentChange>
  <Command __id="3787" _type="PauseCommand" date="Wed Apr 13 16:27:38 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="19651057">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12605]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="3786" _type="Delete" date="Wed Apr 13 16:27:38 EDT 2022" docASTNodeCount="486" docActiveCodeLength="3437" docExpressionCount="321" docLength="3921" endLine="117" length="8" offset="3480" repeat="8" startLine="117" starttimestamp="1649862007572" timestamp="19651057" timestamp2="19652710">
    <text><![CDATA[aCommand]]></text>
  </DocumentChange>
  <Command __id="3788" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:27:38 EDT 2022" starttimestamp="1649862007572" timestamp="19651065" />
  <Command __id="3790" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:27:39 EDT 2022" starttimestamp="1649862007572" timestamp="19651562" />
  <Command __id="3792" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:27:39 EDT 2022" starttimestamp="1649862007572" timestamp="19651602" />
  <Command __id="3794" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:27:39 EDT 2022" starttimestamp="1649862007572" timestamp="19651626" />
  <Command __id="3796" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:27:39 EDT 2022" starttimestamp="1649862007572" timestamp="19652020" />
  <Command __id="3798" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:27:39 EDT 2022" starttimestamp="1649862007572" timestamp="19652188" />
  <Command __id="3800" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:27:39 EDT 2022" starttimestamp="1649862007572" timestamp="19652335" />
  <Command __id="3802" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Apr 13 16:27:40 EDT 2022" starttimestamp="1649862007572" timestamp="19652710" />
  <Command __id="3804" _type="InsertStringCommand" date="Wed Apr 13 16:27:40 EDT 2022" starttimestamp="1649862007572" timestamp="19652895" timestamp2="19652895">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="3806" _type="InsertStringCommand" date="Wed Apr 13 16:27:40 EDT 2022" starttimestamp="1649862007572" timestamp="19653059" timestamp2="19653059">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3808" _type="InsertStringCommand" date="Wed Apr 13 16:27:40 EDT 2022" starttimestamp="1649862007572" timestamp="19653234" timestamp2="19653234">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3810" _type="InsertStringCommand" date="Wed Apr 13 16:27:40 EDT 2022" starttimestamp="1649862007572" timestamp="19653354" timestamp2="19653354">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3812" _type="InsertStringCommand" date="Wed Apr 13 16:27:41 EDT 2022" starttimestamp="1649862007572" timestamp="19653511" timestamp2="19653511">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3814" _type="InsertStringCommand" date="Wed Apr 13 16:27:41 EDT 2022" starttimestamp="1649862007572" timestamp="19653607" timestamp2="19653607">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3816" _type="InsertStringCommand" date="Wed Apr 13 16:27:41 EDT 2022" starttimestamp="1649862007572" timestamp="19653980" timestamp2="19653980">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3818" _type="InsertStringCommand" date="Wed Apr 13 16:27:41 EDT 2022" starttimestamp="1649862007572" timestamp="19654145" timestamp2="19654145">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3820" _type="InsertStringCommand" date="Wed Apr 13 16:27:41 EDT 2022" starttimestamp="1649862007572" timestamp="19654306" timestamp2="19654306">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3822" _type="InsertStringCommand" date="Wed Apr 13 16:27:42 EDT 2022" starttimestamp="1649862007572" timestamp="19654450" timestamp2="19654450">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3824" _type="InsertStringCommand" date="Wed Apr 13 16:27:42 EDT 2022" starttimestamp="1649862007572" timestamp="19654579" timestamp2="19654579">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="3826" _type="InsertStringCommand" date="Wed Apr 13 16:27:42 EDT 2022" starttimestamp="1649862007572" timestamp="19654700" timestamp2="19654700">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3828" _type="InsertStringCommand" date="Wed Apr 13 16:27:42 EDT 2022" starttimestamp="1649862007572" timestamp="19654790" timestamp2="19654790">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="3830" _type="PauseCommand" date="Wed Apr 13 16:27:43 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19655920">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1130]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3863" _type="RunCommand" className="/A6/src/client/Client.java" date="Wed Apr 13 16:30:06 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="19799085" type="Run" />
  <Command __id="3865" _type="ShellCommand" date="Wed Apr 13 16:30:07 EDT 2022" starttimestamp="1649862007572" timestamp="19799566" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3866" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:30:07 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19799835" type="Run" />
  <Command __id="3867" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:30:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19799850" type="Run" />
  <Command __id="3868" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:30:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19799874" type="Run" />
  <Command __id="3869" _type="ConsoleOutput" date="Wed Apr 13 16:30:07 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="19800215" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.7616414716042068
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"5906057818556262"), Diff(INSERT,"7616414716042068"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3871" _type="PauseCommand" date="Wed Apr 13 16:30:09 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19801593">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1378]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3921" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:31:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19854142" type="Run" />
  <Command __id="3923" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:31:01 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19854234" type="Run" />
  <Command __id="3924" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:31:02 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19854775" type="Run" />
  <Command __id="3925" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:31:02 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19854810" type="Run" />
  <Command __id="3927" _type="PauseCommand" date="Wed Apr 13 16:31:24 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="19876518">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[21708]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="3926" _type="ConsoleInput" date="Wed Apr 13 16:31:24 EDT 2022" starttimestamp="1649862007572" timestamp="19876518" type="Exception">
    <outputString><![CDATA[i NIO
]]></outputString>
  </Command>
  <Command __id="3928" _type="ConsoleOutput" date="Wed Apr 13 16:31:24 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="19876572" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IN RUN METHOD OF CLIENT READ THREAD¶SERVER MESSAGE RECIEVED: a new client has been initialized"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3930" _type="PauseCommand" date="Wed Apr 13 16:31:33 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="19885542">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8970]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="3945" _type="ShellCommand" date="Wed Apr 13 16:32:02 EDT 2022" starttimestamp="1649862007572" timestamp="19914878" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3947" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:32:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="19915567" type="Run" />
  <Command __id="3949" _type="PauseCommand" date="Wed Apr 13 16:32:07 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19919815">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4248]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3948" _type="ShellCommand" date="Wed Apr 13 16:32:07 EDT 2022" starttimestamp="1649862007572" timestamp="19919815" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3950" _type="MoveCaretCommand" caretOffset="3364" date="Wed Apr 13 16:32:07 EDT 2022" docOffset="3364" starttimestamp="1649862007572" timestamp="19919971" />
  <Command __id="3952" _type="PauseCommand" date="Wed Apr 13 16:33:21 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="19993442">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[73471]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3951" _type="MoveCaretCommand" caretOffset="3313" date="Wed Apr 13 16:33:21 EDT 2022" docOffset="3313" starttimestamp="1649862007572" timestamp="19993442" />
  <DocumentChange __id="3803" _type="Insert" date="Wed Apr 13 16:27:40 EDT 2022" docASTNodeCount="487" docActiveCodeLength="3450" docExpressionCount="322" docLength="3934" length="13" offset="3480" repeat="13" starttimestamp="1649862007572" timestamp="19652887" timestamp2="19654782">
    <text><![CDATA[bufferCommand]]></text>
  </DocumentChange>
  <Command __id="3954" _type="PauseCommand" date="Wed Apr 13 16:33:22 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="19994565">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1123]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="3953" _type="Insert" date="Wed Apr 13 16:33:22 EDT 2022" docASTNodeCount="491" docActiveCodeLength="3465" docExpressionCount="325" docLength="3949" length="15" offset="3313" repeat="11" starttimestamp="1649862007572" timestamp="19994565" timestamp2="19996366">
    <text><![CDATA[
			System.out]]></text>
  </DocumentChange>
  <Command __id="3955" _type="InsertStringCommand" date="Wed Apr 13 16:33:22 EDT 2022" starttimestamp="1649862007572" timestamp="19994582" timestamp2="19994582">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3957" _type="InsertStringCommand" date="Wed Apr 13 16:33:22 EDT 2022" starttimestamp="1649862007572" timestamp="19995159" timestamp2="19995159">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="3959" _type="InsertStringCommand" date="Wed Apr 13 16:33:22 EDT 2022" starttimestamp="1649862007572" timestamp="19995309" timestamp2="19995309">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="3961" _type="InsertStringCommand" date="Wed Apr 13 16:33:23 EDT 2022" starttimestamp="1649862007572" timestamp="19995443" timestamp2="19995443">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3963" _type="InsertStringCommand" date="Wed Apr 13 16:33:23 EDT 2022" starttimestamp="1649862007572" timestamp="19995541" timestamp2="19995541">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3965" _type="InsertStringCommand" date="Wed Apr 13 16:33:23 EDT 2022" starttimestamp="1649862007572" timestamp="19995688" timestamp2="19995688">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3967" _type="InsertStringCommand" date="Wed Apr 13 16:33:23 EDT 2022" starttimestamp="1649862007572" timestamp="19995802" timestamp2="19995802">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3969" _type="InsertStringCommand" date="Wed Apr 13 16:33:23 EDT 2022" starttimestamp="1649862007572" timestamp="19995930" timestamp2="19995930">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3970" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 16:33:23 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="19995930" />
  <Command __id="3974" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 16:33:24 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="19996899" />
  <DocumentChange __id="3975" _type="Replace" date="Wed Apr 13 16:33:24 EDT 2022" docASTNodeCount="490" docActiveCodeLength="3466" docExpressionCount="325" docLength="3950" endLine="111" insertionLength="4" int_docASTNodeCount="488" int_docActiveCodeLength="3462" int_docExpressionCount="323" int_docLength="3946" length="3" offset="3325" startLine="111" starttimestamp="1649862007572" timestamp="19996908">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <Command __id="3976" _type="InsertStringCommand" date="Wed Apr 13 16:33:24 EDT 2022" starttimestamp="1649862007572" timestamp="19996919" timestamp2="19996919">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3977" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Apr 13 16:33:24 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="19996939" />
  <Command __id="3988" _type="PauseCommand" date="Wed Apr 13 16:33:26 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="19999193">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2107]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3987" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Apr 13 16:33:26 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="19999193" />
  <Command __id="3991" _type="PauseCommand" date="Wed Apr 13 16:33:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="20000289">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1096]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="3990" _type="InsertStringCommand" date="Wed Apr 13 16:33:27 EDT 2022" starttimestamp="1649862007572" timestamp="20000289" timestamp2="20000289">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3993" _type="InsertStringCommand" date="Wed Apr 13 16:33:27 EDT 2022" starttimestamp="1649862007572" timestamp="20000421" timestamp2="20000421">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3995" _type="InsertStringCommand" date="Wed Apr 13 16:33:28 EDT 2022" starttimestamp="1649862007572" timestamp="20000638" timestamp2="20000638">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3997" _type="InsertStringCommand" date="Wed Apr 13 16:33:28 EDT 2022" starttimestamp="1649862007572" timestamp="20000808" timestamp2="20000808">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3999" _type="InsertStringCommand" date="Wed Apr 13 16:33:28 EDT 2022" starttimestamp="1649862007572" timestamp="20001049" timestamp2="20001049">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="4001" _type="InsertStringCommand" date="Wed Apr 13 16:33:28 EDT 2022" starttimestamp="1649862007572" timestamp="20001234" timestamp2="20001234">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4003" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20001464" timestamp2="20001464">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4005" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20001591" timestamp2="20001591">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="4007" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20001667" timestamp2="20001667">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4009" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20001812" timestamp2="20001812">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4011" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20001890" timestamp2="20001890">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4013" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20002006" timestamp2="20002006">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4015" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20002150" timestamp2="20002150">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4017" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20002246" timestamp2="20002246">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4019" _type="InsertStringCommand" date="Wed Apr 13 16:33:29 EDT 2022" starttimestamp="1649862007572" timestamp="20002416" timestamp2="20002416">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4021" _type="InsertStringCommand" date="Wed Apr 13 16:33:30 EDT 2022" starttimestamp="1649862007572" timestamp="20002732" timestamp2="20002732">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4023" _type="InsertStringCommand" date="Wed Apr 13 16:33:30 EDT 2022" starttimestamp="1649862007572" timestamp="20002894" timestamp2="20002894">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4025" _type="InsertStringCommand" date="Wed Apr 13 16:33:30 EDT 2022" starttimestamp="1649862007572" timestamp="20003329" timestamp2="20003329">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="4027" _type="InsertStringCommand" date="Wed Apr 13 16:33:30 EDT 2022" starttimestamp="1649862007572" timestamp="20003402" timestamp2="20003402">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="4029" _type="InsertStringCommand" date="Wed Apr 13 16:33:31 EDT 2022" starttimestamp="1649862007572" timestamp="20003495" timestamp2="20003495">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="4031" _type="InsertStringCommand" date="Wed Apr 13 16:33:31 EDT 2022" starttimestamp="1649862007572" timestamp="20003724" timestamp2="20003724">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="4033" _type="InsertStringCommand" date="Wed Apr 13 16:33:31 EDT 2022" starttimestamp="1649862007572" timestamp="20003971" timestamp2="20003971">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4035" _type="InsertStringCommand" date="Wed Apr 13 16:33:31 EDT 2022" starttimestamp="1649862007572" timestamp="20004224" timestamp2="20004224">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4037" _type="InsertStringCommand" date="Wed Apr 13 16:33:31 EDT 2022" starttimestamp="1649862007572" timestamp="20004329" timestamp2="20004329">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4039" _type="InsertStringCommand" date="Wed Apr 13 16:33:32 EDT 2022" starttimestamp="1649862007572" timestamp="20004458" timestamp2="20004458">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3978" _type="Insert" date="Wed Apr 13 16:33:24 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3502" docExpressionCount="328" docLength="3986" length="36" offset="3329" repeat="34" starttimestamp="1649862007572" timestamp="19997086" timestamp2="20004450">
    <text><![CDATA[println("IPC Mechanism is GIPC or ")]]></text>
  </DocumentChange>
  <Command __id="4041" _type="PauseCommand" date="Wed Apr 13 16:33:34 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20006921">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2463]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="4040" _type="Insert" date="Wed Apr 13 16:33:34 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3505" docExpressionCount="328" docLength="3989" length="3" offset="3363" repeat="3" starttimestamp="1649862007572" timestamp="20006921" timestamp2="20007098">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <Command __id="4042" _type="InsertStringCommand" date="Wed Apr 13 16:33:34 EDT 2022" starttimestamp="1649862007572" timestamp="20006921" timestamp2="20006921">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="4044" _type="InsertStringCommand" date="Wed Apr 13 16:33:34 EDT 2022" starttimestamp="1649862007572" timestamp="20007002" timestamp2="20007002">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="4046" _type="InsertStringCommand" date="Wed Apr 13 16:33:34 EDT 2022" starttimestamp="1649862007572" timestamp="20007103" timestamp2="20007103">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="4047" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Apr 13 16:33:35 EDT 2022" starttimestamp="1649862007572" timestamp="20007771" />
  <Command __id="4048" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:33:35 EDT 2022" starttimestamp="1649862007572" timestamp="20007858" />
  <Command __id="4049" _type="EclipseCommand" commandID="" date="Wed Apr 13 16:33:35 EDT 2022" starttimestamp="1649862007572" timestamp="20007914" />
  <Command __id="4050" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:33:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20008209" type="Run" />
  <Command __id="4051" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:33:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20008209" type="Run" />
  <Command __id="4052" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:33:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20008209" type="Run" />
  <Command __id="4053" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 16:33:36 EDT 2022" starttimestamp="1649862007572" timestamp="20008984" />
  <Command __id="4054" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Apr 13 16:33:36 EDT 2022" starttimestamp="1649862007572" timestamp="20008984" />
  <Command __id="4127" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:34:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20050364" type="Run" />
  <Command __id="4129" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:34:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20050464" type="Run" />
  <Command __id="4130" _type="ConsoleOutput" date="Wed Apr 13 16:34:18 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20050495" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.5636752366689843 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@691d7fb6
[com.sun.proxy.$Proxy1@691d7fb6]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5636752366689843"), Diff(INSERT,"Server0<-->Generic Client:0.5636752366689843 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@691d7fb6¶[com.sun.proxy.$Proxy1@691d7fb6]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4131" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:34:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20050500" type="Run" />
  <Command __id="4132" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:34:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20050604" type="Run" />
  <Command __id="4133" _type="ConsoleOutput" date="Wed Apr 13 16:34:18 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20051007" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65529](remote),objID:[4cc98973:18024a24c92:-7ffe, -4963091247116490985]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65529](remote),objID:[4cc98973:18024a24c92:-7ffe, -4963091247116490985]]]]]]
a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:65531]
IN RUN METHOD OF READ THREAD
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.5636752366689843 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@691d7fb6¶[com.sun.proxy.$Proxy1@691d7fb6]"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65529](remote),objID:[4cc98973:18024a24c92:-7ffe, -4963091247116490985]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65529](remote),objID:[4cc98973:18024a24c92:-7ffe, -4963091247116490985]]]]]]¶a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:65531]¶IN RUN METHOD OF READ THREAD"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4134" _type="ConsoleOutput" date="Wed Apr 13 16:34:18 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20051035" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
New Client connected to server!!!
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65529](remote),objID:[4cc98973:18024a24c92:-7ffe, -4963091247116490985]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65529](remote),objID:[4cc98973:18024a24c92:-7ffe, -4963091247116490985]]]]]]¶a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:65531]¶IN RUN METHOD OF READ THREAD"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶New Client connected to server!!!¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4135" _type="ShellCommand" date="Wed Apr 13 16:34:19 EDT 2022" starttimestamp="1649862007572" timestamp="20051550" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4137" _type="PauseCommand" date="Wed Apr 13 16:34:21 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20054151">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2601]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4165" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:34:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20086027" type="Run" />
  <Command __id="4167" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:34:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20086070" type="Run" />
  <Command __id="4168" _type="ShellCommand" date="Wed Apr 13 16:34:53 EDT 2022" starttimestamp="1649862007572" timestamp="20086417" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4170" _type="PauseCommand" date="Wed Apr 13 16:34:55 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="20088091">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1674]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4169" _type="ShellCommand" date="Wed Apr 13 16:34:55 EDT 2022" starttimestamp="1649862007572" timestamp="20088091" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4172" _type="PauseCommand" date="Wed Apr 13 16:35:01 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="20093960">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5869]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4171" _type="ConsoleInput" date="Wed Apr 13 16:35:01 EDT 2022" starttimestamp="1649862007572" timestamp="20093960" type="Exception">
    <outputString><![CDATA[i NIO
]]></outputString>
  </Command>
  <Command __id="4173" _type="ConsoleOutput" date="Wed Apr 13 16:35:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20094091" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IN RUN METHOD OF CLIENT READ THREAD¶SERVER MESSAGE RECIEVED: a new client has been initialized"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4175" _type="PauseCommand" date="Wed Apr 13 16:35:12 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20104776">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[10685]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4247" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Wed Apr 13 16:40:03 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="20396214" type="Run" />
  <Command __id="4249" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Wed Apr 13 16:40:03 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="20396214" type="Run" />
  <Command __id="4250" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:40:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20396448" type="Run" />
  <Command __id="4251" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:40:04 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20396486" type="Run" />
  <Command __id="4252" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:40:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20396487" type="Run" />
  <Command __id="4254" _type="PauseCommand" date="Wed Apr 13 16:40:11 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="20403580">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7093]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4253" _type="ShellCommand" date="Wed Apr 13 16:40:11 EDT 2022" starttimestamp="1649862007572" timestamp="20403580" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4255" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:40:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20403923" type="Run" />
  <Command __id="4256" _type="ConsoleOutput" date="Wed Apr 13 16:40:11 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20404065" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Wed Apr 13 16:40:11 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:65526 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host¶AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:65531 remote=localhost/127.0.0.1:9000]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"Building symbol table and running first pass checks:Wed Apr 13 16:40:11 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4258" _type="PauseCommand" date="Wed Apr 13 16:40:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20408023">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3958]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4257" _type="ConsoleOutput" date="Wed Apr 13 16:40:15 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20408023" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:124
Running second pass checks Wed Apr 13 16:40:15 EDT 2022
Start O(n2) inter- and intra class method calls:Wed Apr 13 16:40:15 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and r"), Diff(INSERT,"size:124¶R"), Diff(EQUAL,"unning "), Diff(DELETE,"first"), Diff(INSERT,"second"), Diff(EQUAL," pass checks"), Diff(DELETE,":"), Diff(INSERT," "), Diff(EQUAL,"Wed Apr 13 16:40:1"), Diff(DELETE,"1"), Diff(INSERT,"5 EDT 2022¶Start O(n2) inter- and intra class method calls:Wed Apr 13 16:40:15"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="4259" _type="ConsoleOutput" date="Wed Apr 13 16:40:15 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20408128" type="ConsoleOutput">
    <outputString><![CDATA[End O(n2) inter- and intra class method calls:Wed Apr 13 16:40:15 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:124¶Running second pass checks Wed Apr 13 16:40:15 EDT 2022¶Start"), Diff(INSERT,"End"), Diff(EQUAL," O(n2) inter- and intra class method calls:Wed Apr 13 16:40:15 EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="4261" _type="PauseCommand" date="Wed Apr 13 16:40:17 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20410132">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2004]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4260" _type="ConsoleOutput" date="Wed Apr 13 16:40:17 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20410132" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Wed Apr 13 16:40:17 EDT 2022
Generating checks:Wed Apr 13 16:40:17 EDT 2022
Finished Generating checks:Wed Apr 13 16:40:17 EDT 2022
Generating externals:Wed Apr 13 16:40:17 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Finished second pass checks:Wed Apr 13 16:40:17 EDT 2022¶Generating checks:Wed Apr 13 16:40:17 EDT 2022¶Finished Generating checks:Wed Apr 13 16:40:17 EDT 2022¶Generating externa"), Diff(EQUAL,"ls:Wed Apr 13 16:40:1"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="4262" _type="ConsoleOutput" date="Wed Apr 13 16:40:18 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20410619" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Wed Apr 13 16:40:18 EDT 2022
Test execution time (ms):6598
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Wed Apr 13 16:40:17 EDT 2022¶Generating checks:Wed Apr 13 16:40:17 EDT 2022¶Finished Generating check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Wed Apr 13 16:40:1"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating externals:Wed Apr 13 16:40:17 EDT 2022"), Diff(INSERT,"Test execution time (ms):6598"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4263" _type="ConsoleOutput" date="Wed Apr 13 16:40:18 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20410624" type="ConsoleOutput">
    <outputString><![CDATA[A6ExpectedInterfaces did not pass completely:See console trace about lines failing  this check%0.5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Wed Apr 13 16:40:18 EDT 2022¶Test execution time (ms):6598"), Diff(INSERT,"A6ExpectedInterfaces did not pass completely:See console trace about lines failing  this check%0.5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4264" _type="ConsoleOutput" date="Wed Apr 13 16:40:18 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20410679" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):30
A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.2413793103448276

Test execution time (ms):15
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):30¶"), Diff(EQUAL,"A6Expected"), Diff(DELETE,"Interface"), Diff(INSERT,"Call"), Diff(EQUAL,"s did not pass completely:See console trace about lines failing  this check%0."), Diff(INSERT,"2413793103448276¶¶Test execution time (ms):1"), Diff(EQUAL,"5¶")]]]></diff>
  </Command>
  <Command __id="4265" _type="ConsoleOutput" date="Wed Apr 13 16:40:18 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20410737" type="ConsoleOutput">
    <outputString><![CDATA[A6ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.4

Test execution time (ms):18
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):30¶"), Diff(EQUAL,"A6Expected"), Diff(DELETE,"Call"), Diff(INSERT,"Signature"), Diff(EQUAL,"s did not pass completely:See console trace about lines failing  this check%0."), Diff(DELETE,"2413793103448276"), Diff(INSERT,"4"), Diff(EQUAL,"¶¶Test execution time (ms):1"), Diff(DELETE,"5"), Diff(INSERT,"8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4266" _type="ConsoleOutput" date="Wed Apr 13 16:40:18 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20410749" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (36)
 |- checks (1)
  |~ Checks.java (36)
 |- client (8)
  |~ Client.java (23)
  |~ ClientConfigure.java (284)
  |~ ClientOutCoupler.java (57)
  |~ ClientRemoteInterfaceGIPC.java (33)
  |~ ClientRemoteInterfaceNIO.java (16)
  |~ ClientRemoteInterfaceRMI.java (29)
  |~ ClientRemoteObject.java (280)
  |~ ClientRemoteObjectNIO.java (133)
 |- nioExample (7)
  |~ AnNIOManagerPrintClient.java (124)
  |~ AnNIOManagerPrintServer.java (138)
  |~ exampleClientReadThread.java (66)
  |~ exampleServerReadThread.java (70)
  |~ NIOManagerPrintClientLauncherNoFactory.java (10)
  |~ NIOManagerPrintServer.java (20)
  |~ NIOManagerPrintServerLauncherNoFactory.java (10)
 |- readThread (3)
  |~ ClientReadThread.java (70)
  |~ ReadThreadInterface.java (13)
  |~ ServerReadThread.java (76)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (10)
  |~ OriginalSimulation.java (9)
  |~ Server.java (33)
  |~ ServerConfigure.java (330)
  |- remote (6)
   |~ ServerRemoteInterfaceGIPC.java (44)
   |~ ServerRemoteInterfaceNIO.java (21)
   |~ ServerRemoteInterfaceRMI.java (40)
   |~ ServerRemoteObjectGIPC.java (319)
   |~ ServerRemoteObjectNIO.java (107)
   |~ ServerRemoteObjectRMI.java (244)

Attempting to match to the structure:
|- .* (23)
 |- [a-z]?.*[Cc]lient.* (10)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A6ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.4¶¶Test execution time (ms):18"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (36)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (284)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (16)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (280)¶  |~ ClientRemoteObjectNIO.java (133)¶ |- nioExample (7)¶  |~ AnNIOManagerPrintClient.java (124)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (66)¶  |~ exampleServerReadThread.java (70)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (70)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (330)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (21)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (319)¶   |~ ServerRemoteObjectNIO.java (107)¶   |~ ServerRemoteObjectRMI.java (244)¶¶Attempting to match to the structure:¶|- .* (23)¶ |- [a-z]?.*[Cc]lient.* (10)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4268" _type="PauseCommand" date="Wed Apr 13 16:40:24 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="20416507">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5758]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4267" _type="ConsoleOutput" date="Wed Apr 13 16:40:24 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20416507" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@6fe09bca . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (36)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (284)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (16)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (280)¶  |~ ClientRemoteObjectNIO.java (133)¶ |- nioExample (7)¶  |~ AnNIOManagerPrintClient.java (124)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (66)¶  |~ exampleServerReadThread.java (70)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (70)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (330)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (21)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (319)¶   |~ ServerRemoteObjectNIO.java (107)¶   |~ ServerRemoteObjectRMI.java (244)¶¶Attempting to match to the structure:¶|- .* (23)¶ |- [a-z]?.*[Cc]lient.* (10)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@6fe09bca . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4270" _type="PauseCommand" date="Wed Apr 13 16:40:35 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20428259">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11752]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4269" _type="ShellCommand" date="Wed Apr 13 16:40:35 EDT 2022" starttimestamp="1649862007572" timestamp="20428259" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4272" _type="PauseCommand" date="Wed Apr 13 16:40:38 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20431038">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2779]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4271" _type="ShellCommand" date="Wed Apr 13 16:40:38 EDT 2022" starttimestamp="1649862007572" timestamp="20431038" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4274" _type="PauseCommand" date="Wed Apr 13 16:40:40 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20433162">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2124]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4273" _type="ConsoleOutput" date="Wed Apr 13 16:40:40 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20433162" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@6fe09bca . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedCalls@6fe09bca . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="4276" _type="PauseCommand" date="Wed Apr 13 16:40:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20436365">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3203]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4275" _type="ConsoleOutput" date="Wed Apr 13 16:40:43 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="20436365" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment6.style.A6ExpectedSignatures@469114e4 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment6.style.A6Expected"), Diff(DELETE,"Calls@6fe09bca"), Diff(INSERT,"Signatures@469114e4"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="4278" _type="PauseCommand" date="Wed Apr 13 16:40:57 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20449925">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13560]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4277" _type="ShellCommand" date="Wed Apr 13 16:40:57 EDT 2022" starttimestamp="1649862007572" timestamp="20449925" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4280" _type="PauseCommand" date="Wed Apr 13 16:41:09 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20462222">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12297]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4279" _type="ShellCommand" date="Wed Apr 13 16:41:09 EDT 2022" starttimestamp="1649862007572" timestamp="20462222" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4282" _type="PauseCommand" date="Wed Apr 13 16:41:13 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20466258">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4036]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4294" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:41:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20489096" type="Run" />
  <Command __id="4296" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:41:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20489100" type="Run" />
  <Command __id="4298" _type="PauseCommand" date="Wed Apr 13 16:41:59 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="20512353">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[23253]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4297" _type="ShellCommand" date="Wed Apr 13 16:41:59 EDT 2022" starttimestamp="1649862007572" timestamp="20512353" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4300" _type="PauseCommand" date="Wed Apr 13 16:42:10 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20522722">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10369]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4311" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:43:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20601759" type="Run" />
  <Command __id="4313" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:43:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20601766" type="Run" />
  <Command __id="4315" _type="PauseCommand" date="Wed Apr 13 16:43:41 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20614255">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12489]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4314" _type="ShellCommand" date="Wed Apr 13 16:43:41 EDT 2022" starttimestamp="1649862007572" timestamp="20614255" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4317" _type="PauseCommand" date="Wed Apr 13 16:43:57 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20629692">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15437]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4328" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:45:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20714385" type="Run" />
  <Command __id="4330" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:45:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20714385" type="Run" />
  <Command __id="4332" _type="PauseCommand" date="Wed Apr 13 16:45:44 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="20737021">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[22636]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4331" _type="ShellCommand" date="Wed Apr 13 16:45:44 EDT 2022" starttimestamp="1649862007572" timestamp="20737021" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4334" _type="PauseCommand" date="Wed Apr 13 16:45:55 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20747697">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10676]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4333" _type="ShellCommand" date="Wed Apr 13 16:45:55 EDT 2022" starttimestamp="1649862007572" timestamp="20747697" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4336" _type="PauseCommand" date="Wed Apr 13 16:46:14 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="20767080">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19383]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4335" _type="ShellCommand" date="Wed Apr 13 16:46:14 EDT 2022" starttimestamp="1649862007572" timestamp="20767080" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4338" _type="PauseCommand" date="Wed Apr 13 16:46:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20770898">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3818]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4337" _type="ShellCommand" date="Wed Apr 13 16:46:18 EDT 2022" starttimestamp="1649862007572" timestamp="20770898" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4340" _type="PauseCommand" date="Wed Apr 13 16:46:58 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="20811232">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[40334]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4339" _type="ShellCommand" date="Wed Apr 13 16:46:58 EDT 2022" starttimestamp="1649862007572" timestamp="20811232" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4342" _type="PauseCommand" date="Wed Apr 13 16:47:01 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="20813509">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2277]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4366" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:49:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20939653" type="Run" />
  <Command __id="4368" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:49:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="20939657" type="Run" />
  <Command __id="4370" _type="PauseCommand" date="Wed Apr 13 16:50:42 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="21034438">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[94781]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4369" _type="ShellCommand" date="Wed Apr 13 16:50:42 EDT 2022" starttimestamp="1649862007572" timestamp="21034438" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4372" _type="PauseCommand" date="Wed Apr 13 16:50:47 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="21039938">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5500]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4375" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21044710" type="Run" />
  <Command __id="4377" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21044726" type="Run" />
  <Command __id="4378" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21044727" type="Run" />
  <Command __id="4379" _type="ConsoleOutput" date="Wed Apr 13 16:50:52 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="21044770" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):112627
GIPCRMINIOServerMetaStateNoBroadcast did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶Test execution time (ms):112627¶"), Diff(EQUAL,"GIPCRMINIO"), Diff(DELETE,"Client"), Diff(INSERT,"Server"), Diff(EQUAL,"MetaState"), Diff(INSERT,"No"), Diff(EQUAL,"Broadcast did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0¶"), Diff(DELETE,"¶Test execution time (ms):112636¶")]]]></diff>
  </Command>
  <Command __id="4380" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21045246" type="Run" />
  <Command __id="4381" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21045247" type="Run" />
  <Command __id="4383" _type="PauseCommand" date="Wed Apr 13 16:50:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="21046330">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1083]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4382" _type="ShellCommand" date="Wed Apr 13 16:50:53 EDT 2022" starttimestamp="1649862007572" timestamp="21046330" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4384" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21047268" type="Run" />
  <Command __id="4385" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21047270" type="Run" />
  <Command __id="4387" _type="PauseCommand" date="Wed Apr 13 16:50:56 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="21048634">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1364]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4388" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21052283" type="Run" />
  <Command __id="4390" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:50:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21052284" type="Run" />
  <Command __id="4392" _type="PauseCommand" date="Wed Apr 13 16:52:44 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="21157370">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[105086]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4412" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:53:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21229365" type="Run" />
  <Command __id="4414" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:53:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21229369" type="Run" />
  <Command __id="4415" _type="ShellCommand" date="Wed Apr 13 16:53:57 EDT 2022" starttimestamp="1649862007572" timestamp="21229774" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4417" _type="PauseCommand" date="Wed Apr 13 16:54:01 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="21233609">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3835]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4416" _type="ShellCommand" date="Wed Apr 13 16:54:01 EDT 2022" starttimestamp="1649862007572" timestamp="21233609" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4419" _type="PauseCommand" date="Wed Apr 13 16:54:02 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="21234890">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1281]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4418" _type="ShellCommand" date="Wed Apr 13 16:54:02 EDT 2022" starttimestamp="1649862007572" timestamp="21234890" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4421" _type="PauseCommand" date="Wed Apr 13 16:54:24 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="21257399">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22509]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4420" _type="ShellCommand" date="Wed Apr 13 16:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="21257399" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4423" _type="PauseCommand" date="Wed Apr 13 16:54:39 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="21272116">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14717]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4422" _type="ShellCommand" date="Wed Apr 13 16:54:39 EDT 2022" starttimestamp="1649862007572" timestamp="21272116" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4424" _type="MoveCaretCommand" caretOffset="3882" date="Wed Apr 13 16:54:39 EDT 2022" docOffset="3882" starttimestamp="1649862007572" timestamp="21272232" />
  <DocumentChange __id="4055" _type="Insert" date="Wed Apr 13 16:33:37 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3506" docExpressionCount="328" docLength="3990" length="1" offset="3368" starttimestamp="1649862007572" timestamp="20009797">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="4426" _type="PauseCommand" date="Wed Apr 13 16:54:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="21274545">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2313]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4428" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:54:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21286428" type="Run" />
  <Command __id="4430" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:54:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21286442" type="Run" />
  <Command __id="4431" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:54:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21286444" type="Run" />
  <Command __id="4432" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:54:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21286969" type="Run" />
  <Command __id="4433" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:54:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21286970" type="Run" />
  <Command __id="4434" _type="ConsoleOutput" date="Wed Apr 13 16:54:54 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="21286994" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientConnection did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0

Test execution time (ms):58629
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMINIO"), Diff(DELETE,"StaticArguments"), Diff(INSERT,"OneClientConnection"), Diff(EQUAL," did not pass completely:"), Diff(DELETE,"Error in client (args as 'nio-host nio-port name headless registry-host registry-port gipc-port'): Couldn't find client NIO connection info in traces.%0.8181818181818182"), Diff(INSERT,"In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*%0.0"), Diff(EQUAL,"¶¶Test execution time (ms):"), Diff(DELETE,"63610"), Diff(INSERT,"58629"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4435" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:54:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21287974" type="Run" />
  <Command __id="4436" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Apr 13 16:54:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="21287983" type="Run" />
  <Command __id="4438" _type="PauseCommand" date="Wed Apr 13 16:55:06 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="21298699">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10716]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4437" _type="ShellCommand" date="Wed Apr 13 16:55:06 EDT 2022" starttimestamp="1649862007572" timestamp="21298699" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4440" _type="PauseCommand" date="Wed Apr 13 16:55:52 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="21345064">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[46365]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4439" _type="ConsoleOutput" date="Wed Apr 13 16:55:52 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="21345064" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*
RMI and GIPC are not checked because NIO failed%0.0

Test execution time (ms):58584
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMINIOOneClient"), Diff(DELETE,"Connection"), Diff(INSERT,"ReadWriteNonAtomic"), Diff(EQUAL," did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*"), Diff(INSERT,"¶RMI and GIPC are not checked because NIO failed"), Diff(EQUAL,"%0.0¶¶Test execution time (ms):58"), Diff(DELETE,"629"), Diff(INSERT,"584"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4442" _type="PauseCommand" date="Wed Apr 13 16:56:01 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="21353767">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8703]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4441" _type="ConsoleOutput" date="Wed Apr 13 16:56:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="21353767" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@28d56212 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*¶RMI and GIPC are not checked because NIO failed%0.0¶¶Test execution time (ms):58584"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@28d56212 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4444" _type="PauseCommand" date="Wed Apr 13 16:56:07 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="21360419">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6652]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4443" _type="ConsoleOutput" date="Wed Apr 13 16:56:07 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="21360419" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientConnection@64e569ae . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIO"), Diff(DELETE,"StaticArguments@28d56212"), Diff(INSERT,"OneClientConnection@64e569ae"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="4446" _type="PauseCommand" date="Wed Apr 13 16:56:12 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="21365224">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4805]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4445" _type="ConsoleOutput" date="Wed Apr 13 16:56:12 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="21365224" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientConnection@693ee2e1 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIO"), Diff(DELETE,"One"), Diff(INSERT,"Two"), Diff(EQUAL,"ClientConnection@6"), Diff(DELETE,"4e569ae"), Diff(INSERT,"93ee2e1"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="4448" _type="PauseCommand" date="Wed Apr 13 17:08:07 EDT 2022" range="10m-20m" starttimestamp="1649862007572" timestamp="22079665">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[714441]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="4447" _type="BalloonCommand" date="Wed Apr 13 17:08:07 EDT 2022" message="*******************************************
Worked 16 minutes(fixed)/30 minutes(context based) from
Wed Apr 13 16:08:07 EDT 2022 to Wed Apr 13 16:56:12 EDT 2022
Edited 1 Projects: 
	A6
Edited 2 Files: 
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java
Number of insert: 360
Number of delete: 390
" starttimestamp="1649862007572" timestamp="22079665">
    <fineGrainedWorkTime><![CDATA[30]]></fineGrainedWorkTime>
    <insert><![CDATA[360]]></insert>
    <startTime><![CDATA[1649880487238]]></startTime>
    <endTime><![CDATA[1649883372796]]></endTime>
    <workTime><![CDATA[16]]></workTime>
    <delete><![CDATA[390]]></delete>
  </Command>
  <Command __id="4450" _type="PauseCommand" date="Wed Apr 13 21:19:00 EDT 2022" range=">1h" starttimestamp="1649862007572" timestamp="37132936">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[15053271]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4449" _type="ShellCommand" date="Wed Apr 13 21:19:00 EDT 2022" starttimestamp="1649862007572" timestamp="37132936" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4452" _type="PauseCommand" date="Wed Apr 13 22:35:37 EDT 2022" range=">1h" starttimestamp="1649862007572" timestamp="41729894">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4596958]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4451" _type="ShellCommand" date="Wed Apr 13 22:35:37 EDT 2022" starttimestamp="1649862007572" timestamp="41729894" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4453" _type="ShellCommand" date="Wed Apr 13 22:35:38 EDT 2022" starttimestamp="1649862007572" timestamp="41730774" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4454" _type="ShellCommand" date="Wed Apr 13 22:35:38 EDT 2022" starttimestamp="1649862007572" timestamp="41731137" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4456" _type="PauseCommand" date="Wed Apr 13 22:59:29 EDT 2022" range="20m-30m" starttimestamp="1649862007572" timestamp="43161798">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1430661]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4455" _type="ShellCommand" date="Wed Apr 13 22:59:29 EDT 2022" starttimestamp="1649862007572" timestamp="43161798" type="ECLIPSE_MINIMIZED" />
  <Command __id="4458" _type="PauseCommand" date="Wed Apr 13 22:59:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="43164980">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3182]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4457" _type="ShellCommand" date="Wed Apr 13 22:59:32 EDT 2022" starttimestamp="1649862007572" timestamp="43164980" type="ECLIPSE_MAXIMIZED" />
  <Command __id="4459" _type="ShellCommand" date="Wed Apr 13 22:59:32 EDT 2022" starttimestamp="1649862007572" timestamp="43165308" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4460" _type="ShellCommand" date="Wed Apr 13 22:59:33 EDT 2022" starttimestamp="1649862007572" timestamp="43165744" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4461" _type="ShellCommand" date="Wed Apr 13 22:59:33 EDT 2022" starttimestamp="1649862007572" timestamp="43165751" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4463" _type="PauseCommand" date="Wed Apr 13 22:59:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="43166850">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1098]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4462" _type="ShellCommand" date="Wed Apr 13 22:59:34 EDT 2022" starttimestamp="1649862007572" timestamp="43166849" type="ECLIPSE_MINIMIZED" />
  <Command __id="4465" _type="PauseCommand" date="Wed Apr 13 22:59:35 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="43167925">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1076]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4464" _type="ShellCommand" date="Wed Apr 13 22:59:35 EDT 2022" starttimestamp="1649862007572" timestamp="43167925" type="ECLIPSE_MAXIMIZED" />
  <Command __id="4466" _type="ShellCommand" date="Wed Apr 13 22:59:35 EDT 2022" starttimestamp="1649862007572" timestamp="43167998" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4467" _type="ShellCommand" date="Wed Apr 13 22:59:35 EDT 2022" starttimestamp="1649862007572" timestamp="43168175" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4468" _type="ShellCommand" date="Wed Apr 13 22:59:36 EDT 2022" starttimestamp="1649862007572" timestamp="43168739" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4470" _type="PauseCommand" date="Wed Apr 13 23:02:13 EDT 2022" range="2m-5m" starttimestamp="1649862007572" timestamp="43325916">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[157176]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4469" _type="ShellCommand" date="Wed Apr 13 23:02:13 EDT 2022" starttimestamp="1649862007572" timestamp="43325915" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4472" _type="PauseCommand" date="Wed Apr 13 23:02:19 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="43331771">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5856]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4471" _type="ShellCommand" date="Wed Apr 13 23:02:19 EDT 2022" starttimestamp="1649862007572" timestamp="43331771" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4474" _type="PauseCommand" date="Thu Apr 14 10:59:33 EDT 2022" range=">1h" starttimestamp="1649862007572" timestamp="86366053">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[43034282]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4473" _type="ShellCommand" date="Thu Apr 14 10:59:33 EDT 2022" starttimestamp="1649862007572" timestamp="86366053" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4476" _type="PauseCommand" date="Thu Apr 14 10:59:35 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86368045">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1992]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4475" _type="ShellCommand" date="Thu Apr 14 10:59:35 EDT 2022" starttimestamp="1649862007572" timestamp="86368045" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4478" _type="PauseCommand" date="Thu Apr 14 11:00:09 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="86402074">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[34029]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4477" _type="ShellCommand" date="Thu Apr 14 11:00:09 EDT 2022" starttimestamp="1649862007572" timestamp="86402074" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4479" _type="MoveCaretCommand" caretOffset="6099" date="Thu Apr 14 11:00:09 EDT 2022" docOffset="7774" starttimestamp="1649862007572" timestamp="86402188" />
  <Command __id="4480" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:00:10 EDT 2022" starttimestamp="1649862007572" timestamp="86403088" />
  <Command __id="4482" _type="InsertStringCommand" date="Thu Apr 14 11:00:11 EDT 2022" starttimestamp="1649862007572" timestamp="86403439" timestamp2="86403439">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4484" _type="InsertStringCommand" date="Thu Apr 14 11:00:11 EDT 2022" starttimestamp="1649862007572" timestamp="86404002" timestamp2="86404002">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4486" _type="InsertStringCommand" date="Thu Apr 14 11:00:11 EDT 2022" starttimestamp="1649862007572" timestamp="86404101" timestamp2="86404101">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4488" _type="InsertStringCommand" date="Thu Apr 14 11:00:11 EDT 2022" starttimestamp="1649862007572" timestamp="86404237" timestamp2="86404237">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4490" _type="InsertStringCommand" date="Thu Apr 14 11:00:11 EDT 2022" starttimestamp="1649862007572" timestamp="86404413" timestamp2="86404413">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4492" _type="InsertStringCommand" date="Thu Apr 14 11:00:12 EDT 2022" starttimestamp="1649862007572" timestamp="86404546" timestamp2="86404546">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4494" _type="InsertStringCommand" date="Thu Apr 14 11:00:12 EDT 2022" starttimestamp="1649862007572" timestamp="86404658" timestamp2="86404658">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4496" _type="InsertStringCommand" date="Thu Apr 14 11:00:12 EDT 2022" starttimestamp="1649862007572" timestamp="86404797" timestamp2="86404797">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4498" _type="InsertStringCommand" date="Thu Apr 14 11:00:12 EDT 2022" starttimestamp="1649862007572" timestamp="86404963" timestamp2="86404963">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="4500" _type="InsertStringCommand" date="Thu Apr 14 11:00:12 EDT 2022" starttimestamp="1649862007572" timestamp="86405135" timestamp2="86405135">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="4502" _type="InsertStringCommand" date="Thu Apr 14 11:00:12 EDT 2022" starttimestamp="1649862007572" timestamp="86405221" timestamp2="86405221">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4504" _type="InsertStringCommand" date="Thu Apr 14 11:00:12 EDT 2022" starttimestamp="1649862007572" timestamp="86405352" timestamp2="86405352">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4506" _type="InsertStringCommand" date="Thu Apr 14 11:00:13 EDT 2022" starttimestamp="1649862007572" timestamp="86405440" timestamp2="86405440">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4508" _type="InsertStringCommand" date="Thu Apr 14 11:00:13 EDT 2022" starttimestamp="1649862007572" timestamp="86405648" timestamp2="86405648">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4510" _type="InsertStringCommand" date="Thu Apr 14 11:00:13 EDT 2022" starttimestamp="1649862007572" timestamp="86405836" timestamp2="86405836">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4512" _type="InsertStringCommand" date="Thu Apr 14 11:00:13 EDT 2022" starttimestamp="1649862007572" timestamp="86405947" timestamp2="86405947">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4514" _type="InsertStringCommand" date="Thu Apr 14 11:00:13 EDT 2022" starttimestamp="1649862007572" timestamp="86406112" timestamp2="86406112">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4516" _type="InsertStringCommand" date="Thu Apr 14 11:00:13 EDT 2022" starttimestamp="1649862007572" timestamp="86406368" timestamp2="86406368">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4518" _type="InsertStringCommand" date="Thu Apr 14 11:00:14 EDT 2022" starttimestamp="1649862007572" timestamp="86406460" timestamp2="86406460">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4425" _type="DiffBasedFileOpenCommand" date="Wed Apr 13 16:54:42 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8879" docExpressionCount="826" docLength="9748" projectName="A6" starttimestamp="1649862007572" timestamp="21274545">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	pr"), Diff(DELETE,"ivate static"), Diff(INSERT,"otected"), Diff(EQUAL," boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	protected String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	protected int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <DocumentChange __id="4481" _type="Insert" date="Thu Apr 14 11:00:11 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8898" docExpressionCount="826" docLength="9767" length="19" offset="7773" repeat="19" starttimestamp="1649862007572" timestamp="86403436" timestamp2="86406456">
    <text><![CDATA[ gotten from old si]]></text>
  </DocumentChange>
  <Command __id="4520" _type="PauseCommand" date="Thu Apr 14 11:00:15 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86407941">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1481]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="4519" _type="Delete" date="Thu Apr 14 11:00:15 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8896" docExpressionCount="826" docLength="9765" endLine="214" length="2" offset="7790" repeat="2" startLine="214" starttimestamp="1649862007572" timestamp="86407941" timestamp2="86408133">
    <text><![CDATA[si]]></text>
  </DocumentChange>
  <Command __id="4521" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:00:15 EDT 2022" starttimestamp="1649862007572" timestamp="86407945" />
  <Command __id="4523" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:00:15 EDT 2022" starttimestamp="1649862007572" timestamp="86408135" />
  <DocumentChange __id="4524" _type="Insert" date="Thu Apr 14 11:00:15 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8902" docExpressionCount="826" docLength="9771" length="6" offset="7790" repeat="6" starttimestamp="1649862007572" timestamp="86408355" timestamp2="86409301">
    <text><![CDATA[GIPC c]]></text>
  </DocumentChange>
  <Command __id="4525" _type="InsertStringCommand" date="Thu Apr 14 11:00:15 EDT 2022" starttimestamp="1649862007572" timestamp="86408359" timestamp2="86408359">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="4527" _type="InsertStringCommand" date="Thu Apr 14 11:00:16 EDT 2022" starttimestamp="1649862007572" timestamp="86408472" timestamp2="86408472">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="4529" _type="InsertStringCommand" date="Thu Apr 14 11:00:16 EDT 2022" starttimestamp="1649862007572" timestamp="86408545" timestamp2="86408545">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="4531" _type="InsertStringCommand" date="Thu Apr 14 11:00:16 EDT 2022" starttimestamp="1649862007572" timestamp="86408859" timestamp2="86408859">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="4533" _type="InsertStringCommand" date="Thu Apr 14 11:00:16 EDT 2022" starttimestamp="1649862007572" timestamp="86409052" timestamp2="86409052">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4535" _type="InsertStringCommand" date="Thu Apr 14 11:00:16 EDT 2022" starttimestamp="1649862007572" timestamp="86409304" timestamp2="86409304">
    <data><![CDATA[c]]></data>
  </Command>
  <DocumentChange __id="4536" _type="Delete" date="Thu Apr 14 11:00:17 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8901" docExpressionCount="826" docLength="9770" endLine="214" length="1" offset="7795" startLine="214" starttimestamp="1649862007572" timestamp="86409637">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <Command __id="4537" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:00:17 EDT 2022" starttimestamp="1649862007572" timestamp="86409639" />
  <Command __id="4539" _type="InsertStringCommand" date="Thu Apr 14 11:00:17 EDT 2022" starttimestamp="1649862007572" timestamp="86409722" timestamp2="86409722">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4541" _type="InsertStringCommand" date="Thu Apr 14 11:00:17 EDT 2022" starttimestamp="1649862007572" timestamp="86409798" timestamp2="86409798">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4543" _type="InsertStringCommand" date="Thu Apr 14 11:00:17 EDT 2022" starttimestamp="1649862007572" timestamp="86409955" timestamp2="86409955">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4545" _type="InsertStringCommand" date="Thu Apr 14 11:00:17 EDT 2022" starttimestamp="1649862007572" timestamp="86410135" timestamp2="86410135">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4548" _type="PauseCommand" date="Thu Apr 14 11:00:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86411481">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1346]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="4547" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86411481" timestamp2="86411481">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4550" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86411739" timestamp2="86411739">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="4552" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86411868" timestamp2="86411868">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4554" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86411990" timestamp2="86411990">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4556" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86412012" timestamp2="86412012">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4558" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86412116" timestamp2="86412116">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4560" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86412169" timestamp2="86412169">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4562" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86412238" timestamp2="86412238">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4564" _type="InsertStringCommand" date="Thu Apr 14 11:00:19 EDT 2022" starttimestamp="1649862007572" timestamp="86412353" timestamp2="86412353">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="4566" _type="InsertStringCommand" date="Thu Apr 14 11:00:20 EDT 2022" starttimestamp="1649862007572" timestamp="86412436" timestamp2="86412436">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="4568" _type="InsertStringCommand" date="Thu Apr 14 11:00:20 EDT 2022" starttimestamp="1649862007572" timestamp="86412618" timestamp2="86412618">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4570" _type="InsertStringCommand" date="Thu Apr 14 11:00:20 EDT 2022" starttimestamp="1649862007572" timestamp="86412772" timestamp2="86412772">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4572" _type="InsertStringCommand" date="Thu Apr 14 11:00:20 EDT 2022" starttimestamp="1649862007572" timestamp="86412842" timestamp2="86412842">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="4574" _type="InsertStringCommand" date="Thu Apr 14 11:00:20 EDT 2022" starttimestamp="1649862007572" timestamp="86412939" timestamp2="86412939">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4576" _type="InsertStringCommand" date="Thu Apr 14 11:00:20 EDT 2022" starttimestamp="1649862007572" timestamp="86413037" timestamp2="86413037">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4578" _type="InsertStringCommand" date="Thu Apr 14 11:00:20 EDT 2022" starttimestamp="1649862007572" timestamp="86413155" timestamp2="86413155">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4580" _type="InsertStringCommand" date="Thu Apr 14 11:00:20 EDT 2022" starttimestamp="1649862007572" timestamp="86413398" timestamp2="86413398">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4582" _type="InsertStringCommand" date="Thu Apr 14 11:00:21 EDT 2022" starttimestamp="1649862007572" timestamp="86413433" timestamp2="86413433">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4584" _type="InsertStringCommand" date="Thu Apr 14 11:00:21 EDT 2022" starttimestamp="1649862007572" timestamp="86413602" timestamp2="86413602">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4594" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:00:23 EDT 2022" starttimestamp="1649862007572" timestamp="86415800" />
  <Command __id="4596" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:00:23 EDT 2022" starttimestamp="1649862007572" timestamp="86415804" />
  <Command __id="4597" _type="ShellCommand" date="Thu Apr 14 11:00:23 EDT 2022" starttimestamp="1649862007572" timestamp="86416111" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4599" _type="PauseCommand" date="Thu Apr 14 11:00:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86417492">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1381]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4598" _type="ShellCommand" date="Thu Apr 14 11:00:25 EDT 2022" starttimestamp="1649862007572" timestamp="86417492" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4600" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86417708" type="Debug" />
  <Command __id="4601" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86417708" type="Debug" />
  <Command __id="4602" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 11:00:25 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="86417708" type="Run" />
  <Command __id="4604" _type="PauseCommand" date="Thu Apr 14 11:00:35 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="86428059">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10351]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4603" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Thu Apr 14 11:00:35 EDT 2022" starttimestamp="1649862007572" timestamp="86428059" />
  <Command __id="4605" _type="ProgramExecutionEvent" className="/A6/src/registry/TrickOrTreatRegistry.java" date="Thu Apr 14 11:00:35 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="86428355" type="Run" />
  <Command __id="4606" _type="RunCommand" className="/A6/src/registry/TrickOrTreatRegistry.java" date="Thu Apr 14 11:00:35 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="86428355" type="Run" />
  <Command __id="4607" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86428579" type="Run" />
  <Command __id="4608" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:36 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86428594" type="Run" />
  <Command __id="4609" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86428597" type="Run" />
  <Command __id="4611" _type="PauseCommand" date="Thu Apr 14 11:00:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="86432263">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3666]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4646" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86445500" type="Run" />
  <Command __id="4648" _type="ConsoleInput" date="Thu Apr 14 11:00:53 EDT 2022" starttimestamp="1649862007572" timestamp="86446422" type="Exception">
    <outputString><![CDATA[i NIO
]]></outputString>
  </Command>
  <Command __id="4649" _type="ConsoleOutput" date="Thu Apr 14 11:00:54 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="86446797" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.4252460063493172"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4650" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86447174" type="Run" />
  <Command __id="4651" _type="ConsoleOutput" date="Thu Apr 14 11:00:54 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="86447293" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.36529345766885046 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@7cac575e
[com.sun.proxy.$Proxy1@7cac575e]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Server0<-->Generic Client:0.36529345766885046 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@7cac575e¶[com.sun.proxy.$Proxy1@7cac575e]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4652" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86447654" type="Run" />
  <Command __id="4653" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86447813" type="Run" />
  <Command __id="4654" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86447966" type="Run" />
  <Command __id="4655" _type="ConsoleOutput" date="Thu Apr 14 11:00:55 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="86448058" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:62936](remote),objID:[171287f:18028976f38:-7ffe, -6480610053809686398]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:62936](remote),objID:[171287f:18028976f38:-7ffe, -6480610053809686398]]]]]]
a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:62938]
IN RUN METHOD OF READ THREAD
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.36529345766885046 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@7cac575e¶[com.sun.proxy.$Proxy1@7cac575e]"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:62936](remote),objID:[171287f:18028976f38:-7ffe, -6480610053809686398]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:62936](remote),objID:[171287f:18028976f38:-7ffe, -6480610053809686398]]]]]]¶a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:62938]¶IN RUN METHOD OF READ THREAD"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4656" _type="ConsoleOutput" date="Thu Apr 14 11:00:55 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="86448066" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
New Client connected to server!!!
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:62936](remote),objID:[171287f:18028976f38:-7ffe, -6480610053809686398]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:62936](remote),objID:[171287f:18028976f38:-7ffe, -6480610053809686398]]]]]]¶a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:62938]¶IN RUN METHOD OF READ THREAD"), Diff(INSERT,"added server as a property change listener of client¶New Client connected to server!!!¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4657" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86448622" type="Run" />
  <Command __id="4658" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:00:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86448639" type="Run" />
  <Command __id="4660" _type="PauseCommand" date="Thu Apr 14 11:00:57 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86449938">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1299]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4681" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:01:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86466634" type="Run" />
  <Command __id="4684" _type="PauseCommand" date="Thu Apr 14 11:01:22 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="86474640">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8006]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4692" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:01:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86481543" type="Run" />
  <Command __id="4694" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:01:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86481576" type="Run" />
  <Command __id="4695" _type="ConsoleInput" date="Thu Apr 14 11:01:29 EDT 2022" starttimestamp="1649862007572" timestamp="86481647" type="Exception">
    <outputString><![CDATA[i NIO
]]></outputString>
  </Command>
  <Command __id="4696" _type="ConsoleOutput" date="Thu Apr 14 11:01:29 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="86481700" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)["), Diff(DELETE,"RMI"), Diff(INSERT,"NIO"), Diff(EQUAL,"]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="4698" _type="PauseCommand" date="Thu Apr 14 11:01:36 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="86488922">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7222]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4697" _type="ConsoleInput" date="Thu Apr 14 11:01:36 EDT 2022" starttimestamp="1649862007572" timestamp="86488922" type="Exception">
    <outputString><![CDATA[i NIO
]]></outputString>
  </Command>
  <Command __id="4699" _type="ConsoleOutput" date="Thu Apr 14 11:01:36 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="86488980" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="4701" _type="PauseCommand" date="Thu Apr 14 11:01:40 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="86492482">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3502]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4700" _type="ConsoleInput" date="Thu Apr 14 11:01:40 EDT 2022" starttimestamp="1649862007572" timestamp="86492482" type="Exception">
    <outputString><![CDATA[i NIO
]]></outputString>
  </Command>
  <Command __id="4702" _type="ConsoleOutput" date="Thu Apr 14 11:01:40 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="86492535" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="4704" _type="PauseCommand" date="Thu Apr 14 11:01:51 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="86504307">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11772]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4718" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:02:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86534323" type="Run" />
  <DocumentChange __id="4538" _type="Insert" date="Thu Apr 14 11:00:17 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8927" docExpressionCount="826" docLength="9796" length="26" offset="7795" repeat="26" starttimestamp="1649862007572" timestamp="86409718" timestamp2="86413823">
    <text><![CDATA[simiulation command method]]></text>
  </DocumentChange>
  <Command __id="4721" _type="PauseCommand" date="Thu Apr 14 11:03:48 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="86621220">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[86897]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4722" _type="MoveCaretCommand" caretOffset="3260" date="Thu Apr 14 11:03:48 EDT 2022" docOffset="3260" starttimestamp="1649862007572" timestamp="86621357" />
  <Command __id="4720" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:03:48 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" projectName="A6" starttimestamp="1649862007572" timestamp="86621220">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4724" _type="PauseCommand" date="Thu Apr 14 11:03:54 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="86626465">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5108]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4725" _type="MoveCaretCommand" caretOffset="3882" date="Thu Apr 14 11:03:54 EDT 2022" docOffset="3882" starttimestamp="1649862007572" timestamp="86626561" />
  <Command __id="4723" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:03:54 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3506" docExpressionCount="328" docLength="3990" projectName="A6" starttimestamp="1649862007572" timestamp="86626465">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			"), Diff(DELETE,"super.simulationCommand(aCommand);¶			return;¶		}"), Diff(INSERT,"System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶	¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);"), Diff(EQUAL,"¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, "), Diff(INSERT,"super."), Diff(EQUAL,"broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
	
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
		

}
]]></snapshot>
  </Command>
  <Command __id="4727" _type="PauseCommand" date="Thu Apr 14 11:04:03 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="86635875">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9314]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4728" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:04:03 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="86635955" />
  <Command __id="4726" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:04:03 EDT 2022" docASTNodeCount="75" docActiveCodeLength="601" docExpressionCount="57" docLength="601" projectName="A6" starttimestamp="1649862007572" timestamp="86635875">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶"), Diff(INSERT,"import java.nio.ByteBuffer;¶import java.util.concurrent.ArrayBlockingQueue;¶¶"), Diff(EQUAL,"import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶¶"), Diff(INSERT,"	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;

public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{

	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

}
]]></snapshot>
  </Command>
  <Command __id="4730" _type="PauseCommand" date="Thu Apr 14 11:04:05 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86637722">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1767]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4731" _type="MoveCaretCommand" caretOffset="3882" date="Thu Apr 14 11:04:05 EDT 2022" docOffset="3882" starttimestamp="1649862007572" timestamp="86637848" />
  <Command __id="4729" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:04:05 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3506" docExpressionCount="328" docLength="3990" projectName="A6" starttimestamp="1649862007572" timestamp="86637722">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶	¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4733" _type="PauseCommand" date="Thu Apr 14 11:04:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86638994">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1146]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4753" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:06:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86766571" type="Run" />
  <Command __id="4755" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:06:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86766633" type="Run" />
  <Command __id="4757" _type="PauseCommand" date="Thu Apr 14 11:06:45 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="86797964">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[31331]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="4756" _type="SelectTextCommand" caretOffset="6249" date="Thu Apr 14 11:06:45 EDT 2022" end="6455" start="6249" starttimestamp="1649862007572" timestamp="86797964" />
  <Command __id="4758" _type="CopyCommand" date="Thu Apr 14 11:06:45 EDT 2022" starttimestamp="1649862007572" timestamp="86798398" />
  <Command __id="4732" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:04:06 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8927" docExpressionCount="826" docLength="9796" projectName="A6" starttimestamp="1649862007572" timestamp="86638994">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism"), Diff(INSERT," gotten from old GIPC simiulation command method"), Diff(EQUAL,"");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	protected String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	protected int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <Command __id="4760" _type="PauseCommand" date="Thu Apr 14 11:06:51 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="86803848">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[5450]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4761" _type="MoveCaretCommand" caretOffset="3882" date="Thu Apr 14 11:06:51 EDT 2022" docOffset="3882" starttimestamp="1649862007572" timestamp="86803930" />
  <Command __id="4759" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:06:51 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3506" docExpressionCount="328" docLength="3990" projectName="A6" starttimestamp="1649862007572" timestamp="86803848">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶	¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4763" _type="PauseCommand" date="Thu Apr 14 11:07:55 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="86868215">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[64285]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4764" _type="SelectTextCommand" caretOffset="6249" date="Thu Apr 14 11:07:55 EDT 2022" end="6455" start="6249" starttimestamp="1649862007572" timestamp="86868322" />
  <Command __id="4762" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:07:55 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8927" docExpressionCount="826" docLength="9796" projectName="A6" starttimestamp="1649862007572" timestamp="86868215">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4766" _type="PauseCommand" date="Thu Apr 14 11:07:56 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86869348">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1026]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4768" _type="MoveCaretCommand" caretOffset="3882" date="Thu Apr 14 11:07:57 EDT 2022" docOffset="3882" starttimestamp="1649862007572" timestamp="86869519" />
  <Command __id="4769" _type="SelectTextCommand" caretOffset="6249" date="Thu Apr 14 11:07:57 EDT 2022" end="6455" start="6249" starttimestamp="1649862007572" timestamp="86869525" />
  <Command __id="4771" _type="PauseCommand" date="Thu Apr 14 11:07:58 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86870911">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1386]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4770" _type="MoveCaretCommand" caretOffset="6236" date="Thu Apr 14 11:07:58 EDT 2022" docOffset="7911" starttimestamp="1649862007572" timestamp="86870911" />
  <Command __id="4765" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:07:56 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3506" docExpressionCount="328" docLength="3990" projectName="A6" starttimestamp="1649862007572" timestamp="86869348">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶	¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4767" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:07:56 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8927" docExpressionCount="826" docLength="9796" projectName="A6" starttimestamp="1649862007572" timestamp="86869380">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4773" _type="PauseCommand" date="Thu Apr 14 11:08:33 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="86906033">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[35122]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4774" _type="MoveCaretCommand" caretOffset="3882" date="Thu Apr 14 11:08:33 EDT 2022" docOffset="3882" starttimestamp="1649862007572" timestamp="86906113" />
  <Command __id="4776" _type="PauseCommand" date="Thu Apr 14 11:08:38 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="86911293">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5180]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4775" _type="MoveCaretCommand" caretOffset="3429" date="Thu Apr 14 11:08:38 EDT 2022" docOffset="3429" starttimestamp="1649862007572" timestamp="86911293" />
  <Command __id="4777" _type="MoveCaretCommand" caretOffset="3429" date="Thu Apr 14 11:08:38 EDT 2022" docOffset="3429" starttimestamp="1649862007572" timestamp="86911293" />
  <Command __id="4779" _type="InsertStringCommand" date="Thu Apr 14 11:08:39 EDT 2022" starttimestamp="1649862007572" timestamp="86912101" timestamp2="86912101">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4780" _type="InsertStringCommand" date="Thu Apr 14 11:08:39 EDT 2022" starttimestamp="1649862007572" timestamp="86912101" timestamp2="86912101">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4782" _type="PasteCommand" date="Thu Apr 14 11:08:40 EDT 2022" starttimestamp="1649862007572" timestamp="86912845" />
  <Command __id="4784" _type="PauseCommand" date="Thu Apr 14 11:08:44 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="86917014">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[4169]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="4783" _type="SelectTextCommand" caretOffset="3501" date="Thu Apr 14 11:08:44 EDT 2022" end="3572" start="3501" starttimestamp="1649862007572" timestamp="86917014" />
  <Command __id="4785" _type="SelectTextCommand" caretOffset="3501" date="Thu Apr 14 11:08:44 EDT 2022" end="3572" start="3501" starttimestamp="1649862007572" timestamp="86917014" />
  <Command __id="4787" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:08:44 EDT 2022" starttimestamp="1649862007572" timestamp="86917391" />
  <Command __id="4788" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:08:44 EDT 2022" starttimestamp="1649862007572" timestamp="86917391" />
  <Command __id="4790" _type="PauseCommand" date="Thu Apr 14 11:08:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="86920237">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2846]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="4772" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:08:33 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3506" docExpressionCount="328" docLength="3990" projectName="A6" starttimestamp="1649862007572" timestamp="86906033">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶	¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="4778" _type="Insert" date="Thu Apr 14 11:08:39 EDT 2022" docASTNodeCount="494" docActiveCodeLength="3510" docExpressionCount="328" docLength="3994" length="4" offset="3429" starttimestamp="1649862007572" timestamp="86912095">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="4781" _type="Replace" date="Thu Apr 14 11:08:40 EDT 2022" docASTNodeCount="513" docActiveCodeLength="3714" docExpressionCount="343" docLength="4198" endLine="116" insertionLength="206" int_docASTNodeCount="494" int_docActiveCodeLength="3508" int_docExpressionCount="328" int_docLength="3992" length="2" offset="3431" startLine="116" starttimestamp="1649862007572" timestamp="86912768">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		commandProcessor.addPropertyChangeListener(clientOutCoupler);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4786" _type="Delete" date="Thu Apr 14 11:08:44 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3643" docExpressionCount="336" docLength="4127" endLine="117" length="71" offset="3501" startLine="117" starttimestamp="1649862007572" timestamp="86917389">
    <text><![CDATA[clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);]]></text>
  </DocumentChange>
  <Command __id="4789" _type="SelectTextCommand" caretOffset="3505" date="Thu Apr 14 11:08:47 EDT 2022" end="3566" start="3505" starttimestamp="1649862007572" timestamp="86920237" />
  <Command __id="4791" _type="SelectTextCommand" caretOffset="3505" date="Thu Apr 14 11:08:47 EDT 2022" end="3566" start="3505" starttimestamp="1649862007572" timestamp="86920237" />
  <Command __id="4793" _type="CutCommand" date="Thu Apr 14 11:08:48 EDT 2022" starttimestamp="1649862007572" timestamp="86920632" />
  <Command __id="4796" _type="PauseCommand" date="Thu Apr 14 11:08:49 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86921801">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[1169]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4795" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Apr 14 11:08:49 EDT 2022" starttimestamp="1649862007572" timestamp="86921801" />
  <Command __id="4798" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Apr 14 11:08:49 EDT 2022" starttimestamp="1649862007572" timestamp="86922298" />
  <Command __id="4801" _type="PauseCommand" date="Thu Apr 14 11:08:51 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86923679">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1381]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4800" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Apr 14 11:08:51 EDT 2022" starttimestamp="1649862007572" timestamp="86923679" />
  <Command __id="4803" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Apr 14 11:08:52 EDT 2022" starttimestamp="1649862007572" timestamp="86924486" />
  <Command __id="4805" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Apr 14 11:08:52 EDT 2022" starttimestamp="1649862007572" timestamp="86924814" />
  <Command __id="4807" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Apr 14 11:08:52 EDT 2022" starttimestamp="1649862007572" timestamp="86924995" />
  <DocumentChange __id="4792" _type="Delete" date="Thu Apr 14 11:08:48 EDT 2022" docASTNodeCount="499" docActiveCodeLength="3574" docExpressionCount="332" docLength="4058" endLine="120" length="69" offset="3505" repeat="7" startLine="118" starttimestamp="1649862007572" timestamp="86920628" timestamp2="86924990">
    <text><![CDATA[commandProcessor.addPropertyChangeListener(clientOutCoupler);
	
		B]]></text>
  </DocumentChange>
  <Command __id="4809" _type="PauseCommand" date="Thu Apr 14 11:08:53 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="86926204">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1209]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="4810" _type="InsertStringCommand" date="Thu Apr 14 11:08:53 EDT 2022" starttimestamp="1649862007572" timestamp="86926210" timestamp2="86926210">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="4811" _type="InsertStringCommand" date="Thu Apr 14 11:08:53 EDT 2022" starttimestamp="1649862007572" timestamp="86926210" timestamp2="86926210">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="4812" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:08:54 EDT 2022" starttimestamp="1649862007572" timestamp="86926739" />
  <Command __id="4813" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:08:54 EDT 2022" starttimestamp="1649862007572" timestamp="86926828" />
  <Command __id="4814" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:08:54 EDT 2022" starttimestamp="1649862007572" timestamp="86926856" />
  <Command __id="4815" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:08:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86927060" type="Run" />
  <Command __id="4816" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:08:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86927060" type="Run" />
  <Command __id="4817" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:08:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86927060" type="Run" />
  <Command __id="4819" _type="PauseCommand" date="Thu Apr 14 11:08:57 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="86930374">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3314]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4818" _type="MoveCaretCommand" caretOffset="4044" date="Thu Apr 14 11:08:57 EDT 2022" docOffset="4044" starttimestamp="1649862007572" timestamp="86930374" />
  <Command __id="4820" _type="MoveCaretCommand" caretOffset="4044" date="Thu Apr 14 11:08:57 EDT 2022" docOffset="4044" starttimestamp="1649862007572" timestamp="86930375" />
  <Command __id="4822" _type="InsertStringCommand" date="Thu Apr 14 11:08:58 EDT 2022" starttimestamp="1649862007572" timestamp="86930671" timestamp2="86930671">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4823" _type="InsertStringCommand" date="Thu Apr 14 11:08:58 EDT 2022" starttimestamp="1649862007572" timestamp="86930671" timestamp2="86930671">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4825" _type="PasteCommand" date="Thu Apr 14 11:08:58 EDT 2022" starttimestamp="1649862007572" timestamp="86930941" />
  <Command __id="4826" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:08:59 EDT 2022" starttimestamp="1649862007572" timestamp="86931428" />
  <Command __id="4827" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:08:59 EDT 2022" starttimestamp="1649862007572" timestamp="86931525" />
  <Command __id="4828" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:08:59 EDT 2022" starttimestamp="1649862007572" timestamp="86931556" />
  <Command __id="4829" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:08:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86931710" type="Run" />
  <Command __id="4830" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:08:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86931710" type="Run" />
  <Command __id="4831" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:08:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86931710" type="Run" />
  <Command __id="4833" _type="PauseCommand" date="Thu Apr 14 11:09:07 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="86940057">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8347]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4938" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:10:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="86992830" type="Run" />
  <Command __id="4941" _type="PauseCommand" date="Thu Apr 14 11:10:06 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="86998771">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5941]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4940" _type="ConsoleInput" date="Thu Apr 14 11:10:06 EDT 2022" starttimestamp="1649862007572" timestamp="86998771" type="Exception">
    <outputString><![CDATA[i NIO
]]></outputString>
  </Command>
  <Command __id="4942" _type="ConsoleOutput" date="Thu Apr 14 11:10:06 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="86998842" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[NIO]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:63161](remote),objID:[-2f20edf7:180289f8767:-7ffe, 4620223841422439730]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:63148](remote),objID:[6b6a14b8:180289f7ca0:-7ffe, -56439291397163863]]]]], Proxy[ClientRemoteI"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.i"), Diff(EQUAL,"nter"), Diff(DELETE,"f"), Diff(EQUAL,"ac"), Diff(DELETE,"eRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:63155](remote),objID:[-4cb4de28:180289f823e:-7ffe, -7810937700964052698]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:63161](remote),objID:[-2f20edf7:180289f8767:-7ffe, 4620223841422439730]]]]]]¶a new client has been initialized<--java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:63163]¶IN RUN METHOD OF READ THREAD"), Diff(INSERT,"tiveMethodInvocation.IPCMechanism)[NIO]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4944" _type="PauseCommand" date="Thu Apr 14 11:10:11 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="87004406">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5564]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="5002" _type="ShellCommand" date="Thu Apr 14 11:21:01 EDT 2022" starttimestamp="1649862007572" timestamp="87653800" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="4808" _type="Insert" date="Thu Apr 14 11:08:53 EDT 2022" docASTNodeCount="499" docActiveCodeLength="3575" docExpressionCount="332" docLength="4059" length="1" offset="3505" starttimestamp="1649862007572" timestamp="86926204">
    <text><![CDATA[B]]></text>
  </DocumentChange>
  <DocumentChange __id="4821" _type="Insert" date="Thu Apr 14 11:08:58 EDT 2022" docASTNodeCount="499" docActiveCodeLength="3579" docExpressionCount="332" docLength="4063" length="4" offset="4044" starttimestamp="1649862007572" timestamp="86930665">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="4824" _type="Replace" date="Thu Apr 14 11:08:58 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3640" docExpressionCount="336" docLength="4124" endLine="130" insertionLength="63" int_docASTNodeCount="499" int_docActiveCodeLength="3577" int_docExpressionCount="332" int_docLength="4061" length="2" offset="4046" startLine="130" starttimestamp="1649862007572" timestamp="86930937">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		commandProcessor.addPropertyChangeListener(clientOutCoupler);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4835" _type="Insert" date="Thu Apr 14 11:09:07 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3644" docExpressionCount="336" docLength="4128" length="4" offset="4044" starttimestamp="1649862007572" timestamp="86940352">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="5005" _type="PauseCommand" date="Thu Apr 14 11:21:04 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="87656784">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2984]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5006" _type="MoveCaretCommand" caretOffset="6236" date="Thu Apr 14 11:21:04 EDT 2022" docOffset="7911" starttimestamp="1649862007572" timestamp="87656914" />
  <Command __id="5008" _type="PauseCommand" date="Thu Apr 14 11:21:15 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="87668230">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11316]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5007" _type="MoveCaretCommand" caretOffset="2559" date="Thu Apr 14 11:21:15 EDT 2022" docOffset="4234" starttimestamp="1649862007572" timestamp="87668230" />
  <Command __id="5010" _type="InsertStringCommand" date="Thu Apr 14 11:21:16 EDT 2022" starttimestamp="1649862007572" timestamp="87668928" timestamp2="87668928">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5012" _type="InsertStringCommand" date="Thu Apr 14 11:21:16 EDT 2022" starttimestamp="1649862007572" timestamp="87669083" timestamp2="87669083">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5013" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Thu Apr 14 11:21:17 EDT 2022" starttimestamp="1649862007572" timestamp="87669435" />
  <Command __id="5014" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Thu Apr 14 11:21:17 EDT 2022" starttimestamp="1649862007572" timestamp="87669622" />
  <Command __id="5016" _type="InsertStringCommand" date="Thu Apr 14 11:21:17 EDT 2022" starttimestamp="1649862007572" timestamp="87670123" timestamp2="87670123">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5018" _type="InsertStringCommand" date="Thu Apr 14 11:21:17 EDT 2022" starttimestamp="1649862007572" timestamp="87670231" timestamp2="87670231">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5020" _type="InsertStringCommand" date="Thu Apr 14 11:21:18 EDT 2022" starttimestamp="1649862007572" timestamp="87670617" timestamp2="87670617">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="5022" _type="InsertStringCommand" date="Thu Apr 14 11:21:18 EDT 2022" starttimestamp="1649862007572" timestamp="87671351" timestamp2="87671351">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="5024" _type="InsertStringCommand" date="Thu Apr 14 11:21:19 EDT 2022" starttimestamp="1649862007572" timestamp="87671677" timestamp2="87671677">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5026" _type="PasteCommand" date="Thu Apr 14 11:21:19 EDT 2022" starttimestamp="1649862007572" timestamp="87671918" />
  <Command __id="5028" _type="PauseCommand" date="Thu Apr 14 11:21:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="87673132">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1214]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5027" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:21:20 EDT 2022" starttimestamp="1649862007572" timestamp="87673132" />
  <Command __id="5029" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:21:20 EDT 2022" starttimestamp="1649862007572" timestamp="87673236" />
  <Command __id="5030" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:21:20 EDT 2022" starttimestamp="1649862007572" timestamp="87673265" />
  <Command __id="5031" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:21:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="87673469" type="Run" />
  <Command __id="5032" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:21:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="87673469" type="Run" />
  <Command __id="5033" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:21:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="87673469" type="Run" />
  <Command __id="5004" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:21:04 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8927" docExpressionCount="826" docLength="9796" projectName="A6" starttimestamp="1649862007572" timestamp="87656784">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="5009" _type="Insert" date="Thu Apr 14 11:21:16 EDT 2022" docASTNodeCount="1152" docActiveCodeLength="8939" docExpressionCount="826" docLength="9812" length="16" offset="4234" repeat="7" starttimestamp="1649862007572" timestamp="87668923" timestamp2="87671669">
    <text><![CDATA[//A6
		
		
		]]></text>
  </DocumentChange>
  <DocumentChange __id="5025" _type="Replace" date="Thu Apr 14 11:21:19 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" endLine="104" insertionLength="245" int_docASTNodeCount="1152" int_docActiveCodeLength="8937" int_docExpressionCount="826" int_docLength="9810" length="2" offset="4240" startLine="104" starttimestamp="1649862007572" timestamp="87671909">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
]]></insertedText>
  </DocumentChange>
  <Command __id="5035" _type="PauseCommand" date="Thu Apr 14 11:21:47 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="87699987">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[26517]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5036" _type="MoveCaretCommand" caretOffset="4048" date="Thu Apr 14 11:21:47 EDT 2022" docOffset="4048" starttimestamp="1649862007572" timestamp="87700078" />
  <Command __id="5038" _type="PauseCommand" date="Thu Apr 14 11:22:05 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="87717533">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[17455]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5078" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:30:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88192795" type="Run" />
  <Command __id="5080" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:30:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88192825" type="Run" />
  <Command __id="5082" _type="PauseCommand" date="Thu Apr 14 11:32:49 EDT 2022" range="2m-5m" starttimestamp="1649862007572" timestamp="88361829">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[169004]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5081" _type="ShellCommand" date="Thu Apr 14 11:32:49 EDT 2022" starttimestamp="1649862007572" timestamp="88361829" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5034" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:21:47 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3644" docExpressionCount="336" docLength="4128" projectName="A6" starttimestamp="1649862007572" timestamp="87699986">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶	"), Diff(INSERT,"	commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		"), Diff(EQUAL,"¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	"), Diff(INSERT,"	¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	"), Diff(EQUAL,"}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
		

}
]]></snapshot>
  </Command>
  <Command __id="5084" _type="PauseCommand" date="Thu Apr 14 11:33:05 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88377871">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[16042]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5085" _type="MoveCaretCommand" caretOffset="3260" date="Thu Apr 14 11:33:05 EDT 2022" docOffset="3260" starttimestamp="1649862007572" timestamp="88377965" />
  <Command __id="5083" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:33:05 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" projectName="A6" starttimestamp="1649862007572" timestamp="88377871">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5087" _type="PauseCommand" date="Thu Apr 14 11:33:28 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="88400706">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[22741]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5088" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:33:28 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="88400896" />
  <Command __id="5090" _type="PauseCommand" date="Thu Apr 14 11:34:23 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="88455577">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[54681]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5089" _type="MoveCaretCommand" caretOffset="5339" date="Thu Apr 14 11:34:23 EDT 2022" docOffset="6995" starttimestamp="1649862007572" timestamp="88455577" />
  <Command __id="5091" _type="MoveCaretCommand" caretOffset="5330" date="Thu Apr 14 11:34:24 EDT 2022" docOffset="6986" starttimestamp="1649862007572" timestamp="88456517" />
  <Command __id="5093" _type="InsertStringCommand" date="Thu Apr 14 11:34:24 EDT 2022" starttimestamp="1649862007572" timestamp="88456906" timestamp2="88456906">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5095" _type="InsertStringCommand" date="Thu Apr 14 11:34:24 EDT 2022" starttimestamp="1649862007572" timestamp="88457038" timestamp2="88457038">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5096" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Thu Apr 14 11:34:25 EDT 2022" starttimestamp="1649862007572" timestamp="88457776" />
  <Command __id="5098" _type="InsertStringCommand" date="Thu Apr 14 11:34:25 EDT 2022" starttimestamp="1649862007572" timestamp="88458392" timestamp2="88458392">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5100" _type="InsertStringCommand" date="Thu Apr 14 11:34:26 EDT 2022" starttimestamp="1649862007572" timestamp="88458503" timestamp2="88458503">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="5102" _type="InsertStringCommand" date="Thu Apr 14 11:34:26 EDT 2022" starttimestamp="1649862007572" timestamp="88458849" timestamp2="88458849">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="5104" _type="InsertStringCommand" date="Thu Apr 14 11:34:27 EDT 2022" starttimestamp="1649862007572" timestamp="88459496" timestamp2="88459496">
    <data><![CDATA[6]]></data>
  </Command>
  <Command __id="5106" _type="InsertStringCommand" date="Thu Apr 14 11:34:27 EDT 2022" starttimestamp="1649862007572" timestamp="88459621" timestamp2="88459621">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5108" _type="PasteCommand" date="Thu Apr 14 11:34:27 EDT 2022" starttimestamp="1649862007572" timestamp="88460034" />
  <Command __id="5110" _type="PauseCommand" date="Thu Apr 14 11:34:28 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88461068">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1034]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5109" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:34:28 EDT 2022" starttimestamp="1649862007572" timestamp="88461068" />
  <Command __id="5111" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:34:28 EDT 2022" starttimestamp="1649862007572" timestamp="88461169" />
  <Command __id="5112" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:34:28 EDT 2022" starttimestamp="1649862007572" timestamp="88461205" />
  <Command __id="5113" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:34:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88461526" type="Run" />
  <Command __id="5114" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:34:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88461526" type="Run" />
  <Command __id="5115" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:34:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88461526" type="Run" />
  <Command __id="5116" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:34:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88461526" type="Run" />
  <Command __id="5117" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:34:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88461527" type="Run" />
  <Command __id="5119" _type="PauseCommand" date="Thu Apr 14 11:34:41 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88474160">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12633]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5135" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:35:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88492804" type="Run" />
  <Command __id="5137" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:35:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88492835" type="Run" />
  <Command __id="5139" _type="PauseCommand" date="Thu Apr 14 11:37:24 EDT 2022" range="2m-5m" starttimestamp="1649862007572" timestamp="88636533">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[143698]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5138" _type="ShellCommand" date="Thu Apr 14 11:37:24 EDT 2022" starttimestamp="1649862007572" timestamp="88636533" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5086" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:33:28 EDT 2022" docASTNodeCount="1234" docActiveCodeLength="8901" docExpressionCount="876" docLength="9957" projectName="A6" starttimestamp="1649862007572" timestamp="88400706">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="5092" _type="Insert" date="Thu Apr 14 11:34:24 EDT 2022" docASTNodeCount="1234" docActiveCodeLength="8913" docExpressionCount="876" docLength="9973" length="16" offset="6986" repeat="7" starttimestamp="1649862007572" timestamp="88456901" timestamp2="88459617">
    <text><![CDATA[
		//A6
		
		]]></text>
  </DocumentChange>
  <DocumentChange __id="5107" _type="Replace" date="Thu Apr 14 11:34:27 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" endLine="214" insertionLength="245" int_docASTNodeCount="1234" int_docActiveCodeLength="8911" int_docExpressionCount="876" int_docLength="9971" length="2" offset="6996" startLine="214" starttimestamp="1649862007572" timestamp="88460028">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
]]></insertedText>
  </DocumentChange>
  <Command __id="5141" _type="PauseCommand" date="Thu Apr 14 11:37:27 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88639795">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3262]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5142" _type="MoveCaretCommand" caretOffset="3260" date="Thu Apr 14 11:37:27 EDT 2022" docOffset="3260" starttimestamp="1649862007572" timestamp="88639881" />
  <Command __id="5140" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:37:27 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" projectName="A6" starttimestamp="1649862007572" timestamp="88639795">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5144" _type="PauseCommand" date="Thu Apr 14 11:38:20 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="88692999">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[53118]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5145" _type="MoveCaretCommand" caretOffset="4048" date="Thu Apr 14 11:38:20 EDT 2022" docOffset="4048" starttimestamp="1649862007572" timestamp="88693094" />
  <Command __id="5143" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:38:20 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3644" docExpressionCount="336" docLength="4128" projectName="A6" starttimestamp="1649862007572" timestamp="88692999">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5147" _type="PauseCommand" date="Thu Apr 14 11:38:37 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88709492">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16398]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5148" _type="MoveCaretCommand" caretOffset="2810" date="Thu Apr 14 11:38:37 EDT 2022" docOffset="4485" starttimestamp="1649862007572" timestamp="88709589" />
  <Command __id="5146" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:38:37 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="88709492">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		"), Diff(INSERT,"//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		"), Diff(EQUAL,"//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	protected String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	protected int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <Command __id="5150" _type="PauseCommand" date="Thu Apr 14 11:38:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88714435">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4846]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5151" _type="MoveCaretCommand" caretOffset="4048" date="Thu Apr 14 11:38:42 EDT 2022" docOffset="4048" starttimestamp="1649862007572" timestamp="88714589" />
  <Command __id="5149" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:38:42 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3644" docExpressionCount="336" docLength="4128" projectName="A6" starttimestamp="1649862007572" timestamp="88714435">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5153" _type="PauseCommand" date="Thu Apr 14 11:38:58 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88731355">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16766]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5154" _type="MoveCaretCommand" caretOffset="1196" date="Thu Apr 14 11:38:59 EDT 2022" docOffset="1527" starttimestamp="1649862007572" timestamp="88731541" />
  <Command __id="5156" _type="PauseCommand" date="Thu Apr 14 11:39:05 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="88737523">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5982]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5155" _type="MoveCaretCommand" caretOffset="1182" date="Thu Apr 14 11:39:05 EDT 2022" docOffset="1513" starttimestamp="1649862007572" timestamp="88737523" />
  <Command __id="5152" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:38:58 EDT 2022" docASTNodeCount="224" docActiveCodeLength="1613" docExpressionCount="140" docLength="1810" projectName="A6" starttimestamp="1649862007572" timestamp="88731355">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;"), Diff(INSERT,"¶import java.util.concurrent.ArrayBlockingQueue;"), Diff(EQUAL,"¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		"), Diff(INSERT,"while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶		¶		}¶		"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="5158" _type="PauseCommand" date="Thu Apr 14 11:39:11 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="88744081">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6558]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5159" _type="InsertStringCommand" date="Thu Apr 14 11:39:11 EDT 2022" starttimestamp="1649862007572" timestamp="88744095" timestamp2="88744095">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5161" _type="InsertStringCommand" date="Thu Apr 14 11:39:12 EDT 2022" starttimestamp="1649862007572" timestamp="88744899" timestamp2="88744899">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5157" _type="Insert" date="Thu Apr 14 11:39:11 EDT 2022" docASTNodeCount="224" docActiveCodeLength="1623" docExpressionCount="140" docLength="1820" length="10" offset="1513" repeat="2" starttimestamp="1649862007572" timestamp="88744081" timestamp2="88744895">
    <text><![CDATA[
			
			]]></text>
  </DocumentChange>
  <Command __id="5163" _type="PauseCommand" date="Thu Apr 14 11:39:28 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88761111">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[16212]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5173" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:39:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88777794" type="Run" />
  <Command __id="5175" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:39:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88777826" type="Run" />
  <Command __id="5177" _type="PauseCommand" date="Thu Apr 14 11:39:55 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="88787781">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[9955]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5180" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:39:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88790145" type="Run" />
  <Command __id="5182" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:39:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88790224" type="Run" />
  <Command __id="5162" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:39:28 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3644" docExpressionCount="336" docLength="4128" projectName="A6" starttimestamp="1649862007572" timestamp="88761111">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5184" _type="PauseCommand" date="Thu Apr 14 11:39:58 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88791420">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1196]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5188" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:40:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88792810" type="Run" />
  <Command __id="5190" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:40:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88792840" type="Run" />
  <Command __id="5192" _type="SelectTextCommand" caretOffset="3380" date="Thu Apr 14 11:40:00 EDT 2022" end="3407" start="3380" starttimestamp="1649862007572" timestamp="88793163" />
  <Command __id="5194" _type="PauseCommand" date="Thu Apr 14 11:40:14 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88807229">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[14066]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5193" _type="SelectTextCommand" caretOffset="4052" date="Thu Apr 14 11:40:14 EDT 2022" end="4113" start="4052" starttimestamp="1649862007572" timestamp="88807229" />
  <Command __id="5195" _type="SelectTextCommand" caretOffset="4052" date="Thu Apr 14 11:40:14 EDT 2022" end="4113" start="4052" starttimestamp="1649862007572" timestamp="88807229" />
  <Command __id="5197" _type="PauseCommand" date="Thu Apr 14 11:40:16 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88808631">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1402]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5183" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:39:58 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3777" docExpressionCount="382" docLength="4121" projectName="A6" starttimestamp="1649862007572" timestamp="88791420">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="5191" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:40:00 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3644" docExpressionCount="336" docLength="4128" projectName="A6" starttimestamp="1649862007572" timestamp="88793069">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5196" _type="MoveCaretCommand" caretOffset="4068" date="Thu Apr 14 11:40:16 EDT 2022" docOffset="4068" starttimestamp="1649862007572" timestamp="88808631" />
  <Command __id="5198" _type="MoveCaretCommand" caretOffset="4068" date="Thu Apr 14 11:40:16 EDT 2022" docOffset="4068" starttimestamp="1649862007572" timestamp="88808631" />
  <Command __id="5199" _type="MoveCaretCommand" caretOffset="4117" date="Thu Apr 14 11:40:16 EDT 2022" docOffset="4117" starttimestamp="1649862007572" timestamp="88809391" />
  <Command __id="5200" _type="MoveCaretCommand" caretOffset="4117" date="Thu Apr 14 11:40:16 EDT 2022" docOffset="4117" starttimestamp="1649862007572" timestamp="88809391" />
  <Command __id="5202" _type="InsertStringCommand" date="Thu Apr 14 11:40:17 EDT 2022" starttimestamp="1649862007572" timestamp="88809767" timestamp2="88809767">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5203" _type="InsertStringCommand" date="Thu Apr 14 11:40:17 EDT 2022" starttimestamp="1649862007572" timestamp="88809767" timestamp2="88809767">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5205" _type="InsertStringCommand" date="Thu Apr 14 11:40:17 EDT 2022" starttimestamp="1649862007572" timestamp="88809920" timestamp2="88809920">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5206" _type="InsertStringCommand" date="Thu Apr 14 11:40:17 EDT 2022" starttimestamp="1649862007572" timestamp="88809920" timestamp2="88809920">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5209" _type="PauseCommand" date="Thu Apr 14 11:40:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88811106">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1186]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="5208" _type="InsertStringCommand" date="Thu Apr 14 11:40:18 EDT 2022" starttimestamp="1649862007572" timestamp="88811106" timestamp2="88811106">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5210" _type="InsertStringCommand" date="Thu Apr 14 11:40:18 EDT 2022" starttimestamp="1649862007572" timestamp="88811106" timestamp2="88811106">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5212" _type="InsertStringCommand" date="Thu Apr 14 11:40:18 EDT 2022" starttimestamp="1649862007572" timestamp="88811216" timestamp2="88811216">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5213" _type="InsertStringCommand" date="Thu Apr 14 11:40:18 EDT 2022" starttimestamp="1649862007572" timestamp="88811216" timestamp2="88811216">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5215" _type="InsertStringCommand" date="Thu Apr 14 11:40:18 EDT 2022" starttimestamp="1649862007572" timestamp="88811332" timestamp2="88811332">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5216" _type="InsertStringCommand" date="Thu Apr 14 11:40:18 EDT 2022" starttimestamp="1649862007572" timestamp="88811332" timestamp2="88811332">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="5218" _type="InsertStringCommand" date="Thu Apr 14 11:40:19 EDT 2022" starttimestamp="1649862007572" timestamp="88811483" timestamp2="88811483">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5219" _type="InsertStringCommand" date="Thu Apr 14 11:40:19 EDT 2022" starttimestamp="1649862007572" timestamp="88811483" timestamp2="88811483">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5221" _type="InsertStringCommand" date="Thu Apr 14 11:40:19 EDT 2022" starttimestamp="1649862007572" timestamp="88811547" timestamp2="88811547">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5222" _type="InsertStringCommand" date="Thu Apr 14 11:40:19 EDT 2022" starttimestamp="1649862007572" timestamp="88811547" timestamp2="88811547">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5224" _type="InsertStringCommand" date="Thu Apr 14 11:40:19 EDT 2022" starttimestamp="1649862007572" timestamp="88811714" timestamp2="88811714">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5225" _type="InsertStringCommand" date="Thu Apr 14 11:40:19 EDT 2022" starttimestamp="1649862007572" timestamp="88811714" timestamp2="88811714">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5227" _type="InsertStringCommand" date="Thu Apr 14 11:40:19 EDT 2022" starttimestamp="1649862007572" timestamp="88811871" timestamp2="88811871">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5228" _type="InsertStringCommand" date="Thu Apr 14 11:40:19 EDT 2022" starttimestamp="1649862007572" timestamp="88811871" timestamp2="88811871">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="5201" _type="Insert" date="Thu Apr 14 11:40:17 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3657" docExpressionCount="336" docLength="4141" length="13" offset="4117" repeat="9" starttimestamp="1649862007572" timestamp="88809761" timestamp2="88811864">
    <text><![CDATA[
	
	public ]]></text>
  </DocumentChange>
  <Command __id="5230" _type="PauseCommand" date="Thu Apr 14 11:40:32 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88824911">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[13040]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5231" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:40:32 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="88825140" />
  <Command __id="5233" _type="PauseCommand" date="Thu Apr 14 11:40:42 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="88834507">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9367]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5232" _type="SelectTextCommand" caretOffset="293" date="Thu Apr 14 11:40:42 EDT 2022" end="319" start="293" starttimestamp="1649862007572" timestamp="88834507" />
  <Command __id="5234" _type="CopyCommand" date="Thu Apr 14 11:40:42 EDT 2022" starttimestamp="1649862007572" timestamp="88835226" />
  <Command __id="5229" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:40:32 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="88824911">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5236" _type="PauseCommand" date="Thu Apr 14 11:40:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88836509">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1283]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5237" _type="MoveCaretCommand" caretOffset="4130" date="Thu Apr 14 11:40:44 EDT 2022" docOffset="4130" starttimestamp="1649862007572" timestamp="88836597" />
  <Command __id="5235" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:40:44 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3657" docExpressionCount="336" docLength="4141" projectName="A6" starttimestamp="1649862007572" timestamp="88836509">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	"), Diff(INSERT,"¶	public ¶	"), Diff(EQUAL,"	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
	
	public 
		

}
]]></snapshot>
  </Command>
  <Command __id="5239" _type="PauseCommand" date="Thu Apr 14 11:40:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88839440">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2843]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5242" _type="PasteCommand" date="Thu Apr 14 11:40:47 EDT 2022" starttimestamp="1649862007572" timestamp="88839506" />
  <DocumentChange __id="5238" _type="Insert" date="Thu Apr 14 11:40:47 EDT 2022" docASTNodeCount="504" docActiveCodeLength="3683" docExpressionCount="336" docLength="4167" length="26" offset="4130" starttimestamp="1649862007572" timestamp="88839440">
    <text><![CDATA[HalloweenCommandProcessor ]]></text>
  </DocumentChange>
  <DocumentChange __id="5240" _type="Insert" date="Thu Apr 14 11:40:47 EDT 2022" docASTNodeCount="508" docActiveCodeLength="3735" docExpressionCount="339" docLength="4219" length="52" offset="631" repeat="2" starttimestamp="1649862007572" timestamp="88839469" timestamp2="88839470">
    <text><![CDATA[
import stringProcessors.HalloweenCommandProcessor;]]></text>
  </DocumentChange>
  <Command __id="5244" _type="PauseCommand" date="Thu Apr 14 11:40:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88840550">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1044]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5245" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88840556" timestamp2="88840556">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="5246" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88840556" timestamp2="88840556">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="5248" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88840685" timestamp2="88840685">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5249" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88840685" timestamp2="88840685">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5251" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88840843" timestamp2="88840843">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5252" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88840843" timestamp2="88840843">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5254" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88841143" timestamp2="88841143">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="5255" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88841143" timestamp2="88841143">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="5257" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88841311" timestamp2="88841311">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5258" _type="InsertStringCommand" date="Thu Apr 14 11:40:48 EDT 2022" starttimestamp="1649862007572" timestamp="88841311" timestamp2="88841311">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5260" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841500" timestamp2="88841500">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5261" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841500" timestamp2="88841500">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5263" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841670" timestamp2="88841670">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5264" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841670" timestamp2="88841670">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5266" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841748" timestamp2="88841748">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5267" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841748" timestamp2="88841748">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5269" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841849" timestamp2="88841849">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5270" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841849" timestamp2="88841849">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5272" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841912" timestamp2="88841912">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5273" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88841913" timestamp2="88841913">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5275" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88842249" timestamp2="88842249">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5276" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88842249" timestamp2="88842249">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5278" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88842424" timestamp2="88842424">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5279" _type="InsertStringCommand" date="Thu Apr 14 11:40:49 EDT 2022" starttimestamp="1649862007572" timestamp="88842424" timestamp2="88842424">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5281" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88842526" timestamp2="88842526">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5282" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88842526" timestamp2="88842526">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5284" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88842689" timestamp2="88842689">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5285" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88842689" timestamp2="88842689">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5287" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88842859" timestamp2="88842859">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5288" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88842859" timestamp2="88842859">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5290" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88842937" timestamp2="88842937">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5291" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88842937" timestamp2="88842937">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5293" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88843152" timestamp2="88843152">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5294" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88843152" timestamp2="88843152">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5296" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88843305" timestamp2="88843305">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5297" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88843305" timestamp2="88843305">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5299" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88843401" timestamp2="88843401">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5300" _type="InsertStringCommand" date="Thu Apr 14 11:40:50 EDT 2022" starttimestamp="1649862007572" timestamp="88843401" timestamp2="88843401">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5302" _type="InsertStringCommand" date="Thu Apr 14 11:40:51 EDT 2022" starttimestamp="1649862007572" timestamp="88843691" timestamp2="88843691">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5303" _type="InsertStringCommand" date="Thu Apr 14 11:40:51 EDT 2022" starttimestamp="1649862007572" timestamp="88843691" timestamp2="88843691">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5304" _type="InsertStringCommand" date="Thu Apr 14 11:40:51 EDT 2022" starttimestamp="1649862007572" timestamp="88843807" timestamp2="88843807">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="5305" _type="InsertStringCommand" date="Thu Apr 14 11:40:51 EDT 2022" starttimestamp="1649862007572" timestamp="88843807" timestamp2="88843807">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="5307" _type="InsertStringCommand" date="Thu Apr 14 11:40:52 EDT 2022" starttimestamp="1649862007572" timestamp="88844611" timestamp2="88844611">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="5308" _type="InsertStringCommand" date="Thu Apr 14 11:40:52 EDT 2022" starttimestamp="1649862007572" timestamp="88844612" timestamp2="88844612">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="5310" _type="InsertStringCommand" date="Thu Apr 14 11:40:52 EDT 2022" starttimestamp="1649862007572" timestamp="88844774" timestamp2="88844774">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="5311" _type="InsertStringCommand" date="Thu Apr 14 11:40:52 EDT 2022" starttimestamp="1649862007572" timestamp="88844774" timestamp2="88844774">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="5312" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:40:52 EDT 2022" starttimestamp="1649862007572" timestamp="88845068" />
  <Command __id="5313" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:40:52 EDT 2022" starttimestamp="1649862007572" timestamp="88845068" />
  <Command __id="5315" _type="InsertStringCommand" date="Thu Apr 14 11:40:52 EDT 2022" starttimestamp="1649862007572" timestamp="88845282" timestamp2="88845282">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5316" _type="InsertStringCommand" date="Thu Apr 14 11:40:52 EDT 2022" starttimestamp="1649862007572" timestamp="88845283" timestamp2="88845283">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5243" _type="Insert" date="Thu Apr 14 11:40:48 EDT 2022" docASTNodeCount="514" docActiveCodeLength="3766" docExpressionCount="341" docLength="4250" length="31" offset="4208" repeat="23" starttimestamp="1649862007572" timestamp="88840550" timestamp2="88845278">
    <text><![CDATA[getCommandProcessor() {
		
	}]]></text>
  </DocumentChange>
  <Command __id="5318" _type="PauseCommand" date="Thu Apr 14 11:40:55 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88848335">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3052]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="5317" _type="Insert" date="Thu Apr 14 11:40:55 EDT 2022" docASTNodeCount="516" docActiveCodeLength="3774" docExpressionCount="342" docLength="4258" length="8" offset="4235" repeat="8" starttimestamp="1649862007572" timestamp="88848335" timestamp2="88850332">
    <text><![CDATA[return C]]></text>
  </DocumentChange>
  <Command __id="5319" _type="InsertStringCommand" date="Thu Apr 14 11:40:55 EDT 2022" starttimestamp="1649862007572" timestamp="88848340" timestamp2="88848340">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5320" _type="InsertStringCommand" date="Thu Apr 14 11:40:55 EDT 2022" starttimestamp="1649862007572" timestamp="88848340" timestamp2="88848340">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5322" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848434" timestamp2="88848434">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5323" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848434" timestamp2="88848434">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5325" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848610" timestamp2="88848610">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5326" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848610" timestamp2="88848610">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5328" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848714" timestamp2="88848714">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5329" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848714" timestamp2="88848714">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5331" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848852" timestamp2="88848852">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5332" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848852" timestamp2="88848852">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5334" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848960" timestamp2="88848960">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5335" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88848961" timestamp2="88848961">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5337" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88849385" timestamp2="88849385">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5338" _type="InsertStringCommand" date="Thu Apr 14 11:40:56 EDT 2022" starttimestamp="1649862007572" timestamp="88849385" timestamp2="88849385">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5340" _type="InsertStringCommand" date="Thu Apr 14 11:40:57 EDT 2022" starttimestamp="1649862007572" timestamp="88850339" timestamp2="88850339">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="5341" _type="InsertStringCommand" date="Thu Apr 14 11:40:57 EDT 2022" starttimestamp="1649862007572" timestamp="88850339" timestamp2="88850339">
    <data><![CDATA[C]]></data>
  </Command>
  <DocumentChange __id="5342" _type="Delete" date="Thu Apr 14 11:40:58 EDT 2022" docASTNodeCount="515" docActiveCodeLength="3773" docExpressionCount="341" docLength="4257" endLine="136" length="1" offset="4242" startLine="136" starttimestamp="1649862007572" timestamp="88851057">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <Command __id="5343" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:40:58 EDT 2022" starttimestamp="1649862007572" timestamp="88851059" />
  <Command __id="5344" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:40:58 EDT 2022" starttimestamp="1649862007572" timestamp="88851060" />
  <Command __id="5346" _type="InsertStringCommand" date="Thu Apr 14 11:40:58 EDT 2022" starttimestamp="1649862007572" timestamp="88851171" timestamp2="88851171">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5347" _type="InsertStringCommand" date="Thu Apr 14 11:40:58 EDT 2022" starttimestamp="1649862007572" timestamp="88851171" timestamp2="88851171">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5349" _type="InsertStringCommand" date="Thu Apr 14 11:40:58 EDT 2022" starttimestamp="1649862007572" timestamp="88851273" timestamp2="88851273">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5350" _type="InsertStringCommand" date="Thu Apr 14 11:40:58 EDT 2022" starttimestamp="1649862007572" timestamp="88851273" timestamp2="88851273">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5352" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851477" timestamp2="88851477">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5353" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851477" timestamp2="88851477">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5355" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851636" timestamp2="88851636">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5356" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851636" timestamp2="88851636">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5358" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851774" timestamp2="88851774">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5359" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851775" timestamp2="88851775">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5361" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851866" timestamp2="88851866">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5362" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851866" timestamp2="88851866">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5364" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851987" timestamp2="88851987">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5365" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88851987" timestamp2="88851987">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5367" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88852290" timestamp2="88852290">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5368" _type="InsertStringCommand" date="Thu Apr 14 11:40:59 EDT 2022" starttimestamp="1649862007572" timestamp="88852290" timestamp2="88852290">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5370" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88852484" timestamp2="88852484">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5371" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88852484" timestamp2="88852484">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5373" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88852552" timestamp2="88852552">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5374" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88852552" timestamp2="88852552">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5376" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88852743" timestamp2="88852743">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5377" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88852743" timestamp2="88852743">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5379" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88852943" timestamp2="88852943">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5380" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88852943" timestamp2="88852943">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5382" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88853030" timestamp2="88853030">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5383" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88853031" timestamp2="88853031">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5385" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88853241" timestamp2="88853241">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5386" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88853241" timestamp2="88853241">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5388" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88853336" timestamp2="88853336">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5389" _type="InsertStringCommand" date="Thu Apr 14 11:41:00 EDT 2022" starttimestamp="1649862007572" timestamp="88853336" timestamp2="88853336">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5391" _type="InsertStringCommand" date="Thu Apr 14 11:41:01 EDT 2022" starttimestamp="1649862007572" timestamp="88853472" timestamp2="88853472">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5392" _type="InsertStringCommand" date="Thu Apr 14 11:41:01 EDT 2022" starttimestamp="1649862007572" timestamp="88853472" timestamp2="88853472">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5394" _type="InsertStringCommand" date="Thu Apr 14 11:41:01 EDT 2022" starttimestamp="1649862007572" timestamp="88853989" timestamp2="88853989">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5395" _type="InsertStringCommand" date="Thu Apr 14 11:41:01 EDT 2022" starttimestamp="1649862007572" timestamp="88853989" timestamp2="88853989">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5397" _type="PauseCommand" date="Thu Apr 14 11:41:02 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88855306">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1317]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5404" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:41:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88857302" type="Debug" />
  <Command __id="5406" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Thu Apr 14 11:41:04 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="88857302" type="Run" />
  <Command __id="5407" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:41:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88857302" type="Debug" />
  <Command __id="5408" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Thu Apr 14 11:41:04 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="88857302" type="Run" />
  <Command __id="5409" _type="ShellCommand" date="Thu Apr 14 11:41:04 EDT 2022" starttimestamp="1649862007572" timestamp="88857307" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5410" _type="ConsoleOutput" date="Thu Apr 14 11:41:04 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="88857374" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63152]:An existing connection was forcibly closed by the remote host
Server0<-->Generic Client:0.07029790988146833 (Closed)
Explanation: An existing connection was forcibly closed by the remote host
AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:63157]:An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IN RUN METHOD OF CLIENT READ THREAD¶SERVER MESSAGE RECIEVED: move 50 -50"), Diff(INSERT,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63152]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0.07029790988146833 (Closed)¶Explanation: An existing connection was forcibly closed by the remote host¶AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:63157]:An existing connection was forcibly closed by the remote host"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5412" _type="PauseCommand" date="Thu Apr 14 11:41:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88858469">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1095]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5411" _type="MoveCaretCommand" caretOffset="4169" date="Thu Apr 14 11:41:06 EDT 2022" docOffset="4169" starttimestamp="1649862007572" timestamp="88858469" />
  <Command __id="5413" _type="MoveCaretCommand" caretOffset="4169" date="Thu Apr 14 11:41:06 EDT 2022" docOffset="4169" starttimestamp="1649862007572" timestamp="88858470" />
  <Command __id="5415" _type="InsertStringCommand" date="Thu Apr 14 11:41:06 EDT 2022" starttimestamp="1649862007572" timestamp="88858776" timestamp2="88858776">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5416" _type="InsertStringCommand" date="Thu Apr 14 11:41:06 EDT 2022" starttimestamp="1649862007572" timestamp="88858776" timestamp2="88858776">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5417" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:41:07 EDT 2022" starttimestamp="1649862007572" timestamp="88859429" />
  <Command __id="5418" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:41:07 EDT 2022" starttimestamp="1649862007572" timestamp="88859429" />
  <Command __id="5420" _type="InsertStringCommand" date="Thu Apr 14 11:41:07 EDT 2022" starttimestamp="1649862007572" timestamp="88860138" timestamp2="88860138">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="5421" _type="InsertStringCommand" date="Thu Apr 14 11:41:07 EDT 2022" starttimestamp="1649862007572" timestamp="88860138" timestamp2="88860138">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="5423" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88860526" timestamp2="88860526">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="5424" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88860526" timestamp2="88860526">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="5426" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88860668" timestamp2="88860668">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="5427" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88860668" timestamp2="88860668">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="5429" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88860826" timestamp2="88860826">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5430" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88860827" timestamp2="88860827">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5432" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88860921" timestamp2="88860921">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5433" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88860921" timestamp2="88860921">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5435" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88861085" timestamp2="88861085">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5436" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88861085" timestamp2="88861085">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5438" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88861210" timestamp2="88861210">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5439" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88861210" timestamp2="88861210">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5441" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88861336" timestamp2="88861336">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5442" _type="InsertStringCommand" date="Thu Apr 14 11:41:08 EDT 2022" starttimestamp="1649862007572" timestamp="88861336" timestamp2="88861336">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5444" _type="InsertStringCommand" date="Thu Apr 14 11:41:09 EDT 2022" starttimestamp="1649862007572" timestamp="88861478" timestamp2="88861478">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5445" _type="InsertStringCommand" date="Thu Apr 14 11:41:09 EDT 2022" starttimestamp="1649862007572" timestamp="88861478" timestamp2="88861478">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5450" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:41:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88864451" type="Debug" />
  <Command __id="5452" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Thu Apr 14 11:41:12 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="88864451" type="Run" />
  <Command __id="5453" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:41:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88864451" type="Debug" />
  <Command __id="5454" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Thu Apr 14 11:41:12 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="88864451" type="Run" />
  <Command __id="5455" _type="ShellCommand" date="Thu Apr 14 11:41:12 EDT 2022" starttimestamp="1649862007572" timestamp="88864453" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5456" _type="ConsoleOutput" date="Thu Apr 14 11:41:12 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="88864509" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63158]:An existing connection was forcibly closed by the remote host
Server0<-->Generic Client:0.470383834534459 (Closed)
Explanation: An existing connection was forcibly closed by the remote host
AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:63163]:An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:6315"), Diff(DELETE,"2"), Diff(INSERT,"8"), Diff(EQUAL,"]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0."), Diff(DELETE,"07029790988146833"), Diff(INSERT,"470383834534459"), Diff(EQUAL," (Closed)¶Explanation: An existing connection was forcibly closed by the remote host¶AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:631"), Diff(DELETE,"57"), Diff(INSERT,"63"), Diff(EQUAL,"]:An existing connection was forcibly closed by the remote host¶")]]]></diff>
  </Command>
  <Command __id="5458" _type="PauseCommand" date="Thu Apr 14 11:41:21 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="88873536">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9027]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5457" _type="ShellCommand" date="Thu Apr 14 11:41:21 EDT 2022" starttimestamp="1649862007572" timestamp="88873536" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5459" _type="ShellCommand" date="Thu Apr 14 11:41:21 EDT 2022" starttimestamp="1649862007572" timestamp="88873668" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5465" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:41:21 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="88873906" />
  <Command __id="5467" _type="PauseCommand" date="Thu Apr 14 11:41:22 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88875158">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1252]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5471" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:41:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88877222" type="Debug" />
  <Command __id="5473" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Thu Apr 14 11:41:24 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="88877222" type="Run" />
  <Command __id="5474" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:41:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="88877222" type="Debug" />
  <Command __id="5475" _type="ProgramExecutionEvent" className="/A6/src/client/Client.java" date="Thu Apr 14 11:41:24 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="88877222" type="Run" />
  <Command __id="5476" _type="ShellCommand" date="Thu Apr 14 11:41:24 EDT 2022" starttimestamp="1649862007572" timestamp="88877224" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5477" _type="ConsoleOutput" date="Thu Apr 14 11:41:24 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="88877274" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63145]:An existing connection was forcibly closed by the remote host
Server0<-->Generic Client:0.5148313134451133 (Closed)
Explanation: An existing connection was forcibly closed by the remote host
AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:63151]:An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:631"), Diff(INSERT,"4"), Diff(EQUAL,"5"), Diff(DELETE,"8"), Diff(EQUAL,"]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0."), Diff(DELETE,"470383834534459"), Diff(INSERT,"5148313134451133"), Diff(EQUAL," (Closed)¶Explanation: An existing connection was forcibly closed by the remote host¶AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:631"), Diff(DELETE,"63"), Diff(INSERT,"51"), Diff(EQUAL,"]:An existing connection was forcibly closed by the remote host¶")]]]></diff>
  </Command>
  <DocumentChange __id="5345" _type="Insert" date="Thu Apr 14 11:40:58 EDT 2022" docASTNodeCount="516" docActiveCodeLength="3790" docExpressionCount="342" docLength="4274" length="17" offset="4242" repeat="17" starttimestamp="1649862007572" timestamp="88851167" timestamp2="88853984">
    <text><![CDATA[commandProcessor;]]></text>
  </DocumentChange>
  <DocumentChange __id="5414" _type="Insert" date="Thu Apr 14 11:41:06 EDT 2022" docASTNodeCount="516" docActiveCodeLength="3793" docExpressionCount="342" docLength="4277" length="3" offset="4169" starttimestamp="1649862007572" timestamp="88858769">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="5419" _type="Insert" date="Thu Apr 14 11:41:07 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" length="9" offset="4175" repeat="9" starttimestamp="1649862007572" timestamp="88860135" timestamp2="88861470">
    <text><![CDATA[@Override]]></text>
  </DocumentChange>
  <Command __id="5460" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:41:21 EDT 2022" docASTNodeCount="75" docActiveCodeLength="601" docExpressionCount="57" docLength="601" projectName="A6" starttimestamp="1649862007572" timestamp="88873765">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.nio.ByteBuffer;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶¶	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="5461" _type="Insert" date="Thu Apr 14 11:41:21 EDT 2022" docASTNodeCount="79" docActiveCodeLength="654" docExpressionCount="59" docLength="654" length="53" offset="594" repeat="2" starttimestamp="1649862007572" timestamp="88873797" timestamp2="88873798">
    <text><![CDATA[

	HalloweenCommandProcessor getCommandProcessor();]]></text>
  </DocumentChange>
  <DocumentChange __id="5463" _type="Insert" date="Thu Apr 14 11:41:21 EDT 2022" docASTNodeCount="83" docActiveCodeLength="706" docExpressionCount="62" docLength="706" length="52" offset="371" repeat="2" starttimestamp="1649862007572" timestamp="88873798" timestamp2="88873798">
    <text><![CDATA[
import stringProcessors.HalloweenCommandProcessor;]]></text>
  </DocumentChange>
  <Command __id="5479" _type="PauseCommand" date="Thu Apr 14 11:41:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88881183">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3909]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5480" _type="SelectTextCommand" caretOffset="293" date="Thu Apr 14 11:41:28 EDT 2022" end="319" start="293" starttimestamp="1649862007572" timestamp="88881287" />
  <Command __id="5478" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:41:28 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="88881183">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5482" _type="PauseCommand" date="Thu Apr 14 11:41:30 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88883424">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2137]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5483" _type="MoveCaretCommand" caretOffset="5585" date="Thu Apr 14 11:41:31 EDT 2022" docOffset="7241" starttimestamp="1649862007572" timestamp="88883510" />
  <Command __id="5481" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:41:30 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="88883424">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		"), Diff(INSERT,"//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		"), Diff(EQUAL,"// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		//SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

	

}
]]></snapshot>
  </Command>
  <Command __id="5485" _type="PauseCommand" date="Thu Apr 14 11:41:32 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88884555">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1045]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5486" _type="MoveCaretCommand" caretOffset="1192" date="Thu Apr 14 11:41:32 EDT 2022" docOffset="1523" starttimestamp="1649862007572" timestamp="88884649" />
  <Command __id="5488" _type="PauseCommand" date="Thu Apr 14 11:41:35 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88888292">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3643]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5487" _type="MoveCaretCommand" caretOffset="1197" date="Thu Apr 14 11:41:35 EDT 2022" docOffset="1528" starttimestamp="1649862007572" timestamp="88888292" />
  <Command __id="5490" _type="InsertStringCommand" date="Thu Apr 14 11:41:36 EDT 2022" starttimestamp="1649862007572" timestamp="88888532" timestamp2="88888532">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5492" _type="InsertStringCommand" date="Thu Apr 14 11:41:36 EDT 2022" starttimestamp="1649862007572" timestamp="88888872" timestamp2="88888872">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5494" _type="InsertStringCommand" date="Thu Apr 14 11:41:36 EDT 2022" starttimestamp="1649862007572" timestamp="88888994" timestamp2="88888994">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5496" _type="InsertStringCommand" date="Thu Apr 14 11:41:36 EDT 2022" starttimestamp="1649862007572" timestamp="88889121" timestamp2="88889121">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5498" _type="InsertStringCommand" date="Thu Apr 14 11:41:36 EDT 2022" starttimestamp="1649862007572" timestamp="88889217" timestamp2="88889217">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5500" _type="InsertStringCommand" date="Thu Apr 14 11:41:37 EDT 2022" starttimestamp="1649862007572" timestamp="88889452" timestamp2="88889452">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5501" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 11:41:37 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="88889463" />
  <Command __id="5502" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 11:41:37 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="88889506" />
  <Command __id="5504" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:41:37 EDT 2022" starttimestamp="1649862007572" timestamp="88889788" />
  <Command __id="5506" _type="InsertStringCommand" date="Thu Apr 14 11:41:37 EDT 2022" starttimestamp="1649862007572" timestamp="88889908" timestamp2="88889908">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5508" _type="InsertStringCommand" date="Thu Apr 14 11:41:37 EDT 2022" starttimestamp="1649862007572" timestamp="88890066" timestamp2="88890066">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5509" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 11:41:37 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="88890069" />
  <Command __id="5514" _type="PauseCommand" date="Thu Apr 14 11:41:41 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88893652">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3583]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="5513" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 11:41:41 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="88893652" />
  <Command __id="5516" _type="InsertStringCommand" date="Thu Apr 14 11:41:41 EDT 2022" starttimestamp="1649862007572" timestamp="88893663" timestamp2="88893663">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5484" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:41:32 EDT 2022" docASTNodeCount="224" docActiveCodeLength="1623" docExpressionCount="140" docLength="1820" projectName="A6" starttimestamp="1649862007572" timestamp="88884555">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶		"), Diff(INSERT,"	¶			¶		"), Diff(EQUAL,"¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="5489" _type="Insert" date="Thu Apr 14 11:41:36 EDT 2022" docASTNodeCount="226" docActiveCodeLength="1629" docExpressionCount="141" docLength="1826" length="6" offset="1528" repeat="6" starttimestamp="1649862007572" timestamp="88888527" timestamp2="88889447">
    <text><![CDATA[clien.]]></text>
  </DocumentChange>
  <DocumentChange __id="5503" _type="Delete" date="Thu Apr 14 11:41:37 EDT 2022" docASTNodeCount="226" docActiveCodeLength="1628" docExpressionCount="141" docLength="1825" endLine="53" length="1" offset="1533" startLine="53" starttimestamp="1649862007572" timestamp="88889785">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="5505" _type="Insert" date="Thu Apr 14 11:41:37 EDT 2022" docASTNodeCount="228" docActiveCodeLength="1633" docExpressionCount="143" docLength="1830" length="5" offset="1533" repeat="5" starttimestamp="1649862007572" timestamp="88889904" timestamp2="88890900">
    <text><![CDATA[t.get]]></text>
  </DocumentChange>
  <DocumentChange __id="5515" _type="Replace" date="Thu Apr 14 11:41:41 EDT 2022" docASTNodeCount="228" docActiveCodeLength="1651" docExpressionCount="143" docLength="1848" endLine="53" insertionLength="21" int_docASTNodeCount="226" int_docActiveCodeLength="1630" int_docExpressionCount="141" int_docLength="1827" length="3" offset="1535" startLine="53" starttimestamp="1649862007572" timestamp="88893657">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getCommandProcessor()]]></insertedText>
  </DocumentChange>
  <Command __id="5518" _type="PauseCommand" date="Thu Apr 14 11:41:44 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88896531">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2868]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5519" _type="InsertStringCommand" date="Thu Apr 14 11:41:44 EDT 2022" starttimestamp="1649862007572" timestamp="88896534" timestamp2="88896534">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5520" _type="InsertStringCommand" date="Thu Apr 14 11:41:44 EDT 2022" starttimestamp="1649862007572" timestamp="88896622" timestamp2="88896622">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="5523" _type="PauseCommand" date="Thu Apr 14 11:41:45 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88898121">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1499]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="5522" _type="InsertStringCommand" date="Thu Apr 14 11:41:45 EDT 2022" starttimestamp="1649862007572" timestamp="88898121" timestamp2="88898121">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5524" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:46 EDT 2022" starttimestamp="1649862007572" timestamp="88899090" />
  <Command __id="5525" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:47 EDT 2022" starttimestamp="1649862007572" timestamp="88899603" />
  <Command __id="5527" _type="PauseCommand" date="Thu Apr 14 11:41:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88901165">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1562]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5526" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 11:41:48 EDT 2022" starttimestamp="1649862007572" timestamp="88901165" />
  <Command __id="5529" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:41:49 EDT 2022" starttimestamp="1649862007572" timestamp="88901498" />
  <Command __id="5531" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:41:49 EDT 2022" starttimestamp="1649862007572" timestamp="88901699" />
  <Command __id="5532" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:49 EDT 2022" starttimestamp="1649862007572" timestamp="88902038" />
  <Command __id="5533" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902541" />
  <Command __id="5534" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902571" />
  <Command __id="5535" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902601" />
  <Command __id="5536" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902630" />
  <Command __id="5537" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902662" />
  <Command __id="5538" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902691" />
  <Command __id="5539" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902723" />
  <Command __id="5540" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902751" />
  <Command __id="5541" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902783" />
  <Command __id="5542" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902812" />
  <Command __id="5543" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902842" />
  <Command __id="5544" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902872" />
  <Command __id="5545" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902903" />
  <Command __id="5546" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902933" />
  <Command __id="5547" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902964" />
  <Command __id="5548" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88902994" />
  <Command __id="5549" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88903024" />
  <Command __id="5550" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88903057" />
  <Command __id="5551" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88903085" />
  <Command __id="5552" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88903116" />
  <Command __id="5553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:50 EDT 2022" starttimestamp="1649862007572" timestamp="88903315" />
  <Command __id="5554" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:51 EDT 2022" starttimestamp="1649862007572" timestamp="88903542" />
  <Command __id="5555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:51 EDT 2022" starttimestamp="1649862007572" timestamp="88903695" />
  <Command __id="5556" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:51 EDT 2022" starttimestamp="1649862007572" timestamp="88903931" />
  <Command __id="5557" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:51 EDT 2022" starttimestamp="1649862007572" timestamp="88904339" />
  <Command __id="5558" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:52 EDT 2022" starttimestamp="1649862007572" timestamp="88904528" />
  <Command __id="5559" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:41:52 EDT 2022" starttimestamp="1649862007572" timestamp="88904822" />
  <Command __id="5561" _type="InsertStringCommand" date="Thu Apr 14 11:41:52 EDT 2022" starttimestamp="1649862007572" timestamp="88905183" timestamp2="88905183">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="5563" _type="InsertStringCommand" date="Thu Apr 14 11:41:52 EDT 2022" starttimestamp="1649862007572" timestamp="88905364" timestamp2="88905364">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5565" _type="InsertStringCommand" date="Thu Apr 14 11:41:53 EDT 2022" starttimestamp="1649862007572" timestamp="88905599" timestamp2="88905599">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5567" _type="InsertStringCommand" date="Thu Apr 14 11:41:53 EDT 2022" starttimestamp="1649862007572" timestamp="88905759" timestamp2="88905759">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5569" _type="InsertStringCommand" date="Thu Apr 14 11:41:53 EDT 2022" starttimestamp="1649862007572" timestamp="88905920" timestamp2="88905920">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5571" _type="InsertStringCommand" date="Thu Apr 14 11:41:53 EDT 2022" starttimestamp="1649862007572" timestamp="88906039" timestamp2="88906039">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="5573" _type="InsertStringCommand" date="Thu Apr 14 11:41:53 EDT 2022" starttimestamp="1649862007572" timestamp="88906368" timestamp2="88906368">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5575" _type="InsertStringCommand" date="Thu Apr 14 11:41:54 EDT 2022" starttimestamp="1649862007572" timestamp="88906589" timestamp2="88906589">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5577" _type="InsertStringCommand" date="Thu Apr 14 11:41:54 EDT 2022" starttimestamp="1649862007572" timestamp="88906791" timestamp2="88906791">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5579" _type="InsertStringCommand" date="Thu Apr 14 11:41:55 EDT 2022" starttimestamp="1649862007572" timestamp="88907773" timestamp2="88907773">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="5581" _type="InsertStringCommand" date="Thu Apr 14 11:41:55 EDT 2022" starttimestamp="1649862007572" timestamp="88907977" timestamp2="88907977">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5583" _type="InsertStringCommand" date="Thu Apr 14 11:41:55 EDT 2022" starttimestamp="1649862007572" timestamp="88908152" timestamp2="88908152">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5585" _type="InsertStringCommand" date="Thu Apr 14 11:41:55 EDT 2022" starttimestamp="1649862007572" timestamp="88908314" timestamp2="88908314">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5587" _type="InsertStringCommand" date="Thu Apr 14 11:41:55 EDT 2022" starttimestamp="1649862007572" timestamp="88908398" timestamp2="88908398">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5589" _type="InsertStringCommand" date="Thu Apr 14 11:41:56 EDT 2022" starttimestamp="1649862007572" timestamp="88908499" timestamp2="88908499">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5591" _type="InsertStringCommand" date="Thu Apr 14 11:41:56 EDT 2022" starttimestamp="1649862007572" timestamp="88908568" timestamp2="88908568">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5593" _type="InsertStringCommand" date="Thu Apr 14 11:41:56 EDT 2022" starttimestamp="1649862007572" timestamp="88908840" timestamp2="88908840">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5595" _type="InsertStringCommand" date="Thu Apr 14 11:41:56 EDT 2022" starttimestamp="1649862007572" timestamp="88909006" timestamp2="88909006">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5597" _type="InsertStringCommand" date="Thu Apr 14 11:41:56 EDT 2022" starttimestamp="1649862007572" timestamp="88909058" timestamp2="88909058">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5599" _type="InsertStringCommand" date="Thu Apr 14 11:41:56 EDT 2022" starttimestamp="1649862007572" timestamp="88909224" timestamp2="88909224">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5601" _type="InsertStringCommand" date="Thu Apr 14 11:41:57 EDT 2022" starttimestamp="1649862007572" timestamp="88909492" timestamp2="88909492">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5603" _type="InsertStringCommand" date="Thu Apr 14 11:41:57 EDT 2022" starttimestamp="1649862007572" timestamp="88909610" timestamp2="88909610">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5605" _type="InsertStringCommand" date="Thu Apr 14 11:41:57 EDT 2022" starttimestamp="1649862007572" timestamp="88909789" timestamp2="88909789">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5607" _type="InsertStringCommand" date="Thu Apr 14 11:41:57 EDT 2022" starttimestamp="1649862007572" timestamp="88909872" timestamp2="88909872">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5609" _type="InsertStringCommand" date="Thu Apr 14 11:41:57 EDT 2022" starttimestamp="1649862007572" timestamp="88910014" timestamp2="88910014">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5611" _type="InsertStringCommand" date="Thu Apr 14 11:41:57 EDT 2022" starttimestamp="1649862007572" timestamp="88910159" timestamp2="88910159">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5613" _type="InsertStringCommand" date="Thu Apr 14 11:41:57 EDT 2022" starttimestamp="1649862007572" timestamp="88910388" timestamp2="88910388">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5615" _type="InsertStringCommand" date="Thu Apr 14 11:41:58 EDT 2022" starttimestamp="1649862007572" timestamp="88910520" timestamp2="88910520">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5617" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:41:58 EDT 2022" starttimestamp="1649862007572" timestamp="88910977" />
  <Command __id="5619" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:41:58 EDT 2022" starttimestamp="1649862007572" timestamp="88911135" />
  <Command __id="5621" _type="InsertStringCommand" date="Thu Apr 14 11:41:59 EDT 2022" starttimestamp="1649862007572" timestamp="88912000" timestamp2="88912000">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5623" _type="InsertStringCommand" date="Thu Apr 14 11:41:59 EDT 2022" starttimestamp="1649862007572" timestamp="88912116" timestamp2="88912116">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5625" _type="InsertStringCommand" date="Thu Apr 14 11:41:59 EDT 2022" starttimestamp="1649862007572" timestamp="88912313" timestamp2="88912313">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5627" _type="InsertStringCommand" date="Thu Apr 14 11:42:00 EDT 2022" starttimestamp="1649862007572" timestamp="88912461" timestamp2="88912461">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5629" _type="InsertStringCommand" date="Thu Apr 14 11:42:00 EDT 2022" starttimestamp="1649862007572" timestamp="88912517" timestamp2="88912517">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5631" _type="InsertStringCommand" date="Thu Apr 14 11:42:00 EDT 2022" starttimestamp="1649862007572" timestamp="88912636" timestamp2="88912636">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5633" _type="InsertStringCommand" date="Thu Apr 14 11:42:00 EDT 2022" starttimestamp="1649862007572" timestamp="88912699" timestamp2="88912699">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5635" _type="InsertStringCommand" date="Thu Apr 14 11:42:00 EDT 2022" starttimestamp="1649862007572" timestamp="88912974" timestamp2="88912974">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5637" _type="InsertStringCommand" date="Thu Apr 14 11:42:00 EDT 2022" starttimestamp="1649862007572" timestamp="88913152" timestamp2="88913152">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5639" _type="InsertStringCommand" date="Thu Apr 14 11:42:00 EDT 2022" starttimestamp="1649862007572" timestamp="88913263" timestamp2="88913263">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5641" _type="InsertStringCommand" date="Thu Apr 14 11:42:01 EDT 2022" starttimestamp="1649862007572" timestamp="88913431" timestamp2="88913431">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5643" _type="InsertStringCommand" date="Thu Apr 14 11:42:01 EDT 2022" starttimestamp="1649862007572" timestamp="88913609" timestamp2="88913609">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5645" _type="InsertStringCommand" date="Thu Apr 14 11:42:01 EDT 2022" starttimestamp="1649862007572" timestamp="88913781" timestamp2="88913781">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5647" _type="InsertStringCommand" date="Thu Apr 14 11:42:01 EDT 2022" starttimestamp="1649862007572" timestamp="88913939" timestamp2="88913939">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5649" _type="InsertStringCommand" date="Thu Apr 14 11:42:01 EDT 2022" starttimestamp="1649862007572" timestamp="88914196" timestamp2="88914196">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5651" _type="InsertStringCommand" date="Thu Apr 14 11:42:01 EDT 2022" starttimestamp="1649862007572" timestamp="88914351" timestamp2="88914351">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5653" _type="InsertStringCommand" date="Thu Apr 14 11:42:02 EDT 2022" starttimestamp="1649862007572" timestamp="88914495" timestamp2="88914495">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5655" _type="InsertStringCommand" date="Thu Apr 14 11:42:02 EDT 2022" starttimestamp="1649862007572" timestamp="88914695" timestamp2="88914695">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="5657" _type="InsertStringCommand" date="Thu Apr 14 11:42:02 EDT 2022" starttimestamp="1649862007572" timestamp="88914819" timestamp2="88914819">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5659" _type="PauseCommand" date="Thu Apr 14 11:42:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88916334">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1515]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5658" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:42:03 EDT 2022" starttimestamp="1649862007572" timestamp="88916334" />
  <Command __id="5660" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:42:04 EDT 2022" starttimestamp="1649862007572" timestamp="88916429" />
  <Command __id="5661" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:42:04 EDT 2022" starttimestamp="1649862007572" timestamp="88916448" />
  <Command __id="5663" _type="PauseCommand" date="Thu Apr 14 11:42:10 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="88922587">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6139]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5662" _type="ShellCommand" date="Thu Apr 14 11:42:10 EDT 2022" starttimestamp="1649862007572" timestamp="88922587" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5664" _type="ShellCommand" date="Thu Apr 14 11:42:10 EDT 2022" starttimestamp="1649862007572" timestamp="88922753" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5668" _type="PauseCommand" date="Thu Apr 14 11:42:11 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88923888">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1120]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5667" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:42:11 EDT 2022" starttimestamp="1649862007572" timestamp="88923888" />
  <Command __id="5669" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:42:11 EDT 2022" starttimestamp="1649862007572" timestamp="88923982" />
  <Command __id="5670" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:42:11 EDT 2022" starttimestamp="1649862007572" timestamp="88924016" />
  <Command __id="5672" _type="PauseCommand" date="Thu Apr 14 11:42:13 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88925568">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1552]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5671" _type="MoveCaretCommand" caretOffset="1271" date="Thu Apr 14 11:42:13 EDT 2022" docOffset="1654" starttimestamp="1649862007572" timestamp="88925568" />
  <Command __id="5674" _type="InsertStringCommand" date="Thu Apr 14 11:42:13 EDT 2022" starttimestamp="1649862007572" timestamp="88925947" timestamp2="88925947">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5676" _type="InsertStringCommand" date="Thu Apr 14 11:42:13 EDT 2022" starttimestamp="1649862007572" timestamp="88926278" timestamp2="88926278">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5678" _type="InsertStringCommand" date="Thu Apr 14 11:42:13 EDT 2022" starttimestamp="1649862007572" timestamp="88926367" timestamp2="88926367">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5680" _type="InsertStringCommand" date="Thu Apr 14 11:42:14 EDT 2022" starttimestamp="1649862007572" timestamp="88926583" timestamp2="88926583">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5682" _type="InsertStringCommand" date="Thu Apr 14 11:42:14 EDT 2022" starttimestamp="1649862007572" timestamp="88926731" timestamp2="88926731">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5684" _type="InsertStringCommand" date="Thu Apr 14 11:42:14 EDT 2022" starttimestamp="1649862007572" timestamp="88926824" timestamp2="88926824">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5686" _type="InsertStringCommand" date="Thu Apr 14 11:42:14 EDT 2022" starttimestamp="1649862007572" timestamp="88926930" timestamp2="88926930">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5688" _type="InsertStringCommand" date="Thu Apr 14 11:42:14 EDT 2022" starttimestamp="1649862007572" timestamp="88927007" timestamp2="88927007">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="5690" _type="InsertStringCommand" date="Thu Apr 14 11:42:14 EDT 2022" starttimestamp="1649862007572" timestamp="88927274" timestamp2="88927274">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="5692" _type="InsertStringCommand" date="Thu Apr 14 11:42:15 EDT 2022" starttimestamp="1649862007572" timestamp="88927445" timestamp2="88927445">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5694" _type="InsertStringCommand" date="Thu Apr 14 11:42:15 EDT 2022" starttimestamp="1649862007572" timestamp="88927498" timestamp2="88927498">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5696" _type="InsertStringCommand" date="Thu Apr 14 11:42:15 EDT 2022" starttimestamp="1649862007572" timestamp="88927660" timestamp2="88927660">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5698" _type="InsertStringCommand" date="Thu Apr 14 11:42:15 EDT 2022" starttimestamp="1649862007572" timestamp="88927837" timestamp2="88927837">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5700" _type="InsertStringCommand" date="Thu Apr 14 11:42:15 EDT 2022" starttimestamp="1649862007572" timestamp="88927931" timestamp2="88927931">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5702" _type="InsertStringCommand" date="Thu Apr 14 11:42:15 EDT 2022" starttimestamp="1649862007572" timestamp="88928133" timestamp2="88928133">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5704" _type="InsertStringCommand" date="Thu Apr 14 11:42:15 EDT 2022" starttimestamp="1649862007572" timestamp="88928214" timestamp2="88928214">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5706" _type="InsertStringCommand" date="Thu Apr 14 11:42:15 EDT 2022" starttimestamp="1649862007572" timestamp="88928321" timestamp2="88928321">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5708" _type="InsertStringCommand" date="Thu Apr 14 11:42:16 EDT 2022" starttimestamp="1649862007572" timestamp="88928616" timestamp2="88928616">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="5710" _type="PauseCommand" date="Thu Apr 14 11:42:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88930600">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1984]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5709" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 11:42:18 EDT 2022" starttimestamp="1649862007572" timestamp="88930600" />
  <Command __id="5712" _type="InsertStringCommand" date="Thu Apr 14 11:42:18 EDT 2022" starttimestamp="1649862007572" timestamp="88931056" timestamp2="88931056">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5714" _type="PauseCommand" date="Thu Apr 14 11:42:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88932074">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1018]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5713" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:42:19 EDT 2022" starttimestamp="1649862007572" timestamp="88932074" />
  <Command __id="5715" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:42:19 EDT 2022" starttimestamp="1649862007572" timestamp="88932264" />
  <DocumentChange __id="5517" _type="Insert" date="Thu Apr 14 11:41:44 EDT 2022" docASTNodeCount="230" docActiveCodeLength="1654" docExpressionCount="145" docLength="1851" length="3" offset="1556" repeat="2" starttimestamp="1649862007572" timestamp="88896531" timestamp2="88898116">
    <text><![CDATA[();]]></text>
  </DocumentChange>
  <DocumentChange __id="5528" _type="Delete" date="Thu Apr 14 11:41:49 EDT 2022" docASTNodeCount="228" docActiveCodeLength="1652" docExpressionCount="143" docLength="1849" endLine="53" length="2" offset="1556" repeat="2" startLine="53" starttimestamp="1649862007572" timestamp="88901495" timestamp2="88901697">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <DocumentChange __id="5560" _type="Insert" date="Thu Apr 14 11:41:52 EDT 2022" docASTNodeCount="230" docActiveCodeLength="1680" docExpressionCount="145" docLength="1877" length="28" offset="1528" repeat="28" starttimestamp="1649862007572" timestamp="88905175" timestamp2="88910515">
    <text><![CDATA[HalloweenCommandProcessor = ]]></text>
  </DocumentChange>
  <DocumentChange __id="5616" _type="Delete" date="Thu Apr 14 11:41:58 EDT 2022" docASTNodeCount="232" docActiveCodeLength="1678" docExpressionCount="144" docLength="1875" endLine="53" length="2" offset="1554" repeat="2" startLine="53" starttimestamp="1649862007572" timestamp="88910973" timestamp2="88911133">
    <text><![CDATA[= ]]></text>
  </DocumentChange>
  <DocumentChange __id="5620" _type="Insert" date="Thu Apr 14 11:41:59 EDT 2022" docASTNodeCount="232" docActiveCodeLength="1697" docExpressionCount="145" docLength="1894" length="19" offset="1554" repeat="19" starttimestamp="1649862007572" timestamp="88911996" timestamp2="88914815">
    <text><![CDATA[commandProcessor = ]]></text>
  </DocumentChange>
  <DocumentChange __id="5665" _type="Insert" date="Thu Apr 14 11:42:10 EDT 2022" docASTNodeCount="236" docActiveCodeLength="1749" docExpressionCount="148" docLength="1946" length="52" offset="315" repeat="2" starttimestamp="1649862007572" timestamp="88922768" timestamp2="88922768">
    <text><![CDATA[
import stringProcessors.HalloweenCommandProcessor;]]></text>
  </DocumentChange>
  <DocumentChange __id="5673" _type="Insert" date="Thu Apr 14 11:42:13 EDT 2022" docASTNodeCount="239" docActiveCodeLength="1772" docExpressionCount="150" docLength="1969" length="23" offset="1654" repeat="18" starttimestamp="1649862007572" timestamp="88925942" timestamp2="88928613">
    <text><![CDATA[
			commandProcessor()]]></text>
  </DocumentChange>
  <DocumentChange __id="5711" _type="Insert" date="Thu Apr 14 11:42:18 EDT 2022" docASTNodeCount="239" docActiveCodeLength="1773" docExpressionCount="150" docLength="1970" length="1" offset="1677" starttimestamp="1649862007572" timestamp="88931049">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5717" _type="PauseCommand" date="Thu Apr 14 11:42:27 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="88939488">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7224]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5718" _type="SelectTextCommand" caretOffset="2245" date="Thu Apr 14 11:42:27 EDT 2022" end="2462" start="2245" starttimestamp="1649862007572" timestamp="88939583" />
  <Command __id="5716" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:42:27 EDT 2022" docASTNodeCount="551" docActiveCodeLength="3777" docExpressionCount="382" docLength="4121" projectName="A6" starttimestamp="1649862007572" timestamp="88939488">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintClient.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.Scanner;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AReadingWritingConnectCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintClient implements SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	protected SocketChannel socketChannel;¶	protected Scanner scanner = new Scanner(System.in);¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶¶	protected AnNIOManagerPrintClient(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));¶//	}¶¶	public void processInput() {¶		scanner = new Scanner(System.in);¶		while (true) {¶			System.out.println("Enter a line of input to be printed remotely");¶			String aNextLine = scanner.nextLine();¶			// wrap writes to the buffer and then flips it¶			ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶			nioManager.write(socketChannel, aWriteMessage, this);¶		}¶	}¶¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("Client Connect to Server");¶	}¶¶	@Override¶	public void notConnected(SocketChannel theSocketChannel, Exception e) {¶¶	}¶¶	@Override¶	public void written(SocketChannel socketChannel, ByteBuffer theWriteBuffer, int sendId) {¶		System.out.println("client channel has written");¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel socketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶				¶	}¶¶	¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="5720" _type="PauseCommand" date="Thu Apr 14 11:42:28 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88941259">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1676]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5721" _type="MoveCaretCommand" caretOffset="4184" date="Thu Apr 14 11:42:28 EDT 2022" docOffset="4184" starttimestamp="1649862007572" timestamp="88941347" />
  <Command __id="5719" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:42:28 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="88941259">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶"), Diff(INSERT,"import stringProcessors.HalloweenCommandProcessor;¶"), Diff(EQUAL,"import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	"), Diff(DELETE,"public "), Diff(INSERT,"@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}"), Diff(EQUAL,"¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		

}
]]></snapshot>
  </Command>
  <Command __id="5723" _type="PauseCommand" date="Thu Apr 14 11:42:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88946035">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4688]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5724" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:42:33 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="88946116" />
  <Command __id="5722" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:42:33 EDT 2022" docASTNodeCount="83" docActiveCodeLength="706" docExpressionCount="62" docLength="706" projectName="A6" starttimestamp="1649862007572" timestamp="88946035">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.nio.ByteBuffer;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;"), Diff(INSERT,"¶import stringProcessors.HalloweenCommandProcessor;"), Diff(EQUAL,"¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶¶	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶"), Diff(INSERT,"	HalloweenCommandProcessor getCommandProcessor();¶¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.nio.ByteBuffer;
import java.util.concurrent.ArrayBlockingQueue;

import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelConnectListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import stringProcessors.HalloweenCommandProcessor;

public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,
SocketChannelAcceptListener, SocketChannelReadListener{

	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();

	HalloweenCommandProcessor getCommandProcessor();

}
]]></snapshot>
  </Command>
  <Command __id="5726" _type="PauseCommand" date="Thu Apr 14 11:42:35 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88947831">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1715]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5725" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:42:35 EDT 2022" docASTNodeCount="239" docActiveCodeLength="1773" docExpressionCount="150" docLength="1970" projectName="A6" starttimestamp="1649862007572" timestamp="88947831">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶"), Diff(INSERT,"import stringProcessors.HalloweenCommandProcessor;¶"), Diff(EQUAL,"import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			"), Diff(INSERT,"HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			commandProcessor();"), Diff(EQUAL,"¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			commandProcessor();
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="5727" _type="MoveCaretCommand" caretOffset="1293" date="Thu Apr 14 11:42:35 EDT 2022" docOffset="1676" starttimestamp="1649862007572" timestamp="88947925" />
  <Command __id="5728" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 11:42:36 EDT 2022" starttimestamp="1649862007572" timestamp="88948888" />
  <DocumentChange __id="5729" _type="Delete" date="Thu Apr 14 11:42:36 EDT 2022" docASTNodeCount="238" docActiveCodeLength="1771" docExpressionCount="149" docLength="1968" endLine="55" length="2" offset="1675" repeat="2" startLine="55" starttimestamp="1649862007572" timestamp="88949162" timestamp2="88949372">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="5730" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:42:36 EDT 2022" starttimestamp="1649862007572" timestamp="88949166" />
  <Command __id="5732" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:42:36 EDT 2022" starttimestamp="1649862007572" timestamp="88949374" />
  <DocumentChange __id="5733" _type="Insert" date="Thu Apr 14 11:42:37 EDT 2022" docASTNodeCount="240" docActiveCodeLength="1777" docExpressionCount="151" docLength="1974" length="6" offset="1675" repeat="6" starttimestamp="1649862007572" timestamp="88949920" timestamp2="88951901">
    <text><![CDATA[.setIn]]></text>
  </DocumentChange>
  <Command __id="5734" _type="InsertStringCommand" date="Thu Apr 14 11:42:37 EDT 2022" starttimestamp="1649862007572" timestamp="88949925" timestamp2="88949925">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5735" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 11:42:37 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="88949936" />
  <Command __id="5742" _type="PauseCommand" date="Thu Apr 14 11:42:40 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88952445">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2509]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="5741" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 11:42:40 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="88952445" />
  <Command __id="5744" _type="InsertStringCommand" date="Thu Apr 14 11:42:40 EDT 2022" starttimestamp="1649862007572" timestamp="88952497" timestamp2="88952497">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5743" _type="Replace" date="Thu Apr 14 11:42:40 EDT 2022" docASTNodeCount="242" docActiveCodeLength="1793" docExpressionCount="152" docLength="1990" endLine="55" insertionLength="21" int_docASTNodeCount="240" int_docActiveCodeLength="1772" int_docExpressionCount="151" int_docLength="1969" length="5" offset="1676" startLine="55" starttimestamp="1649862007572" timestamp="88952448">
    <deletedText><![CDATA[setIn]]></deletedText>
    <insertedText><![CDATA[setInputString(arg0);]]></insertedText>
  </DocumentChange>
  <Command __id="5746" _type="PauseCommand" date="Thu Apr 14 11:42:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88954598">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2101]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="5745" _type="Replace" date="Thu Apr 14 11:42:42 EDT 2022" docASTNodeCount="242" docActiveCodeLength="1790" docExpressionCount="152" docLength="1987" endLine="55" insertionLength="1" int_docASTNodeCount="241" int_docActiveCodeLength="1789" int_docExpressionCount="151" int_docLength="1986" length="4" offset="1691" startLine="55" starttimestamp="1649862007572" timestamp="88954598">
    <deletedText><![CDATA[arg0]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <Command __id="5747" _type="InsertStringCommand" date="Thu Apr 14 11:42:42 EDT 2022" starttimestamp="1649862007572" timestamp="88954605" timestamp2="88954605">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="5748" _type="Insert" date="Thu Apr 14 11:42:42 EDT 2022" docASTNodeCount="242" docActiveCodeLength="1794" docExpressionCount="152" docLength="1991" length="4" offset="1692" repeat="4" starttimestamp="1649862007572" timestamp="88954994" timestamp2="88955499">
    <text><![CDATA[Mess]]></text>
  </DocumentChange>
  <Command __id="5749" _type="InsertStringCommand" date="Thu Apr 14 11:42:42 EDT 2022" starttimestamp="1649862007572" timestamp="88954997" timestamp2="88954997">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="5751" _type="InsertStringCommand" date="Thu Apr 14 11:42:42 EDT 2022" starttimestamp="1649862007572" timestamp="88955158" timestamp2="88955158">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5753" _type="InsertStringCommand" date="Thu Apr 14 11:42:42 EDT 2022" starttimestamp="1649862007572" timestamp="88955292" timestamp2="88955292">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5755" _type="InsertStringCommand" date="Thu Apr 14 11:42:43 EDT 2022" starttimestamp="1649862007572" timestamp="88955504" timestamp2="88955504">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5757" _type="InsertStringCommand" date="Thu Apr 14 11:42:43 EDT 2022" starttimestamp="1649862007572" timestamp="88955926" timestamp2="88955926">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5756" _type="Replace" date="Thu Apr 14 11:42:43 EDT 2022" docASTNodeCount="242" docActiveCodeLength="1803" docExpressionCount="152" docLength="2000" endLine="55" insertionLength="14" int_docASTNodeCount="241" int_docActiveCodeLength="1789" int_docExpressionCount="151" int_docLength="1986" length="5" offset="1691" startLine="55" starttimestamp="1649862007572" timestamp="88955919">
    <deletedText><![CDATA[aMess]]></deletedText>
    <insertedText><![CDATA[aMessageString]]></insertedText>
  </DocumentChange>
  <Command __id="5759" _type="PauseCommand" date="Thu Apr 14 11:42:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88957095">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1169]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="5760" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Apr 14 11:42:44 EDT 2022" starttimestamp="1649862007572" timestamp="88957100" />
  <Command __id="5761" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:42:44 EDT 2022" starttimestamp="1649862007572" timestamp="88957411" />
  <Command __id="5762" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:42:45 EDT 2022" starttimestamp="1649862007572" timestamp="88957502" />
  <Command __id="5763" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:42:45 EDT 2022" starttimestamp="1649862007572" timestamp="88957521" />
  <DocumentChange __id="5758" _type="Delete" date="Thu Apr 14 11:42:44 EDT 2022" docASTNodeCount="241" docActiveCodeLength="1802" docExpressionCount="152" docLength="1999" endLine="55" length="1" offset="1707" startLine="55" starttimestamp="1649862007572" timestamp="88957095">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5765" _type="PauseCommand" date="Thu Apr 14 11:42:57 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="88969569">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[12048]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5766" _type="MoveCaretCommand" caretOffset="4184" date="Thu Apr 14 11:42:57 EDT 2022" docOffset="4184" starttimestamp="1649862007572" timestamp="88969673" />
  <Command __id="5764" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:42:57 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="88969569">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5768" _type="PauseCommand" date="Thu Apr 14 11:43:04 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="88977373">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7700]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5769" _type="SelectTextCommand" caretOffset="293" date="Thu Apr 14 11:43:05 EDT 2022" end="319" start="293" starttimestamp="1649862007572" timestamp="88977459" />
  <Command __id="5767" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:04 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="88977373">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5771" _type="PauseCommand" date="Thu Apr 14 11:43:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="88979074">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1615]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5770" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:06 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="88979074">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5772" _type="MoveCaretCommand" caretOffset="4184" date="Thu Apr 14 11:43:06 EDT 2022" docOffset="4184" starttimestamp="1649862007572" timestamp="88979213" />
  <Command __id="5774" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:43:07 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="88980098" />
  <Command __id="5773" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:07 EDT 2022" docASTNodeCount="83" docActiveCodeLength="706" docExpressionCount="62" docLength="706" projectName="A6" starttimestamp="1649862007572" timestamp="88980017">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.nio.ByteBuffer;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import stringProcessors.HalloweenCommandProcessor;¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶¶	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶	HalloweenCommandProcessor getCommandProcessor();¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5776" _type="PauseCommand" date="Thu Apr 14 11:43:09 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88982298">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2200]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5777" _type="MoveCaretCommand" caretOffset="4184" date="Thu Apr 14 11:43:10 EDT 2022" docOffset="4184" starttimestamp="1649862007572" timestamp="88982447" />
  <Command __id="5775" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:09 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="88982298">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5779" _type="PauseCommand" date="Thu Apr 14 11:43:13 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88985588">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3141]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5778" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:13 EDT 2022" docASTNodeCount="241" docActiveCodeLength="1802" docExpressionCount="152" docLength="1999" projectName="A6" starttimestamp="1649862007572" timestamp="88985588">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			commandProcessor"), Diff(DELETE,"("), Diff(INSERT,".setInputString(aMessageString"), Diff(EQUAL,");¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			commandProcessor.setInputString(aMessageString);
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="5780" _type="MoveCaretCommand" caretOffset="1324" date="Thu Apr 14 11:43:13 EDT 2022" docOffset="1707" starttimestamp="1649862007572" timestamp="88985684" />
  <Command __id="5782" _type="MoveCaretCommand" caretOffset="4184" date="Thu Apr 14 11:43:14 EDT 2022" docOffset="4184" starttimestamp="1649862007572" timestamp="88986581" />
  <Command __id="5781" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:14 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="88986465">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5784" _type="PauseCommand" date="Thu Apr 14 11:43:17 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="88989808">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3227]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5785" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:43:17 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="88989990" />
  <Command __id="5787" _type="PauseCommand" date="Thu Apr 14 11:43:45 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="89018110">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[28120]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5786" _type="SelectTextCommand" caretOffset="5761" date="Thu Apr 14 11:43:45 EDT 2022" end="5979" start="5761" starttimestamp="1649862007572" timestamp="89018110" />
  <Command __id="5789" _type="PauseCommand" date="Thu Apr 14 11:43:46 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89019134">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1024]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="5788" _type="CopyCommand" date="Thu Apr 14 11:43:46 EDT 2022" starttimestamp="1649862007572" timestamp="89019134" />
  <Command __id="5783" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:17 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="88989808">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5791" _type="PauseCommand" date="Thu Apr 14 11:43:51 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89023442">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[4308]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5792" _type="MoveCaretCommand" caretOffset="5585" date="Thu Apr 14 11:43:51 EDT 2022" docOffset="7241" starttimestamp="1649862007572" timestamp="89023521" />
  <Command __id="5790" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:51 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="89023442">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5794" _type="PauseCommand" date="Thu Apr 14 11:43:52 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89025084">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1563]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5796" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:44:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89061357" type="Run" />
  <Command __id="5798" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:44:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89061357" type="Run" />
  <Command __id="5800" _type="MoveCaretCommand" caretOffset="1404" date="Thu Apr 14 11:44:29 EDT 2022" docOffset="1764" starttimestamp="1649862007572" timestamp="89061987" />
  <Command __id="5793" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:43:52 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="89025084">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5799" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:44:29 EDT 2022" docASTNodeCount="252" docActiveCodeLength="1776" docExpressionCount="157" docLength="2044" projectName="A6" starttimestamp="1649862007572" timestamp="89061895">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5802" _type="PauseCommand" date="Thu Apr 14 11:44:35 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89068369">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6382]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5804" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:44:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89076370" type="Run" />
  <Command __id="5801" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:44:35 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="89068369">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5807" _type="PauseCommand" date="Thu Apr 14 11:44:50 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89082610">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6240]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5808" _type="MoveCaretCommand" caretOffset="4184" date="Thu Apr 14 11:44:50 EDT 2022" docOffset="4184" starttimestamp="1649862007572" timestamp="89082700" />
  <Command __id="5806" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:44:50 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="89082610">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5810" _type="PauseCommand" date="Thu Apr 14 11:45:25 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="89117905">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[35205]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5811" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:45:25 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="89118123" />
  <Command __id="5813" _type="PauseCommand" date="Thu Apr 14 11:45:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89121329">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3206]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5812" _type="MoveCaretCommand" caretOffset="1324" date="Thu Apr 14 11:45:28 EDT 2022" docOffset="1707" starttimestamp="1649862007572" timestamp="89121329" />
  <Command __id="5815" _type="PauseCommand" date="Thu Apr 14 11:45:30 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89122966">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1637]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5814" _type="MoveCaretCommand" caretOffset="1324" date="Thu Apr 14 11:45:30 EDT 2022" docOffset="1707" starttimestamp="1649862007572" timestamp="89122966" />
  <Command __id="5817" _type="InsertStringCommand" date="Thu Apr 14 11:45:31 EDT 2022" starttimestamp="1649862007572" timestamp="89123724" timestamp2="89123724">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5819" _type="InsertStringCommand" date="Thu Apr 14 11:45:31 EDT 2022" starttimestamp="1649862007572" timestamp="89123991" timestamp2="89123991">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5825" _type="PasteCommand" date="Thu Apr 14 11:45:31 EDT 2022" starttimestamp="1649862007572" timestamp="89124315" />
  <Command __id="5827" _type="PauseCommand" date="Thu Apr 14 11:45:36 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89128594">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[4279]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5826" _type="SelectTextCommand" caretOffset="1277" date="Thu Apr 14 11:45:36 EDT 2022" end="1324" start="1277" starttimestamp="1649862007572" timestamp="89128594" />
  <Command __id="5829" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:45:36 EDT 2022" starttimestamp="1649862007572" timestamp="89128920" />
  <Command __id="5831" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:45:36 EDT 2022" starttimestamp="1649862007572" timestamp="89129307" />
  <Command __id="5833" _type="PauseCommand" date="Thu Apr 14 11:45:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89131653">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2346]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5832" _type="SelectTextCommand" caretOffset="1416" date="Thu Apr 14 11:45:39 EDT 2022" end="1426" start="1416" starttimestamp="1649862007572" timestamp="89131653" />
  <Command __id="5835" _type="InsertStringCommand" date="Thu Apr 14 11:45:39 EDT 2022" starttimestamp="1649862007572" timestamp="89132080" timestamp2="89132080">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="5837" _type="InsertStringCommand" date="Thu Apr 14 11:45:39 EDT 2022" starttimestamp="1649862007572" timestamp="89132280" timestamp2="89132280">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5839" _type="InsertStringCommand" date="Thu Apr 14 11:45:39 EDT 2022" starttimestamp="1649862007572" timestamp="89132326" timestamp2="89132326">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5841" _type="InsertStringCommand" date="Thu Apr 14 11:45:40 EDT 2022" starttimestamp="1649862007572" timestamp="89132542" timestamp2="89132542">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5843" _type="InsertStringCommand" date="Thu Apr 14 11:45:40 EDT 2022" starttimestamp="1649862007572" timestamp="89132622" timestamp2="89132622">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="5845" _type="InsertStringCommand" date="Thu Apr 14 11:45:40 EDT 2022" starttimestamp="1649862007572" timestamp="89132752" timestamp2="89132752">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="5847" _type="InsertStringCommand" date="Thu Apr 14 11:45:40 EDT 2022" starttimestamp="1649862007572" timestamp="89132827" timestamp2="89132827">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5849" _type="InsertStringCommand" date="Thu Apr 14 11:45:40 EDT 2022" starttimestamp="1649862007572" timestamp="89133267" timestamp2="89133267">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="5851" _type="InsertStringCommand" date="Thu Apr 14 11:45:41 EDT 2022" starttimestamp="1649862007572" timestamp="89133515" timestamp2="89133515">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5853" _type="InsertStringCommand" date="Thu Apr 14 11:45:41 EDT 2022" starttimestamp="1649862007572" timestamp="89133697" timestamp2="89133697">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5855" _type="InsertStringCommand" date="Thu Apr 14 11:45:41 EDT 2022" starttimestamp="1649862007572" timestamp="89133820" timestamp2="89133820">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5857" _type="InsertStringCommand" date="Thu Apr 14 11:45:41 EDT 2022" starttimestamp="1649862007572" timestamp="89133901" timestamp2="89133901">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="5859" _type="InsertStringCommand" date="Thu Apr 14 11:45:41 EDT 2022" starttimestamp="1649862007572" timestamp="89134018" timestamp2="89134018">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="5860" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:45:42 EDT 2022" starttimestamp="1649862007572" timestamp="89135002" />
  <Command __id="5861" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:45:42 EDT 2022" starttimestamp="1649862007572" timestamp="89135095" />
  <Command __id="5862" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:45:42 EDT 2022" starttimestamp="1649862007572" timestamp="89135114" />
  <Command __id="5809" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:45:25 EDT 2022" docASTNodeCount="241" docActiveCodeLength="1802" docExpressionCount="152" docLength="1999" projectName="A6" starttimestamp="1649862007572" timestamp="89117905">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			commandProcessor.setInputString(aMessageString);¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="5816" _type="Insert" date="Thu Apr 14 11:45:31 EDT 2022" docASTNodeCount="241" docActiveCodeLength="1812" docExpressionCount="152" docLength="2009" length="10" offset="1707" repeat="2" starttimestamp="1649862007572" timestamp="89123719" timestamp2="89123987">
    <text><![CDATA[
			
			]]></text>
  </DocumentChange>
  <DocumentChange __id="5820" _type="Replace" date="Thu Apr 14 11:45:31 EDT 2022" docASTNodeCount="262" docActiveCodeLength="2032" docExpressionCount="170" docLength="2229" endLine="57" insertionLength="223" int_docASTNodeCount="241" int_docActiveCodeLength="1809" int_docExpressionCount="152" int_docLength="2006" length="3" offset="1714" startLine="57" starttimestamp="1649862007572" timestamp="89124224">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
			commandProcessor.processCommand(aNewCommand);
			ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5821" _type="Insert" date="Thu Apr 14 11:45:31 EDT 2022" docASTNodeCount="282" docActiveCodeLength="2155" docExpressionCount="188" docLength="2352" length="123" offset="433" repeat="4" starttimestamp="1649862007572" timestamp="89124276" timestamp2="89124278">
    <text><![CDATA[
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;]]></text>
  </DocumentChange>
  <DocumentChange __id="5828" _type="Delete" date="Thu Apr 14 11:45:36 EDT 2022" docASTNodeCount="277" docActiveCodeLength="2107" docExpressionCount="184" docLength="2304" endLine="57" length="48" offset="1782" repeat="2" startLine="57" starttimestamp="1649862007572" timestamp="89128918" timestamp2="89129304">
    <text><![CDATA[commandProcessor.setInputString(aMessageString);]]></text>
  </DocumentChange>
  <DocumentChange __id="5834" _type="Replace" date="Thu Apr 14 11:45:39 EDT 2022" docASTNodeCount="277" docActiveCodeLength="2098" docExpressionCount="184" docLength="2295" endLine="60" insertionLength="1" int_docASTNodeCount="277" int_docActiveCodeLength="2097" int_docExpressionCount="184" int_docLength="2294" length="10" offset="1922" startLine="60" starttimestamp="1649862007572" timestamp="89132073">
    <deletedText><![CDATA[NewCommand]]></deletedText>
    <insertedText><![CDATA[M]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5836" _type="Insert" date="Thu Apr 14 11:45:39 EDT 2022" docASTNodeCount="277" docActiveCodeLength="2110" docExpressionCount="184" docLength="2307" length="12" offset="1923" repeat="12" starttimestamp="1649862007572" timestamp="89132275" timestamp2="89134014">
    <text><![CDATA[essageString]]></text>
  </DocumentChange>
  <Command __id="5864" _type="PauseCommand" date="Thu Apr 14 11:45:55 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89147677">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[12563]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5865" _type="SelectTextCommand" caretOffset="5761" date="Thu Apr 14 11:45:55 EDT 2022" end="5979" start="5761" starttimestamp="1649862007572" timestamp="89147778" />
  <Command __id="5863" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:45:55 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="89147677">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5867" _type="PauseCommand" date="Thu Apr 14 11:46:00 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89153402">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5624]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5868" _type="MoveCaretCommand" caretOffset="1429" date="Thu Apr 14 11:46:01 EDT 2022" docOffset="1935" starttimestamp="1649862007572" timestamp="89153527" />
  <Command __id="5866" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:46:00 EDT 2022" docASTNodeCount="277" docActiveCodeLength="2110" docExpressionCount="184" docLength="2307" projectName="A6" starttimestamp="1649862007572" timestamp="89153402">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶"), Diff(INSERT,"import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶"), Diff(EQUAL,"¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			"), Diff(INSERT,"¶			¶			ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶			"), Diff(EQUAL,"commandProcessor."), Diff(DELETE,"setInputString"), Diff(INSERT,"processCommand"), Diff(EQUAL,"(aMessageString);¶		"), Diff(INSERT,"	ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		"), Diff(EQUAL,"¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			
			
			ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
			commandProcessor.processCommand(aMessageString);
			ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <Command __id="5870" _type="PauseCommand" date="Thu Apr 14 11:46:02 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89155083">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1556]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5871" _type="MoveCaretCommand" caretOffset="4184" date="Thu Apr 14 11:46:02 EDT 2022" docOffset="4184" starttimestamp="1649862007572" timestamp="89155165" />
  <Command __id="5873" _type="PauseCommand" date="Thu Apr 14 11:46:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89159410">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4245]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5872" _type="MoveCaretCommand" caretOffset="3011" date="Thu Apr 14 11:46:06 EDT 2022" docOffset="3011" starttimestamp="1649862007572" timestamp="89159410" />
  <Command __id="5874" _type="MoveCaretCommand" caretOffset="3011" date="Thu Apr 14 11:46:06 EDT 2022" docOffset="3011" starttimestamp="1649862007572" timestamp="89159410" />
  <Command __id="5876" _type="InsertStringCommand" date="Thu Apr 14 11:46:07 EDT 2022" starttimestamp="1649862007572" timestamp="89159929" timestamp2="89159929">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5877" _type="InsertStringCommand" date="Thu Apr 14 11:46:07 EDT 2022" starttimestamp="1649862007572" timestamp="89159929" timestamp2="89159929">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5879" _type="InsertStringCommand" date="Thu Apr 14 11:46:08 EDT 2022" starttimestamp="1649862007572" timestamp="89160511" timestamp2="89160511">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="5880" _type="InsertStringCommand" date="Thu Apr 14 11:46:08 EDT 2022" starttimestamp="1649862007572" timestamp="89160511" timestamp2="89160511">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="5882" _type="InsertStringCommand" date="Thu Apr 14 11:46:08 EDT 2022" starttimestamp="1649862007572" timestamp="89160712" timestamp2="89160712">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5883" _type="InsertStringCommand" date="Thu Apr 14 11:46:08 EDT 2022" starttimestamp="1649862007572" timestamp="89160712" timestamp2="89160712">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="5885" _type="InsertStringCommand" date="Thu Apr 14 11:46:08 EDT 2022" starttimestamp="1649862007572" timestamp="89160760" timestamp2="89160760">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5886" _type="InsertStringCommand" date="Thu Apr 14 11:46:08 EDT 2022" starttimestamp="1649862007572" timestamp="89160760" timestamp2="89160760">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5888" _type="InsertStringCommand" date="Thu Apr 14 11:46:08 EDT 2022" starttimestamp="1649862007572" timestamp="89161250" timestamp2="89161250">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5889" _type="InsertStringCommand" date="Thu Apr 14 11:46:08 EDT 2022" starttimestamp="1649862007572" timestamp="89161250" timestamp2="89161250">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5891" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89161723" />
  <Command __id="5892" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89161723" />
  <Command __id="5894" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89161848" />
  <Command __id="5895" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89161848" />
  <Command __id="5897" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89162007" />
  <Command __id="5898" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89162007" />
  <Command __id="5900" _type="InsertStringCommand" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89162218" timestamp2="89162218">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="5901" _type="InsertStringCommand" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89162218" timestamp2="89162218">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="5903" _type="InsertStringCommand" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89162335" timestamp2="89162335">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="5904" _type="InsertStringCommand" date="Thu Apr 14 11:46:09 EDT 2022" starttimestamp="1649862007572" timestamp="89162336" timestamp2="89162336">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="5906" _type="InsertStringCommand" date="Thu Apr 14 11:46:10 EDT 2022" starttimestamp="1649862007572" timestamp="89162589" timestamp2="89162589">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="5907" _type="InsertStringCommand" date="Thu Apr 14 11:46:10 EDT 2022" starttimestamp="1649862007572" timestamp="89162589" timestamp2="89162589">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="5869" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:46:02 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="89155083">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="5875" _type="Insert" date="Thu Apr 14 11:46:07 EDT 2022" docASTNodeCount="520" docActiveCodeLength="3810" docExpressionCount="345" docLength="4294" length="8" offset="3011" repeat="5" starttimestamp="1649862007572" timestamp="89159923" timestamp2="89161244">
    <text><![CDATA[
		Clie]]></text>
  </DocumentChange>
  <DocumentChange __id="5890" _type="Delete" date="Thu Apr 14 11:46:09 EDT 2022" docASTNodeCount="520" docActiveCodeLength="3807" docExpressionCount="345" docLength="4291" endLine="96" length="3" offset="3016" repeat="3" startLine="96" starttimestamp="1649862007572" timestamp="89161720" timestamp2="89162004">
    <text><![CDATA[lie]]></text>
  </DocumentChange>
  <Command __id="5909" _type="InsertStringCommand" date="Thu Apr 14 11:46:10 EDT 2022" starttimestamp="1649862007572" timestamp="89162972" timestamp2="89162972">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="5910" _type="InsertStringCommand" date="Thu Apr 14 11:46:10 EDT 2022" starttimestamp="1649862007572" timestamp="89162973" timestamp2="89162973">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="5912" _type="InsertStringCommand" date="Thu Apr 14 11:46:10 EDT 2022" starttimestamp="1649862007572" timestamp="89163052" timestamp2="89163052">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="5913" _type="InsertStringCommand" date="Thu Apr 14 11:46:10 EDT 2022" starttimestamp="1649862007572" timestamp="89163052" timestamp2="89163052">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="5915" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89163479" timestamp2="89163479">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="5916" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89163479" timestamp2="89163479">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="5918" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89163789" timestamp2="89163789">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="5919" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89163789" timestamp2="89163789">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="5921" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89163917" timestamp2="89163917">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="5922" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89163917" timestamp2="89163917">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="5924" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89164046" timestamp2="89164046">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="5925" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89164046" timestamp2="89164046">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="5927" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89164249" timestamp2="89164249">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="5928" _type="InsertStringCommand" date="Thu Apr 14 11:46:11 EDT 2022" starttimestamp="1649862007572" timestamp="89164249" timestamp2="89164249">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="5931" _type="PauseCommand" date="Thu Apr 14 11:46:13 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89165920">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1671]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="5930" _type="InsertStringCommand" date="Thu Apr 14 11:46:13 EDT 2022" starttimestamp="1649862007572" timestamp="89165920" timestamp2="89165920">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5932" _type="InsertStringCommand" date="Thu Apr 14 11:46:13 EDT 2022" starttimestamp="1649862007572" timestamp="89165920" timestamp2="89165920">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5934" _type="PauseCommand" date="Thu Apr 14 11:46:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89167200">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1280]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5933" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:46:14 EDT 2022" starttimestamp="1649862007572" timestamp="89167200" />
  <Command __id="5935" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:46:14 EDT 2022" starttimestamp="1649862007572" timestamp="89167304" />
  <Command __id="5936" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:46:14 EDT 2022" starttimestamp="1649862007572" timestamp="89167340" />
  <Command __id="5938" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:15 EDT 2022" starttimestamp="1649862007572" timestamp="89168225" />
  <Command __id="5939" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:15 EDT 2022" starttimestamp="1649862007572" timestamp="89168225" />
  <Command __id="5941" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168713" />
  <Command __id="5942" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168713" />
  <Command __id="5944" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168743" />
  <Command __id="5945" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168743" />
  <Command __id="5947" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168773" />
  <Command __id="5948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168773" />
  <Command __id="5950" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168804" />
  <Command __id="5951" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168805" />
  <Command __id="5953" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168833" />
  <Command __id="5954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168833" />
  <Command __id="5956" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168865" />
  <Command __id="5957" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168865" />
  <Command __id="5959" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168893" />
  <Command __id="5960" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168893" />
  <Command __id="5962" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168926" />
  <Command __id="5963" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89168926" />
  <Command __id="5965" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89169125" />
  <Command __id="5966" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89169125" />
  <Command __id="5968" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89169292" />
  <Command __id="5969" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:16 EDT 2022" starttimestamp="1649862007572" timestamp="89169292" />
  <Command __id="5971" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:17 EDT 2022" starttimestamp="1649862007572" timestamp="89169519" />
  <Command __id="5972" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:17 EDT 2022" starttimestamp="1649862007572" timestamp="89169519" />
  <Command __id="5974" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:17 EDT 2022" starttimestamp="1649862007572" timestamp="89169884" />
  <Command __id="5975" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:17 EDT 2022" starttimestamp="1649862007572" timestamp="89169884" />
  <Command __id="5977" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:17 EDT 2022" starttimestamp="1649862007572" timestamp="89170043" />
  <Command __id="5978" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:17 EDT 2022" starttimestamp="1649862007572" timestamp="89170043" />
  <Command __id="5980" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:17 EDT 2022" starttimestamp="1649862007572" timestamp="89170373" />
  <Command __id="5981" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:46:17 EDT 2022" starttimestamp="1649862007572" timestamp="89170373" />
  <Command __id="5982" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:46:18 EDT 2022" starttimestamp="1649862007572" timestamp="89170886" />
  <Command __id="5983" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:46:18 EDT 2022" starttimestamp="1649862007572" timestamp="89170981" />
  <Command __id="5984" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:46:18 EDT 2022" starttimestamp="1649862007572" timestamp="89171011" />
  <DocumentChange __id="5899" _type="Insert" date="Thu Apr 14 11:46:09 EDT 2022" docASTNodeCount="520" docActiveCodeLength="3818" docExpressionCount="345" docLength="4302" length="11" offset="3016" repeat="11" starttimestamp="1649862007572" timestamp="89162212" timestamp2="89165914">
    <text><![CDATA[LIENT_NAME;]]></text>
  </DocumentChange>
  <DocumentChange __id="5937" _type="Delete" date="Thu Apr 14 11:46:15 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" endLine="96" length="16" offset="3011" repeat="15" startLine="95" starttimestamp="1649862007572" timestamp="89168220" timestamp2="89170369">
    <text><![CDATA[
		CLIENT_NAME;]]></text>
  </DocumentChange>
  <Command __id="5986" _type="PauseCommand" date="Thu Apr 14 11:46:30 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89182840">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[11829]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5987" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:46:30 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="89183074" />
  <Command __id="5989" _type="PauseCommand" date="Thu Apr 14 11:46:44 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89197020">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13946]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5988" _type="SelectTextCommand" caretOffset="798" date="Thu Apr 14 11:46:44 EDT 2022" end="809" start="798" starttimestamp="1649862007572" timestamp="89197020" />
  <Command __id="5990" _type="CopyCommand" date="Thu Apr 14 11:46:44 EDT 2022" starttimestamp="1649862007572" timestamp="89197373" />
  <Command __id="5985" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:46:30 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="89182840">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="5992" _type="PauseCommand" date="Thu Apr 14 11:46:46 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89198693">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1320]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5993" _type="MoveCaretCommand" caretOffset="1429" date="Thu Apr 14 11:46:46 EDT 2022" docOffset="1935" starttimestamp="1649862007572" timestamp="89198774" />
  <Command __id="5995" _type="PauseCommand" date="Thu Apr 14 11:46:48 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89200995">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2221]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5994" _type="MoveCaretCommand" caretOffset="1466" date="Thu Apr 14 11:46:48 EDT 2022" docOffset="1972" starttimestamp="1649862007572" timestamp="89200995" />
  <Command __id="5996" _type="MoveCaretCommand" caretOffset="1466" date="Thu Apr 14 11:46:48 EDT 2022" docOffset="1972" starttimestamp="1649862007572" timestamp="89200995" />
  <Command __id="5997" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 11:46:49 EDT 2022" starttimestamp="1649862007572" timestamp="89201692" />
  <Command __id="5998" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 11:46:49 EDT 2022" starttimestamp="1649862007572" timestamp="89201692" />
  <Command __id="6000" _type="InsertStringCommand" date="Thu Apr 14 11:46:49 EDT 2022" starttimestamp="1649862007572" timestamp="89202110" timestamp2="89202110">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6001" _type="InsertStringCommand" date="Thu Apr 14 11:46:49 EDT 2022" starttimestamp="1649862007572" timestamp="89202110" timestamp2="89202110">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6003" _type="InsertStringCommand" date="Thu Apr 14 11:46:49 EDT 2022" starttimestamp="1649862007572" timestamp="89202227" timestamp2="89202227">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6004" _type="InsertStringCommand" date="Thu Apr 14 11:46:49 EDT 2022" starttimestamp="1649862007572" timestamp="89202227" timestamp2="89202227">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6006" _type="InsertStringCommand" date="Thu Apr 14 11:46:49 EDT 2022" starttimestamp="1649862007572" timestamp="89202322" timestamp2="89202322">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6007" _type="InsertStringCommand" date="Thu Apr 14 11:46:49 EDT 2022" starttimestamp="1649862007572" timestamp="89202322" timestamp2="89202322">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6009" _type="InsertStringCommand" date="Thu Apr 14 11:46:50 EDT 2022" starttimestamp="1649862007572" timestamp="89202435" timestamp2="89202435">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6010" _type="InsertStringCommand" date="Thu Apr 14 11:46:50 EDT 2022" starttimestamp="1649862007572" timestamp="89202435" timestamp2="89202435">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6012" _type="InsertStringCommand" date="Thu Apr 14 11:46:50 EDT 2022" starttimestamp="1649862007572" timestamp="89202552" timestamp2="89202552">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6013" _type="InsertStringCommand" date="Thu Apr 14 11:46:50 EDT 2022" starttimestamp="1649862007572" timestamp="89202552" timestamp2="89202552">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6015" _type="InsertStringCommand" date="Thu Apr 14 11:46:50 EDT 2022" starttimestamp="1649862007572" timestamp="89202667" timestamp2="89202667">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6016" _type="InsertStringCommand" date="Thu Apr 14 11:46:50 EDT 2022" starttimestamp="1649862007572" timestamp="89202667" timestamp2="89202667">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6018" _type="InsertStringCommand" date="Thu Apr 14 11:46:50 EDT 2022" starttimestamp="1649862007572" timestamp="89203320" timestamp2="89203320">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6019" _type="InsertStringCommand" date="Thu Apr 14 11:46:50 EDT 2022" starttimestamp="1649862007572" timestamp="89203320" timestamp2="89203320">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6020" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 11:46:50 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="89203324" />
  <Command __id="5991" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:46:46 EDT 2022" docASTNodeCount="277" docActiveCodeLength="2110" docExpressionCount="184" docLength="2307" projectName="A6" starttimestamp="1649862007572" timestamp="89198693">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="5999" _type="Insert" date="Thu Apr 14 11:46:49 EDT 2022" docASTNodeCount="279" docActiveCodeLength="2117" docExpressionCount="186" docLength="2314" length="7" offset="1973" repeat="7" starttimestamp="1649862007572" timestamp="89202103" timestamp2="89203314">
    <text><![CDATA[client.]]></text>
  </DocumentChange>
  <Command __id="6022" _type="PauseCommand" date="Thu Apr 14 11:47:01 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89213980">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[10656]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="6023" _type="UndoCommand" date="Thu Apr 14 11:47:01 EDT 2022" starttimestamp="1649862007572" timestamp="89214000" />
  <DocumentChange __id="6021" _type="Delete" date="Thu Apr 14 11:47:01 EDT 2022" docASTNodeCount="277" docActiveCodeLength="2110" docExpressionCount="184" docLength="2307" endLine="61" length="7" offset="1973" startLine="61" starttimestamp="1649862007572" timestamp="89213980">
    <text><![CDATA[client.]]></text>
  </DocumentChange>
  <Command __id="6025" _type="PauseCommand" date="Thu Apr 14 11:47:04 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89216888">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2888]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6026" _type="SelectTextCommand" caretOffset="798" date="Thu Apr 14 11:47:04 EDT 2022" end="809" start="798" starttimestamp="1649862007572" timestamp="89217001" />
  <Command __id="6028" _type="PauseCommand" date="Thu Apr 14 11:47:16 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89228726">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[11725]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6027" _type="SelectTextCommand" caretOffset="781" date="Thu Apr 14 11:47:16 EDT 2022" end="790" start="781" starttimestamp="1649862007572" timestamp="89228726" />
  <Command __id="6036" _type="PauseCommand" date="Thu Apr 14 11:47:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89230754">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1413]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6035" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:47:18 EDT 2022" starttimestamp="1649862007572" timestamp="89230754" />
  <Command __id="6037" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:47:18 EDT 2022" starttimestamp="1649862007572" timestamp="89230853" />
  <Command __id="6038" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:47:18 EDT 2022" starttimestamp="1649862007572" timestamp="89230895" />
  <Command __id="6040" _type="MoveCaretCommand" caretOffset="1467" date="Thu Apr 14 11:47:19 EDT 2022" docOffset="1973" starttimestamp="1649862007572" timestamp="89232010" />
  <Command __id="6024" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:47:04 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9182" docExpressionCount="847" docLength="10055" projectName="A6" starttimestamp="1649862007572" timestamp="89216888">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	protected String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="6029" _type="Replace" date="Thu Apr 14 11:47:16 EDT 2022" docASTNodeCount="1179" docActiveCodeLength="9174" docExpressionCount="847" docLength="10047" endLine="58" insertionLength="1" int_docASTNodeCount="1179" int_docActiveCodeLength="9173" int_docExpressionCount="847" int_docLength="10046" length="9" offset="2456" startLine="58" starttimestamp="1649862007572" timestamp="89229235">
    <deletedText><![CDATA[protected]]></deletedText>
    <insertedText><![CDATA[p]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6030" _type="Insert" date="Thu Apr 14 11:47:16 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10052" length="5" offset="2457" repeat="5" starttimestamp="1649862007572" timestamp="89229341" timestamp2="89229744">
    <text><![CDATA[ublic]]></text>
  </DocumentChange>
  <Command __id="6039" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:47:19 EDT 2022" docASTNodeCount="277" docActiveCodeLength="2110" docExpressionCount="184" docLength="2307" projectName="A6" starttimestamp="1649862007572" timestamp="89231834">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6042" _type="PauseCommand" date="Thu Apr 14 11:47:21 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89233755">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1745]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6049" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 11:47:21 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="89234382" />
  <Command __id="6051" _type="PauseCommand" date="Thu Apr 14 11:47:23 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89235929">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1547]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6050" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:47:23 EDT 2022" starttimestamp="1649862007572" timestamp="89235929" />
  <Command __id="6052" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 11:47:23 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="89235989" />
  <Command __id="6053" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:47:23 EDT 2022" starttimestamp="1649862007572" timestamp="89236027" />
  <Command __id="6054" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:47:23 EDT 2022" starttimestamp="1649862007572" timestamp="89236063" />
  <Command __id="6056" _type="PauseCommand" date="Thu Apr 14 11:47:24 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89237259">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1196]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6055" _type="MoveCaretCommand" caretOffset="1336" date="Thu Apr 14 11:47:24 EDT 2022" docOffset="1842" starttimestamp="1649862007572" timestamp="89237259" />
  <Command __id="6057" _type="MoveCaretCommand" caretOffset="1336" date="Thu Apr 14 11:47:24 EDT 2022" docOffset="1842" starttimestamp="1649862007572" timestamp="89237259" />
  <Command __id="6059" _type="InsertStringCommand" date="Thu Apr 14 11:47:25 EDT 2022" starttimestamp="1649862007572" timestamp="89237517" timestamp2="89237517">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6060" _type="InsertStringCommand" date="Thu Apr 14 11:47:25 EDT 2022" starttimestamp="1649862007572" timestamp="89237518" timestamp2="89237518">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6062" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238484" timestamp2="89238484">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6063" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238484" timestamp2="89238484">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6065" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238500" timestamp2="89238500">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6066" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238500" timestamp2="89238500">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6068" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238509" timestamp2="89238509">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6069" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238509" timestamp2="89238509">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6071" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238576" timestamp2="89238576">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6072" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238576" timestamp2="89238576">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6074" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238751" timestamp2="89238751">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6075" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238751" timestamp2="89238751">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6077" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238885" timestamp2="89238885">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6078" _type="InsertStringCommand" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89238885" timestamp2="89238885">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6080" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89239207" />
  <Command __id="6081" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89239207" />
  <Command __id="6083" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89239336" />
  <Command __id="6084" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:47:26 EDT 2022" starttimestamp="1649862007572" timestamp="89239336" />
  <Command __id="6086" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:47:27 EDT 2022" starttimestamp="1649862007572" timestamp="89239498" />
  <Command __id="6087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:47:27 EDT 2022" starttimestamp="1649862007572" timestamp="89239498" />
  <Command __id="6089" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:47:27 EDT 2022" starttimestamp="1649862007572" timestamp="89239654" />
  <Command __id="6090" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:47:27 EDT 2022" starttimestamp="1649862007572" timestamp="89239654" />
  <Command __id="6125" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:47:30 EDT 2022" starttimestamp="1649862007572" timestamp="89242810" />
  <Command __id="6126" _type="ShellCommand" date="Thu Apr 14 11:47:30 EDT 2022" starttimestamp="1649862007572" timestamp="89242993" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6128" _type="PauseCommand" date="Thu Apr 14 11:47:32 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89244559">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1566]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6127" _type="ShellCommand" date="Thu Apr 14 11:47:32 EDT 2022" starttimestamp="1649862007572" timestamp="89244559" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6130" _type="PauseCommand" date="Thu Apr 14 11:47:37 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89249842">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5283]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6129" _type="SelectTextCommand" caretOffset="1422" date="Thu Apr 14 11:47:37 EDT 2022" end="1436" start="1422" starttimestamp="1649862007572" timestamp="89249842" />
  <Command __id="6131" _type="SelectTextCommand" caretOffset="1422" date="Thu Apr 14 11:47:37 EDT 2022" end="1436" start="1422" starttimestamp="1649862007572" timestamp="89249842" />
  <Command __id="6132" _type="CopyCommand" date="Thu Apr 14 11:47:37 EDT 2022" starttimestamp="1649862007572" timestamp="89250074" />
  <Command __id="6134" _type="PauseCommand" date="Thu Apr 14 11:47:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89252358">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2284]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6133" _type="SelectTextCommand" caretOffset="1372" date="Thu Apr 14 11:47:39 EDT 2022" end="1383" start="1372" starttimestamp="1649862007572" timestamp="89252358" />
  <Command __id="6135" _type="SelectTextCommand" caretOffset="1372" date="Thu Apr 14 11:47:39 EDT 2022" end="1383" start="1372" starttimestamp="1649862007572" timestamp="89252358" />
  <Command __id="6137" _type="PasteCommand" date="Thu Apr 14 11:47:40 EDT 2022" starttimestamp="1649862007572" timestamp="89252489" />
  <Command __id="6139" _type="PauseCommand" date="Thu Apr 14 11:47:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89254864">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2375]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6138" _type="SelectTextCommand" caretOffset="1513" date="Thu Apr 14 11:47:42 EDT 2022" end="1524" start="1513" starttimestamp="1649862007572" timestamp="89254864" />
  <Command __id="6140" _type="SelectTextCommand" caretOffset="1513" date="Thu Apr 14 11:47:42 EDT 2022" end="1524" start="1513" starttimestamp="1649862007572" timestamp="89254865" />
  <Command __id="6142" _type="PasteCommand" date="Thu Apr 14 11:47:42 EDT 2022" starttimestamp="1649862007572" timestamp="89255010" />
  <Command __id="6143" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:47:43 EDT 2022" starttimestamp="1649862007572" timestamp="89255482" />
  <Command __id="6144" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:47:43 EDT 2022" starttimestamp="1649862007572" timestamp="89255572" />
  <Command __id="6145" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:47:43 EDT 2022" starttimestamp="1649862007572" timestamp="89255604" />
  <DocumentChange __id="6041" _type="Insert" date="Thu Apr 14 11:47:21 EDT 2022" docASTNodeCount="279" docActiveCodeLength="2117" docExpressionCount="186" docLength="2314" length="7" offset="1973" repeat="7" starttimestamp="1649862007572" timestamp="89233755" timestamp2="89234367">
    <text><![CDATA[client.]]></text>
  </DocumentChange>
  <DocumentChange __id="6058" _type="Insert" date="Thu Apr 14 11:47:25 EDT 2022" docASTNodeCount="279" docActiveCodeLength="2124" docExpressionCount="186" docLength="2321" length="7" offset="1842" repeat="7" starttimestamp="1649862007572" timestamp="89237512" timestamp2="89238881">
    <text><![CDATA[cillien]]></text>
  </DocumentChange>
  <DocumentChange __id="6079" _type="Delete" date="Thu Apr 14 11:47:26 EDT 2022" docASTNodeCount="279" docActiveCodeLength="2118" docExpressionCount="186" docLength="2315" endLine="59" length="6" offset="1843" repeat="6" startLine="59" starttimestamp="1649862007572" timestamp="89239204" timestamp2="89239966">
    <text><![CDATA[illien]]></text>
  </DocumentChange>
  <DocumentChange __id="6097" _type="Insert" date="Thu Apr 14 11:47:27 EDT 2022" docASTNodeCount="279" docActiveCodeLength="2119" docExpressionCount="186" docLength="2316" length="1" offset="1843" starttimestamp="1649862007572" timestamp="89240259">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="6100" _type="Delete" date="Thu Apr 14 11:47:28 EDT 2022" docASTNodeCount="279" docActiveCodeLength="2118" docExpressionCount="186" docLength="2315" endLine="59" length="1" offset="1843" startLine="59" starttimestamp="1649862007572" timestamp="89240868">
    <text><![CDATA[k]]></text>
  </DocumentChange>
  <DocumentChange __id="6103" _type="Insert" date="Thu Apr 14 11:47:28 EDT 2022" docASTNodeCount="281" docActiveCodeLength="2124" docExpressionCount="188" docLength="2321" length="6" offset="1843" repeat="6" starttimestamp="1649862007572" timestamp="89241072" timestamp2="89241750">
    <text><![CDATA[lient.]]></text>
  </DocumentChange>
  <DocumentChange __id="6136" _type="Replace" date="Thu Apr 14 11:47:40 EDT 2022" docASTNodeCount="281" docActiveCodeLength="2127" docExpressionCount="188" docLength="2324" endLine="59" insertionLength="14" int_docASTNodeCount="281" int_docActiveCodeLength="2113" int_docExpressionCount="188" int_docLength="2310" length="11" offset="1878" startLine="59" starttimestamp="1649862007572" timestamp="89252480">
    <deletedText><![CDATA[aNewCommand]]></deletedText>
    <insertedText><![CDATA[aMessageString]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6141" _type="Replace" date="Thu Apr 14 11:47:42 EDT 2022" docASTNodeCount="281" docActiveCodeLength="2130" docExpressionCount="188" docLength="2327" endLine="61" insertionLength="14" int_docASTNodeCount="281" int_docActiveCodeLength="2116" int_docExpressionCount="188" int_docLength="2313" length="11" offset="2019" startLine="61" starttimestamp="1649862007572" timestamp="89255005">
    <deletedText><![CDATA[aNewCommand]]></deletedText>
    <insertedText><![CDATA[aMessageString]]></insertedText>
  </DocumentChange>
  <Command __id="6147" _type="PauseCommand" date="Thu Apr 14 11:47:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89257736">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2132]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6148" _type="MoveCaretCommand" caretOffset="787" date="Thu Apr 14 11:47:45 EDT 2022" docOffset="2462" starttimestamp="1649862007572" timestamp="89257829" />
  <Command __id="6150" _type="PauseCommand" date="Thu Apr 14 11:47:51 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89264405">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6576]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6149" _type="MoveCaretCommand" caretOffset="996" date="Thu Apr 14 11:47:51 EDT 2022" docOffset="2671" starttimestamp="1649862007572" timestamp="89264405" />
  <Command __id="6152" _type="ShellCommand" date="Thu Apr 14 11:47:52 EDT 2022" starttimestamp="1649862007572" timestamp="89265157" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6154" _type="PauseCommand" date="Thu Apr 14 11:47:55 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89268345">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3188]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6153" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:47:55 EDT 2022" forward="true" matchWord="false" offset="2671" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89268345" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6156" _type="PauseCommand" date="Thu Apr 14 11:48:02 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89274970">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[6624]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6155" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:02 EDT 2022" forward="true" matchWord="false" offset="7305" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89274969" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6158" _type="PauseCommand" date="Thu Apr 14 11:48:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89278942">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3972]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6157" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:06 EDT 2022" forward="true" matchWord="false" offset="9892" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89278941" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6160" _type="PauseCommand" date="Thu Apr 14 11:48:07 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89280150">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1209]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6159" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:07 EDT 2022" forward="true" matchWord="false" offset="2700" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89280150" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6162" _type="PauseCommand" date="Thu Apr 14 11:48:09 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89282315">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2165]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6161" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:09 EDT 2022" forward="true" matchWord="false" offset="7305" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89282315" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6164" _type="PauseCommand" date="Thu Apr 14 11:48:25 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89298311">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[15996]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6163" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:25 EDT 2022" forward="true" matchWord="false" offset="9892" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89298311" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6165" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:26 EDT 2022" forward="true" matchWord="false" offset="2700" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89299055" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6167" _type="PauseCommand" date="Thu Apr 14 11:48:28 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89300560">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1505]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6166" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:28 EDT 2022" forward="true" matchWord="false" offset="7305" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89300560" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6169" _type="PauseCommand" date="Thu Apr 14 11:48:30 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89303224">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2664]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6168" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:30 EDT 2022" forward="true" matchWord="false" offset="9892" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89303224" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6170" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:31 EDT 2022" forward="true" matchWord="false" offset="2700" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89303945" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6172" _type="PauseCommand" date="Thu Apr 14 11:48:32 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89305336">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1391]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6171" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:32 EDT 2022" forward="true" matchWord="false" offset="7305" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89305336" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6174" _type="PauseCommand" date="Thu Apr 14 11:48:33 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89306388">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1052]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6173" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:33 EDT 2022" forward="true" matchWord="false" offset="9892" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89306388" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6175" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:48:34 EDT 2022" forward="true" matchWord="false" offset="2700" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89307298" wrapSearch="false">
    <searchString><![CDATA[ProposalNum]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6177" _type="PauseCommand" date="Thu Apr 14 11:48:50 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89323094">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[15796]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6176" _type="ShellCommand" date="Thu Apr 14 11:48:50 EDT 2022" starttimestamp="1649862007572" timestamp="89323094" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6179" _type="PauseCommand" date="Thu Apr 14 11:49:03 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89336179">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13085]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6178" _type="SelectTextCommand" caretOffset="1000" date="Thu Apr 14 11:49:03 EDT 2022" end="1008" start="1000" starttimestamp="1649862007572" timestamp="89336179" />
  <Command __id="6180" _type="MoveCaretCommand" caretOffset="999" date="Thu Apr 14 11:49:04 EDT 2022" docOffset="2674" starttimestamp="1649862007572" timestamp="89336742" />
  <Command __id="6182" _type="InsertStringCommand" date="Thu Apr 14 11:49:04 EDT 2022" starttimestamp="1649862007572" timestamp="89337269" timestamp2="89337269">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6184" _type="InsertStringCommand" date="Thu Apr 14 11:49:05 EDT 2022" starttimestamp="1649862007572" timestamp="89337779" timestamp2="89337779">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6186" _type="PauseCommand" date="Thu Apr 14 11:49:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89339168">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1389]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6185" _type="MoveCaretCommand" caretOffset="1031" date="Thu Apr 14 11:49:06 EDT 2022" docOffset="2706" starttimestamp="1649862007572" timestamp="89339168" />
  <Command __id="6188" _type="InsertStringCommand" date="Thu Apr 14 11:49:07 EDT 2022" starttimestamp="1649862007572" timestamp="89339448" timestamp2="89339448">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6190" _type="InsertStringCommand" date="Thu Apr 14 11:49:07 EDT 2022" starttimestamp="1649862007572" timestamp="89339965" timestamp2="89339965">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6192" _type="InsertStringCommand" date="Thu Apr 14 11:49:07 EDT 2022" starttimestamp="1649862007572" timestamp="89340088" timestamp2="89340088">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="6194" _type="InsertStringCommand" date="Thu Apr 14 11:49:07 EDT 2022" starttimestamp="1649862007572" timestamp="89340241" timestamp2="89340241">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6196" _type="InsertStringCommand" date="Thu Apr 14 11:49:07 EDT 2022" starttimestamp="1649862007572" timestamp="89340388" timestamp2="89340388">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6198" _type="InsertStringCommand" date="Thu Apr 14 11:49:08 EDT 2022" starttimestamp="1649862007572" timestamp="89340451" timestamp2="89340451">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6200" _type="InsertStringCommand" date="Thu Apr 14 11:49:08 EDT 2022" starttimestamp="1649862007572" timestamp="89340636" timestamp2="89340636">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6202" _type="InsertStringCommand" date="Thu Apr 14 11:49:08 EDT 2022" starttimestamp="1649862007572" timestamp="89340800" timestamp2="89340800">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6204" _type="InsertStringCommand" date="Thu Apr 14 11:49:08 EDT 2022" starttimestamp="1649862007572" timestamp="89341236" timestamp2="89341236">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6206" _type="InsertStringCommand" date="Thu Apr 14 11:49:08 EDT 2022" starttimestamp="1649862007572" timestamp="89341352" timestamp2="89341352">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6208" _type="InsertStringCommand" date="Thu Apr 14 11:49:09 EDT 2022" starttimestamp="1649862007572" timestamp="89341529" timestamp2="89341529">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6210" _type="InsertStringCommand" date="Thu Apr 14 11:49:09 EDT 2022" starttimestamp="1649862007572" timestamp="89341648" timestamp2="89341648">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6212" _type="InsertStringCommand" date="Thu Apr 14 11:49:09 EDT 2022" starttimestamp="1649862007572" timestamp="89342235" timestamp2="89342235">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6214" _type="InsertStringCommand" date="Thu Apr 14 11:49:10 EDT 2022" starttimestamp="1649862007572" timestamp="89342523" timestamp2="89342523">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="6216" _type="InsertStringCommand" date="Thu Apr 14 11:49:10 EDT 2022" starttimestamp="1649862007572" timestamp="89342741" timestamp2="89342741">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6218" _type="InsertStringCommand" date="Thu Apr 14 11:49:10 EDT 2022" starttimestamp="1649862007572" timestamp="89342809" timestamp2="89342809">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6220" _type="InsertStringCommand" date="Thu Apr 14 11:49:10 EDT 2022" starttimestamp="1649862007572" timestamp="89343047" timestamp2="89343047">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="6222" _type="InsertStringCommand" date="Thu Apr 14 11:49:10 EDT 2022" starttimestamp="1649862007572" timestamp="89343162" timestamp2="89343162">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="6224" _type="InsertStringCommand" date="Thu Apr 14 11:49:11 EDT 2022" starttimestamp="1649862007572" timestamp="89343456" timestamp2="89343456">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6226" _type="InsertStringCommand" date="Thu Apr 14 11:49:11 EDT 2022" starttimestamp="1649862007572" timestamp="89343582" timestamp2="89343582">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6228" _type="InsertStringCommand" date="Thu Apr 14 11:49:11 EDT 2022" starttimestamp="1649862007572" timestamp="89343733" timestamp2="89343733">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6230" _type="InsertStringCommand" date="Thu Apr 14 11:49:11 EDT 2022" starttimestamp="1649862007572" timestamp="89343987" timestamp2="89343987">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="6232" _type="InsertStringCommand" date="Thu Apr 14 11:49:11 EDT 2022" starttimestamp="1649862007572" timestamp="89344172" timestamp2="89344172">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="6234" _type="InsertStringCommand" date="Thu Apr 14 11:49:11 EDT 2022" starttimestamp="1649862007572" timestamp="89344378" timestamp2="89344378">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="6236" _type="InsertStringCommand" date="Thu Apr 14 11:49:12 EDT 2022" starttimestamp="1649862007572" timestamp="89344476" timestamp2="89344476">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="6238" _type="InsertStringCommand" date="Thu Apr 14 11:49:12 EDT 2022" starttimestamp="1649862007572" timestamp="89344662" timestamp2="89344662">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6240" _type="InsertStringCommand" date="Thu Apr 14 11:49:12 EDT 2022" starttimestamp="1649862007572" timestamp="89344764" timestamp2="89344764">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="6242" _type="InsertStringCommand" date="Thu Apr 14 11:49:12 EDT 2022" starttimestamp="1649862007572" timestamp="89344933" timestamp2="89344933">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6243" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:49:13 EDT 2022" starttimestamp="1649862007572" timestamp="89345700" />
  <Command __id="6244" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:49:13 EDT 2022" starttimestamp="1649862007572" timestamp="89345799" />
  <Command __id="6245" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:49:13 EDT 2022" starttimestamp="1649862007572" timestamp="89345847" />
  <Command __id="6247" _type="PauseCommand" date="Thu Apr 14 11:49:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89349344">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3497]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6246" _type="SelectTextCommand" caretOffset="1045" date="Thu Apr 14 11:49:16 EDT 2022" end="1060" start="1045" starttimestamp="1649862007572" timestamp="89349344" />
  <Command __id="6248" _type="CopyCommand" date="Thu Apr 14 11:49:17 EDT 2022" starttimestamp="1649862007572" timestamp="89349519" />
  <Command __id="6146" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:47:45 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10052" projectName="A6" starttimestamp="1649862007572" timestamp="89257736">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	p"), Diff(DELETE,"rotected"), Diff(INSERT,"ublic"), Diff(EQUAL," String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	protected int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	public String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	protected int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <DocumentChange __id="6181" _type="Insert" date="Thu Apr 14 11:49:04 EDT 2022" docASTNodeCount="1175" docActiveCodeLength="9149" docExpressionCount="846" docLength="10054" length="2" offset="2674" repeat="2" starttimestamp="1649862007572" timestamp="89337263" timestamp2="89337770">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6187" _type="Insert" date="Thu Apr 14 11:49:07 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10084" length="30" offset="2706" repeat="28" starttimestamp="1649862007572" timestamp="89339440" timestamp2="89344927">
    <text><![CDATA[
	public int aProposalNumber;]]></text>
  </DocumentChange>
  <Command __id="6250" _type="PauseCommand" date="Thu Apr 14 11:49:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89350663">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1144]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6251" _type="MoveCaretCommand" caretOffset="1527" date="Thu Apr 14 11:49:18 EDT 2022" docOffset="2033" starttimestamp="1649862007572" timestamp="89350741" />
  <Command __id="6253" _type="PauseCommand" date="Thu Apr 14 11:49:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89352618">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1877]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6252" _type="MoveCaretCommand" caretOffset="1497" date="Thu Apr 14 11:49:20 EDT 2022" docOffset="2003" starttimestamp="1649862007572" timestamp="89352618" />
  <Command __id="6254" _type="MoveCaretCommand" caretOffset="1497" date="Thu Apr 14 11:49:20 EDT 2022" docOffset="2003" starttimestamp="1649862007572" timestamp="89352618" />
  <Command __id="6256" _type="InsertStringCommand" date="Thu Apr 14 11:49:20 EDT 2022" starttimestamp="1649862007572" timestamp="89352971" timestamp2="89352971">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6257" _type="InsertStringCommand" date="Thu Apr 14 11:49:20 EDT 2022" starttimestamp="1649862007572" timestamp="89352971" timestamp2="89352971">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6258" _type="MoveCaretCommand" caretOffset="1498" date="Thu Apr 14 11:49:20 EDT 2022" docOffset="2004" starttimestamp="1649862007572" timestamp="89353134" />
  <Command __id="6259" _type="MoveCaretCommand" caretOffset="1498" date="Thu Apr 14 11:49:20 EDT 2022" docOffset="2004" starttimestamp="1649862007572" timestamp="89353134" />
  <Command __id="6261" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:49:21 EDT 2022" starttimestamp="1649862007572" timestamp="89354083" />
  <Command __id="6262" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:49:21 EDT 2022" starttimestamp="1649862007572" timestamp="89354083" />
  <Command __id="6264" _type="InsertStringCommand" date="Thu Apr 14 11:49:21 EDT 2022" starttimestamp="1649862007572" timestamp="89354324" timestamp2="89354324">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6265" _type="InsertStringCommand" date="Thu Apr 14 11:49:21 EDT 2022" starttimestamp="1649862007572" timestamp="89354324" timestamp2="89354324">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6267" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354463" timestamp2="89354463">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6268" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354463" timestamp2="89354463">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6270" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354525" timestamp2="89354525">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6271" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354525" timestamp2="89354525">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6273" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354624" timestamp2="89354624">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6274" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354624" timestamp2="89354624">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6276" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354749" timestamp2="89354749">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6277" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354750" timestamp2="89354750">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6279" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354854" timestamp2="89354854">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6280" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89354854" timestamp2="89354854">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6282" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89355006" timestamp2="89355006">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6283" _type="InsertStringCommand" date="Thu Apr 14 11:49:22 EDT 2022" starttimestamp="1649862007572" timestamp="89355006" timestamp2="89355006">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6284" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 11:49:22 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="89355008" />
  <Command __id="6286" _type="PasteCommand" date="Thu Apr 14 11:49:23 EDT 2022" starttimestamp="1649862007572" timestamp="89355559" />
  <Command __id="6288" _type="PauseCommand" date="Thu Apr 14 11:49:24 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89356651">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1092]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6287" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:49:24 EDT 2022" starttimestamp="1649862007572" timestamp="89356651" />
  <Command __id="6289" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 11:49:24 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="89356729" />
  <Command __id="6290" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:49:24 EDT 2022" starttimestamp="1649862007572" timestamp="89356753" />
  <Command __id="6291" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:49:24 EDT 2022" starttimestamp="1649862007572" timestamp="89356786" />
  <Command __id="6293" _type="PauseCommand" date="Thu Apr 14 11:49:26 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89358982">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2195]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6292" _type="SelectTextCommand" caretOffset="1356" date="Thu Apr 14 11:49:26 EDT 2022" end="1370" start="1356" starttimestamp="1649862007572" timestamp="89358981" />
  <Command __id="6294" _type="SelectTextCommand" caretOffset="1356" date="Thu Apr 14 11:49:26 EDT 2022" end="1370" start="1356" starttimestamp="1649862007572" timestamp="89358982" />
  <Command __id="6249" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:49:18 EDT 2022" docASTNodeCount="281" docActiveCodeLength="2130" docExpressionCount="188" docLength="2327" projectName="A6" starttimestamp="1649862007572" timestamp="89350663">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import client.ClientRemoteObjectNIO;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.AnNIOManagerPrintClient;¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})¶public class ClientReadThread implements ReadThreadInterface{¶	final ClientRemoteObjectNIO client;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ClientReadThread (final ClientRemoteObjectNIO aClient) {¶		client = aClient;¶	}¶	¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();¶			¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			String aMessageString = new String(originalMessage.array());¶			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);¶			¶			¶			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();¶			¶			¶			ProposalLearnedNotificationReceived.newCase(this, "), Diff(INSERT,"client."), Diff(EQUAL,"CLIENT_NAME, proposalNumber, a"), Diff(DELETE,"NewCommand"), Diff(INSERT,"MessageString"), Diff(EQUAL,");¶			commandProcessor.processCommand(aMessageString);¶			ProposedStateSet.newCase(this, "), Diff(INSERT,"client."), Diff(EQUAL,"CLIENT_NAME, proposalNumber, a"), Diff(DELETE,"NewCommand"), Diff(INSERT,"MessageString"), Diff(EQUAL,");¶		¶		}¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package readThread;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ArrayBlockingQueue;

import client.ClientRemoteObjectNIO;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.AnNIOManagerPrintClient;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;


@Tags({DistributedTags.NIO, DistributedTags.CLIENT_READ_THREAD})
public class ClientReadThread implements ReadThreadInterface{
	final ClientRemoteObjectNIO client;
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	
	public ClientReadThread (final ClientRemoteObjectNIO aClient) {
		client = aClient;
	}
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			synchronized (this) {
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					break; // this breaks out of run loop then thread terminates
				}
			}
			
			System.out.println("IN RUN METHOD OF CLIENT READ THREAD");
			
			ArrayBlockingQueue<ByteBuffer> boundedBuffer = client.getBoundedBuffer();
			
			
					
			ByteBuffer originalMessage = null;
			try {
				originalMessage = boundedBuffer.take();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			String aMessageString = new String(originalMessage.array());
			System.out.println("SERVER MESSAGE RECIEVED: "+aMessageString);
			
			
			HalloweenCommandProcessor commandProcessor = client.getCommandProcessor();
			
			
			ProposalLearnedNotificationReceived.newCase(this, client.CLIENT_NAME, proposalNumber, aMessageString);
			commandProcessor.processCommand(aMessageString);
			ProposedStateSet.newCase(this, client.CLIENT_NAME, proposalNumber, aMessageString);
		
		}
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public synchronized void notifyThread() {
		// TODO This should be when a line is read
		this.notify();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="6255" _type="Replace" date="Thu Apr 14 11:49:20 EDT 2022" docASTNodeCount="281" docActiveCodeLength="2117" docExpressionCount="188" docLength="2314" endLine="61" insertionLength="1" int_docASTNodeCount="280" int_docActiveCodeLength="2116" int_docExpressionCount="187" int_docLength="2313" length="14" offset="2003" startLine="61" starttimestamp="1649862007572" timestamp="89352962">
    <deletedText><![CDATA[proposalNumber]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6260" _type="Delete" date="Thu Apr 14 11:49:21 EDT 2022" docASTNodeCount="280" docActiveCodeLength="2116" docExpressionCount="187" docLength="2313" endLine="61" length="1" offset="2003" startLine="61" starttimestamp="1649862007572" timestamp="89354080">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="6263" _type="Insert" date="Thu Apr 14 11:49:21 EDT 2022" docASTNodeCount="283" docActiveCodeLength="2138" docExpressionCount="190" docLength="2335" length="22" offset="2003" repeat="8" starttimestamp="1649862007572" timestamp="89354321" timestamp2="89355555">
    <text><![CDATA[client.aProposalNumber]]></text>
  </DocumentChange>
  <Command __id="6296" _type="PauseCommand" date="Thu Apr 14 11:49:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89360052">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1070]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="6295" _type="Replace" date="Thu Apr 14 11:49:27 EDT 2022" docASTNodeCount="283" docActiveCodeLength="2125" docExpressionCount="190" docLength="2322" endLine="59" insertionLength="1" int_docASTNodeCount="282" int_docActiveCodeLength="2124" int_docExpressionCount="189" int_docLength="2321" length="14" offset="1862" startLine="59" starttimestamp="1649862007572" timestamp="89360052">
    <deletedText><![CDATA[proposalNumber]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <Command __id="6297" _type="InsertStringCommand" date="Thu Apr 14 11:49:27 EDT 2022" starttimestamp="1649862007572" timestamp="89360061" timestamp2="89360061">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6298" _type="InsertStringCommand" date="Thu Apr 14 11:49:27 EDT 2022" starttimestamp="1649862007572" timestamp="89360061" timestamp2="89360061">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6300" _type="InsertStringCommand" date="Thu Apr 14 11:49:27 EDT 2022" starttimestamp="1649862007572" timestamp="89360216" timestamp2="89360216">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6301" _type="InsertStringCommand" date="Thu Apr 14 11:49:27 EDT 2022" starttimestamp="1649862007572" timestamp="89360216" timestamp2="89360216">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6303" _type="InsertStringCommand" date="Thu Apr 14 11:49:27 EDT 2022" starttimestamp="1649862007572" timestamp="89360265" timestamp2="89360265">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6304" _type="InsertStringCommand" date="Thu Apr 14 11:49:27 EDT 2022" starttimestamp="1649862007572" timestamp="89360265" timestamp2="89360265">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6306" _type="InsertStringCommand" date="Thu Apr 14 11:49:27 EDT 2022" starttimestamp="1649862007572" timestamp="89360385" timestamp2="89360385">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6307" _type="InsertStringCommand" date="Thu Apr 14 11:49:27 EDT 2022" starttimestamp="1649862007572" timestamp="89360385" timestamp2="89360385">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6309" _type="InsertStringCommand" date="Thu Apr 14 11:49:28 EDT 2022" starttimestamp="1649862007572" timestamp="89360499" timestamp2="89360499">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6310" _type="InsertStringCommand" date="Thu Apr 14 11:49:28 EDT 2022" starttimestamp="1649862007572" timestamp="89360499" timestamp2="89360499">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6312" _type="InsertStringCommand" date="Thu Apr 14 11:49:28 EDT 2022" starttimestamp="1649862007572" timestamp="89360622" timestamp2="89360622">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6313" _type="InsertStringCommand" date="Thu Apr 14 11:49:28 EDT 2022" starttimestamp="1649862007572" timestamp="89360622" timestamp2="89360622">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6315" _type="InsertStringCommand" date="Thu Apr 14 11:49:28 EDT 2022" starttimestamp="1649862007572" timestamp="89360784" timestamp2="89360784">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6316" _type="InsertStringCommand" date="Thu Apr 14 11:49:28 EDT 2022" starttimestamp="1649862007572" timestamp="89360784" timestamp2="89360784">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6317" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 11:49:28 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="89360787" />
  <Command __id="6318" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89361369" type="Run" />
  <Command __id="6320" _type="PauseCommand" date="Thu Apr 14 11:49:30 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89362653">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1284]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="6319" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 11:49:30 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="89362653" />
  <Command __id="6322" _type="InsertStringCommand" date="Thu Apr 14 11:49:30 EDT 2022" starttimestamp="1649862007572" timestamp="89362661" timestamp2="89362661">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6323" _type="InsertStringCommand" date="Thu Apr 14 11:49:30 EDT 2022" starttimestamp="1649862007572" timestamp="89362661" timestamp2="89362661">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6324" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 11:49:31 EDT 2022" starttimestamp="1649862007572" timestamp="89363524" />
  <Command __id="6325" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:49:31 EDT 2022" starttimestamp="1649862007572" timestamp="89363626" />
  <Command __id="6326" _type="EclipseCommand" commandID="" date="Thu Apr 14 11:49:31 EDT 2022" starttimestamp="1649862007572" timestamp="89363657" />
  <Command __id="6328" _type="PauseCommand" date="Thu Apr 14 11:49:38 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89370857">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7200]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6327" _type="MoveCaretCommand" caretOffset="1545" date="Thu Apr 14 11:49:38 EDT 2022" docOffset="2051" starttimestamp="1649862007572" timestamp="89370857" />
  <Command __id="6329" _type="MoveCaretCommand" caretOffset="1545" date="Thu Apr 14 11:49:38 EDT 2022" docOffset="2051" starttimestamp="1649862007572" timestamp="89370858" />
  <Command __id="6331" _type="InsertStringCommand" date="Thu Apr 14 11:49:38 EDT 2022" starttimestamp="1649862007572" timestamp="89371238" timestamp2="89371238">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6332" _type="InsertStringCommand" date="Thu Apr 14 11:49:38 EDT 2022" starttimestamp="1649862007572" timestamp="89371238" timestamp2="89371238">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6334" _type="InsertStringCommand" date="Thu Apr 14 11:49:39 EDT 2022" starttimestamp="1649862007572" timestamp="89372117" timestamp2="89372117">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6335" _type="InsertStringCommand" date="Thu Apr 14 11:49:39 EDT 2022" starttimestamp="1649862007572" timestamp="89372117" timestamp2="89372117">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6337" _type="InsertStringCommand" date="Thu Apr 14 11:49:39 EDT 2022" starttimestamp="1649862007572" timestamp="89372223" timestamp2="89372223">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6338" _type="InsertStringCommand" date="Thu Apr 14 11:49:39 EDT 2022" starttimestamp="1649862007572" timestamp="89372223" timestamp2="89372223">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="6340" _type="InsertStringCommand" date="Thu Apr 14 11:49:39 EDT 2022" starttimestamp="1649862007572" timestamp="89372271" timestamp2="89372271">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6341" _type="InsertStringCommand" date="Thu Apr 14 11:49:39 EDT 2022" starttimestamp="1649862007572" timestamp="89372271" timestamp2="89372271">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6343" _type="InsertStringCommand" date="Thu Apr 14 11:49:39 EDT 2022" starttimestamp="1649862007572" timestamp="89372375" timestamp2="89372375">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6344" _type="InsertStringCommand" date="Thu Apr 14 11:49:39 EDT 2022" starttimestamp="1649862007572" timestamp="89372375" timestamp2="89372375">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6346" _type="InsertStringCommand" date="Thu Apr 14 11:49:40 EDT 2022" starttimestamp="1649862007572" timestamp="89372502" timestamp2="89372502">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6347" _type="InsertStringCommand" date="Thu Apr 14 11:49:40 EDT 2022" starttimestamp="1649862007572" timestamp="89372502" timestamp2="89372502">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6349" _type="InsertStringCommand" date="Thu Apr 14 11:49:40 EDT 2022" starttimestamp="1649862007572" timestamp="89372607" timestamp2="89372607">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6350" _type="InsertStringCommand" date="Thu Apr 14 11:49:40 EDT 2022" starttimestamp="1649862007572" timestamp="89372607" timestamp2="89372607">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="6352" _type="InsertStringCommand" date="Thu Apr 14 11:49:40 EDT 2022" starttimestamp="1649862007572" timestamp="89372747" timestamp2="89372747">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6353" _type="InsertStringCommand" date="Thu Apr 14 11:49:40 EDT 2022" starttimestamp="1649862007572" timestamp="89372747" timestamp2="89372747">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6354" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 11:49:40 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="89372750" />
  <Command __id="6355" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 11:49:41 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="89373443" />
  <Command __id="6357" _type="InsertStringCommand" date="Thu Apr 14 11:49:41 EDT 2022" starttimestamp="1649862007572" timestamp="89373449" timestamp2="89373449">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6358" _type="InsertStringCommand" date="Thu Apr 14 11:49:41 EDT 2022" starttimestamp="1649862007572" timestamp="89373449" timestamp2="89373449">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6360" _type="InsertStringCommand" date="Thu Apr 14 11:49:41 EDT 2022" starttimestamp="1649862007572" timestamp="89374277" timestamp2="89374277">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6361" _type="InsertStringCommand" date="Thu Apr 14 11:49:41 EDT 2022" starttimestamp="1649862007572" timestamp="89374278" timestamp2="89374278">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6363" _type="InsertStringCommand" date="Thu Apr 14 11:49:41 EDT 2022" starttimestamp="1649862007572" timestamp="89374406" timestamp2="89374406">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6364" _type="InsertStringCommand" date="Thu Apr 14 11:49:41 EDT 2022" starttimestamp="1649862007572" timestamp="89374406" timestamp2="89374406">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6366" _type="InsertStringCommand" date="Thu Apr 14 11:49:42 EDT 2022" starttimestamp="1649862007572" timestamp="89374719" timestamp2="89374719">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6367" _type="InsertStringCommand" date="Thu Apr 14 11:49:42 EDT 2022" starttimestamp="1649862007572" timestamp="89374719" timestamp2="89374719">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6369" _type="PauseCommand" date="Thu Apr 14 11:49:43 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89376359">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1640]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="6378" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Thu Apr 14 11:49:56 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="89388680" type="Run" />
  <Command __id="6380" _type="RunCommand" className="/A6/src/server/Server.java" date="Thu Apr 14 11:49:56 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="89388680" type="Run" />
  <Command __id="6381" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89388795" type="Run" />
  <Command __id="6382" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:56 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89388807" type="Run" />
  <Command __id="6383" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89388811" type="Run" />
  <Command __id="6384" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89389443" type="Run" />
  <Command __id="6385" _type="ConsoleOutput" date="Thu Apr 14 11:49:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="89389508" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.6819306377749182
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(EQUAL,"Re"), Diff(DELETE,"adCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:63145]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0.5148313134451133 (Closed)¶Explanation: An existing connection was forcibly closed by the remote "), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:local"), Diff(EQUAL,"host¶"), Diff(DELETE,"AR"), Diff(INSERT,"H"), Diff(EQUAL,"ead"), Diff(DELETE,"Command for java.nio.channels.SocketChannel[connected local=/127.0.0.1:9000 remote=/127.0.0.1:63151]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"less:false¶Client name:Generic Client:0.6819306377749182¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6386" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89389781" type="Run" />
  <Command __id="6387" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89389806" type="Run" />
  <Command __id="6388" _type="ConsoleOutput" date="Thu Apr 14 11:49:57 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="89389895" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.6819306377749182¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6389" _type="RunCommand" className="/A6/src/client/Client.java" date="Thu Apr 14 11:49:58 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="89390598" type="Run" />
  <Command __id="6390" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:58 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89390715" type="Run" />
  <Command __id="6391" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89390719" type="Run" />
  <Command __id="6392" _type="RunCommand" className="/A6/src/client/Client.java" date="Thu Apr 14 11:49:58 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="89391231" type="Run" />
  <Command __id="6393" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89391317" type="Run" />
  <Command __id="6394" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:59 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89391474" type="Run" />
  <Command __id="6395" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89391479" type="Run" />
  <Command __id="6396" _type="ConsoleOutput" date="Thu Apr 14 11:49:59 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="89391635" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.344326906245519
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.344326906245519"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6397" _type="RunCommand" className="/A6/src/client/Client.java" date="Thu Apr 14 11:49:59 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="89391978" type="Run" />
  <Command __id="6398" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:59 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89392237" type="Run" />
  <Command __id="6399" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:49:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89392247" type="Run" />
  <Command __id="6400" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:50:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89392450" type="Run" />
  <Command __id="6401" _type="ConsoleOutput" date="Thu Apr 14 11:50:00 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="89392660" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.9388129436099093
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"344326906245519"), Diff(INSERT,"9388129436099093"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6402" _type="ShellCommand" date="Thu Apr 14 11:50:00 EDT 2022" starttimestamp="1649862007572" timestamp="89392877" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6442" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:50:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89424291" type="Run" />
  <Command __id="6444" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:50:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89424761" type="Run" />
  <Command __id="6446" _type="PauseCommand" date="Thu Apr 14 11:50:37 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89429980">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5219]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="6466" _type="ShellCommand" date="Thu Apr 14 11:51:09 EDT 2022" starttimestamp="1649862007572" timestamp="89462255" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6469" _type="PauseCommand" date="Thu Apr 14 11:51:17 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89469501">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7246]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="6478" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:51:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89484515" type="Run" />
  <Command __id="6481" _type="PauseCommand" date="Thu Apr 14 11:51:41 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89493620">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[9105]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="6490" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:51:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89508638" type="Run" />
  <DocumentChange __id="6299" _type="Insert" date="Thu Apr 14 11:49:27 EDT 2022" docASTNodeCount="285" docActiveCodeLength="2146" docExpressionCount="192" docLength="2343" length="21" offset="1863" repeat="7" starttimestamp="1649862007572" timestamp="89360211" timestamp2="89362657">
    <text><![CDATA[lient.aProposalNumber]]></text>
  </DocumentChange>
  <DocumentChange __id="6330" _type="Insert" date="Thu Apr 14 11:49:38 EDT 2022" docASTNodeCount="290" docActiveCodeLength="2176" docExpressionCount="196" docLength="2373" length="30" offset="2051" repeat="12" starttimestamp="1649862007572" timestamp="89371231" timestamp2="89374715">
    <text><![CDATA[
			client.aProposalNumber++;]]></text>
  </DocumentChange>
  <Command __id="6493" _type="PauseCommand" date="Thu Apr 14 11:52:02 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89514666">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6028]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6494" _type="MoveCaretCommand" caretOffset="3011" date="Thu Apr 14 11:52:02 EDT 2022" docOffset="3011" starttimestamp="1649862007572" timestamp="89514792" />
  <Command __id="6492" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:52:02 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="89514666">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6496" _type="PauseCommand" date="Thu Apr 14 11:52:37 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="89549801">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[35009]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6497" _type="SelectTextCommand" caretOffset="1045" date="Thu Apr 14 11:52:37 EDT 2022" end="1060" start="1045" starttimestamp="1649862007572" timestamp="89549882" />
  <Command __id="6495" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:52:37 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10084" projectName="A6" starttimestamp="1649862007572" timestamp="89549801">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	"), Diff(INSERT,"//"), Diff(EQUAL,"protected int aProposalNumber;¶	"), Diff(INSERT,"public int aProposalNumber;¶	"), Diff(EQUAL,"¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	public String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	//protected int aProposalNumber;
	public int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <Command __id="6499" _type="PauseCommand" date="Thu Apr 14 11:52:47 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89560046">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[10164]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6500" _type="MoveCaretCommand" caretOffset="3260" date="Thu Apr 14 11:52:47 EDT 2022" docOffset="3260" starttimestamp="1649862007572" timestamp="89560160" />
  <Command __id="6498" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:52:47 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" projectName="A6" starttimestamp="1649862007572" timestamp="89560046">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6502" _type="PauseCommand" date="Thu Apr 14 11:52:49 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89561842">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1682]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6503" _type="MoveCaretCommand" caretOffset="5585" date="Thu Apr 14 11:52:49 EDT 2022" docOffset="7241" starttimestamp="1649862007572" timestamp="89561924" />
  <Command __id="6501" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:52:49 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="89561842">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6505" _type="PauseCommand" date="Thu Apr 14 11:54:08 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="89641372">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[79448]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6506" _type="MoveCaretCommand" caretOffset="3011" date="Thu Apr 14 11:54:09 EDT 2022" docOffset="3011" starttimestamp="1649862007572" timestamp="89641489" />
  <Command __id="6508" _type="PauseCommand" date="Thu Apr 14 11:54:16 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89649248">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7759]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6507" _type="MoveCaretCommand" caretOffset="3314" date="Thu Apr 14 11:54:16 EDT 2022" docOffset="3314" starttimestamp="1649862007572" timestamp="89649248" />
  <Command __id="6509" _type="MoveCaretCommand" caretOffset="3314" date="Thu Apr 14 11:54:16 EDT 2022" docOffset="3314" starttimestamp="1649862007572" timestamp="89649248" />
  <Command __id="6504" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:54:08 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3802" docExpressionCount="344" docLength="4286" projectName="A6" starttimestamp="1649862007572" timestamp="89641372">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6511" _type="PauseCommand" date="Thu Apr 14 11:54:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89650697">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1449]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="6510" _type="Insert" date="Thu Apr 14 11:54:18 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3804" docExpressionCount="344" docLength="4288" length="2" offset="3314" repeat="2" starttimestamp="1649862007572" timestamp="89650697" timestamp2="89651063">
    <text><![CDATA[: ]]></text>
  </DocumentChange>
  <Command __id="6512" _type="InsertStringCommand" date="Thu Apr 14 11:54:18 EDT 2022" starttimestamp="1649862007572" timestamp="89650700" timestamp2="89650700">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="6513" _type="InsertStringCommand" date="Thu Apr 14 11:54:18 EDT 2022" starttimestamp="1649862007572" timestamp="89650700" timestamp2="89650700">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="6515" _type="InsertStringCommand" date="Thu Apr 14 11:54:18 EDT 2022" starttimestamp="1649862007572" timestamp="89651068" timestamp2="89651068">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6516" _type="InsertStringCommand" date="Thu Apr 14 11:54:18 EDT 2022" starttimestamp="1649862007572" timestamp="89651068" timestamp2="89651068">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6517" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 11:54:19 EDT 2022" starttimestamp="1649862007572" timestamp="89651519" />
  <Command __id="6518" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 11:54:19 EDT 2022" starttimestamp="1649862007572" timestamp="89651519" />
  <DocumentChange __id="6519" _type="Insert" date="Thu Apr 14 11:54:19 EDT 2022" docASTNodeCount="519" docActiveCodeLength="3811" docExpressionCount="345" docLength="4295" length="7" offset="3317" repeat="7" starttimestamp="1649862007572" timestamp="89652185" timestamp2="89654304">
    <text><![CDATA[, macha]]></text>
  </DocumentChange>
  <Command __id="6520" _type="InsertStringCommand" date="Thu Apr 14 11:54:19 EDT 2022" starttimestamp="1649862007572" timestamp="89652189" timestamp2="89652189">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="6521" _type="InsertStringCommand" date="Thu Apr 14 11:54:19 EDT 2022" starttimestamp="1649862007572" timestamp="89652189" timestamp2="89652189">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="6523" _type="InsertStringCommand" date="Thu Apr 14 11:54:19 EDT 2022" starttimestamp="1649862007572" timestamp="89652301" timestamp2="89652301">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6524" _type="InsertStringCommand" date="Thu Apr 14 11:54:19 EDT 2022" starttimestamp="1649862007572" timestamp="89652301" timestamp2="89652301">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6527" _type="PauseCommand" date="Thu Apr 14 11:54:21 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89653723">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1422]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="6526" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89653723" timestamp2="89653723">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="6528" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89653723" timestamp2="89653723">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="6530" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89653809" timestamp2="89653809">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6531" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89653809" timestamp2="89653809">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6533" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89654039" timestamp2="89654039">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6534" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89654039" timestamp2="89654039">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6536" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89654127" timestamp2="89654127">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6537" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89654127" timestamp2="89654127">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6539" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89654308" timestamp2="89654308">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6540" _type="InsertStringCommand" date="Thu Apr 14 11:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="89654308" timestamp2="89654308">
    <data><![CDATA[a]]></data>
  </Command>
  <DocumentChange __id="6541" _type="Delete" date="Thu Apr 14 11:54:22 EDT 2022" docASTNodeCount="519" docActiveCodeLength="3808" docExpressionCount="345" docLength="4292" endLine="109" length="3" offset="3321" repeat="3" startLine="109" starttimestamp="1649862007572" timestamp="89654731" timestamp2="89655053">
    <text><![CDATA[cha]]></text>
  </DocumentChange>
  <Command __id="6542" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="89654733" />
  <Command __id="6543" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="89654733" />
  <Command __id="6545" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="89654892" />
  <Command __id="6546" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="89654892" />
  <Command __id="6548" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="89655056" />
  <Command __id="6549" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="89655056" />
  <DocumentChange __id="6550" _type="Insert" date="Thu Apr 14 11:54:22 EDT 2022" docASTNodeCount="519" docActiveCodeLength="3809" docExpressionCount="345" docLength="4293" length="1" offset="3321" starttimestamp="1649862007572" timestamp="89655371">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="6551" _type="InsertStringCommand" date="Thu Apr 14 11:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="89655376" timestamp2="89655376">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6552" _type="InsertStringCommand" date="Thu Apr 14 11:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="89655376" timestamp2="89655376">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="6553" _type="Delete" date="Thu Apr 14 11:54:23 EDT 2022" docASTNodeCount="518" docActiveCodeLength="3804" docExpressionCount="344" docLength="4288" endLine="109" length="5" offset="3317" repeat="5" startLine="109" starttimestamp="1649862007572" timestamp="89655495" timestamp2="89656300">
    <text><![CDATA[, mae]]></text>
  </DocumentChange>
  <Command __id="6554" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89655497" />
  <Command __id="6555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89655497" />
  <Command __id="6557" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89655751" />
  <Command __id="6558" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89655751" />
  <Command __id="6560" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89655951" />
  <Command __id="6561" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89655951" />
  <Command __id="6563" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89656142" />
  <Command __id="6564" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89656142" />
  <Command __id="6566" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89656304" />
  <Command __id="6567" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 11:54:23 EDT 2022" starttimestamp="1649862007572" timestamp="89656304" />
  <Command __id="6569" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89656534" timestamp2="89656534">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6570" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89656534" timestamp2="89656534">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="6572" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89656775" timestamp2="89656775">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6573" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89656775" timestamp2="89656775">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="6575" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89656997" timestamp2="89656997">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="6576" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89656997" timestamp2="89656997">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="6578" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89657118" timestamp2="89657118">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6579" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89657118" timestamp2="89657118">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="6581" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89657363" timestamp2="89657363">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6582" _type="InsertStringCommand" date="Thu Apr 14 11:54:24 EDT 2022" starttimestamp="1649862007572" timestamp="89657363" timestamp2="89657363">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="6584" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657456" timestamp2="89657456">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6585" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657456" timestamp2="89657456">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="6587" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657566" timestamp2="89657566">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6588" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657566" timestamp2="89657566">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="6590" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657681" timestamp2="89657681">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6591" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657681" timestamp2="89657681">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="6593" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657772" timestamp2="89657772">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6594" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657772" timestamp2="89657772">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="6596" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657922" timestamp2="89657922">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6597" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89657922" timestamp2="89657922">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="6599" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89658031" timestamp2="89658031">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="6600" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89658032" timestamp2="89658032">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="6602" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89658261" timestamp2="89658261">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6603" _type="InsertStringCommand" date="Thu Apr 14 11:54:25 EDT 2022" starttimestamp="1649862007572" timestamp="89658261" timestamp2="89658261">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6621" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:55:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89705919" type="Run" />
  <Command __id="6623" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:55:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89706014" type="Run" />
  <DocumentChange __id="6568" _type="Insert" date="Thu Apr 14 11:54:24 EDT 2022" docASTNodeCount="522" docActiveCodeLength="3817" docExpressionCount="348" docLength="4301" length="13" offset="3317" repeat="13" starttimestamp="1649862007572" timestamp="89656530" timestamp2="89659018">
    <text><![CDATA[+ mechanism.t]]></text>
  </DocumentChange>
  <DocumentChange __id="6608" _type="Replace" date="Thu Apr 14 11:54:27 EDT 2022" docASTNodeCount="522" docActiveCodeLength="3826" docExpressionCount="348" docLength="4310" endLine="109" insertionLength="10" int_docASTNodeCount="522" int_docActiveCodeLength="3816" int_docExpressionCount="347" int_docLength="4300" length="1" offset="3329" startLine="109" starttimestamp="1649862007572" timestamp="89659704">
    <deletedText><![CDATA[t]]></deletedText>
    <insertedText><![CDATA[toString()]]></insertedText>
  </DocumentChange>
  <Command __id="6625" _type="PauseCommand" date="Thu Apr 14 11:55:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89708162">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2148]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6631" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:55:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89720927" type="Run" />
  <Command __id="6633" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:55:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89721021" type="Run" />
  <Command __id="6635" _type="PauseCommand" date="Thu Apr 14 11:55:30 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89723404">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2383]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6634" _type="MoveCaretCommand" caretOffset="336" date="Thu Apr 14 11:55:30 EDT 2022" docOffset="2011" starttimestamp="1649862007572" timestamp="89723404" />
  <Command __id="6636" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:55:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89724052" type="Run" />
  <Command __id="6638" _type="ShellCommand" date="Thu Apr 14 11:55:31 EDT 2022" starttimestamp="1649862007572" timestamp="89724146" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6639" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:55:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89724268" type="Run" />
  <Command __id="6640" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:55:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89724661" type="Run" />
  <Command __id="6641" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:55:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89724737" type="Run" />
  <Command __id="6643" _type="PauseCommand" date="Thu Apr 14 11:55:33 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89726381">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1643]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6642" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:55:33 EDT 2022" forward="true" matchWord="false" offset="2011" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89726380" wrapSearch="false">
    <searchString><![CDATA[mechanism]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6645" _type="PauseCommand" date="Thu Apr 14 11:55:50 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89743275">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[16895]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6644" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:55:50 EDT 2022" forward="true" matchWord="false" offset="7993" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89743275" wrapSearch="false">
    <searchString><![CDATA[getMechansim]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6647" _type="PauseCommand" date="Thu Apr 14 11:55:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89746408">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3133]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6646" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:55:53 EDT 2022" forward="true" matchWord="false" offset="7993" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89746408" wrapSearch="false">
    <searchString><![CDATA[getMec]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6648" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:55:54 EDT 2022" forward="true" matchWord="false" offset="7993" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89746737" wrapSearch="false">
    <searchString><![CDATA[getMec]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6650" _type="PauseCommand" date="Thu Apr 14 11:56:01 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89753548">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[6811]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6649" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:56:01 EDT 2022" forward="false" matchWord="false" offset="7993" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89753548" wrapSearch="false">
    <searchString><![CDATA[getIPC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6651" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:56:01 EDT 2022" forward="false" matchWord="false" offset="8012" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89754119" wrapSearch="false">
    <searchString><![CDATA[getIPC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6652" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:56:01 EDT 2022" forward="false" matchWord="false" offset="8012" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89754418" wrapSearch="false">
    <searchString><![CDATA[getIPC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6654" _type="PauseCommand" date="Thu Apr 14 11:56:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89756397">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1979]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6653" _type="ShellCommand" date="Thu Apr 14 11:56:03 EDT 2022" starttimestamp="1649862007572" timestamp="89756397" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6624" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:55:15 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10084" projectName="A6" starttimestamp="1649862007572" timestamp="89708162">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6656" _type="PauseCommand" date="Thu Apr 14 11:56:21 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89774154">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[17757]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6657" _type="MoveCaretCommand" caretOffset="3339" date="Thu Apr 14 11:56:21 EDT 2022" docOffset="3339" starttimestamp="1649862007572" timestamp="89774235" />
  <Command __id="6659" _type="PauseCommand" date="Thu Apr 14 11:56:31 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89784030">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9795]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6658" _type="MoveCaretCommand" caretOffset="1885" date="Thu Apr 14 11:56:31 EDT 2022" docOffset="1885" starttimestamp="1649862007572" timestamp="89784030" />
  <Command __id="6660" _type="MoveCaretCommand" caretOffset="1885" date="Thu Apr 14 11:56:31 EDT 2022" docOffset="1885" starttimestamp="1649862007572" timestamp="89784030" />
  <Command __id="6662" _type="InsertStringCommand" date="Thu Apr 14 11:56:32 EDT 2022" starttimestamp="1649862007572" timestamp="89784669" timestamp2="89784669">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6663" _type="InsertStringCommand" date="Thu Apr 14 11:56:32 EDT 2022" starttimestamp="1649862007572" timestamp="89784670" timestamp2="89784670">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6665" _type="InsertStringCommand" date="Thu Apr 14 11:56:32 EDT 2022" starttimestamp="1649862007572" timestamp="89784780" timestamp2="89784780">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6666" _type="InsertStringCommand" date="Thu Apr 14 11:56:32 EDT 2022" starttimestamp="1649862007572" timestamp="89784780" timestamp2="89784780">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6667" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:56:32 EDT 2022" starttimestamp="1649862007572" timestamp="89785226" />
  <Command __id="6668" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:56:32 EDT 2022" starttimestamp="1649862007572" timestamp="89785226" />
  <Command __id="6669" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:56:32 EDT 2022" starttimestamp="1649862007572" timestamp="89785405" />
  <Command __id="6670" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:56:32 EDT 2022" starttimestamp="1649862007572" timestamp="89785405" />
  <Command __id="6671" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="89785592" />
  <Command __id="6672" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="89785592" />
  <Command __id="6673" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Thu Apr 14 11:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="89786013" />
  <Command __id="6674" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Thu Apr 14 11:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="89786013" />
  <Command __id="6675" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="89786262" />
  <Command __id="6676" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="89786262" />
  <Command __id="6677" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="89786418" />
  <Command __id="6678" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 11:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="89786418" />
  <Command __id="6680" _type="InsertStringCommand" date="Thu Apr 14 11:56:34 EDT 2022" starttimestamp="1649862007572" timestamp="89786826" timestamp2="89786826">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6681" _type="InsertStringCommand" date="Thu Apr 14 11:56:34 EDT 2022" starttimestamp="1649862007572" timestamp="89786826" timestamp2="89786826">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6683" _type="InsertStringCommand" date="Thu Apr 14 11:56:34 EDT 2022" starttimestamp="1649862007572" timestamp="89787184" timestamp2="89787184">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6684" _type="InsertStringCommand" date="Thu Apr 14 11:56:34 EDT 2022" starttimestamp="1649862007572" timestamp="89787184" timestamp2="89787184">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="6685" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:56:35 EDT 2022" starttimestamp="1649862007572" timestamp="89787529" />
  <Command __id="6686" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Thu Apr 14 11:56:35 EDT 2022" starttimestamp="1649862007572" timestamp="89787529" />
  <Command __id="6736" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 11:56:55 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="89808133" type="Run" />
  <Command __id="6738" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Thu Apr 14 11:56:55 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="89808133" type="Run" />
  <Command __id="6739" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:56:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89808357" type="Run" />
  <Command __id="6740" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:56:55 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89808373" type="Run" />
  <Command __id="6741" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:56:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89808376" type="Run" />
  <Command __id="6743" _type="PauseCommand" date="Thu Apr 14 11:56:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89810885">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2509]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6752" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:57:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89819608" type="Run" />
  <Command __id="6754" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:57:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89819609" type="Run" />
  <Command __id="6756" _type="PauseCommand" date="Thu Apr 14 11:57:26 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="89839071">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[19462]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6755" _type="ShellCommand" date="Thu Apr 14 11:57:26 EDT 2022" starttimestamp="1649862007572" timestamp="89839071" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6758" _type="PauseCommand" date="Thu Apr 14 11:57:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89841275">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2204]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6757" _type="ShellCommand" date="Thu Apr 14 11:57:28 EDT 2022" starttimestamp="1649862007572" timestamp="89841275" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6760" _type="PauseCommand" date="Thu Apr 14 11:57:37 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89849590">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8315]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6759" _type="ShellCommand" date="Thu Apr 14 11:57:37 EDT 2022" starttimestamp="1649862007572" timestamp="89849590" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6762" _type="SelectTextCommand" caretOffset="6337" date="Thu Apr 14 11:57:37 EDT 2022" end="6337" start="6331" starttimestamp="1649862007572" timestamp="89849872" />
  <Command __id="6763" _type="MoveCaretCommand" caretOffset="6349" date="Thu Apr 14 11:57:38 EDT 2022" docOffset="8024" starttimestamp="1649862007572" timestamp="89850626" />
  <Command __id="6765" _type="ShellCommand" date="Thu Apr 14 11:57:38 EDT 2022" starttimestamp="1649862007572" timestamp="89851382" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6767" _type="PauseCommand" date="Thu Apr 14 11:57:40 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89853389">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2006]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6766" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:57:40 EDT 2022" forward="false" matchWord="false" offset="8024" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89853388" wrapSearch="false">
    <searchString><![CDATA[localHost]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6769" _type="PauseCommand" date="Thu Apr 14 11:57:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89855657">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2269]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6768" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:57:43 EDT 2022" forward="true" matchWord="false" offset="8024" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89855657" wrapSearch="false">
    <searchString><![CDATA[localHost]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6771" _type="PauseCommand" date="Thu Apr 14 11:57:48 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89860638">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[4981]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6770" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:57:48 EDT 2022" forward="true" matchWord="false" offset="8024" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89860638" wrapSearch="false">
    <searchString><![CDATA[local]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6773" _type="PauseCommand" date="Thu Apr 14 11:57:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89862457">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1819]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6772" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:57:50 EDT 2022" forward="false" matchWord="false" offset="8024" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89862457" wrapSearch="false">
    <searchString><![CDATA[local]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6775" _type="PauseCommand" date="Thu Apr 14 11:57:51 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89863677">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1220]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6774" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:57:51 EDT 2022" forward="false" matchWord="false" offset="9434" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89863677" wrapSearch="false">
    <searchString><![CDATA[local]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6777" _type="PauseCommand" date="Thu Apr 14 11:57:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89866290">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2613]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6776" _type="ShellCommand" date="Thu Apr 14 11:57:53 EDT 2022" starttimestamp="1649862007572" timestamp="89866290" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6655" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:56:21 EDT 2022" docASTNodeCount="522" docActiveCodeLength="3826" docExpressionCount="348" docLength="4310" projectName="A6" starttimestamp="1649862007572" timestamp="89774154">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism"), Diff(DELETE,"""), Diff(INSERT,": "+ mechanism.toString()"), Diff(EQUAL,");¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: "+ mechanism.toString());

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		

}
]]></snapshot>
  </Command>
  <DocumentChange __id="6661" _type="Insert" date="Thu Apr 14 11:56:32 EDT 2022" docASTNodeCount="516" docActiveCodeLength="3771" docExpressionCount="345" docLength="4312" length="2" offset="1885" repeat="2" starttimestamp="1649862007572" timestamp="89784666" timestamp2="89784776">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6679" _type="Insert" date="Thu Apr 14 11:56:34 EDT 2022" docASTNodeCount="505" docActiveCodeLength="3706" docExpressionCount="337" docLength="4314" length="2" offset="1996" repeat="2" starttimestamp="1649862007572" timestamp="89786821" timestamp2="89787175">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6691" _type="Insert" date="Thu Apr 14 11:56:35 EDT 2022" docASTNodeCount="498" docActiveCodeLength="3653" docExpressionCount="331" docLength="4316" length="2" offset="2067" repeat="2" starttimestamp="1649862007572" timestamp="89788355" timestamp2="89788468">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6761" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:57:37 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10084" projectName="A6" starttimestamp="1649862007572" timestamp="89849689">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6779" _type="PauseCommand" date="Thu Apr 14 11:57:57 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89870418">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4128]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6780" _type="MoveCaretCommand" caretOffset="5585" date="Thu Apr 14 11:57:58 EDT 2022" docOffset="7241" starttimestamp="1649862007572" timestamp="89870499" />
  <Command __id="6781" _type="MoveCaretCommand" caretOffset="4336" date="Thu Apr 14 11:57:58 EDT 2022" docOffset="5992" starttimestamp="1649862007572" timestamp="89871145" />
  <Command __id="6783" _type="ShellCommand" date="Thu Apr 14 11:57:59 EDT 2022" starttimestamp="1649862007572" timestamp="89871795" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6785" _type="PauseCommand" date="Thu Apr 14 11:58:00 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89873071">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1276]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6784" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:58:00 EDT 2022" forward="false" matchWord="false" offset="5992" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89873071" wrapSearch="false">
    <searchString><![CDATA[local]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6787" _type="PauseCommand" date="Thu Apr 14 11:58:03 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89875586">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2515]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6805" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:59:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89936851" type="Run" />
  <Command __id="6807" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 11:59:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="89936851" type="Run" />
  <Command __id="6809" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 11:59:04 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="89937376" />
  <Command __id="6811" _type="PauseCommand" date="Thu Apr 14 11:59:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89938659">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1283]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6810" _type="MoveCaretCommand" caretOffset="360" date="Thu Apr 14 11:59:06 EDT 2022" docOffset="1858" starttimestamp="1649862007572" timestamp="89938659" />
  <Command __id="6814" _type="PauseCommand" date="Thu Apr 14 11:59:08 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89941378">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2719]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6813" _type="ShellCommand" date="Thu Apr 14 11:59:08 EDT 2022" starttimestamp="1649862007572" timestamp="89941378" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6816" _type="PauseCommand" date="Thu Apr 14 11:59:10 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89942979">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1601]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6815" _type="SelectTextCommand" caretOffset="202" date="Thu Apr 14 11:59:10 EDT 2022" end="360" start="202" starttimestamp="1649862007572" timestamp="89942979" />
  <Command __id="6817" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:59:10 EDT 2022" forward="true" matchWord="false" offset="1858" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89943356" wrapSearch="false">
    <searchString><![CDATA[local]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6819" _type="PauseCommand" date="Thu Apr 14 11:59:12 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="89945375">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2019]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="6818" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 11:59:12 EDT 2022" forward="false" matchWord="false" offset="1858" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="89945375" wrapSearch="false">
    <searchString><![CDATA[local]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6821" _type="PauseCommand" date="Thu Apr 14 11:59:14 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="89947170">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1795]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6820" _type="ShellCommand" date="Thu Apr 14 11:59:14 EDT 2022" starttimestamp="1649862007572" timestamp="89947170" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6823" _type="PauseCommand" date="Thu Apr 14 11:59:20 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="89953386">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6216]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6822" _type="ShellCommand" date="Thu Apr 14 11:59:20 EDT 2022" starttimestamp="1649862007572" timestamp="89953386" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6825" _type="PauseCommand" date="Thu Apr 14 12:00:01 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="89993986">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[40600]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="6824" _type="ConsoleOutput" date="Thu Apr 14 12:00:01 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="89993986" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*
RMI and GIPC are not checked because NIO failed%0.0

Test execution time (ms):58588
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMINIOOneClient"), Diff(DELETE,"Connection"), Diff(INSERT,"ReadWriteNonAtomic"), Diff(EQUAL," did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*"), Diff(INSERT,"¶RMI and GIPC are not checked because NIO failed"), Diff(EQUAL,"%0.0¶¶Test execution time (ms):585"), Diff(DELETE,"99"), Diff(INSERT,"88"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6827" _type="PauseCommand" date="Thu Apr 14 12:00:07 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="90000029">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6043]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="6826" _type="ConsoleOutput" date="Thu Apr 14 12:00:07 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="90000029" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@1ac0c83b . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?SocketChannelBound.*¶RMI and GIPC are not checked because NIO failed%0.0¶¶Test execution time (ms):58588"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@1ac0c83b . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6829" _type="PauseCommand" date="Thu Apr 14 12:01:10 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="90062506">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[62477]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="6828" _type="BalloonCommand" date="Thu Apr 14 12:01:10 EDT 2022" message="*******************************************
Worked 34 minutes(fixed)/42 minutes(context based) from
Thu Apr 14 11:01:10 EDT 2022 to Thu Apr 14 12:00:07 EDT 2022
Edited 1 Projects: 
	A6
Edited 5 Files: 
	C:\Users\mannu\COMP_533\A6\src\readThread\ClientReadThread.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java
	C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java
Number of insert: 797
Number of delete: 239
" starttimestamp="1649862007572" timestamp="90062506">
    <fineGrainedWorkTime><![CDATA[42]]></fineGrainedWorkTime>
    <insert><![CDATA[797]]></insert>
    <startTime><![CDATA[1649948470071]]></startTime>
    <endTime><![CDATA[1649952007601]]></endTime>
    <workTime><![CDATA[34]]></workTime>
    <delete><![CDATA[239]]></delete>
  </Command>
  <Command __id="6831" _type="PauseCommand" date="Thu Apr 14 12:01:21 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="90073651">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[11145]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="6830" _type="ConsoleOutput" date="Thu Apr 14 12:01:21 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="90073651" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientConnection@2e3af717 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIO"), Diff(DELETE,"StaticArguments@1ac0c83b"), Diff(INSERT,"OneClientConnection@2e3af717"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="6833" _type="PauseCommand" date="Thu Apr 14 12:01:32 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="90085369">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11718]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="6832" _type="ConsoleOutput" date="Thu Apr 14 12:01:32 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="90085369" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@511538b8 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClient"), Diff(DELETE,"Connection@2e3af717"), Diff(INSERT,"ReadWriteNonAtomic@511538b8"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="6835" _type="PauseCommand" date="Thu Apr 14 12:01:55 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="90108193">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22824]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6834" _type="ShellCommand" date="Thu Apr 14 12:01:55 EDT 2022" starttimestamp="1649862007572" timestamp="90108193" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6778" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:57:57 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="89870418">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6808" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 11:59:04 EDT 2022" docASTNodeCount="914" docActiveCodeLength="6669" docExpressionCount="639" docLength="7433" projectName="A6" starttimestamp="1649862007572" timestamp="89937024">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		IPCMechanism mechanism = getIPCMechanism();
		setIPCMechanism(mechanism);
		boolean broadcast = true;
		setBroadcastMetaState(broadcast);
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)
			throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {
		// TODO Auto-generated method stub
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="6837" _type="PauseCommand" date="Thu Apr 14 12:02:00 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="90113291">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5098]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6838" _type="MoveCaretCommand" caretOffset="4336" date="Thu Apr 14 12:02:00 EDT 2022" docOffset="5992" starttimestamp="1649862007572" timestamp="90113374" />
  <Command __id="6840" _type="PauseCommand" date="Thu Apr 14 12:02:13 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="90126018">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12644]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6839" _type="SelectTextCommand" caretOffset="5289" date="Thu Apr 14 12:02:13 EDT 2022" end="6082" start="5289" starttimestamp="1649862007572" timestamp="90126018" />
  <Command __id="6841" _type="CopyCommand" date="Thu Apr 14 12:02:14 EDT 2022" starttimestamp="1649862007572" timestamp="90126674" />
  <Command __id="6843" _type="MoveCaretCommand" caretOffset="3260" date="Thu Apr 14 12:02:15 EDT 2022" docOffset="3260" starttimestamp="1649862007572" timestamp="90127479" />
  <Command __id="6845" _type="PauseCommand" date="Thu Apr 14 12:02:16 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90129298">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1819]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6844" _type="MoveCaretCommand" caretOffset="3265" date="Thu Apr 14 12:02:16 EDT 2022" docOffset="3265" starttimestamp="1649862007572" timestamp="90129298" />
  <Command __id="6846" _type="MoveCaretCommand" caretOffset="3265" date="Thu Apr 14 12:02:16 EDT 2022" docOffset="3265" starttimestamp="1649862007572" timestamp="90129298" />
  <Command __id="6848" _type="InsertStringCommand" date="Thu Apr 14 12:02:17 EDT 2022" starttimestamp="1649862007572" timestamp="90129607" timestamp2="90129607">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6849" _type="InsertStringCommand" date="Thu Apr 14 12:02:17 EDT 2022" starttimestamp="1649862007572" timestamp="90129608" timestamp2="90129608">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6851" _type="InsertStringCommand" date="Thu Apr 14 12:02:17 EDT 2022" starttimestamp="1649862007572" timestamp="90129727" timestamp2="90129727">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6852" _type="InsertStringCommand" date="Thu Apr 14 12:02:17 EDT 2022" starttimestamp="1649862007572" timestamp="90129727" timestamp2="90129727">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6870" _type="PasteCommand" date="Thu Apr 14 12:02:17 EDT 2022" starttimestamp="1649862007572" timestamp="90130025" />
  <Command __id="6871" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:02:17 EDT 2022" starttimestamp="1649862007572" timestamp="90130401" />
  <Command __id="6872" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:02:18 EDT 2022" starttimestamp="1649862007572" timestamp="90130498" />
  <Command __id="6873" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:02:18 EDT 2022" starttimestamp="1649862007572" timestamp="90130538" />
  <Command __id="6875" _type="PauseCommand" date="Thu Apr 14 12:02:22 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="90134828">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4290]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6874" _type="SelectTextCommand" caretOffset="3676" date="Thu Apr 14 12:02:22 EDT 2022" end="3688" start="3676" starttimestamp="1649862007572" timestamp="90134828" />
  <Command __id="6876" _type="SelectTextCommand" caretOffset="3676" date="Thu Apr 14 12:02:22 EDT 2022" end="3688" start="3676" starttimestamp="1649862007572" timestamp="90134828" />
  <Command __id="6877" _type="CopyCommand" date="Thu Apr 14 12:02:22 EDT 2022" starttimestamp="1649862007572" timestamp="90135101" />
  <Command __id="6879" _type="PauseCommand" date="Thu Apr 14 12:02:27 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="90139786">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[4685]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6878" _type="MoveCaretCommand" caretOffset="1601" date="Thu Apr 14 12:02:27 EDT 2022" docOffset="1601" starttimestamp="1649862007572" timestamp="90139786" />
  <Command __id="6880" _type="MoveCaretCommand" caretOffset="1601" date="Thu Apr 14 12:02:27 EDT 2022" docOffset="1601" starttimestamp="1649862007572" timestamp="90139786" />
  <Command __id="6882" _type="InsertStringCommand" date="Thu Apr 14 12:02:27 EDT 2022" starttimestamp="1649862007572" timestamp="90140071" timestamp2="90140071">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6883" _type="InsertStringCommand" date="Thu Apr 14 12:02:27 EDT 2022" starttimestamp="1649862007572" timestamp="90140071" timestamp2="90140071">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6885" _type="PasteCommand" date="Thu Apr 14 12:02:28 EDT 2022" starttimestamp="1649862007572" timestamp="90140558" />
  <Command __id="6886" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:02:28 EDT 2022" starttimestamp="1649862007572" timestamp="90140982" />
  <Command __id="6887" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:02:28 EDT 2022" starttimestamp="1649862007572" timestamp="90141085" />
  <Command __id="6888" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:02:28 EDT 2022" starttimestamp="1649862007572" timestamp="90141109" />
  <Command __id="6836" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:02:00 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="90113291">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="6842" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:02:14 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2982" docExpressionCount="278" docLength="3272" projectName="A6" starttimestamp="1649862007572" timestamp="90127402">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.port.nio.SocketChannelBound;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="6847" _type="Insert" date="Thu Apr 14 12:02:17 EDT 2022" docASTNodeCount="424" docActiveCodeLength="2988" docExpressionCount="278" docLength="3278" length="6" offset="3265" repeat="2" starttimestamp="1649862007572" timestamp="90129603" timestamp2="90129722">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="6853" _type="Replace" date="Thu Apr 14 12:02:17 EDT 2022" docASTNodeCount="515" docActiveCodeLength="3767" docExpressionCount="344" docLength="4071" endLine="106" insertionLength="794" int_docASTNodeCount="424" int_docActiveCodeLength="2987" int_docExpressionCount="278" int_docLength="3277" length="1" offset="3270" startLine="106" starttimestamp="1649862007572" timestamp="90129936">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6854" _type="Insert" date="Thu Apr 14 12:02:17 EDT 2022" docASTNodeCount="539" docActiveCodeLength="3870" docExpressionCount="366" docLength="4174" length="103" offset="711" repeat="4" starttimestamp="1649862007572" timestamp="90129988" timestamp2="90129991">
    <text><![CDATA[
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;]]></text>
  </DocumentChange>
  <DocumentChange __id="6858" _type="Insert" date="Thu Apr 14 12:02:17 EDT 2022" docASTNodeCount="591" docActiveCodeLength="4145" docExpressionCount="412" docLength="4449" length="275" offset="663" repeat="12" starttimestamp="1649862007572" timestamp="90129992" timestamp2="90130002">
    <text><![CDATA[
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.nio.NIOTraceUtility;]]></text>
  </DocumentChange>
  <DocumentChange __id="6881" _type="Insert" date="Thu Apr 14 12:02:27 EDT 2022" docASTNodeCount="591" docActiveCodeLength="4149" docExpressionCount="412" docLength="4453" length="4" offset="1601" starttimestamp="1649862007572" timestamp="90140066">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="6884" _type="Replace" date="Thu Apr 14 12:02:28 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4161" docExpressionCount="414" docLength="4465" endLine="41" insertionLength="14" int_docASTNodeCount="591" int_docActiveCodeLength="4147" int_docExpressionCount="412" int_docLength="4451" length="2" offset="1603" startLine="41" starttimestamp="1649862007572" timestamp="90140554">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		setTracing()]]></insertedText>
  </DocumentChange>
  <Command __id="6890" _type="PauseCommand" date="Thu Apr 14 12:02:29 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90142236">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1127]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="6891" _type="InsertStringCommand" date="Thu Apr 14 12:02:29 EDT 2022" starttimestamp="1649862007572" timestamp="90142242" timestamp2="90142242">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6892" _type="InsertStringCommand" date="Thu Apr 14 12:02:29 EDT 2022" starttimestamp="1649862007572" timestamp="90142242" timestamp2="90142242">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6893" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:02:30 EDT 2022" starttimestamp="1649862007572" timestamp="90142656" />
  <Command __id="6894" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:02:30 EDT 2022" starttimestamp="1649862007572" timestamp="90142760" />
  <Command __id="6895" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:02:30 EDT 2022" starttimestamp="1649862007572" timestamp="90142783" />
  <Command __id="6897" _type="PauseCommand" date="Thu Apr 14 12:02:39 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="90151686">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8903]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6896" _type="ShellCommand" date="Thu Apr 14 12:02:39 EDT 2022" starttimestamp="1649862007572" timestamp="90151686" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6899" _type="PauseCommand" date="Thu Apr 14 12:02:53 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="90166087">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14401]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6898" _type="ShellCommand" date="Thu Apr 14 12:02:53 EDT 2022" starttimestamp="1649862007572" timestamp="90166087" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6901" _type="PauseCommand" date="Thu Apr 14 12:03:16 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="90188487">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22400]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6900" _type="SelectTextCommand" caretOffset="1944" date="Thu Apr 14 12:03:16 EDT 2022" end="2025" start="1944" starttimestamp="1649862007572" timestamp="90188487" />
  <Command __id="6902" _type="SelectTextCommand" caretOffset="1944" date="Thu Apr 14 12:03:16 EDT 2022" end="2025" start="1944" starttimestamp="1649862007572" timestamp="90188487" />
  <DocumentChange __id="6889" _type="Insert" date="Thu Apr 14 12:02:29 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4162" docExpressionCount="414" docLength="4466" length="1" offset="1617" starttimestamp="1649862007572" timestamp="90142236">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="6904" _type="PauseCommand" date="Thu Apr 14 12:03:19 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="90191595">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3108]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="6903" _type="Delete" date="Thu Apr 14 12:03:19 EDT 2022" docASTNodeCount="587" docActiveCodeLength="4081" docExpressionCount="408" docLength="4385" endLine="49" length="81" offset="1944" startLine="49" starttimestamp="1649862007572" timestamp="90191595">
    <text><![CDATA[SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);]]></text>
  </DocumentChange>
  <Command __id="6905" _type="CutCommand" date="Thu Apr 14 12:03:19 EDT 2022" starttimestamp="1649862007572" timestamp="90191621" />
  <Command __id="6906" _type="MoveCaretCommand" caretOffset="2110" date="Thu Apr 14 12:03:19 EDT 2022" docOffset="2110" starttimestamp="1649862007572" timestamp="90192307" />
  <Command __id="6907" _type="MoveCaretCommand" caretOffset="2110" date="Thu Apr 14 12:03:19 EDT 2022" docOffset="2110" starttimestamp="1649862007572" timestamp="90192307" />
  <DocumentChange __id="6908" _type="Insert" date="Thu Apr 14 12:03:20 EDT 2022" docASTNodeCount="587" docActiveCodeLength="4091" docExpressionCount="408" docLength="4395" length="10" offset="2110" repeat="2" starttimestamp="1649862007572" timestamp="90192625" timestamp2="90192767">
    <text><![CDATA[
			
			]]></text>
  </DocumentChange>
  <Command __id="6909" _type="InsertStringCommand" date="Thu Apr 14 12:03:20 EDT 2022" starttimestamp="1649862007572" timestamp="90192630" timestamp2="90192630">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6910" _type="InsertStringCommand" date="Thu Apr 14 12:03:20 EDT 2022" starttimestamp="1649862007572" timestamp="90192630" timestamp2="90192630">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6912" _type="InsertStringCommand" date="Thu Apr 14 12:03:20 EDT 2022" starttimestamp="1649862007572" timestamp="90192771" timestamp2="90192771">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6913" _type="InsertStringCommand" date="Thu Apr 14 12:03:20 EDT 2022" starttimestamp="1649862007572" timestamp="90192771" timestamp2="90192771">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6915" _type="PasteCommand" date="Thu Apr 14 12:03:20 EDT 2022" starttimestamp="1649862007572" timestamp="90193169" />
  <Command __id="6916" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:03:21 EDT 2022" starttimestamp="1649862007572" timestamp="90193619" />
  <Command __id="6917" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:03:21 EDT 2022" starttimestamp="1649862007572" timestamp="90193718" />
  <Command __id="6918" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:03:21 EDT 2022" starttimestamp="1649862007572" timestamp="90193742" />
  <Command __id="6920" _type="PauseCommand" date="Thu Apr 14 12:03:24 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="90196740">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2998]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="6919" _type="SelectTextCommand" caretOffset="2120" date="Thu Apr 14 12:03:24 EDT 2022" end="2201" start="2120" starttimestamp="1649862007572" timestamp="90196740" />
  <Command __id="6921" _type="SelectTextCommand" caretOffset="2120" date="Thu Apr 14 12:03:24 EDT 2022" end="2201" start="2120" starttimestamp="1649862007572" timestamp="90196741" />
  <Command __id="6923" _type="CutCommand" date="Thu Apr 14 12:03:24 EDT 2022" starttimestamp="1649862007572" timestamp="90196940" />
  <DocumentChange __id="6914" _type="Replace" date="Thu Apr 14 12:03:20 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4172" docExpressionCount="414" docLength="4476" endLine="54" insertionLength="84" int_docASTNodeCount="587" int_docActiveCodeLength="4088" int_docExpressionCount="408" int_docLength="4392" length="3" offset="2117" startLine="54" starttimestamp="1649862007572" timestamp="90193164">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6922" _type="Delete" date="Thu Apr 14 12:03:24 EDT 2022" docASTNodeCount="587" docActiveCodeLength="4091" docExpressionCount="408" docLength="4395" endLine="54" length="81" offset="2120" startLine="54" starttimestamp="1649862007572" timestamp="90196932">
    <text><![CDATA[SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);]]></text>
  </DocumentChange>
  <Command __id="6925" _type="PauseCommand" date="Thu Apr 14 12:03:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90198053">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[1113]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="6924" _type="Insert" date="Thu Apr 14 12:03:25 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4172" docExpressionCount="414" docLength="4476" length="81" offset="2120" starttimestamp="1649862007572" timestamp="90198053">
    <text><![CDATA[SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);]]></text>
  </DocumentChange>
  <Command __id="6926" _type="UndoCommand" date="Thu Apr 14 12:03:25 EDT 2022" starttimestamp="1649862007572" timestamp="90198059" />
  <Command __id="6927" _type="CopyCommand" date="Thu Apr 14 12:03:26 EDT 2022" starttimestamp="1649862007572" timestamp="90198926" />
  <Command __id="6928" _type="MoveCaretCommand" caretOffset="1944" date="Thu Apr 14 12:03:26 EDT 2022" docOffset="1944" starttimestamp="1649862007572" timestamp="90199274" />
  <Command __id="6929" _type="MoveCaretCommand" caretOffset="1944" date="Thu Apr 14 12:03:26 EDT 2022" docOffset="1944" starttimestamp="1649862007572" timestamp="90199274" />
  <DocumentChange __id="6930" _type="Replace" date="Thu Apr 14 12:03:27 EDT 2022" docASTNodeCount="601" docActiveCodeLength="4253" docExpressionCount="420" docLength="4557" endLine="49" insertionLength="84" int_docASTNodeCount="594" int_docActiveCodeLength="4169" int_docExpressionCount="414" int_docLength="4473" length="3" offset="1941" startLine="49" starttimestamp="1649862007572" timestamp="90199482">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);]]></insertedText>
  </DocumentChange>
  <Command __id="6931" _type="PasteCommand" date="Thu Apr 14 12:03:27 EDT 2022" starttimestamp="1649862007572" timestamp="90199492" />
  <Command __id="6932" _type="MoveCaretCommand" caretOffset="1944" date="Thu Apr 14 12:03:27 EDT 2022" docOffset="1944" starttimestamp="1649862007572" timestamp="90200206" />
  <Command __id="6933" _type="MoveCaretCommand" caretOffset="1944" date="Thu Apr 14 12:03:27 EDT 2022" docOffset="1944" starttimestamp="1649862007572" timestamp="90200206" />
  <Command __id="6948" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 12:03:43 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="90215538" type="Run" />
  <Command __id="6950" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Thu Apr 14 12:03:43 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="90215539" type="Run" />
  <Command __id="6951" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:03:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90215764" type="Run" />
  <Command __id="6952" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:03:43 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90215780" type="Run" />
  <Command __id="6953" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:03:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90215783" type="Run" />
  <Command __id="6955" _type="PauseCommand" date="Thu Apr 14 12:03:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="90218251">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2468]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6974" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:04:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90287502" type="Run" />
  <Command __id="6976" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:04:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90287505" type="Run" />
  <Command __id="6978" _type="PauseCommand" date="Thu Apr 14 12:05:19 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="90312077">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[24572]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="6977" _type="ShellCommand" date="Thu Apr 14 12:05:19 EDT 2022" starttimestamp="1649862007572" timestamp="90312077" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6980" _type="PauseCommand" date="Thu Apr 14 12:05:49 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="90341992">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[29915]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="6989" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:05:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90346121" type="Run" />
  <Command __id="6991" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:05:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90346123" type="Run" />
  <Command __id="6993" _type="PauseCommand" date="Thu Apr 14 12:06:50 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="90403215">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[57092]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="6992" _type="ConsoleOutput" date="Thu Apr 14 12:06:50 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="90403215" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*
RMI and GIPC are not checked because NIO failed%0.0

Test execution time (ms):58607
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"GIPCRMINIOOneClient"), Diff(DELETE,"Connection"), Diff(INSERT,"ReadWriteNonAtomic"), Diff(EQUAL," did not pass completely:In Server enabling NIO, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*"), Diff(INSERT,"¶RMI and GIPC are not checked because NIO failed"), Diff(EQUAL,"%0.0¶"), Diff(INSERT,"¶"), Diff(EQUAL,"Test execution time (ms):58"), Diff(DELETE,"592"), Diff(INSERT,"607"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="6994" _type="ShellCommand" date="Thu Apr 14 12:06:51 EDT 2022" starttimestamp="1649862007572" timestamp="90403465" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="6934" _type="Insert" date="Thu Apr 14 12:03:28 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4172" docExpressionCount="414" docLength="4559" length="2" offset="1944" repeat="2" starttimestamp="1649862007572" timestamp="90200681" timestamp2="90200795">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6996" _type="PauseCommand" date="Thu Apr 14 12:06:59 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="90412211">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8746]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="6997" _type="SelectTextCommand" caretOffset="7759" date="Thu Apr 14 12:06:59 EDT 2022" end="7759" start="7754" starttimestamp="1649862007572" timestamp="90412347" />
  <Command __id="6999" _type="PauseCommand" date="Thu Apr 14 12:07:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90413583">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1236]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="6998" _type="MoveCaretCommand" caretOffset="7847" date="Thu Apr 14 12:07:01 EDT 2022" docOffset="9522" starttimestamp="1649862007572" timestamp="90413583" />
  <Command __id="7002" _type="PauseCommand" date="Thu Apr 14 12:07:05 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="90417765">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4182]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7001" _type="ShellCommand" date="Thu Apr 14 12:07:05 EDT 2022" starttimestamp="1649862007572" timestamp="90417765" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7004" _type="PauseCommand" date="Thu Apr 14 12:07:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90419220">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1455]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7003" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:07:06 EDT 2022" forward="false" matchWord="false" offset="9522" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90419220" wrapSearch="false">
    <searchString><![CDATA[lookup]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7006" _type="PauseCommand" date="Thu Apr 14 12:07:18 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="90431068">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[11848]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7005" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:07:18 EDT 2022" forward="false" matchWord="false" offset="6289" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90431068" wrapSearch="false">
    <searchString><![CDATA[lookup]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7008" _type="PauseCommand" date="Thu Apr 14 12:07:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90432378">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1310]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7007" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:07:19 EDT 2022" forward="false" matchWord="false" offset="6289" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90432378" wrapSearch="false">
    <searchString><![CDATA[lookup]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7009" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:07:20 EDT 2022" forward="false" matchWord="false" offset="6289" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90432511" wrapSearch="false">
    <searchString><![CDATA[lookup]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7010" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:07:20 EDT 2022" forward="false" matchWord="false" offset="6289" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90432648" wrapSearch="false">
    <searchString><![CDATA[lookup]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7012" _type="PauseCommand" date="Thu Apr 14 12:08:48 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="90520617">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[87969]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7011" _type="ShellCommand" date="Thu Apr 14 12:08:48 EDT 2022" starttimestamp="1649862007572" timestamp="90520617" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7014" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 12:08:48 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="90521220" />
  <Command __id="6995" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:06:59 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10084" projectName="A6" starttimestamp="1649862007572" timestamp="90412211">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7013" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:08:48 EDT 2022" docASTNodeCount="71" docActiveCodeLength="451" docExpressionCount="43" docLength="541" projectName="A6" starttimestamp="1649862007572" timestamp="90521012">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\Client.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶@Tags({ DistributedTags.CLIENT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })¶public class Client {¶	public static void main(final String[] args) {¶		try {¶¶			// create client object¶			"), Diff(INSERT,"//"), Diff(EQUAL,"final ClientRemoteInterfaceRMI client = new ClientRemoteObject();¶"), Diff(INSERT,"			final ClientRemoteInterfaceRMI client = new ClientRemoteObjectNIO();¶			"), Diff(EQUAL,"¶			client.start(args);¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({ DistributedTags.CLIENT, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class Client {
	public static void main(final String[] args) {
		try {

			// create client object
			//final ClientRemoteInterfaceRMI client = new ClientRemoteObject();
			final ClientRemoteInterfaceRMI client = new ClientRemoteObjectNIO();
			
			client.start(args);

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}
]]></snapshot>
  </Command>
  <Command __id="7016" _type="PauseCommand" date="Thu Apr 14 12:09:18 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="90550700">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[29480]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7017" _type="SelectTextCommand" caretOffset="4614" date="Thu Apr 14 12:09:18 EDT 2022" end="4614" start="4608" starttimestamp="1649862007572" timestamp="90550890" />
  <Command __id="7019" _type="PauseCommand" date="Thu Apr 14 12:10:51 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="90643544">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[92654]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7018" _type="ShellCommand" date="Thu Apr 14 12:10:51 EDT 2022" starttimestamp="1649862007572" timestamp="90643544" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7021" _type="PauseCommand" date="Thu Apr 14 12:10:53 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="90646374">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2830]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7020" _type="ShellCommand" date="Thu Apr 14 12:10:53 EDT 2022" starttimestamp="1649862007572" timestamp="90646374" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7022" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:10:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90646560" type="Debug" />
  <Command __id="7023" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:10:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90646560" type="Debug" />
  <Command __id="7024" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 12:10:54 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="90646560" type="Run" />
  <Command __id="7026" _type="PauseCommand" date="Thu Apr 14 12:10:55 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90648342">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1782]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7025" _type="ShellCommand" date="Thu Apr 14 12:10:55 EDT 2022" starttimestamp="1649862007572" timestamp="90648342" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7027" _type="ShellCommand" date="Thu Apr 14 12:10:56 EDT 2022" starttimestamp="1649862007572" timestamp="90648474" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7030" _type="PauseCommand" date="Thu Apr 14 12:11:14 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="90666857">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18383]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7029" _type="ShellCommand" date="Thu Apr 14 12:11:14 EDT 2022" starttimestamp="1649862007572" timestamp="90666857" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7032" _type="PauseCommand" date="Thu Apr 14 12:11:15 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90668073">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1216]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7031" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:11:15 EDT 2022" forward="false" matchWord="false" offset="6289" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90668073" wrapSearch="false">
    <searchString><![CDATA[host]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7034" _type="PauseCommand" date="Thu Apr 14 12:11:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="90671311">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3238]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7033" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:11:18 EDT 2022" forward="false" matchWord="false" offset="6088" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90671311" wrapSearch="false">
    <searchString><![CDATA[host]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7035" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:11:19 EDT 2022" forward="false" matchWord="false" offset="6088" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90671625" wrapSearch="false">
    <searchString><![CDATA[host]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7037" _type="PauseCommand" date="Thu Apr 14 12:11:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90673267">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1642]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7036" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:11:20 EDT 2022" forward="false" matchWord="false" offset="6088" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90673267" wrapSearch="false">
    <searchString><![CDATA[host]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7038" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:11:21 EDT 2022" forward="false" matchWord="false" offset="6088" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="90673812" wrapSearch="false">
    <searchString><![CDATA[host]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7040" _type="PauseCommand" date="Thu Apr 14 12:11:36 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="90688634">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[14822]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7039" _type="ShellCommand" date="Thu Apr 14 12:11:36 EDT 2022" starttimestamp="1649862007572" timestamp="90688634" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7042" _type="PauseCommand" date="Thu Apr 14 12:12:47 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="90759527">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[70893]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7041" _type="ShellCommand" date="Thu Apr 14 12:12:47 EDT 2022" starttimestamp="1649862007572" timestamp="90759527" type="ECLIPSE_MINIMIZED" />
  <Command __id="7043" _type="ShellCommand" date="Thu Apr 14 12:12:47 EDT 2022" starttimestamp="1649862007572" timestamp="90759540" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7044" _type="ShellCommand" date="Thu Apr 14 12:12:47 EDT 2022" starttimestamp="1649862007572" timestamp="90760179" type="ECLIPSE_MAXIMIZED" />
  <Command __id="7045" _type="ShellCommand" date="Thu Apr 14 12:12:47 EDT 2022" starttimestamp="1649862007572" timestamp="90760231" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7047" _type="PauseCommand" date="Thu Apr 14 12:13:24 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="90796639">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[36408]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="7046" _type="CopyCommand" date="Thu Apr 14 12:13:24 EDT 2022" starttimestamp="1649862007572" timestamp="90796639" />
  <Command __id="7049" _type="PauseCommand" date="Thu Apr 14 12:13:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="90797839">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1200]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7048" _type="ShellCommand" date="Thu Apr 14 12:13:25 EDT 2022" starttimestamp="1649862007572" timestamp="90797839" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7051" _type="PauseCommand" date="Thu Apr 14 12:14:22 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="90855200">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[57361]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7134" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:16:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90961659" type="Run" />
  <Command __id="7136" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:16:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="90961706" type="Run" />
  <Command __id="7138" _type="PauseCommand" date="Thu Apr 14 12:16:14 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="90967146">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5440]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7137" _type="ShellCommand" date="Thu Apr 14 12:16:14 EDT 2022" starttimestamp="1649862007572" timestamp="90967146" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7140" _type="PauseCommand" date="Thu Apr 14 12:16:29 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="90982211">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15065]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7139" _type="ShellCommand" date="Thu Apr 14 12:16:29 EDT 2022" starttimestamp="1649862007572" timestamp="90982211" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7015" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:09:18 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10084" projectName="A6" starttimestamp="1649862007572" timestamp="90550700">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7142" _type="PauseCommand" date="Thu Apr 14 12:18:15 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="91087455">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[105244]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7141" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:18:15 EDT 2022" docASTNodeCount="498" docActiveCodeLength="3653" docExpressionCount="331" docLength="4316" projectName="A6" starttimestamp="1649862007572" timestamp="91087455">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		"), Diff(INSERT,"//"), Diff(EQUAL,"String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		"), Diff(INSERT,"//"), Diff(EQUAL,"ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		"), Diff(INSERT,"//"), Diff(EQUAL,"nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: "+ mechanism.toString());

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		

}
]]></snapshot>
  </Command>
  <Command __id="7143" _type="MoveCaretCommand" caretOffset="2069" date="Thu Apr 14 12:18:15 EDT 2022" docOffset="2069" starttimestamp="1649862007572" timestamp="91087581" />
  <Command __id="7145" _type="MoveCaretCommand" caretOffset="1946" date="Thu Apr 14 12:18:16 EDT 2022" docOffset="1946" starttimestamp="1649862007572" timestamp="91088495" />
  <Command __id="7144" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:18:15 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4172" docExpressionCount="414" docLength="4559" projectName="A6" starttimestamp="1649862007572" timestamp="91088408">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace."), Diff(DELETE,"port.nio.SocketChannelBound"), Diff(INSERT,"bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility"), Diff(EQUAL,";¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		"), Diff(INSERT,"setTracing();¶		"), Diff(EQUAL,"super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			"), Diff(INSERT,"//"), Diff(EQUAL,"SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);"), Diff(INSERT,"¶			¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);"), Diff(EQUAL,"¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶"), Diff(DELETE,""), Diff(EQUAL,"		return currentSocket;¶	}"), Diff(INSERT,"¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}"), Diff(EQUAL,"¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <Command __id="7147" _type="PauseCommand" date="Thu Apr 14 12:18:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91091021">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2526]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="7148" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:18:18 EDT 2022" starttimestamp="1649862007572" timestamp="91091027" />
  <Command __id="7149" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:18:18 EDT 2022" starttimestamp="1649862007572" timestamp="91091027" />
  <Command __id="7151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:18:18 EDT 2022" starttimestamp="1649862007572" timestamp="91091200" />
  <Command __id="7152" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:18:18 EDT 2022" starttimestamp="1649862007572" timestamp="91091200" />
  <Command __id="7154" _type="PauseCommand" date="Thu Apr 14 12:18:20 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91093376">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2176]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7153" _type="MoveCaretCommand" caretOffset="2201" date="Thu Apr 14 12:18:20 EDT 2022" docOffset="2201" starttimestamp="1649862007572" timestamp="91093376" />
  <Command __id="7155" _type="MoveCaretCommand" caretOffset="2201" date="Thu Apr 14 12:18:20 EDT 2022" docOffset="2201" starttimestamp="1649862007572" timestamp="91093376" />
  <DocumentChange __id="7146" _type="Delete" date="Thu Apr 14 12:18:18 EDT 2022" docASTNodeCount="601" docActiveCodeLength="4253" docExpressionCount="420" docLength="4557" endLine="49" length="2" offset="1944" repeat="2" startLine="49" starttimestamp="1649862007572" timestamp="91091021" timestamp2="91091197">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7157" _type="PauseCommand" date="Thu Apr 14 12:18:24 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91096701">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3325]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="7158" _type="InsertStringCommand" date="Thu Apr 14 12:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="91096706" timestamp2="91096706">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7159" _type="InsertStringCommand" date="Thu Apr 14 12:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="91096706" timestamp2="91096706">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7161" _type="InsertStringCommand" date="Thu Apr 14 12:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="91096856" timestamp2="91096856">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7162" _type="InsertStringCommand" date="Thu Apr 14 12:18:24 EDT 2022" starttimestamp="1649862007572" timestamp="91096856" timestamp2="91096856">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7164" _type="PauseCommand" date="Thu Apr 14 12:18:28 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91100712">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3856]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7163" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="91100712" />
  <Command __id="7165" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="91100812" />
  <Command __id="7166" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:18:28 EDT 2022" starttimestamp="1649862007572" timestamp="91100849" />
  <Command __id="7167" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:18:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91101089" type="Run" />
  <Command __id="7169" _type="PauseCommand" date="Thu Apr 14 12:18:30 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91102547">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1458]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7205" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:18:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91130697" type="Run" />
  <Command __id="7207" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:18:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91130697" type="Run" />
  <Command __id="7209" _type="PauseCommand" date="Thu Apr 14 12:20:28 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="91221185">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[90488]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7208" _type="SelectTextCommand" caretOffset="1622" date="Thu Apr 14 12:20:28 EDT 2022" end="1639" start="1622" starttimestamp="1649862007572" timestamp="91221185" />
  <Command __id="7210" _type="SelectTextCommand" caretOffset="1622" date="Thu Apr 14 12:20:28 EDT 2022" end="1639" start="1622" starttimestamp="1649862007572" timestamp="91221185" />
  <DocumentChange __id="7156" _type="Insert" date="Thu Apr 14 12:18:24 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4172" docExpressionCount="414" docLength="4559" length="2" offset="2201" repeat="2" starttimestamp="1649862007572" timestamp="91096701" timestamp2="91096850">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7212" _type="PauseCommand" date="Thu Apr 14 12:20:30 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91223057">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1872]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="7213" _type="CutCommand" date="Thu Apr 14 12:20:30 EDT 2022" starttimestamp="1649862007572" timestamp="91223065" />
  <Command __id="7215" _type="PauseCommand" date="Thu Apr 14 12:20:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91225804">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[2739]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7214" _type="MoveCaretCommand" caretOffset="2542" date="Thu Apr 14 12:20:33 EDT 2022" docOffset="2542" starttimestamp="1649862007572" timestamp="91225804" />
  <Command __id="7216" _type="MoveCaretCommand" caretOffset="2542" date="Thu Apr 14 12:20:33 EDT 2022" docOffset="2542" starttimestamp="1649862007572" timestamp="91225804" />
  <Command __id="7218" _type="InsertStringCommand" date="Thu Apr 14 12:20:33 EDT 2022" starttimestamp="1649862007572" timestamp="91226054" timestamp2="91226054">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7219" _type="InsertStringCommand" date="Thu Apr 14 12:20:33 EDT 2022" starttimestamp="1649862007572" timestamp="91226054" timestamp2="91226054">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7221" _type="InsertStringCommand" date="Thu Apr 14 12:20:33 EDT 2022" starttimestamp="1649862007572" timestamp="91226199" timestamp2="91226199">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7222" _type="InsertStringCommand" date="Thu Apr 14 12:20:33 EDT 2022" starttimestamp="1649862007572" timestamp="91226199" timestamp2="91226199">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7224" _type="PasteCommand" date="Thu Apr 14 12:20:33 EDT 2022" starttimestamp="1649862007572" timestamp="91226402" />
  <Command __id="7225" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:20:34 EDT 2022" starttimestamp="1649862007572" timestamp="91226807" />
  <Command __id="7226" _type="MoveCaretCommand" caretOffset="2542" date="Thu Apr 14 12:20:34 EDT 2022" docOffset="2542" starttimestamp="1649862007572" timestamp="91226809" />
  <Command __id="7227" _type="MoveCaretCommand" caretOffset="2542" date="Thu Apr 14 12:20:34 EDT 2022" docOffset="2542" starttimestamp="1649862007572" timestamp="91226809" />
  <Command __id="7228" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:20:34 EDT 2022" starttimestamp="1649862007572" timestamp="91226893" />
  <Command __id="7229" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:20:34 EDT 2022" starttimestamp="1649862007572" timestamp="91226924" />
  <Command __id="7230" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:20:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91226956" type="Run" />
  <DocumentChange __id="7211" _type="Delete" date="Thu Apr 14 12:20:30 EDT 2022" docASTNodeCount="590" docActiveCodeLength="4155" docExpressionCount="411" docLength="4542" endLine="42" length="17" offset="1622" startLine="42" starttimestamp="1649862007572" timestamp="91223057">
    <text><![CDATA[super.init(args);]]></text>
  </DocumentChange>
  <DocumentChange __id="7217" _type="Insert" date="Thu Apr 14 12:20:33 EDT 2022" docASTNodeCount="590" docActiveCodeLength="4163" docExpressionCount="411" docLength="4550" length="8" offset="2542" repeat="2" starttimestamp="1649862007572" timestamp="91226049" timestamp2="91226193">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <DocumentChange __id="7223" _type="Replace" date="Thu Apr 14 12:20:33 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4180" docExpressionCount="414" docLength="4567" endLine="69" insertionLength="19" int_docASTNodeCount="590" int_docActiveCodeLength="4161" int_docExpressionCount="411" int_docLength="4548" length="2" offset="2548" startLine="69" starttimestamp="1649862007572" timestamp="91226397">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		super.init(args);]]></insertedText>
  </DocumentChange>
  <Command __id="7232" _type="PauseCommand" date="Thu Apr 14 12:20:38 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91231349">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4393]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7233" _type="SelectTextCommand" caretOffset="202" date="Thu Apr 14 12:20:39 EDT 2022" end="360" start="202" starttimestamp="1649862007572" timestamp="91231471" />
  <Command __id="7235" _type="PauseCommand" date="Thu Apr 14 12:23:00 EDT 2022" range="2m-5m" starttimestamp="1649862007572" timestamp="91372431">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[140960]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7234" _type="MoveCaretCommand" caretOffset="3370" date="Thu Apr 14 12:23:00 EDT 2022" docOffset="4868" starttimestamp="1649862007572" timestamp="91372431" />
  <Command __id="7238" _type="PauseCommand" date="Thu Apr 14 12:23:01 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91374299">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1868]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7237" _type="ShellCommand" date="Thu Apr 14 12:23:01 EDT 2022" starttimestamp="1649862007572" timestamp="91374299" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7240" _type="PauseCommand" date="Thu Apr 14 12:23:03 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91375726">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1427]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7239" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:03 EDT 2022" forward="false" matchWord="false" offset="4868" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91375726" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7242" _type="PauseCommand" date="Thu Apr 14 12:23:04 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91376945">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1219]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7241" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:04 EDT 2022" forward="false" matchWord="false" offset="6259" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91376945" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7244" _type="PauseCommand" date="Thu Apr 14 12:23:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91379343">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2398]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7243" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:06 EDT 2022" forward="false" matchWord="false" offset="7293" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91379343" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7246" _type="PauseCommand" date="Thu Apr 14 12:23:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91381126">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1783]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7245" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:08 EDT 2022" forward="true" matchWord="false" offset="7293" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91381126" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7247" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:09 EDT 2022" forward="true" matchWord="false" offset="504" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91381879" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7248" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:10 EDT 2022" forward="true" matchWord="false" offset="790" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91382516" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7250" _type="PauseCommand" date="Thu Apr 14 12:23:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91386770">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[4254]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7249" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:14 EDT 2022" forward="true" matchWord="false" offset="832" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91386770" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7251" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:15 EDT 2022" forward="true" matchWord="false" offset="1422" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91387609" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7253" _type="PauseCommand" date="Thu Apr 14 12:23:16 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91388743">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1134]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7252" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:16 EDT 2022" forward="true" matchWord="false" offset="1427" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91388743" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7254" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:16 EDT 2022" forward="true" matchWord="false" offset="1476" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91389234" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7255" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:17 EDT 2022" forward="true" matchWord="false" offset="1481" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91389671" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7257" _type="PauseCommand" date="Thu Apr 14 12:23:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91391138">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1467]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7256" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:18 EDT 2022" forward="true" matchWord="false" offset="1641" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91391138" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7259" _type="PauseCommand" date="Thu Apr 14 12:23:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91392333">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1195]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7258" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:19 EDT 2022" forward="true" matchWord="false" offset="2016" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91392333" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7260" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:20 EDT 2022" forward="true" matchWord="false" offset="2053" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91392821" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7261" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:20 EDT 2022" forward="true" matchWord="false" offset="2066" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91393229" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7263" _type="PauseCommand" date="Thu Apr 14 12:23:22 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91394625">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1396]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7262" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:22 EDT 2022" forward="true" matchWord="false" offset="2954" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91394625" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7264" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:22 EDT 2022" forward="true" matchWord="false" offset="2996" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91395000" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7266" _type="PauseCommand" date="Thu Apr 14 12:23:23 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91396162">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1162]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7265" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:23 EDT 2022" forward="true" matchWord="false" offset="4451" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91396162" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7267" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:24 EDT 2022" forward="true" matchWord="false" offset="6259" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91396783" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7268" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:24 EDT 2022" forward="true" matchWord="false" offset="6611" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91397316" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7270" _type="PauseCommand" date="Thu Apr 14 12:23:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91398403">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1087]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7269" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:25 EDT 2022" forward="true" matchWord="false" offset="6764" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91398403" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7272" _type="PauseCommand" date="Thu Apr 14 12:23:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91399740">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1337]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7271" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:23:27 EDT 2022" forward="true" matchWord="false" offset="6891" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91399740" wrapSearch="false">
    <searchString><![CDATA[gipc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7274" _type="PauseCommand" date="Thu Apr 14 12:23:32 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="91405122">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[5382]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7273" _type="ShellCommand" date="Thu Apr 14 12:23:32 EDT 2022" starttimestamp="1649862007572" timestamp="91405122" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7276" _type="SelectTextCommand" caretOffset="5289" date="Thu Apr 14 12:23:33 EDT 2022" end="6082" start="5289" starttimestamp="1649862007572" timestamp="91405639" />
  <Command __id="7278" _type="PauseCommand" date="Thu Apr 14 12:23:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91407127">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1488]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7281" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:23:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91430682" type="Run" />
  <Command __id="7284" _type="PauseCommand" date="Thu Apr 14 12:25:39 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="91531531">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[100849]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7283" _type="ShellCommand" date="Thu Apr 14 12:25:39 EDT 2022" starttimestamp="1649862007572" timestamp="91531531" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7285" _type="ShellCommand" date="Thu Apr 14 12:25:39 EDT 2022" starttimestamp="1649862007572" timestamp="91531721" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7231" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:20:38 EDT 2022" docASTNodeCount="914" docActiveCodeLength="6669" docExpressionCount="639" docLength="7433" projectName="A6" starttimestamp="1649862007572" timestamp="91231349">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		IPCMechanism mechanism = getIPCMechanism();¶		setIPCMechanism(mechanism);¶		boolean broadcast = true;¶		setBroadcastMetaState(broadcast);¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7275" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:23:33 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="91405440">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7287" _type="PauseCommand" date="Thu Apr 14 12:25:44 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="91536980">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5259]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7288" _type="MoveCaretCommand" caretOffset="2542" date="Thu Apr 14 12:25:44 EDT 2022" docOffset="2542" starttimestamp="1649862007572" timestamp="91537101" />
  <Command __id="7290" _type="PauseCommand" date="Thu Apr 14 12:25:56 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="91548969">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11868]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7289" _type="ShellCommand" date="Thu Apr 14 12:25:56 EDT 2022" starttimestamp="1649862007572" timestamp="91548969" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7292" _type="PauseCommand" date="Thu Apr 14 12:26:32 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="91584443">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35474]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7291" _type="ShellCommand" date="Thu Apr 14 12:26:32 EDT 2022" starttimestamp="1649862007572" timestamp="91584443" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7293" _type="MoveCaretCommand" caretOffset="1696" date="Thu Apr 14 12:26:32 EDT 2022" docOffset="1696" starttimestamp="1649862007572" timestamp="91584530" />
  <Command __id="7294" _type="MoveCaretCommand" caretOffset="1696" date="Thu Apr 14 12:26:32 EDT 2022" docOffset="1696" starttimestamp="1649862007572" timestamp="91584530" />
  <Command __id="7296" _type="PauseCommand" date="Thu Apr 14 12:26:39 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="91592010">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7480]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7295" _type="SelectTextCommand" caretOffset="1219" date="Thu Apr 14 12:26:39 EDT 2022" end="1265" start="1219" starttimestamp="1649862007572" timestamp="91592010" />
  <Command __id="7297" _type="SelectTextCommand" caretOffset="1219" date="Thu Apr 14 12:26:39 EDT 2022" end="1265" start="1219" starttimestamp="1649862007572" timestamp="91592010" />
  <Command __id="7298" _type="CopyCommand" date="Thu Apr 14 12:26:40 EDT 2022" starttimestamp="1649862007572" timestamp="91592828" />
  <Command __id="7300" _type="PauseCommand" date="Thu Apr 14 12:26:41 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91593969">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1141]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7299" _type="MoveCaretCommand" caretOffset="1230" date="Thu Apr 14 12:26:41 EDT 2022" docOffset="1230" starttimestamp="1649862007572" timestamp="91593969" />
  <Command __id="7301" _type="MoveCaretCommand" caretOffset="1230" date="Thu Apr 14 12:26:41 EDT 2022" docOffset="1230" starttimestamp="1649862007572" timestamp="91593969" />
  <Command __id="7303" _type="PauseCommand" date="Thu Apr 14 12:26:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91596212">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2243]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7302" _type="SelectTextCommand" caretOffset="1229" date="Thu Apr 14 12:26:43 EDT 2022" end="1264" start="1229" starttimestamp="1649862007572" timestamp="91596212" />
  <Command __id="7304" _type="SelectTextCommand" caretOffset="1229" date="Thu Apr 14 12:26:43 EDT 2022" end="1264" start="1229" starttimestamp="1649862007572" timestamp="91596212" />
  <Command __id="7306" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:26:44 EDT 2022" starttimestamp="1649862007572" timestamp="91596493" />
  <Command __id="7307" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:26:44 EDT 2022" starttimestamp="1649862007572" timestamp="91596493" />
  <Command __id="7309" _type="PauseCommand" date="Thu Apr 14 12:26:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91599457">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2964]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7308" _type="MoveCaretCommand" caretOffset="1648" date="Thu Apr 14 12:26:47 EDT 2022" docOffset="1648" starttimestamp="1649862007572" timestamp="91599457" />
  <Command __id="7310" _type="MoveCaretCommand" caretOffset="1648" date="Thu Apr 14 12:26:47 EDT 2022" docOffset="1648" starttimestamp="1649862007572" timestamp="91599457" />
  <Command __id="7312" _type="InsertStringCommand" date="Thu Apr 14 12:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="91599715" timestamp2="91599715">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7313" _type="InsertStringCommand" date="Thu Apr 14 12:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="91599715" timestamp2="91599715">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7315" _type="PasteCommand" date="Thu Apr 14 12:26:47 EDT 2022" starttimestamp="1649862007572" timestamp="91600163" />
  <Command __id="7316" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="91600731" />
  <Command __id="7317" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="91600821" />
  <Command __id="7318" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:26:48 EDT 2022" starttimestamp="1649862007572" timestamp="91600849" />
  <Command __id="7319" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:26:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91600880" type="Run" />
  <Command __id="7321" _type="PauseCommand" date="Thu Apr 14 12:27:02 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="91615123">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[14242]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7320" _type="ShellCommand" date="Thu Apr 14 12:27:02 EDT 2022" starttimestamp="1649862007572" timestamp="91615122" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7323" _type="PauseCommand" date="Thu Apr 14 12:27:13 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="91626367">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11245]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7326" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Thu Apr 14 12:27:18 EDT 2022" starttimestamp="1649862007572" timestamp="91631259" />
  <Command __id="7328" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:27:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91631284" type="Debug" />
  <Command __id="7329" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:27:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91631284" type="Debug" />
  <Command __id="7330" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Thu Apr 14 12:27:18 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="91631284" type="Run" />
  <Command __id="7286" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:25:44 EDT 2022" docASTNodeCount="594" docActiveCodeLength="4180" docExpressionCount="414" docLength="4567" projectName="A6" starttimestamp="1649862007572" timestamp="91536980">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		"), Diff(DELETE,"super.init(args);"), Diff(EQUAL,"¶"), Diff(INSERT,""), Diff(EQUAL,"		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			"), Diff(DELETE,"//"), Diff(EQUAL,"SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			"), Diff(INSERT,"//"), Diff(EQUAL,"SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶"), Diff(DELETE,""), Diff(EQUAL,"		readThread.start();¶	"), Diff(INSERT,"	¶		super.init(args);¶	"), Diff(EQUAL,"}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="7305" _type="Delete" date="Thu Apr 14 12:26:44 EDT 2022" docASTNodeCount="591" docActiveCodeLength="4145" docExpressionCount="411" docLength="4532" endLine="30" length="35" offset="1229" startLine="30" starttimestamp="1649862007572" timestamp="91596489">
    <text><![CDATA[ = NIOManagerFactory.getSingleton()]]></text>
  </DocumentChange>
  <DocumentChange __id="7311" _type="Insert" date="Thu Apr 14 12:26:47 EDT 2022" docASTNodeCount="591" docActiveCodeLength="4149" docExpressionCount="411" docLength="4536" length="4" offset="1648" starttimestamp="1649862007572" timestamp="91599711">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="7314" _type="Replace" date="Thu Apr 14 12:26:47 EDT 2022" docASTNodeCount="597" docActiveCodeLength="4195" docExpressionCount="416" docLength="4582" endLine="44" insertionLength="48" int_docASTNodeCount="591" int_docActiveCodeLength="4147" int_docExpressionCount="411" int_docLength="4534" length="2" offset="1650" startLine="44" starttimestamp="1649862007572" timestamp="91600160">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		nioManager = NIOManagerFactory.getSingleton();]]></insertedText>
  </DocumentChange>
  <Command __id="7332" _type="PauseCommand" date="Thu Apr 14 12:27:30 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="91642795">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[11511]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7333" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 12:27:30 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="91643054" />
  <Command __id="7335" _type="PauseCommand" date="Thu Apr 14 12:27:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91646098">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3044]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7334" _type="SelectTextCommand" caretOffset="429" date="Thu Apr 14 12:27:33 EDT 2022" end="432" start="429" starttimestamp="1649862007572" timestamp="91646098" />
  <Command __id="7337" _type="InsertStringCommand" date="Thu Apr 14 12:27:34 EDT 2022" starttimestamp="1649862007572" timestamp="91646808" timestamp2="91646808">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="7339" _type="InsertStringCommand" date="Thu Apr 14 12:27:34 EDT 2022" starttimestamp="1649862007572" timestamp="91646887" timestamp2="91646887">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="7341" _type="InsertStringCommand" date="Thu Apr 14 12:27:34 EDT 2022" starttimestamp="1649862007572" timestamp="91646997" timestamp2="91646997">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7343" _type="InsertStringCommand" date="Thu Apr 14 12:27:35 EDT 2022" starttimestamp="1649862007572" timestamp="91647934" timestamp2="91647934">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7331" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:27:30 EDT 2022" docASTNodeCount="101" docActiveCodeLength="689" docExpressionCount="68" docLength="879" projectName="A6" starttimestamp="1649862007572" timestamp="91642795">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\Server.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server;

import java.rmi.RemoteException;

import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteObjectNIO;
import server.remote.ServerRemoteObjectRMI;

import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({ DistributedTags.SERVER, DistributedTags.RMI, DistributedTags.GIPC, DistributedTags.NIO })
public class Server {
	
	
	public static void main(final String[] args) {
		
		//GIPC Server is a subclass of RMI server, so we can just call super.method() on gipc
		//final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectNIO();
		
		try {
			server.start(args);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	


}
]]></snapshot>
  </Command>
  <DocumentChange __id="7336" _type="Replace" date="Thu Apr 14 12:27:34 EDT 2022" docASTNodeCount="101" docActiveCodeLength="687" docExpressionCount="68" docLength="877" endLine="20" insertionLength="1" int_docASTNodeCount="101" int_docActiveCodeLength="686" int_docExpressionCount="68" int_docLength="876" length="3" offset="683" startLine="20" starttimestamp="1649862007572" timestamp="91646799">
    <deletedText><![CDATA[RMI]]></deletedText>
    <insertedText><![CDATA[N]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7338" _type="Insert" date="Thu Apr 14 12:27:34 EDT 2022" docASTNodeCount="101" docActiveCodeLength="690" docExpressionCount="68" docLength="880" length="3" offset="684" repeat="3" starttimestamp="1649862007572" timestamp="91646882" timestamp2="91647929">
    <text><![CDATA[IOs]]></text>
  </DocumentChange>
  <Command __id="7345" _type="PauseCommand" date="Thu Apr 14 12:27:37 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91649475">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1541]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="7346" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:27:37 EDT 2022" starttimestamp="1649862007572" timestamp="91649478" />
  <Command __id="7348" _type="PauseCommand" date="Thu Apr 14 12:27:38 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91651016">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1538]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7347" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:27:38 EDT 2022" starttimestamp="1649862007572" timestamp="91651016" />
  <Command __id="7349" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:27:38 EDT 2022" starttimestamp="1649862007572" timestamp="91651122" />
  <Command __id="7350" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:27:38 EDT 2022" starttimestamp="1649862007572" timestamp="91651149" />
  <Command __id="7352" _type="UndoCommand" date="Thu Apr 14 12:27:39 EDT 2022" starttimestamp="1649862007572" timestamp="91652018" />
  <DocumentChange __id="7344" _type="Delete" date="Thu Apr 14 12:27:37 EDT 2022" docASTNodeCount="101" docActiveCodeLength="689" docExpressionCount="68" docLength="879" endLine="20" length="1" offset="686" startLine="20" starttimestamp="1649862007572" timestamp="91649475">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="7351" _type="Insert" date="Thu Apr 14 12:27:39 EDT 2022" docASTNodeCount="101" docActiveCodeLength="690" docExpressionCount="68" docLength="880" length="1" offset="686" starttimestamp="1649862007572" timestamp="91652015">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="7354" _type="PauseCommand" date="Thu Apr 14 12:27:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91653141">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1123]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="7355" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:27:40 EDT 2022" starttimestamp="1649862007572" timestamp="91653145" />
  <Command __id="7358" _type="PauseCommand" date="Thu Apr 14 12:27:42 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91654550">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1405]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7357" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:27:42 EDT 2022" starttimestamp="1649862007572" timestamp="91654550" />
  <Command __id="7360" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:27:42 EDT 2022" starttimestamp="1649862007572" timestamp="91654724" />
  <Command __id="7362" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:27:42 EDT 2022" starttimestamp="1649862007572" timestamp="91654878" />
  <Command __id="7363" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:27:43 EDT 2022" starttimestamp="1649862007572" timestamp="91655592" />
  <Command __id="7364" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:27:43 EDT 2022" starttimestamp="1649862007572" timestamp="91655687" />
  <Command __id="7365" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:27:43 EDT 2022" starttimestamp="1649862007572" timestamp="91655708" />
  <DocumentChange __id="7353" _type="Delete" date="Thu Apr 14 12:27:40 EDT 2022" docASTNodeCount="101" docActiveCodeLength="686" docExpressionCount="68" docLength="876" endLine="20" length="4" offset="683" repeat="4" startLine="20" starttimestamp="1649862007572" timestamp="91653141" timestamp2="91654876">
    <text><![CDATA[NIOs]]></text>
  </DocumentChange>
  <Command __id="7367" _type="PauseCommand" date="Thu Apr 14 12:27:44 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91657349">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1641]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="7366" _type="Insert" date="Thu Apr 14 12:27:44 EDT 2022" docASTNodeCount="101" docActiveCodeLength="690" docExpressionCount="68" docLength="880" length="4" offset="683" starttimestamp="1649862007572" timestamp="91657349">
    <text><![CDATA[NIOs]]></text>
  </DocumentChange>
  <Command __id="7368" _type="UndoCommand" date="Thu Apr 14 12:27:44 EDT 2022" starttimestamp="1649862007572" timestamp="91657353" />
  <DocumentChange __id="7369" _type="Delete" date="Thu Apr 14 12:27:45 EDT 2022" docASTNodeCount="101" docActiveCodeLength="687" docExpressionCount="68" docLength="877" endLine="20" length="3" offset="684" startLine="20" starttimestamp="1649862007572" timestamp="91657935">
    <text><![CDATA[IOs]]></text>
  </DocumentChange>
  <Command __id="7370" _type="UndoCommand" date="Thu Apr 14 12:27:45 EDT 2022" starttimestamp="1649862007572" timestamp="91657941" />
  <Command __id="7372" _type="UndoCommand" date="Thu Apr 14 12:27:45 EDT 2022" starttimestamp="1649862007572" timestamp="91658424" />
  <Command __id="7373" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:27:46 EDT 2022" starttimestamp="1649862007572" timestamp="91659421" />
  <Command __id="7374" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:27:47 EDT 2022" starttimestamp="1649862007572" timestamp="91659516" />
  <Command __id="7375" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:27:47 EDT 2022" starttimestamp="1649862007572" timestamp="91659535" />
  <DocumentChange __id="7371" _type="Replace" date="Thu Apr 14 12:27:45 EDT 2022" docASTNodeCount="101" docActiveCodeLength="689" docExpressionCount="68" docLength="879" endLine="20" insertionLength="3" int_docASTNodeCount="101" int_docActiveCodeLength="686" int_docExpressionCount="68" int_docLength="876" length="1" offset="683" startLine="20" starttimestamp="1649862007572" timestamp="91658417">
    <deletedText><![CDATA[N]]></deletedText>
    <insertedText><![CDATA[RMI]]></insertedText>
  </DocumentChange>
  <Command __id="7377" _type="PauseCommand" date="Thu Apr 14 12:28:11 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="91683928">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[24393]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7378" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 12:28:11 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="91684188" />
  <Command __id="7380" _type="PauseCommand" date="Thu Apr 14 12:28:36 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="91709027">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[24839]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7379" _type="MoveCaretCommand" caretOffset="4240" date="Thu Apr 14 12:28:36 EDT 2022" docOffset="5738" starttimestamp="1649862007572" timestamp="91709027" />
  <Command __id="7382" _type="InsertStringCommand" date="Thu Apr 14 12:28:36 EDT 2022" starttimestamp="1649862007572" timestamp="91709297" timestamp2="91709297">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7384" _type="InsertStringCommand" date="Thu Apr 14 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="91709950" timestamp2="91709950">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7386" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:28:37 EDT 2022" starttimestamp="1649862007572" timestamp="91710306" />
  <Command __id="7388" _type="InsertStringCommand" date="Thu Apr 14 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="91710497" timestamp2="91710497">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="7390" _type="InsertStringCommand" date="Thu Apr 14 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="91710672" timestamp2="91710672">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="7392" _type="InsertStringCommand" date="Thu Apr 14 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="91710779" timestamp2="91710779">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7394" _type="InsertStringCommand" date="Thu Apr 14 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="91710934" timestamp2="91710934">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7396" _type="InsertStringCommand" date="Thu Apr 14 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="91711061" timestamp2="91711061">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7398" _type="InsertStringCommand" date="Thu Apr 14 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="91711175" timestamp2="91711175">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7400" _type="InsertStringCommand" date="Thu Apr 14 12:28:38 EDT 2022" starttimestamp="1649862007572" timestamp="91711304" timestamp2="91711304">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7401" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 12:28:38 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="91711307" />
  <Command __id="7404" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 12:28:39 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="91712090" />
  <Command __id="7406" _type="InsertStringCommand" date="Thu Apr 14 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="91712097" timestamp2="91712097">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7408" _type="InsertStringCommand" date="Thu Apr 14 12:28:39 EDT 2022" starttimestamp="1649862007572" timestamp="91712366" timestamp2="91712366">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7409" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 12:28:39 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="91712372" />
  <Command __id="7420" _type="PauseCommand" date="Thu Apr 14 12:28:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91715962">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3590]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="7419" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 12:28:43 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="91715962" />
  <Command __id="7422" _type="InsertStringCommand" date="Thu Apr 14 12:28:44 EDT 2022" starttimestamp="1649862007572" timestamp="91716520" timestamp2="91716520">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7424" _type="InsertStringCommand" date="Thu Apr 14 12:28:44 EDT 2022" starttimestamp="1649862007572" timestamp="91716630" timestamp2="91716630">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7426" _type="InsertStringCommand" date="Thu Apr 14 12:28:44 EDT 2022" starttimestamp="1649862007572" timestamp="91716771" timestamp2="91716771">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7428" _type="InsertStringCommand" date="Thu Apr 14 12:28:44 EDT 2022" starttimestamp="1649862007572" timestamp="91716867" timestamp2="91716867">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7430" _type="InsertStringCommand" date="Thu Apr 14 12:28:44 EDT 2022" starttimestamp="1649862007572" timestamp="91716939" timestamp2="91716939">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7432" _type="InsertStringCommand" date="Thu Apr 14 12:28:44 EDT 2022" starttimestamp="1649862007572" timestamp="91717122" timestamp2="91717122">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7434" _type="InsertStringCommand" date="Thu Apr 14 12:28:44 EDT 2022" starttimestamp="1649862007572" timestamp="91717212" timestamp2="91717212">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7436" _type="InsertStringCommand" date="Thu Apr 14 12:28:45 EDT 2022" starttimestamp="1649862007572" timestamp="91717498" timestamp2="91717498">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="7438" _type="InsertStringCommand" date="Thu Apr 14 12:28:45 EDT 2022" starttimestamp="1649862007572" timestamp="91717636" timestamp2="91717636">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="7440" _type="InsertStringCommand" date="Thu Apr 14 12:28:45 EDT 2022" starttimestamp="1649862007572" timestamp="91717740" timestamp2="91717740">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="7442" _type="InsertStringCommand" date="Thu Apr 14 12:28:45 EDT 2022" starttimestamp="1649862007572" timestamp="91717882" timestamp2="91717882">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7444" _type="InsertStringCommand" date="Thu Apr 14 12:28:45 EDT 2022" starttimestamp="1649862007572" timestamp="91718297" timestamp2="91718297">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7446" _type="InsertStringCommand" date="Thu Apr 14 12:28:45 EDT 2022" starttimestamp="1649862007572" timestamp="91718379" timestamp2="91718379">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7448" _type="InsertStringCommand" date="Thu Apr 14 12:28:46 EDT 2022" starttimestamp="1649862007572" timestamp="91718474" timestamp2="91718474">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7450" _type="InsertStringCommand" date="Thu Apr 14 12:28:46 EDT 2022" starttimestamp="1649862007572" timestamp="91718738" timestamp2="91718738">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="7452" _type="InsertStringCommand" date="Thu Apr 14 12:28:46 EDT 2022" starttimestamp="1649862007572" timestamp="91718947" timestamp2="91718947">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7454" _type="InsertStringCommand" date="Thu Apr 14 12:28:46 EDT 2022" starttimestamp="1649862007572" timestamp="91719009" timestamp2="91719009">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7456" _type="InsertStringCommand" date="Thu Apr 14 12:28:46 EDT 2022" starttimestamp="1649862007572" timestamp="91719207" timestamp2="91719207">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7458" _type="InsertStringCommand" date="Thu Apr 14 12:28:46 EDT 2022" starttimestamp="1649862007572" timestamp="91719304" timestamp2="91719304">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="7460" _type="InsertStringCommand" date="Thu Apr 14 12:28:47 EDT 2022" starttimestamp="1649862007572" timestamp="91719440" timestamp2="91719440">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7462" _type="InsertStringCommand" date="Thu Apr 14 12:28:47 EDT 2022" starttimestamp="1649862007572" timestamp="91719532" timestamp2="91719532">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7464" _type="InsertStringCommand" date="Thu Apr 14 12:28:47 EDT 2022" starttimestamp="1649862007572" timestamp="91719730" timestamp2="91719730">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7466" _type="InsertStringCommand" date="Thu Apr 14 12:28:47 EDT 2022" starttimestamp="1649862007572" timestamp="91719932" timestamp2="91719932">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7468" _type="PauseCommand" date="Thu Apr 14 12:28:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91721303">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1371]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7482" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:29:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="91746013" type="Run" />
  <Command __id="7376" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:28:11 EDT 2022" docASTNodeCount="914" docActiveCodeLength="6669" docExpressionCount="639" docLength="7433" projectName="A6" starttimestamp="1649862007572" timestamp="91683928">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		IPCMechanism mechanism = getIPCMechanism();¶		setIPCMechanism(mechanism);¶		boolean broadcast = true;¶		setBroadcastMetaState(broadcast);¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="7381" _type="Insert" date="Thu Apr 14 12:28:36 EDT 2022" docASTNodeCount="917" docActiveCodeLength="6674" docExpressionCount="640" docLength="7438" length="5" offset="5738" repeat="2" starttimestamp="1649862007572" timestamp="91709291" timestamp2="91709945">
    <text><![CDATA[
		s]]></text>
  </DocumentChange>
  <DocumentChange __id="7385" _type="Delete" date="Thu Apr 14 12:28:37 EDT 2022" docASTNodeCount="914" docActiveCodeLength="6673" docExpressionCount="639" docLength="7437" endLine="171" length="1" offset="5742" startLine="171" starttimestamp="1649862007572" timestamp="91710303">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="7387" _type="Insert" date="Thu Apr 14 12:28:38 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6682" docExpressionCount="642" docLength="7446" length="9" offset="5742" repeat="9" starttimestamp="1649862007572" timestamp="91710493" timestamp2="91711732">
    <text><![CDATA[System.ou]]></text>
  </DocumentChange>
  <DocumentChange __id="7405" _type="Replace" date="Thu Apr 14 12:28:39 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6683" docExpressionCount="642" docLength="7447" endLine="171" insertionLength="3" int_docASTNodeCount="915" int_docActiveCodeLength="6680" int_docExpressionCount="640" int_docLength="7444" length="2" offset="5749" startLine="171" starttimestamp="1649862007572" timestamp="91712093">
    <deletedText><![CDATA[ou]]></deletedText>
    <insertedText><![CDATA[out]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7407" _type="Insert" date="Thu Apr 14 12:28:39 EDT 2022" docASTNodeCount="921" docActiveCodeLength="6718" docExpressionCount="645" docLength="7482" length="35" offset="5752" repeat="33" starttimestamp="1649862007572" timestamp="91712361" timestamp2="91719928">
    <text><![CDATA[.println("inside RMI server start")]]></text>
  </DocumentChange>
  <DocumentChange __id="7470" _type="Insert" date="Thu Apr 14 12:28:49 EDT 2022" docASTNodeCount="921" docActiveCodeLength="6719" docExpressionCount="645" docLength="7483" length="1" offset="5787" starttimestamp="1649862007572" timestamp="91722034">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="7485" _type="PauseCommand" date="Thu Apr 14 12:29:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91748807">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2794]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7486" _type="MoveCaretCommand" caretOffset="2069" date="Thu Apr 14 12:29:16 EDT 2022" docOffset="2069" starttimestamp="1649862007572" timestamp="91748965" />
  <Command __id="7484" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:29:16 EDT 2022" docASTNodeCount="498" docActiveCodeLength="3653" docExpressionCount="331" docLength="4316" projectName="A6" starttimestamp="1649862007572" timestamp="91748807">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7488" _type="PauseCommand" date="Thu Apr 14 12:29:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91750428">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1463]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7489" _type="MoveCaretCommand" caretOffset="1404" date="Thu Apr 14 12:29:18 EDT 2022" docOffset="1764" starttimestamp="1649862007572" timestamp="91750514" />
  <Command __id="7487" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:29:18 EDT 2022" docASTNodeCount="252" docActiveCodeLength="1776" docExpressionCount="157" docLength="2044" projectName="A6" starttimestamp="1649862007572" timestamp="91750428">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7491" _type="PauseCommand" date="Thu Apr 14 12:29:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91751953">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1438]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7492" _type="MoveCaretCommand" caretOffset="2069" date="Thu Apr 14 12:29:19 EDT 2022" docOffset="2069" starttimestamp="1649862007572" timestamp="91752042" />
  <Command __id="7490" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:29:19 EDT 2022" docASTNodeCount="498" docActiveCodeLength="3653" docExpressionCount="331" docLength="4316" projectName="A6" starttimestamp="1649862007572" timestamp="91751952">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7494" _type="PauseCommand" date="Thu Apr 14 12:29:22 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91754960">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2918]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7495" _type="MoveCaretCommand" caretOffset="5921" date="Thu Apr 14 12:29:22 EDT 2022" docOffset="7577" starttimestamp="1649862007572" timestamp="91755044" />
  <Command __id="7493" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:29:22 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="91754960">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7497" _type="PauseCommand" date="Thu Apr 14 12:29:29 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="91761934">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6890]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7498" _type="MoveCaretCommand" caretOffset="1799" date="Thu Apr 14 12:29:29 EDT 2022" docOffset="1799" starttimestamp="1649862007572" timestamp="91762116" />
  <Command __id="7496" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:29:29 EDT 2022" docASTNodeCount="597" docActiveCodeLength="4195" docExpressionCount="416" docLength="4582" projectName="A6" starttimestamp="1649862007572" timestamp="91761934">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager"), Diff(DELETE," = NIOManagerFactory.getSingleton()"), Diff(EQUAL,";¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		"), Diff(INSERT,"nioManager = NIOManagerFactory.getSingleton();¶		"), Diff(EQUAL,"¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager;
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		nioManager = NIOManagerFactory.getSingleton();
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <Command __id="7500" _type="PauseCommand" date="Thu Apr 14 12:30:05 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="91797804">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[35688]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7501" _type="MoveCaretCommand" caretOffset="5921" date="Thu Apr 14 12:30:05 EDT 2022" docOffset="7577" starttimestamp="1649862007572" timestamp="91798028" />
  <Command __id="7503" _type="PauseCommand" date="Thu Apr 14 12:30:14 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="91807249">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9221]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7502" _type="MoveCaretCommand" caretOffset="3204" date="Thu Apr 14 12:30:14 EDT 2022" docOffset="4860" starttimestamp="1649862007572" timestamp="91807249" />
  <Command __id="7505" _type="ShellCommand" date="Thu Apr 14 12:30:15 EDT 2022" starttimestamp="1649862007572" timestamp="91808027" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7507" _type="PauseCommand" date="Thu Apr 14 12:30:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91810511">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2484]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7506" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:30:18 EDT 2022" forward="true" matchWord="false" offset="4860" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91810511" wrapSearch="false">
    <searchString><![CDATA[command pro]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7509" _type="PauseCommand" date="Thu Apr 14 12:30:20 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="91812436">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1925]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7508" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:30:20 EDT 2022" forward="false" matchWord="false" offset="4860" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="91812436" wrapSearch="false">
    <searchString><![CDATA[command pro]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7511" _type="PauseCommand" date="Thu Apr 14 12:30:22 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="91814565">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2129]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7510" _type="ShellCommand" date="Thu Apr 14 12:30:22 EDT 2022" starttimestamp="1649862007572" timestamp="91814565" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7513" _type="PauseCommand" date="Thu Apr 14 12:31:03 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="91856338">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[41773]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7512" _type="ShellCommand" date="Thu Apr 14 12:31:03 EDT 2022" starttimestamp="1649862007572" timestamp="91856338" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7515" _type="PauseCommand" date="Thu Apr 14 12:32:30 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="91943212">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[86874]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7514" _type="ShellCommand" date="Thu Apr 14 12:32:30 EDT 2022" starttimestamp="1649862007572" timestamp="91943212" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7517" _type="MoveCaretCommand" caretOffset="1799" date="Thu Apr 14 12:32:31 EDT 2022" docOffset="1799" starttimestamp="1649862007572" timestamp="91943697" />
  <Command __id="7499" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:30:05 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="91797804">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7516" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:32:31 EDT 2022" docASTNodeCount="597" docActiveCodeLength="4195" docExpressionCount="416" docLength="4582" projectName="A6" starttimestamp="1649862007572" timestamp="91943511">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager;¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		nioManager = NIOManagerFactory.getSingleton();¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7519" _type="PauseCommand" date="Thu Apr 14 12:33:00 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="91973345">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[29648]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7520" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 12:33:01 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="91973580" />
  <Command __id="7522" _type="PauseCommand" date="Thu Apr 14 12:33:07 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="91979607">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6027]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7521" _type="ShellCommand" date="Thu Apr 14 12:33:07 EDT 2022" starttimestamp="1649862007572" timestamp="91979607" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7524" _type="PauseCommand" date="Thu Apr 14 12:34:19 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="92051910">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[72303]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7523" _type="ShellCommand" date="Thu Apr 14 12:34:19 EDT 2022" starttimestamp="1649862007572" timestamp="92051910" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7525" _type="MoveCaretCommand" caretOffset="832" date="Thu Apr 14 12:34:19 EDT 2022" docOffset="1993" starttimestamp="1649862007572" timestamp="92052082" />
  <Command __id="7527" _type="PauseCommand" date="Thu Apr 14 12:34:34 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="92066998">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14916]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7526" _type="MoveCaretCommand" caretOffset="1368" date="Thu Apr 14 12:34:34 EDT 2022" docOffset="2529" starttimestamp="1649862007572" timestamp="92066998" />
  <Command __id="7529" _type="PauseCommand" date="Thu Apr 14 12:34:35 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92068057">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1059]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7528" _type="MoveCaretCommand" caretOffset="1366" date="Thu Apr 14 12:34:35 EDT 2022" docOffset="2527" starttimestamp="1649862007572" timestamp="92068057" />
  <Command __id="7531" _type="PauseCommand" date="Thu Apr 14 12:35:15 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="92107833">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[39776]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7530" _type="ShellCommand" date="Thu Apr 14 12:35:15 EDT 2022" starttimestamp="1649862007572" timestamp="92107833" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7533" _type="PauseCommand" date="Thu Apr 14 12:36:19 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="92171620">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[63787]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7532" _type="ShellCommand" date="Thu Apr 14 12:36:19 EDT 2022" starttimestamp="1649862007572" timestamp="92171620" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7534" _type="MoveCaretCommand" caretOffset="2480" date="Thu Apr 14 12:36:19 EDT 2022" docOffset="2480" starttimestamp="1649862007572" timestamp="92171694" />
  <Command __id="7536" _type="PauseCommand" date="Thu Apr 14 12:36:26 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92179087">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7393]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7535" _type="SelectTextCommand" caretOffset="2366" date="Thu Apr 14 12:36:26 EDT 2022" end="2527" start="2366" starttimestamp="1649862007572" timestamp="92179087" />
  <Command __id="7538" _type="CutCommand" date="Thu Apr 14 12:36:27 EDT 2022" starttimestamp="1649862007572" timestamp="92179646" />
  <Command __id="7539" _type="MoveCaretCommand" caretOffset="2049" date="Thu Apr 14 12:36:27 EDT 2022" docOffset="2049" starttimestamp="1649862007572" timestamp="92180423" />
  <Command __id="7541" _type="InsertStringCommand" date="Thu Apr 14 12:36:28 EDT 2022" starttimestamp="1649862007572" timestamp="92180983" timestamp2="92180983">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7543" _type="InsertStringCommand" date="Thu Apr 14 12:36:28 EDT 2022" starttimestamp="1649862007572" timestamp="92181121" timestamp2="92181121">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7544" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Thu Apr 14 12:36:29 EDT 2022" starttimestamp="1649862007572" timestamp="92181569" />
  <Command __id="7546" _type="PasteCommand" date="Thu Apr 14 12:36:29 EDT 2022" starttimestamp="1649862007572" timestamp="92181937" />
  <Command __id="7548" _type="PauseCommand" date="Thu Apr 14 12:36:31 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92183997">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2060]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7547" _type="MoveCaretCommand" caretOffset="2186" date="Thu Apr 14 12:36:31 EDT 2022" docOffset="2186" starttimestamp="1649862007572" timestamp="92183997" />
  <Command __id="7518" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:33:00 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="91973345">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="7537" _type="Delete" date="Thu Apr 14 12:36:27 EDT 2022" docASTNodeCount="537" docActiveCodeLength="3725" docExpressionCount="372" docLength="4454" endLine="60" length="161" offset="2366" startLine="58" starttimestamp="1649862007572" timestamp="92179633">
    <text><![CDATA[nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);]]></text>
  </DocumentChange>
  <DocumentChange __id="7540" _type="Insert" date="Thu Apr 14 12:36:28 EDT 2022" docASTNodeCount="537" docActiveCodeLength="3735" docExpressionCount="372" docLength="4464" length="10" offset="2049" repeat="2" starttimestamp="1649862007572" timestamp="92180977" timestamp2="92181115">
    <text><![CDATA[
			
			]]></text>
  </DocumentChange>
  <DocumentChange __id="7545" _type="Replace" date="Thu Apr 14 12:36:29 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3830" docExpressionCount="380" docLength="4602" endLine="54" insertionLength="141" int_docASTNodeCount="537" int_docActiveCodeLength="3732" int_docExpressionCount="372" int_docLength="4461" length="3" offset="2051" startLine="54" starttimestamp="1649862007572" timestamp="92181932">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
					// that can be read
this);]]></insertedText>
  </DocumentChange>
  <Command __id="7550" _type="PauseCommand" date="Thu Apr 14 12:36:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92186115">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2118]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="7551" _type="InsertStringCommand" date="Thu Apr 14 12:36:33 EDT 2022" starttimestamp="1649862007572" timestamp="92186118" timestamp2="92186118">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="7553" _type="PauseCommand" date="Thu Apr 14 12:36:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92189882">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3764]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7552" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:36:37 EDT 2022" starttimestamp="1649862007572" timestamp="92189882" />
  <Command __id="7554" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:36:37 EDT 2022" starttimestamp="1649862007572" timestamp="92189984" />
  <Command __id="7555" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:36:37 EDT 2022" starttimestamp="1649862007572" timestamp="92190006" />
  <DocumentChange __id="7549" _type="Insert" date="Thu Apr 14 12:36:33 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3835" docExpressionCount="380" docLength="4607" length="5" offset="2186" starttimestamp="1649862007572" timestamp="92186115">
    <text><![CDATA[					]]></text>
  </DocumentChange>
  <Command __id="7557" _type="PauseCommand" date="Thu Apr 14 12:36:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92194764">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4757]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="7556" _type="Delete" date="Thu Apr 14 12:36:42 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3830" docExpressionCount="380" docLength="4602" endLine="56" length="5" offset="2186" startLine="56" starttimestamp="1649862007572" timestamp="92194763">
    <text><![CDATA[					]]></text>
  </DocumentChange>
  <Command __id="7558" _type="UndoCommand" date="Thu Apr 14 12:36:42 EDT 2022" starttimestamp="1649862007572" timestamp="92194778" />
  <DocumentChange __id="7559" _type="Replace" date="Thu Apr 14 12:36:42 EDT 2022" docASTNodeCount="537" docActiveCodeLength="3735" docExpressionCount="372" docLength="4464" endLine="56" insertionLength="3" int_docASTNodeCount="537" int_docActiveCodeLength="3732" int_docExpressionCount="372" int_docLength="4461" length="141" offset="2051" startLine="54" starttimestamp="1649862007572" timestamp="92195207">
    <deletedText><![CDATA[			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
					// that can be read
this);]]></deletedText>
    <insertedText><![CDATA[			]]></insertedText>
  </DocumentChange>
  <Command __id="7560" _type="UndoCommand" date="Thu Apr 14 12:36:42 EDT 2022" starttimestamp="1649862007572" timestamp="92195213" />
  <DocumentChange __id="7561" _type="Delete" date="Thu Apr 14 12:36:43 EDT 2022" docASTNodeCount="537" docActiveCodeLength="3725" docExpressionCount="372" docLength="4454" endLine="55" length="10" offset="2049" startLine="53" starttimestamp="1649862007572" timestamp="92195827">
    <text><![CDATA[
			
			]]></text>
  </DocumentChange>
  <Command __id="7562" _type="UndoCommand" date="Thu Apr 14 12:36:43 EDT 2022" starttimestamp="1649862007572" timestamp="92195837" />
  <Command __id="7564" _type="UndoCommand" date="Thu Apr 14 12:36:44 EDT 2022" starttimestamp="1649862007572" timestamp="92196490" />
  <Command __id="7565" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:36:45 EDT 2022" starttimestamp="1649862007572" timestamp="92197486" />
  <Command __id="7566" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:36:45 EDT 2022" starttimestamp="1649862007572" timestamp="92197588" />
  <Command __id="7567" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:36:45 EDT 2022" starttimestamp="1649862007572" timestamp="92197614" />
  <Command __id="7569" _type="PauseCommand" date="Thu Apr 14 12:36:52 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92204622">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7007]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7568" _type="ShellCommand" date="Thu Apr 14 12:36:52 EDT 2022" starttimestamp="1649862007572" timestamp="92204621" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7571" _type="PauseCommand" date="Thu Apr 14 12:37:28 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="92240774">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[36153]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7570" _type="ShellCommand" date="Thu Apr 14 12:37:28 EDT 2022" starttimestamp="1649862007572" timestamp="92240774" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7573" _type="PauseCommand" date="Thu Apr 14 12:37:47 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="92259915">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19141]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7572" _type="SelectTextCommand" caretOffset="1070" date="Thu Apr 14 12:37:47 EDT 2022" end="1118" start="1070" starttimestamp="1649862007572" timestamp="92259915" />
  <Command __id="7575" _type="PauseCommand" date="Thu Apr 14 12:37:57 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92269831">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[9916]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7574" _type="MoveCaretCommand" caretOffset="1118" date="Thu Apr 14 12:37:57 EDT 2022" docOffset="1118" starttimestamp="1649862007572" timestamp="92269831" />
  <Command __id="7577" _type="PauseCommand" date="Thu Apr 14 12:37:58 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92271369">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1538]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7576" _type="SelectTextCommand" caretOffset="1070" date="Thu Apr 14 12:37:58 EDT 2022" end="1118" start="1070" starttimestamp="1649862007572" timestamp="92271369" />
  <Command __id="7578" _type="CopyCommand" date="Thu Apr 14 12:37:59 EDT 2022" starttimestamp="1649862007572" timestamp="92271613" />
  <Command __id="7579" _type="MoveCaretCommand" caretOffset="1118" date="Thu Apr 14 12:37:59 EDT 2022" docOffset="1118" starttimestamp="1649862007572" timestamp="92272266" />
  <Command __id="7581" _type="ShellCommand" date="Thu Apr 14 12:38:00 EDT 2022" starttimestamp="1649862007572" timestamp="92272806" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7583" _type="PauseCommand" date="Thu Apr 14 12:38:05 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92278277">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5471]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7582" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:38:05 EDT 2022" forward="false" matchWord="false" offset="1118" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="92278277" wrapSearch="false">
    <searchString><![CDATA[FactoryTraceU]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7584" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:38:06 EDT 2022" forward="false" matchWord="false" offset="1111" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="92278858" wrapSearch="false">
    <searchString><![CDATA[FactoryTraceU]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7585" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:38:06 EDT 2022" forward="false" matchWord="false" offset="1111" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="92279107" wrapSearch="false">
    <searchString><![CDATA[FactoryTraceU]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7586" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:38:06 EDT 2022" forward="false" matchWord="false" offset="1111" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="92279304" wrapSearch="false">
    <searchString><![CDATA[FactoryTraceU]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7587" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:38:07 EDT 2022" forward="false" matchWord="false" offset="1111" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="92279496" wrapSearch="false">
    <searchString><![CDATA[FactoryTraceU]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7589" _type="PauseCommand" date="Thu Apr 14 12:38:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92280667">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1171]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7588" _type="ShellCommand" date="Thu Apr 14 12:38:08 EDT 2022" starttimestamp="1649862007572" timestamp="92280667" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7591" _type="PauseCommand" date="Thu Apr 14 12:38:13 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92285981">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5314]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7590" _type="SelectTextCommand" caretOffset="1098" date="Thu Apr 14 12:38:13 EDT 2022" end="1117" start="1098" starttimestamp="1649862007572" timestamp="92285981" />
  <Command __id="7592" _type="CopyCommand" date="Thu Apr 14 12:38:13 EDT 2022" starttimestamp="1649862007572" timestamp="92286260" />
  <Command __id="7594" _type="PauseCommand" date="Thu Apr 14 12:38:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92288468">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2208]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7593" _type="MoveCaretCommand" caretOffset="1288" date="Thu Apr 14 12:38:16 EDT 2022" docOffset="1288" starttimestamp="1649862007572" timestamp="92288468" />
  <Command __id="7596" _type="PauseCommand" date="Thu Apr 14 12:38:22 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92294721">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6253]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7595" _type="MoveCaretCommand" caretOffset="2040" date="Thu Apr 14 12:38:22 EDT 2022" docOffset="2040" starttimestamp="1649862007572" timestamp="92294721" />
  <DocumentChange __id="7563" _type="Insert" date="Thu Apr 14 12:36:44 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" length="161" offset="2366" starttimestamp="1649862007572" timestamp="92196485">
    <text><![CDATA[nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);]]></text>
  </DocumentChange>
  <Command __id="7598" _type="PauseCommand" date="Thu Apr 14 12:38:24 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92296505">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1784]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="7597" _type="Insert" date="Thu Apr 14 12:38:24 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3847" docExpressionCount="380" docLength="4619" length="4" offset="2040" starttimestamp="1649862007572" timestamp="92296505">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="7599" _type="InsertStringCommand" date="Thu Apr 14 12:38:24 EDT 2022" starttimestamp="1649862007572" timestamp="92296511" timestamp2="92296511">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7601" _type="PasteCommand" date="Thu Apr 14 12:38:24 EDT 2022" starttimestamp="1649862007572" timestamp="92296822" />
  <Command __id="7603" _type="PauseCommand" date="Thu Apr 14 12:38:25 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92297837">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1015]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7602" _type="SelectTextCommand" caretOffset="2190" date="Thu Apr 14 12:38:25 EDT 2022" end="2190" start="2040" starttimestamp="1649862007572" timestamp="92297837" />
  <Command __id="7604" _type="MoveCaretCommand" caretOffset="2063" date="Thu Apr 14 12:38:26 EDT 2022" docOffset="2063" starttimestamp="1649862007572" timestamp="92298599" />
  <Command __id="7606" _type="InsertStringCommand" date="Thu Apr 14 12:38:26 EDT 2022" starttimestamp="1649862007572" timestamp="92298996" timestamp2="92298996">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7607" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 12:38:26 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="92298999" />
  <DocumentChange __id="7600" _type="Replace" date="Thu Apr 14 12:38:24 EDT 2022" docASTNodeCount="548" docActiveCodeLength="3866" docExpressionCount="381" docLength="4638" endLine="53" insertionLength="21" int_docASTNodeCount="546" int_docActiveCodeLength="3845" int_docExpressionCount="380" int_docLength="4617" length="2" offset="2042" startLine="53" starttimestamp="1649862007572" timestamp="92296817">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		FactoryTraceUtility]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7605" _type="Insert" date="Thu Apr 14 12:38:26 EDT 2022" docASTNodeCount="548" docActiveCodeLength="3867" docExpressionCount="381" docLength="4639" length="1" offset="2063" starttimestamp="1649862007572" timestamp="92298992">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7609" _type="PauseCommand" date="Thu Apr 14 12:38:30 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92302705">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3706]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="7608" _type="Delete" date="Thu Apr 14 12:38:30 EDT 2022" docASTNodeCount="548" docActiveCodeLength="3866" docExpressionCount="381" docLength="4638" endLine="53" length="1" offset="2063" startLine="53" starttimestamp="1649862007572" timestamp="92302705">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="7611" _type="PauseCommand" date="Thu Apr 14 12:38:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92305085">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[2380]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="7612" _type="UndoCommand" date="Thu Apr 14 12:38:32 EDT 2022" starttimestamp="1649862007572" timestamp="92305090" />
  <Command __id="7614" _type="PauseCommand" date="Thu Apr 14 12:38:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92306900">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1810]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="7613" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 12:38:34 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="92306900" />
  <Command __id="7615" _type="MoveCaretCommand" caretOffset="2073" date="Thu Apr 14 12:38:34 EDT 2022" docOffset="2073" starttimestamp="1649862007572" timestamp="92307009" />
  <Command __id="7617" _type="PauseCommand" date="Thu Apr 14 12:38:36 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92309014">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2005]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7616" _type="SelectTextCommand" caretOffset="2043" date="Thu Apr 14 12:38:36 EDT 2022" end="2064" start="2043" starttimestamp="1649862007572" timestamp="92309014" />
  <Command __id="7619" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:38:36 EDT 2022" starttimestamp="1649862007572" timestamp="92309302" />
  <Command __id="7621" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:38:37 EDT 2022" starttimestamp="1649862007572" timestamp="92309598" />
  <Command __id="7623" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:38:37 EDT 2022" starttimestamp="1649862007572" timestamp="92309873" />
  <Command __id="7625" _type="PauseCommand" date="Thu Apr 14 12:38:38 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92311073">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1200]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7624" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:38:38 EDT 2022" starttimestamp="1649862007572" timestamp="92311073" />
  <Command __id="7626" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:38:38 EDT 2022" starttimestamp="1649862007572" timestamp="92311162" />
  <Command __id="7627" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:38:38 EDT 2022" starttimestamp="1649862007572" timestamp="92311184" />
  <Command __id="7629" _type="PauseCommand" date="Thu Apr 14 12:38:40 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92313275">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2091]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7628" _type="SelectTextCommand" caretOffset="1921" date="Thu Apr 14 12:38:40 EDT 2022" end="1987" start="1921" starttimestamp="1649862007572" timestamp="92313275" />
  <Command __id="7630" _type="CopyCommand" date="Thu Apr 14 12:38:41 EDT 2022" starttimestamp="1649862007572" timestamp="92313646" />
  <Command __id="7632" _type="PauseCommand" date="Thu Apr 14 12:38:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92318318">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[4672]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7631" _type="MoveCaretCommand" caretOffset="2049" date="Thu Apr 14 12:38:45 EDT 2022" docOffset="2049" starttimestamp="1649862007572" timestamp="92318318" />
  <Command __id="7635" _type="PauseCommand" date="Thu Apr 14 12:38:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92319467">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1149]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7634" _type="ShellCommand" date="Thu Apr 14 12:38:47 EDT 2022" starttimestamp="1649862007572" timestamp="92319467" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7637" _type="PauseCommand" date="Thu Apr 14 12:38:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92320863">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1396]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7636" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:38:48 EDT 2022" forward="false" matchWord="false" offset="2049" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="92320863" wrapSearch="false">
    <searchString><![CDATA[factory]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7638" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:38:48 EDT 2022" forward="false" matchWord="false" offset="1928" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="92321312" wrapSearch="false">
    <searchString><![CDATA[factory]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7639" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:38:49 EDT 2022" forward="false" matchWord="false" offset="1928" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="92321585" wrapSearch="false">
    <searchString><![CDATA[factory]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7641" _type="PauseCommand" date="Thu Apr 14 12:38:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92322834">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1249]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7640" _type="ShellCommand" date="Thu Apr 14 12:38:50 EDT 2022" starttimestamp="1649862007572" timestamp="92322834" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="7610" _type="Insert" date="Thu Apr 14 12:38:32 EDT 2022" docASTNodeCount="548" docActiveCodeLength="3867" docExpressionCount="381" docLength="4639" length="1" offset="2063" starttimestamp="1649862007572" timestamp="92305085">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="7618" _type="Delete" date="Thu Apr 14 12:38:36 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" endLine="53" length="24" offset="2040" repeat="3" startLine="52" starttimestamp="1649862007572" timestamp="92309299" timestamp2="92309869">
    <text><![CDATA[
		FactoryTraceUtility.]]></text>
  </DocumentChange>
  <Command __id="7643" _type="PauseCommand" date="Thu Apr 14 12:38:52 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92324715">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1881]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7644" _type="MoveCaretCommand" caretOffset="1404" date="Thu Apr 14 12:38:52 EDT 2022" docOffset="1764" starttimestamp="1649862007572" timestamp="92324819" />
  <Command __id="7642" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:38:52 EDT 2022" docASTNodeCount="252" docActiveCodeLength="1776" docExpressionCount="157" docLength="2044" projectName="A6" starttimestamp="1649862007572" timestamp="92324715">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7646" _type="PauseCommand" date="Thu Apr 14 12:38:58 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92330821">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6002]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7647" _type="MoveCaretCommand" caretOffset="3204" date="Thu Apr 14 12:38:58 EDT 2022" docOffset="4860" starttimestamp="1649862007572" timestamp="92330906" />
  <Command __id="7645" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:38:58 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="92330821">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7649" _type="PauseCommand" date="Thu Apr 14 12:39:02 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92334786">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3880]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7650" _type="MoveCaretCommand" caretOffset="1404" date="Thu Apr 14 12:39:02 EDT 2022" docOffset="1764" starttimestamp="1649862007572" timestamp="92334900" />
  <Command __id="7648" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:39:02 EDT 2022" docASTNodeCount="252" docActiveCodeLength="1776" docExpressionCount="157" docLength="2044" projectName="A6" starttimestamp="1649862007572" timestamp="92334786">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\readThread\ServerReadThread.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package readThread;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.NIOManagerPrintServer;¶import server.remote.ServerRemoteObjectNIO;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶¶@Tags({DistributedTags.NIO, DistributedTags.SERVER_READ_THREAD})¶public class ServerReadThread implements ReadThreadInterface{¶	¶	final ServerRemoteObjectNIO server;¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	¶	public ServerReadThread (final ServerRemoteObjectNIO aServer) {¶		server = aServer;¶	}¶¶	@Override¶	public void run() {¶		// TODO Auto-generated method stub¶		while(true) {¶			synchronized (this) {¶				try {¶					wait();¶				} catch (InterruptedException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶					break; // this breaks out of run loop then thread terminates¶				}¶			}¶			¶			System.out.println("IN RUN METHOD OF READ THREAD");¶			¶			ArrayBlockingQueue<ByteBuffer> boundedBuffer = server.getBoundedBuffer();¶			List<SocketChannel> socketList = server.getSocketList();¶			SocketChannel currentSocket = server.getSocketChannel();¶			¶					¶			ByteBuffer originalMessage = null;¶			try {¶				originalMessage = boundedBuffer.take();¶			} catch (InterruptedException e) {¶				e.printStackTrace();¶			}¶			// Echo recieve message to all clients (except original message sender)¶			for (SocketChannel socket : socketList) {¶				if (!socket.equals(currentSocket)) {¶					nioManager.write(socket, originalMessage, server);¶				}¶			}¶		¶		}¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public synchronized void notifyThread() {¶		// TODO This should be when a line is read¶		this.notify();¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7652" _type="PauseCommand" date="Thu Apr 14 12:39:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92339322">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4422]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7659" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Thu Apr 14 12:39:17 EDT 2022" starttimestamp="1649862007572" timestamp="92350395" />
  <Command __id="7661" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:39:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92350408" type="Debug" />
  <Command __id="7662" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:39:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92350408" type="Debug" />
  <Command __id="7663" _type="ProgramExecutionEvent" className="/A6/src/registry/TrickOrTreatRegistry.java" date="Thu Apr 14 12:39:17 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="92350408" type="Run" />
  <Command __id="7665" _type="PauseCommand" date="Thu Apr 14 12:39:25 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92358295">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7886]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7664" _type="ShellCommand" date="Thu Apr 14 12:39:25 EDT 2022" starttimestamp="1649862007572" timestamp="92358294" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7667" _type="PauseCommand" date="Thu Apr 14 12:43:49 EDT 2022" range="2m-5m" starttimestamp="1649862007572" timestamp="92621481">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[263187]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7666" _type="ShellCommand" date="Thu Apr 14 12:43:49 EDT 2022" starttimestamp="1649862007572" timestamp="92621481" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7669" _type="MoveCaretCommand" caretOffset="1799" date="Thu Apr 14 12:43:49 EDT 2022" docOffset="1799" starttimestamp="1649862007572" timestamp="92621959" />
  <Command __id="7671" _type="PauseCommand" date="Thu Apr 14 12:43:51 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92624229">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2270]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7670" _type="MoveCaretCommand" caretOffset="2586" date="Thu Apr 14 12:43:51 EDT 2022" docOffset="2586" starttimestamp="1649862007572" timestamp="92624229" />
  <Command __id="7672" _type="MoveCaretCommand" caretOffset="2586" date="Thu Apr 14 12:43:51 EDT 2022" docOffset="2586" starttimestamp="1649862007572" timestamp="92624230" />
  <Command __id="7674" _type="InsertStringCommand" date="Thu Apr 14 12:43:52 EDT 2022" starttimestamp="1649862007572" timestamp="92624492" timestamp2="92624492">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7675" _type="InsertStringCommand" date="Thu Apr 14 12:43:52 EDT 2022" starttimestamp="1649862007572" timestamp="92624492" timestamp2="92624492">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7677" _type="InsertStringCommand" date="Thu Apr 14 12:43:52 EDT 2022" starttimestamp="1649862007572" timestamp="92624637" timestamp2="92624637">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7678" _type="InsertStringCommand" date="Thu Apr 14 12:43:52 EDT 2022" starttimestamp="1649862007572" timestamp="92624637" timestamp2="92624637">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7680" _type="PasteCommand" date="Thu Apr 14 12:43:52 EDT 2022" starttimestamp="1649862007572" timestamp="92624938" />
  <Command __id="7682" _type="PauseCommand" date="Thu Apr 14 12:44:06 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="92638814">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[13876]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7681" _type="ShellCommand" date="Thu Apr 14 12:44:06 EDT 2022" starttimestamp="1649862007572" timestamp="92638814" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7684" _type="PauseCommand" date="Thu Apr 14 12:44:17 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="92649857">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11043]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7683" _type="ShellCommand" date="Thu Apr 14 12:44:17 EDT 2022" starttimestamp="1649862007572" timestamp="92649857" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7685" _type="MoveCaretCommand" caretOffset="2646" date="Thu Apr 14 12:44:17 EDT 2022" docOffset="2646" starttimestamp="1649862007572" timestamp="92649913" />
  <Command __id="7686" _type="MoveCaretCommand" caretOffset="2646" date="Thu Apr 14 12:44:17 EDT 2022" docOffset="2646" starttimestamp="1649862007572" timestamp="92649913" />
  <Command __id="7688" _type="PauseCommand" date="Thu Apr 14 12:44:20 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92653352">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3439]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7687" _type="ShellCommand" date="Thu Apr 14 12:44:20 EDT 2022" starttimestamp="1649862007572" timestamp="92653352" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7690" _type="PauseCommand" date="Thu Apr 14 12:44:26 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92658433">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5081]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7689" _type="ShellCommand" date="Thu Apr 14 12:44:26 EDT 2022" starttimestamp="1649862007572" timestamp="92658433" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7691" _type="MoveCaretCommand" caretOffset="2561" date="Thu Apr 14 12:44:26 EDT 2022" docOffset="2561" starttimestamp="1649862007572" timestamp="92658581" />
  <Command __id="7692" _type="MoveCaretCommand" caretOffset="2561" date="Thu Apr 14 12:44:26 EDT 2022" docOffset="2561" starttimestamp="1649862007572" timestamp="92658581" />
  <Command __id="7694" _type="PauseCommand" date="Thu Apr 14 12:44:29 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92662180">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3599]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7693" _type="MoveCaretCommand" caretOffset="1089" date="Thu Apr 14 12:44:29 EDT 2022" docOffset="1089" starttimestamp="1649862007572" timestamp="92662180" />
  <Command __id="7695" _type="MoveCaretCommand" caretOffset="1089" date="Thu Apr 14 12:44:29 EDT 2022" docOffset="1089" starttimestamp="1649862007572" timestamp="92662180" />
  <Command __id="7697" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92662466" timestamp2="92662466">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7698" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92662466" timestamp2="92662466">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7700" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92662604" timestamp2="92662604">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7701" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92662604" timestamp2="92662604">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7703" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92662910" timestamp2="92662910">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7704" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92662910" timestamp2="92662910">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7706" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92663101" timestamp2="92663101">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7707" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92663101" timestamp2="92663101">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="7709" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92663273" timestamp2="92663273">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="7710" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92663273" timestamp2="92663273">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="7712" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92663314" timestamp2="92663314">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7713" _type="InsertStringCommand" date="Thu Apr 14 12:44:30 EDT 2022" starttimestamp="1649862007572" timestamp="92663314" timestamp2="92663314">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="7715" _type="InsertStringCommand" date="Thu Apr 14 12:44:31 EDT 2022" starttimestamp="1649862007572" timestamp="92663485" timestamp2="92663485">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7716" _type="InsertStringCommand" date="Thu Apr 14 12:44:31 EDT 2022" starttimestamp="1649862007572" timestamp="92663485" timestamp2="92663485">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7718" _type="InsertStringCommand" date="Thu Apr 14 12:44:31 EDT 2022" starttimestamp="1649862007572" timestamp="92663658" timestamp2="92663658">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7719" _type="InsertStringCommand" date="Thu Apr 14 12:44:31 EDT 2022" starttimestamp="1649862007572" timestamp="92663658" timestamp2="92663658">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7721" _type="InsertStringCommand" date="Thu Apr 14 12:44:31 EDT 2022" starttimestamp="1649862007572" timestamp="92663803" timestamp2="92663803">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7722" _type="InsertStringCommand" date="Thu Apr 14 12:44:31 EDT 2022" starttimestamp="1649862007572" timestamp="92663803" timestamp2="92663803">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="7724" _type="PasteCommand" date="Thu Apr 14 12:44:32 EDT 2022" starttimestamp="1649862007572" timestamp="92664500" />
  <Command __id="7726" _type="InsertStringCommand" date="Thu Apr 14 12:44:32 EDT 2022" starttimestamp="1649862007572" timestamp="92665343" timestamp2="92665343">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7727" _type="InsertStringCommand" date="Thu Apr 14 12:44:32 EDT 2022" starttimestamp="1649862007572" timestamp="92665343" timestamp2="92665343">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7729" _type="PauseCommand" date="Thu Apr 14 12:44:35 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92667574">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2231]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7728" _type="MoveCaretCommand" caretOffset="1102" date="Thu Apr 14 12:44:35 EDT 2022" docOffset="1102" starttimestamp="1649862007572" timestamp="92667574" />
  <Command __id="7730" _type="MoveCaretCommand" caretOffset="1102" date="Thu Apr 14 12:44:35 EDT 2022" docOffset="1102" starttimestamp="1649862007572" timestamp="92667574" />
  <Command __id="7732" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:44:35 EDT 2022" starttimestamp="1649862007572" timestamp="92667874" />
  <Command __id="7733" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:44:35 EDT 2022" starttimestamp="1649862007572" timestamp="92667874" />
  <Command __id="7734" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:44:36 EDT 2022" starttimestamp="1649862007572" timestamp="92668710" />
  <Command __id="7735" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:44:36 EDT 2022" starttimestamp="1649862007572" timestamp="92668800" />
  <Command __id="7736" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:44:36 EDT 2022" starttimestamp="1649862007572" timestamp="92668858" />
  <Command __id="7738" _type="PauseCommand" date="Thu Apr 14 12:44:45 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="92678180">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9322]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7737" _type="ShellCommand" date="Thu Apr 14 12:44:45 EDT 2022" starttimestamp="1649862007572" timestamp="92678180" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7739" _type="ShellCommand" date="Thu Apr 14 12:44:45 EDT 2022" starttimestamp="1649862007572" timestamp="92678340" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7745" _type="PauseCommand" date="Thu Apr 14 12:44:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92680231">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1874]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7744" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:44:47 EDT 2022" starttimestamp="1649862007572" timestamp="92680231" />
  <Command __id="7746" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:44:47 EDT 2022" starttimestamp="1649862007572" timestamp="92680335" />
  <Command __id="7747" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:44:47 EDT 2022" starttimestamp="1649862007572" timestamp="92680361" />
  <Command __id="7749" _type="PauseCommand" date="Thu Apr 14 12:44:49 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92681564">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1203]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7748" _type="MoveCaretCommand" caretOffset="2741" date="Thu Apr 14 12:44:49 EDT 2022" docOffset="2741" starttimestamp="1649862007572" timestamp="92681564" />
  <Command __id="7750" _type="MoveCaretCommand" caretOffset="2741" date="Thu Apr 14 12:44:49 EDT 2022" docOffset="2741" starttimestamp="1649862007572" timestamp="92681564" />
  <Command __id="7752" _type="InsertStringCommand" date="Thu Apr 14 12:44:49 EDT 2022" starttimestamp="1649862007572" timestamp="92681867" timestamp2="92681867">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7753" _type="InsertStringCommand" date="Thu Apr 14 12:44:49 EDT 2022" starttimestamp="1649862007572" timestamp="92681867" timestamp2="92681867">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7755" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92682596" timestamp2="92682596">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="7756" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92682596" timestamp2="92682596">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="7758" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92682948" timestamp2="92682948">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7759" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92682948" timestamp2="92682948">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="7761" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92683060" timestamp2="92683060">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="7762" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92683060" timestamp2="92683060">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="7764" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92683235" timestamp2="92683235">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7765" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92683235" timestamp2="92683235">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7767" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92683321" timestamp2="92683321">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7768" _type="InsertStringCommand" date="Thu Apr 14 12:44:50 EDT 2022" starttimestamp="1649862007572" timestamp="92683321" timestamp2="92683321">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7770" _type="InsertStringCommand" date="Thu Apr 14 12:44:51 EDT 2022" starttimestamp="1649862007572" timestamp="92683519" timestamp2="92683519">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7771" _type="InsertStringCommand" date="Thu Apr 14 12:44:51 EDT 2022" starttimestamp="1649862007572" timestamp="92683519" timestamp2="92683519">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="7773" _type="InsertStringCommand" date="Thu Apr 14 12:44:51 EDT 2022" starttimestamp="1649862007572" timestamp="92683660" timestamp2="92683660">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7774" _type="InsertStringCommand" date="Thu Apr 14 12:44:51 EDT 2022" starttimestamp="1649862007572" timestamp="92683660" timestamp2="92683660">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7776" _type="InsertStringCommand" date="Thu Apr 14 12:44:51 EDT 2022" starttimestamp="1649862007572" timestamp="92683820" timestamp2="92683820">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7777" _type="InsertStringCommand" date="Thu Apr 14 12:44:51 EDT 2022" starttimestamp="1649862007572" timestamp="92683820" timestamp2="92683820">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="7779" _type="InsertStringCommand" date="Thu Apr 14 12:44:51 EDT 2022" starttimestamp="1649862007572" timestamp="92684013" timestamp2="92684013">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7780" _type="InsertStringCommand" date="Thu Apr 14 12:44:51 EDT 2022" starttimestamp="1649862007572" timestamp="92684013" timestamp2="92684013">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7782" _type="PauseCommand" date="Thu Apr 14 12:44:52 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92685128">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1115]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7781" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:44:52 EDT 2022" starttimestamp="1649862007572" timestamp="92685128" />
  <Command __id="7783" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:44:52 EDT 2022" starttimestamp="1649862007572" timestamp="92685218" />
  <Command __id="7784" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:44:52 EDT 2022" starttimestamp="1649862007572" timestamp="92685254" />
  <Command __id="7786" _type="PauseCommand" date="Thu Apr 14 12:44:56 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92689313">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4059]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7785" _type="ShellCommand" date="Thu Apr 14 12:44:56 EDT 2022" starttimestamp="1649862007572" timestamp="92689313" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7787" _type="ShellCommand" date="Thu Apr 14 12:44:57 EDT 2022" starttimestamp="1649862007572" timestamp="92689449" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7791" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 12:44:57 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="92689689" />
  <Command __id="7792" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:44:57 EDT 2022" starttimestamp="1649862007572" timestamp="92690425" />
  <Command __id="7793" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:44:58 EDT 2022" starttimestamp="1649862007572" timestamp="92690643" />
  <Command __id="7794" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:44:58 EDT 2022" starttimestamp="1649862007572" timestamp="92690674" />
  <Command __id="7651" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:39:06 EDT 2022" docASTNodeCount="921" docActiveCodeLength="6719" docExpressionCount="645" docLength="7483" projectName="A6" starttimestamp="1649862007572" timestamp="92339322">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		"), Diff(INSERT,"System.out.println("inside RMI server start");¶		"), Diff(EQUAL,"init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		IPCMechanism mechanism = getIPCMechanism();¶		setIPCMechanism(mechanism);¶		boolean broadcast = true;¶		setBroadcastMetaState(broadcast);¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.nio.ByteBuffer;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		System.out.println("inside RMI server start");
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		IPCMechanism mechanism = getIPCMechanism();
		setIPCMechanism(mechanism);
		boolean broadcast = true;
		setBroadcastMetaState(broadcast);
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)
			throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {
		// TODO Auto-generated method stub
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="7668" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:43:49 EDT 2022" docASTNodeCount="597" docActiveCodeLength="4195" docExpressionCount="416" docLength="4582" projectName="A6" starttimestamp="1649862007572" timestamp="92621764">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager;¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		nioManager = NIOManagerFactory.getSingleton();¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="7673" _type="Insert" date="Thu Apr 14 12:43:52 EDT 2022" docASTNodeCount="597" docActiveCodeLength="4201" docExpressionCount="416" docLength="4588" length="6" offset="2586" repeat="2" starttimestamp="1649862007572" timestamp="92624487" timestamp2="92624633">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="7679" _type="Replace" date="Thu Apr 14 12:43:52 EDT 2022" docASTNodeCount="612" docActiveCodeLength="4330" docExpressionCount="425" docLength="4717" endLine="73" insertionLength="130" int_docASTNodeCount="597" int_docActiveCodeLength="4200" int_docExpressionCount="416" int_docLength="4587" length="1" offset="2591" startLine="73" starttimestamp="1649862007572" timestamp="92624934">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	protected void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7696" _type="Insert" date="Thu Apr 14 12:44:30 EDT 2022" docASTNodeCount="624" docActiveCodeLength="4414" docExpressionCount="436" docLength="4801" length="84" offset="1089" repeat="11" starttimestamp="1649862007572" timestamp="92662459" timestamp2="92665339">
    <text><![CDATA[

import 
inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;]]></text>
  </DocumentChange>
  <DocumentChange __id="7731" _type="Delete" date="Thu Apr 14 12:44:35 EDT 2022" docASTNodeCount="624" docActiveCodeLength="4412" docExpressionCount="436" docLength="4799" endLine="30" length="2" offset="1100" startLine="29" starttimestamp="1649862007572" timestamp="92667871">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="7740" _type="Delete" date="Thu Apr 14 12:44:45 EDT 2022" docASTNodeCount="624" docActiveCodeLength="4408" docExpressionCount="436" docLength="4795" endLine="29" length="4" offset="1089" startLine="27" starttimestamp="1649862007572" timestamp="92678354">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="7741" _type="Insert" date="Thu Apr 14 12:44:45 EDT 2022" docASTNodeCount="636" docActiveCodeLength="4482" docExpressionCount="447" docLength="4869" length="74" offset="1089" repeat="3" starttimestamp="1649862007572" timestamp="92678357" timestamp2="92678359">
    <text><![CDATA[
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
]]></text>
  </DocumentChange>
  <DocumentChange __id="7751" _type="Insert" date="Thu Apr 14 12:44:49 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4494" docExpressionCount="449" docLength="4881" length="12" offset="2741" repeat="10" starttimestamp="1649862007572" timestamp="92681862" timestamp2="92684007">
    <text><![CDATA[
	@Override]]></text>
  </DocumentChange>
  <Command __id="7788" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:44:57 EDT 2022" docASTNodeCount="90" docActiveCodeLength="652" docExpressionCount="66" docLength="652" projectName="A6" starttimestamp="1649862007572" timestamp="92689553">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶¶public interface ServerRemoteInterfaceNIO extends SocketChannelAcceptListener, SocketChannelReadListener, SocketChannelWriteListener {¶¶	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶	List<SocketChannel> getSocketList();¶¶	SocketChannel getSocketChannel();¶¶}")]]]></diff>
  </Command>
  <DocumentChange __id="7789" _type="Insert" date="Thu Apr 14 12:44:57 EDT 2022" docASTNodeCount="93" docActiveCodeLength="677" docExpressionCount="67" docLength="677" length="25" offset="647" repeat="2" starttimestamp="1649862007572" timestamp="92689575" timestamp2="92689576">
    <text><![CDATA[

	void setFactories();]]></text>
  </DocumentChange>
  <Command __id="7796" _type="PauseCommand" date="Thu Apr 14 12:45:02 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92694855">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4181]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7797" _type="MoveCaretCommand" caretOffset="4290" date="Thu Apr 14 12:45:02 EDT 2022" docOffset="5788" starttimestamp="1649862007572" timestamp="92695014" />
  <Command __id="7795" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:45:02 EDT 2022" docASTNodeCount="921" docActiveCodeLength="6719" docExpressionCount="645" docLength="7483" projectName="A6" starttimestamp="1649862007572" timestamp="92694855">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		System.out.println("inside RMI server start");¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		IPCMechanism mechanism = getIPCMechanism();¶		setIPCMechanism(mechanism);¶		boolean broadcast = true;¶		setBroadcastMetaState(broadcast);¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7799" _type="PauseCommand" date="Thu Apr 14 12:45:06 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92698641">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3627]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7800" _type="MoveCaretCommand" caretOffset="2753" date="Thu Apr 14 12:45:06 EDT 2022" docOffset="2753" starttimestamp="1649862007572" timestamp="92698830" />
  <Command __id="7802" _type="PauseCommand" date="Thu Apr 14 12:45:09 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92701903">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3073]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7801" _type="ShellCommand" date="Thu Apr 14 12:45:09 EDT 2022" starttimestamp="1649862007572" timestamp="92701903" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7803" _type="ShellCommand" date="Thu Apr 14 12:45:09 EDT 2022" starttimestamp="1649862007572" timestamp="92702045" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7808" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:45:10 EDT 2022" starttimestamp="1649862007572" timestamp="92702895" />
  <Command __id="7809" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:45:10 EDT 2022" starttimestamp="1649862007572" timestamp="92702997" />
  <Command __id="7810" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:45:10 EDT 2022" starttimestamp="1649862007572" timestamp="92703055" />
  <Command __id="7812" _type="PauseCommand" date="Thu Apr 14 12:45:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92707822">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4767]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="7811" _type="SelectTextCommand" caretOffset="2768" date="Thu Apr 14 12:45:15 EDT 2022" end="2783" start="2768" starttimestamp="1649862007572" timestamp="92707822" />
  <Command __id="7813" _type="SelectTextCommand" caretOffset="2768" date="Thu Apr 14 12:45:15 EDT 2022" end="2783" start="2768" starttimestamp="1649862007572" timestamp="92707822" />
  <Command __id="7814" _type="CopyCommand" date="Thu Apr 14 12:45:15 EDT 2022" starttimestamp="1649862007572" timestamp="92708006" />
  <Command __id="7816" _type="PauseCommand" date="Thu Apr 14 12:45:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92710556">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2550]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7849" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:45:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92742137" type="Run" />
  <Command __id="7851" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:45:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92742138" type="Run" />
  <Command __id="7853" _type="PauseCommand" date="Thu Apr 14 12:45:54 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92746717">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4579]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7852" _type="ShellCommand" date="Thu Apr 14 12:45:54 EDT 2022" starttimestamp="1649862007572" timestamp="92746717" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7855" _type="PauseCommand" date="Thu Apr 14 12:46:13 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="92765513">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18796]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7854" _type="ShellCommand" date="Thu Apr 14 12:46:13 EDT 2022" starttimestamp="1649862007572" timestamp="92765513" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7857" _type="PauseCommand" date="Thu Apr 14 12:47:07 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="92819518">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[54005]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7856" _type="MoveCaretCommand" caretOffset="1792" date="Thu Apr 14 12:47:07 EDT 2022" docOffset="1792" starttimestamp="1649862007572" timestamp="92819518" />
  <Command __id="7858" _type="MoveCaretCommand" caretOffset="1792" date="Thu Apr 14 12:47:07 EDT 2022" docOffset="1792" starttimestamp="1649862007572" timestamp="92819518" />
  <Command __id="7860" _type="PauseCommand" date="Thu Apr 14 12:47:10 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92822733">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3215]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7859" _type="MoveCaretCommand" caretOffset="2113" date="Thu Apr 14 12:47:10 EDT 2022" docOffset="2113" starttimestamp="1649862007572" timestamp="92822733" />
  <Command __id="7861" _type="MoveCaretCommand" caretOffset="2113" date="Thu Apr 14 12:47:10 EDT 2022" docOffset="2113" starttimestamp="1649862007572" timestamp="92822733" />
  <Command __id="7863" _type="InsertStringCommand" date="Thu Apr 14 12:47:10 EDT 2022" starttimestamp="1649862007572" timestamp="92823260" timestamp2="92823260">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7864" _type="InsertStringCommand" date="Thu Apr 14 12:47:10 EDT 2022" starttimestamp="1649862007572" timestamp="92823260" timestamp2="92823260">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7866" _type="InsertStringCommand" date="Thu Apr 14 12:47:10 EDT 2022" starttimestamp="1649862007572" timestamp="92823393" timestamp2="92823393">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7867" _type="InsertStringCommand" date="Thu Apr 14 12:47:10 EDT 2022" starttimestamp="1649862007572" timestamp="92823393" timestamp2="92823393">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7869" _type="PauseCommand" date="Thu Apr 14 12:47:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92824664">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1271]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7898" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:47:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92849427" type="Run" />
  <Command __id="7900" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:47:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92849427" type="Run" />
  <Command __id="7902" _type="PauseCommand" date="Thu Apr 14 12:47:54 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="92866562">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[17135]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7901" _type="MoveCaretCommand" caretOffset="2116" date="Thu Apr 14 12:47:54 EDT 2022" docOffset="2116" starttimestamp="1649862007572" timestamp="92866562" />
  <Command __id="7903" _type="MoveCaretCommand" caretOffset="2116" date="Thu Apr 14 12:47:54 EDT 2022" docOffset="2116" starttimestamp="1649862007572" timestamp="92866562" />
  <Command __id="7904" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 12:47:54 EDT 2022" starttimestamp="1649862007572" timestamp="92867427" />
  <Command __id="7905" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 12:47:54 EDT 2022" starttimestamp="1649862007572" timestamp="92867427" />
  <Command __id="7907" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:47:55 EDT 2022" starttimestamp="1649862007572" timestamp="92867808" />
  <Command __id="7908" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:47:55 EDT 2022" starttimestamp="1649862007572" timestamp="92867809" />
  <Command __id="7910" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:47:55 EDT 2022" starttimestamp="1649862007572" timestamp="92867937" />
  <Command __id="7911" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 12:47:55 EDT 2022" starttimestamp="1649862007572" timestamp="92867937" />
  <Command __id="7913" _type="PauseCommand" date="Thu Apr 14 12:47:56 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92869274">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1337]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7935" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 12:48:12 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="92884588" type="Run" />
  <Command __id="7937" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Thu Apr 14 12:48:12 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="92884588" type="Run" />
  <Command __id="7938" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:48:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92884814" type="Run" />
  <Command __id="7939" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:48:12 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92884829" type="Run" />
  <Command __id="7940" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:48:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92884831" type="Run" />
  <Command __id="7942" _type="PauseCommand" date="Thu Apr 14 12:48:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92887263">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2432]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7943" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:48:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92889428" type="Run" />
  <Command __id="7945" _type="ShellCommand" date="Thu Apr 14 12:48:17 EDT 2022" starttimestamp="1649862007572" timestamp="92890426" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7947" _type="PauseCommand" date="Thu Apr 14 12:48:20 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="92892903">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2477]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7954" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:48:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92896077" type="Run" />
  <Command __id="7956" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:48:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92896079" type="Run" />
  <Command __id="7958" _type="PauseCommand" date="Thu Apr 14 12:49:14 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="92946865">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[50786]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7957" _type="ShellCommand" date="Thu Apr 14 12:49:14 EDT 2022" starttimestamp="1649862007572" timestamp="92946865" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7960" _type="PauseCommand" date="Thu Apr 14 12:49:16 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="92948820">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1955]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7961" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:49:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92953120" type="Run" />
  <Command __id="7963" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:49:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92953130" type="Run" />
  <Command __id="7964" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:49:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92953131" type="Run" />
  <Command __id="7965" _type="ConsoleOutput" date="Thu Apr 14 12:49:20 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="92953161" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOStaticArguments did not pass completely:Error in client (args as 'nio-host nio-port name headless registry-host registry-port gipc-port'): Couldn't find client NIO connection info in traces.%0.8181818181818182

Test execution time (ms):63647
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"GIPCRMINIOStaticArguments did not pass completely:Error in client (args as 'nio-host nio-port name headless registry-host registry-port gipc-port'): Couldn't find client NIO connection info in traces.%0.8181818181818182¶¶Test execution time (ms):63647"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7966" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:49:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92953648" type="Run" />
  <Command __id="7967" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:49:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92953649" type="Run" />
  <Command __id="7968" _type="ShellCommand" date="Thu Apr 14 12:49:21 EDT 2022" starttimestamp="1649862007572" timestamp="92954246" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7969" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:49:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92954659" type="Run" />
  <Command __id="7970" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:49:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="92954660" type="Run" />
  <Command __id="7972" _type="PauseCommand" date="Thu Apr 14 12:50:06 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="92999328">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[44668]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7980" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:50:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93013226" type="Run" />
  <Command __id="7982" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:50:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93013227" type="Run" />
  <Command __id="7984" _type="PauseCommand" date="Thu Apr 14 12:51:17 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="93070362">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[57135]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="7983" _type="ConsoleOutput" date="Thu Apr 14 12:51:17 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93070362" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*
RMI and GIPC are not checked because NIO failed%0.0

Test execution time (ms):58579
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMINIOOneClient"), Diff(DELETE,"Connection"), Diff(INSERT,"ReadWriteNonAtomic"), Diff(EQUAL," did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*"), Diff(INSERT,"¶RMI and GIPC are not checked because NIO failed"), Diff(EQUAL,"%0.0¶¶Test execution time (ms):585"), Diff(DELETE,"61"), Diff(INSERT,"79"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7986" _type="PauseCommand" date="Thu Apr 14 12:51:59 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="93111789">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[41427]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="7985" _type="ConsoleOutput" date="Thu Apr 14 12:51:59 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93111789" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@25b10d26 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*¶RMI and GIPC are not checked because NIO failed%0.0¶¶Test execution time (ms):58579"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@25b10d26 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7988" _type="PauseCommand" date="Thu Apr 14 12:52:05 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93117716">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5927]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="7987" _type="ConsoleOutput" date="Thu Apr 14 12:52:05 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93117716" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientConnection@28774018 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIO"), Diff(DELETE,"StaticArguments@25b10d26"), Diff(INSERT,"OneClientConnection@28774018"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="7990" _type="PauseCommand" date="Thu Apr 14 12:54:02 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="93234668">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[116952]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7989" _type="ShellCommand" date="Thu Apr 14 12:54:02 EDT 2022" starttimestamp="1649862007572" timestamp="93234668" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7991" _type="MoveCaretCommand" caretOffset="1758" date="Thu Apr 14 12:54:02 EDT 2022" docOffset="1758" starttimestamp="1649862007572" timestamp="93234748" />
  <Command __id="7992" _type="MoveCaretCommand" caretOffset="1758" date="Thu Apr 14 12:54:02 EDT 2022" docOffset="1758" starttimestamp="1649862007572" timestamp="93234748" />
  <Command __id="7798" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:45:06 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4494" docExpressionCount="449" docLength="4881" projectName="A6" starttimestamp="1649862007572" timestamp="92698641">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;"), Diff(INSERT,"¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;"), Diff(EQUAL,"¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager;¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		nioManager = NIOManagerFactory.getSingleton();¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	"), Diff(INSERT,"protected void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	"), Diff(EQUAL,"public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager;
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		nioManager = NIOManagerFactory.getSingleton();
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	protected void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="7804" _type="Delete" date="Thu Apr 14 12:45:09 EDT 2022" docASTNodeCount="637" docActiveCodeLength="4482" docExpressionCount="449" docLength="4869" endLine="76" length="12" offset="2753" repeat="2" startLine="75" starttimestamp="1649862007572" timestamp="92702056" timestamp2="92702060">
    <text><![CDATA[
	protected]]></text>
  </DocumentChange>
  <DocumentChange __id="7806" _type="Insert" date="Thu Apr 14 12:45:09 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4491" docExpressionCount="449" docLength="4878" length="9" offset="2753" repeat="2" starttimestamp="1649862007572" timestamp="92702061" timestamp2="92702062">
    <text><![CDATA[
	public]]></text>
  </DocumentChange>
  <DocumentChange __id="7818" _type="Insert" date="Thu Apr 14 12:45:18 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4495" docExpressionCount="449" docLength="4882" length="4" offset="1735" starttimestamp="1649862007572" timestamp="92710817">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="7821" _type="Replace" date="Thu Apr 14 12:45:18 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4510" docExpressionCount="451" docLength="4897" endLine="44" insertionLength="17" int_docASTNodeCount="638" int_docActiveCodeLength="4493" int_docExpressionCount="449" int_docLength="4880" length="2" offset="1737" startLine="44" starttimestamp="1649862007572" timestamp="92711033">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		setFactories() ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7823" _type="Insert" date="Thu Apr 14 12:45:18 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4511" docExpressionCount="451" docLength="4898" length="1" offset="1754" starttimestamp="1649862007572" timestamp="92711220">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="7828" _type="Delete" date="Thu Apr 14 12:45:19 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4510" docExpressionCount="451" docLength="4897" endLine="44" length="1" offset="1753" startLine="44" starttimestamp="1649862007572" timestamp="92712314">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="7862" _type="Insert" date="Thu Apr 14 12:47:10 EDT 2022" docASTNodeCount="634" docActiveCodeLength="4429" docExpressionCount="445" docLength="4899" length="2" offset="2113" repeat="2" starttimestamp="1649862007572" timestamp="92823257" timestamp2="92823388">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7871" _type="Delete" date="Thu Apr 14 12:47:12 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4510" docExpressionCount="451" docLength="4897" endLine="58" length="2" offset="2372" repeat="2" startLine="58" starttimestamp="1649862007572" timestamp="92825007" timestamp2="92825132">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7906" _type="Delete" date="Thu Apr 14 12:47:55 EDT 2022" docASTNodeCount="648" docActiveCodeLength="4591" docExpressionCount="457" docLength="4895" endLine="53" length="2" offset="2113" repeat="2" startLine="53" starttimestamp="1649862007572" timestamp="92867801" timestamp2="92867935">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7915" _type="Insert" date="Thu Apr 14 12:47:57 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4510" docExpressionCount="451" docLength="4897" length="2" offset="2370" repeat="2" starttimestamp="1649862007572" timestamp="92869932" timestamp2="92870052">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7994" _type="PauseCommand" date="Thu Apr 14 12:54:04 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93237350">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2602]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="7995" _type="MoveCaretCommand" caretOffset="2069" date="Thu Apr 14 12:54:05 EDT 2022" docOffset="2069" starttimestamp="1649862007572" timestamp="93237620" />
  <Command __id="7998" _type="PauseCommand" date="Thu Apr 14 12:54:07 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93239937">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2317]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7997" _type="ShellCommand" date="Thu Apr 14 12:54:07 EDT 2022" starttimestamp="1649862007572" timestamp="93239937" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8000" _type="PauseCommand" date="Thu Apr 14 12:54:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93240941">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1004]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="7999" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:54:08 EDT 2022" forward="false" matchWord="false" offset="2069" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="93240941" wrapSearch="false">
    <searchString><![CDATA[local]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8002" _type="PauseCommand" date="Thu Apr 14 12:54:21 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="93254347">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[13406]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8001" _type="ShellCommand" date="Thu Apr 14 12:54:21 EDT 2022" starttimestamp="1649862007572" timestamp="93254347" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8004" _type="PauseCommand" date="Thu Apr 14 12:54:22 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93255377">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1030]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8003" _type="ShellCommand" date="Thu Apr 14 12:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="93255377" type="ECLIPSE_MINIMIZED" />
  <Command __id="8005" _type="ShellCommand" date="Thu Apr 14 12:54:22 EDT 2022" starttimestamp="1649862007572" timestamp="93255414" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8007" _type="PauseCommand" date="Thu Apr 14 12:54:53 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="93285727">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30313]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8006" _type="ShellCommand" date="Thu Apr 14 12:54:53 EDT 2022" starttimestamp="1649862007572" timestamp="93285727" type="ECLIPSE_MAXIMIZED" />
  <Command __id="8008" _type="ShellCommand" date="Thu Apr 14 12:54:53 EDT 2022" starttimestamp="1649862007572" timestamp="93285797" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8010" _type="PauseCommand" date="Thu Apr 14 12:54:54 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93287022">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1225]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8009" _type="MoveCaretCommand" caretOffset="1654" date="Thu Apr 14 12:54:54 EDT 2022" docOffset="1654" starttimestamp="1649862007572" timestamp="93287022" />
  <Command __id="8011" _type="MoveCaretCommand" caretOffset="1654" date="Thu Apr 14 12:54:54 EDT 2022" docOffset="1654" starttimestamp="1649862007572" timestamp="93287022" />
  <Command __id="8013" _type="ShellCommand" date="Thu Apr 14 12:54:54 EDT 2022" starttimestamp="1649862007572" timestamp="93287249" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8015" _type="PauseCommand" date="Thu Apr 14 12:54:56 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93289258">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2009]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="8014" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:54:56 EDT 2022" forward="false" matchWord="false" offset="1654" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="93289258" wrapSearch="false">
    <searchString><![CDATA[NIOTra]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8017" _type="PauseCommand" date="Thu Apr 14 12:55:00 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93293236">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3978]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="8016" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:55:00 EDT 2022" forward="false" matchWord="false" offset="1654" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="93293236" wrapSearch="false">
    <searchString><![CDATA[setTrace]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8019" _type="PauseCommand" date="Thu Apr 14 12:55:02 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93294687">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1451]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8018" _type="ShellCommand" date="Thu Apr 14 12:55:02 EDT 2022" starttimestamp="1649862007572" timestamp="93294687" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8021" _type="PauseCommand" date="Thu Apr 14 12:55:10 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93302924">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8237]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8020" _type="ShellCommand" date="Thu Apr 14 12:55:10 EDT 2022" starttimestamp="1649862007572" timestamp="93302924" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8023" _type="PauseCommand" date="Thu Apr 14 12:55:43 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="93335847">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[32923]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8022" _type="ShellCommand" date="Thu Apr 14 12:55:43 EDT 2022" starttimestamp="1649862007572" timestamp="93335847" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8024" _type="MoveCaretCommand" caretOffset="1877" date="Thu Apr 14 12:55:43 EDT 2022" docOffset="1877" starttimestamp="1649862007572" timestamp="93335922" />
  <Command __id="8025" _type="MoveCaretCommand" caretOffset="1877" date="Thu Apr 14 12:55:43 EDT 2022" docOffset="1877" starttimestamp="1649862007572" timestamp="93335922" />
  <Command __id="8027" _type="PauseCommand" date="Thu Apr 14 12:55:52 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93344764">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8842]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8026" _type="ShellCommand" date="Thu Apr 14 12:55:52 EDT 2022" starttimestamp="1649862007572" timestamp="93344764" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8029" _type="PauseCommand" date="Thu Apr 14 12:56:12 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="93365337">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20573]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8028" _type="ShellCommand" date="Thu Apr 14 12:56:12 EDT 2022" starttimestamp="1649862007572" timestamp="93365337" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8030" _type="MoveCaretCommand" caretOffset="1343" date="Thu Apr 14 12:56:12 EDT 2022" docOffset="1343" starttimestamp="1649862007572" timestamp="93365394" />
  <Command __id="8031" _type="MoveCaretCommand" caretOffset="1343" date="Thu Apr 14 12:56:12 EDT 2022" docOffset="1343" starttimestamp="1649862007572" timestamp="93365394" />
  <Command __id="7993" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:54:04 EDT 2022" docASTNodeCount="498" docActiveCodeLength="3653" docExpressionCount="331" docLength="4316" projectName="A6" starttimestamp="1649862007572" timestamp="93237350">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8033" _type="PauseCommand" date="Thu Apr 14 12:56:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93368999">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3604]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8034" _type="MoveCaretCommand" caretOffset="1758" date="Thu Apr 14 12:56:16 EDT 2022" docOffset="1758" starttimestamp="1649862007572" timestamp="93369260" />
  <Command __id="8036" _type="PauseCommand" date="Thu Apr 14 12:56:24 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93377077">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7817]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8035" _type="SelectTextCommand" caretOffset="2762" date="Thu Apr 14 12:56:24 EDT 2022" end="2901" start="2762" starttimestamp="1649862007572" timestamp="93377077" />
  <Command __id="8037" _type="SelectTextCommand" caretOffset="2762" date="Thu Apr 14 12:56:24 EDT 2022" end="2901" start="2762" starttimestamp="1649862007572" timestamp="93377077" />
  <Command __id="8038" _type="CopyCommand" date="Thu Apr 14 12:56:25 EDT 2022" starttimestamp="1649862007572" timestamp="93377487" />
  <Command __id="8032" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:56:16 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4510" docExpressionCount="451" docLength="4897" projectName="A6" starttimestamp="1649862007572" timestamp="93368998">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager;¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		"), Diff(INSERT,"setFactories();¶		"), Diff(EQUAL,"¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		nioManager = NIOManagerFactory.getSingleton();¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	p"), Diff(DELETE,"rotected"), Diff(INSERT,"ublic"), Diff(EQUAL," void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager;
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		nioManager = NIOManagerFactory.getSingleton();
		
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <Command __id="8040" _type="PauseCommand" date="Thu Apr 14 12:56:26 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93378819">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1332]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8041" _type="MoveCaretCommand" caretOffset="1343" date="Thu Apr 14 12:56:26 EDT 2022" docOffset="1343" starttimestamp="1649862007572" timestamp="93379049" />
  <Command __id="8043" _type="PauseCommand" date="Thu Apr 14 12:56:29 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93382099">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3050]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8042" _type="MoveCaretCommand" caretOffset="2126" date="Thu Apr 14 12:56:29 EDT 2022" docOffset="2126" starttimestamp="1649862007572" timestamp="93382099" />
  <Command __id="8044" _type="MoveCaretCommand" caretOffset="2126" date="Thu Apr 14 12:56:29 EDT 2022" docOffset="2126" starttimestamp="1649862007572" timestamp="93382099" />
  <Command __id="8046" _type="InsertStringCommand" date="Thu Apr 14 12:56:29 EDT 2022" starttimestamp="1649862007572" timestamp="93382349" timestamp2="93382349">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8047" _type="InsertStringCommand" date="Thu Apr 14 12:56:29 EDT 2022" starttimestamp="1649862007572" timestamp="93382349" timestamp2="93382349">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8049" _type="InsertStringCommand" date="Thu Apr 14 12:56:30 EDT 2022" starttimestamp="1649862007572" timestamp="93382480" timestamp2="93382480">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8050" _type="InsertStringCommand" date="Thu Apr 14 12:56:30 EDT 2022" starttimestamp="1649862007572" timestamp="93382480" timestamp2="93382480">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8056" _type="PasteCommand" date="Thu Apr 14 12:56:30 EDT 2022" starttimestamp="1649862007572" timestamp="93382762" />
  <Command __id="8057" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:56:30 EDT 2022" starttimestamp="1649862007572" timestamp="93383131" />
  <Command __id="8058" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:30 EDT 2022" starttimestamp="1649862007572" timestamp="93383236" />
  <Command __id="8059" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:30 EDT 2022" starttimestamp="1649862007572" timestamp="93383295" />
  <Command __id="8061" _type="PauseCommand" date="Thu Apr 14 12:56:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93386193">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2898]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8060" _type="ShellCommand" date="Thu Apr 14 12:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="93386193" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8062" _type="ShellCommand" date="Thu Apr 14 12:56:33 EDT 2022" starttimestamp="1649862007572" timestamp="93386336" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8066" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 12:56:34 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="93386628" />
  <Command __id="8067" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:56:35 EDT 2022" starttimestamp="1649862007572" timestamp="93387485" />
  <Command __id="8068" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:35 EDT 2022" starttimestamp="1649862007572" timestamp="93387549" />
  <Command __id="8069" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:35 EDT 2022" starttimestamp="1649862007572" timestamp="93387599" />
  <Command __id="8039" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:56:26 EDT 2022" docASTNodeCount="498" docActiveCodeLength="3653" docExpressionCount="331" docLength="4316" projectName="A6" starttimestamp="1649862007572" timestamp="93378819">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="8045" _type="Insert" date="Thu Apr 14 12:56:29 EDT 2022" docASTNodeCount="498" docActiveCodeLength="3659" docExpressionCount="331" docLength="4322" length="6" offset="2126" repeat="2" starttimestamp="1649862007572" timestamp="93382344" timestamp2="93382474">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="8051" _type="Replace" date="Thu Apr 14 12:56:30 EDT 2022" docASTNodeCount="515" docActiveCodeLength="3797" docExpressionCount="342" docLength="4460" endLine="63" insertionLength="139" int_docASTNodeCount="498" int_docActiveCodeLength="3658" int_docExpressionCount="331" int_docLength="4321" length="1" offset="2131" startLine="63" starttimestamp="1649862007572" timestamp="93382671">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8052" _type="Insert" date="Thu Apr 14 12:56:30 EDT 2022" docASTNodeCount="539" docActiveCodeLength="3949" docExpressionCount="364" docLength="4612" length="152" offset="510" repeat="4" starttimestamp="1649862007572" timestamp="93382726" timestamp2="93382729">
    <text><![CDATA[
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;]]></text>
  </DocumentChange>
  <Command __id="8063" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:56:34 EDT 2022" docASTNodeCount="83" docActiveCodeLength="706" docExpressionCount="62" docLength="706" projectName="A6" starttimestamp="1649862007572" timestamp="93386475">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.nio.ByteBuffer;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelConnectListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import stringProcessors.HalloweenCommandProcessor;¶¶public interface ClientRemoteInterfaceNIO extends SocketChannelConnectListener, SocketChannelWriteListener,¶SocketChannelAcceptListener, SocketChannelReadListener{¶¶	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶	HalloweenCommandProcessor getCommandProcessor();¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="8064" _type="Insert" date="Thu Apr 14 12:56:34 EDT 2022" docASTNodeCount="86" docActiveCodeLength="731" docExpressionCount="63" docLength="731" length="25" offset="699" repeat="2" starttimestamp="1649862007572" timestamp="93386506" timestamp2="93386507">
    <text><![CDATA[

	void setFactories();]]></text>
  </DocumentChange>
  <Command __id="8071" _type="PauseCommand" date="Thu Apr 14 12:56:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93390143">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2544]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8072" _type="MoveCaretCommand" caretOffset="2422" date="Thu Apr 14 12:56:38 EDT 2022" docOffset="2422" starttimestamp="1649862007572" timestamp="93390430" />
  <Command __id="8074" _type="PauseCommand" date="Thu Apr 14 12:56:39 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93392343">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1913]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8073" _type="SelectTextCommand" caretOffset="2308" date="Thu Apr 14 12:56:39 EDT 2022" end="2322" start="2308" starttimestamp="1649862007572" timestamp="93392343" />
  <Command __id="8075" _type="SelectTextCommand" caretOffset="2308" date="Thu Apr 14 12:56:39 EDT 2022" end="2322" start="2308" starttimestamp="1649862007572" timestamp="93392343" />
  <Command __id="8076" _type="CopyCommand" date="Thu Apr 14 12:56:40 EDT 2022" starttimestamp="1649862007572" timestamp="93392543" />
  <Command __id="8078" _type="PauseCommand" date="Thu Apr 14 12:56:43 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93396158">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3615]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8077" _type="MoveCaretCommand" caretOffset="1404" date="Thu Apr 14 12:56:43 EDT 2022" docOffset="1404" starttimestamp="1649862007572" timestamp="93396158" />
  <Command __id="8079" _type="MoveCaretCommand" caretOffset="1404" date="Thu Apr 14 12:56:43 EDT 2022" docOffset="1404" starttimestamp="1649862007572" timestamp="93396158" />
  <Command __id="8081" _type="InsertStringCommand" date="Thu Apr 14 12:56:44 EDT 2022" starttimestamp="1649862007572" timestamp="93396881" timestamp2="93396881">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8082" _type="InsertStringCommand" date="Thu Apr 14 12:56:44 EDT 2022" starttimestamp="1649862007572" timestamp="93396881" timestamp2="93396881">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8084" _type="InsertStringCommand" date="Thu Apr 14 12:56:44 EDT 2022" starttimestamp="1649862007572" timestamp="93397035" timestamp2="93397035">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8085" _type="InsertStringCommand" date="Thu Apr 14 12:56:44 EDT 2022" starttimestamp="1649862007572" timestamp="93397035" timestamp2="93397035">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8087" _type="PasteCommand" date="Thu Apr 14 12:56:44 EDT 2022" starttimestamp="1649862007572" timestamp="93397266" />
  <Command __id="8088" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:56:45 EDT 2022" starttimestamp="1649862007572" timestamp="93397671" />
  <Command __id="8089" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:45 EDT 2022" starttimestamp="1649862007572" timestamp="93397766" />
  <Command __id="8090" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:45 EDT 2022" starttimestamp="1649862007572" timestamp="93397791" />
  <Command __id="8092" _type="InsertStringCommand" date="Thu Apr 14 12:56:45 EDT 2022" starttimestamp="1649862007572" timestamp="93398120" timestamp2="93398120">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8093" _type="InsertStringCommand" date="Thu Apr 14 12:56:45 EDT 2022" starttimestamp="1649862007572" timestamp="93398120" timestamp2="93398120">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8094" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:56:46 EDT 2022" starttimestamp="1649862007572" timestamp="93398506" />
  <Command __id="8095" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:46 EDT 2022" starttimestamp="1649862007572" timestamp="93398831" />
  <Command __id="8096" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:46 EDT 2022" starttimestamp="1649862007572" timestamp="93398862" />
  <Command __id="8098" _type="InsertStringCommand" date="Thu Apr 14 12:56:46 EDT 2022" starttimestamp="1649862007572" timestamp="93398935" timestamp2="93398935">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8099" _type="InsertStringCommand" date="Thu Apr 14 12:56:46 EDT 2022" starttimestamp="1649862007572" timestamp="93398935" timestamp2="93398935">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8100" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 12:56:47 EDT 2022" starttimestamp="1649862007572" timestamp="93399446" />
  <Command __id="8101" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:47 EDT 2022" starttimestamp="1649862007572" timestamp="93399889" />
  <Command __id="8102" _type="EclipseCommand" commandID="" date="Thu Apr 14 12:56:47 EDT 2022" starttimestamp="1649862007572" timestamp="93399917" />
  <Command __id="8104" _type="PauseCommand" date="Thu Apr 14 12:56:56 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93409367">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9450]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8103" _type="ShellCommand" date="Thu Apr 14 12:56:56 EDT 2022" starttimestamp="1649862007572" timestamp="93409367" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8106" _type="PauseCommand" date="Thu Apr 14 12:57:21 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="93434347">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[24980]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8112" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 12:57:27 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="93440128" type="Run" />
  <Command __id="8114" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Thu Apr 14 12:57:27 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="93440128" type="Run" />
  <Command __id="8115" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93440357" type="Run" />
  <Command __id="8116" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:27 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93440372" type="Run" />
  <Command __id="8117" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93440376" type="Run" />
  <Command __id="8119" _type="PauseCommand" date="Thu Apr 14 12:57:30 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93442866">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2490]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8122" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93451258" type="Run" />
  <Command __id="8124" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93451298" type="Run" />
  <Command __id="8125" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93451300" type="Run" />
  <Command __id="8126" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93451814" type="Run" />
  <Command __id="8127" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93451815" type="Run" />
  <Command __id="8128" _type="ConsoleOutput" date="Thu Apr 14 12:57:40 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93452583" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientConnection@28774018 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8129" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93452836" type="Run" />
  <Command __id="8130" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:57:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93452838" type="Run" />
  <Command __id="8132" _type="PauseCommand" date="Thu Apr 14 12:57:54 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="93466533">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[13695]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8131" _type="ShellCommand" date="Thu Apr 14 12:57:54 EDT 2022" starttimestamp="1649862007572" timestamp="93466533" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8070" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:56:37 EDT 2022" docASTNodeCount="539" docActiveCodeLength="3949" docExpressionCount="364" docLength="4612" projectName="A6" starttimestamp="1649862007572" timestamp="93390143">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶"), Diff(INSERT,"import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶"), Diff(EQUAL,"import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶	}"), Diff(INSERT,"¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}"), Diff(EQUAL,"¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: "+ mechanism.toString());

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		

}
]]></snapshot>
  </Command>
  <DocumentChange __id="8080" _type="Insert" date="Thu Apr 14 12:56:44 EDT 2022" docASTNodeCount="539" docActiveCodeLength="3957" docExpressionCount="364" docLength="4620" length="8" offset="1404" repeat="2" starttimestamp="1649862007572" timestamp="93396875" timestamp2="93397029">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <DocumentChange __id="8086" _type="Replace" date="Thu Apr 14 12:56:44 EDT 2022" docASTNodeCount="542" docActiveCodeLength="3971" docExpressionCount="366" docLength="4634" endLine="37" insertionLength="16" int_docASTNodeCount="539" int_docActiveCodeLength="3955" int_docExpressionCount="364" int_docLength="4618" length="2" offset="1410" startLine="37" starttimestamp="1649862007572" timestamp="93397261">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		setFactories()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8091" _type="Insert" date="Thu Apr 14 12:56:45 EDT 2022" docASTNodeCount="542" docActiveCodeLength="3976" docExpressionCount="366" docLength="4639" length="5" offset="1426" repeat="2" starttimestamp="1649862007572" timestamp="93398117" timestamp2="93398931">
    <text><![CDATA[;
		]]></text>
  </DocumentChange>
  <Command __id="8134" _type="PauseCommand" date="Thu Apr 14 12:58:11 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="93483555">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[17022]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8135" _type="SelectTextCommand" caretOffset="4413" date="Thu Apr 14 12:58:11 EDT 2022" end="4413" start="4409" starttimestamp="1649862007572" timestamp="93483803" />
  <Command __id="8137" _type="PauseCommand" date="Thu Apr 14 12:58:13 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93485485">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1682]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8136" _type="MoveCaretCommand" caretOffset="336" date="Thu Apr 14 12:58:13 EDT 2022" docOffset="2011" starttimestamp="1649862007572" timestamp="93485485" />
  <Command __id="8140" _type="PauseCommand" date="Thu Apr 14 12:58:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93488089">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2604]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8139" _type="ShellCommand" date="Thu Apr 14 12:58:15 EDT 2022" starttimestamp="1649862007572" timestamp="93488089" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8142" _type="PauseCommand" date="Thu Apr 14 12:58:17 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93490073">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1984]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="8141" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 12:58:17 EDT 2022" forward="false" matchWord="false" offset="2011" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="93490073" wrapSearch="false">
    <searchString><![CDATA[localhost]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8144" _type="PauseCommand" date="Thu Apr 14 12:58:19 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93491809">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1736]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8152" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:58:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93511481" type="Run" />
  <Command __id="8154" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:58:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93511491" type="Run" />
  <Command __id="8156" _type="PauseCommand" date="Thu Apr 14 12:59:17 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="93550233">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[38742]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8164" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:59:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93570099" type="Run" />
  <Command __id="8166" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 12:59:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93570100" type="Run" />
  <Command __id="8168" _type="PauseCommand" date="Thu Apr 14 12:59:40 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93572800">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2699]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8167" _type="ShellCommand" date="Thu Apr 14 12:59:40 EDT 2022" starttimestamp="1649862007572" timestamp="93572799" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8170" _type="PauseCommand" date="Thu Apr 14 13:00:34 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="93627203">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[54404]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8169" _type="ConsoleOutput" date="Thu Apr 14 13:00:34 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93627203" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*
RMI and GIPC are not checked because NIO failed%0.0

Test execution time (ms):58583
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMINIOOneClient"), Diff(DELETE,"Connection"), Diff(INSERT,"ReadWriteNonAtomic"), Diff(EQUAL," did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*"), Diff(INSERT,"¶RMI and GIPC are not checked because NIO failed"), Diff(EQUAL,"%0.0¶¶Test execution time (ms):58"), Diff(DELETE,"639"), Diff(INSERT,"583"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8172" _type="PauseCommand" date="Thu Apr 14 13:00:42 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93634862">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7659]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8171" _type="ShellCommand" date="Thu Apr 14 13:00:42 EDT 2022" starttimestamp="1649862007572" timestamp="93634862" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8174" _type="PauseCommand" date="Thu Apr 14 13:00:44 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93637024">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2162]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8173" _type="ConsoleOutput" date="Thu Apr 14 13:00:44 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93637024" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@56f973f3 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*¶RMI and GIPC are not checked because NIO failed%0.0¶¶Test execution time (ms):58583"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@56f973f3 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8176" _type="PauseCommand" date="Thu Apr 14 13:00:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93641848">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4824]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8175" _type="ConsoleOutput" date="Thu Apr 14 13:00:49 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93641848" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientConnection@78ce5a21 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIO"), Diff(DELETE,"StaticArguments@56f973f3"), Diff(INSERT,"OneClientConnection@78ce5a21"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="8178" _type="PauseCommand" date="Thu Apr 14 13:00:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93644716">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2868]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8177" _type="ConsoleOutput" date="Thu Apr 14 13:00:52 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93644716" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@6cede9b4 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClient"), Diff(DELETE,"Connection@78ce5a21"), Diff(INSERT,"ReadWriteNonAtomic@6cede9b4"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="8180" _type="PauseCommand" date="Thu Apr 14 13:01:02 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="93654933">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[10216]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8179" _type="ConsoleOutput" date="Thu Apr 14 13:01:02 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93654932" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Apr 14 13:01:02 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@6cede9b4 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Thu Apr 14 13:01:02 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8182" _type="PauseCommand" date="Thu Apr 14 13:01:05 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93657849">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2917]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8181" _type="ConsoleOutput" date="Thu Apr 14 13:01:05 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93657849" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:124
Running second pass checks Thu Apr 14 13:01:05 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Apr 14 13:01:05 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and r"), Diff(INSERT,"size:124¶R"), Diff(EQUAL,"unning "), Diff(DELETE,"first"), Diff(INSERT,"second"), Diff(EQUAL," pass checks"), Diff(DELETE,":"), Diff(INSERT," "), Diff(EQUAL,"Thu Apr 14 13:01:0"), Diff(DELETE,"2"), Diff(INSERT,"5 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Apr 14 13:01:05"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="8183" _type="ConsoleOutput" date="Thu Apr 14 13:01:05 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93657912" type="ConsoleOutput">
    <outputString><![CDATA[End O(n2) inter- and intra class method calls:Thu Apr 14 13:01:05 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:124¶Running second pass checks Thu Apr 14 13:01:05 EDT 2022¶Start"), Diff(INSERT,"End"), Diff(EQUAL," O(n2) inter- and intra class method calls:Thu Apr 14 13:01:05 EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="8185" _type="PauseCommand" date="Thu Apr 14 13:01:06 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93659411">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1499]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8184" _type="ConsoleOutput" date="Thu Apr 14 13:01:06 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93659411" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Apr 14 13:01:06 EDT 2022
Generating checks:Thu Apr 14 13:01:06 EDT 2022
Finished Generating checks:Thu Apr 14 13:01:06 EDT 2022
Generating externals:Thu Apr 14 13:01:06 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Finished second pass checks:Thu Apr 14 13:01:06 EDT 2022¶Generating checks:Thu Apr 14 13:01:06 EDT 2022¶Finished Generating checks:Thu Apr 14 13:01:06 EDT 2022¶Generating externa"), Diff(EQUAL,"ls:Thu Apr 14 13:01:0"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="8186" _type="ConsoleOutput" date="Thu Apr 14 13:01:07 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93659911" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Apr 14 13:01:07 EDT 2022
A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):4993
Test execution time (ms):29
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Thu Apr 14 13:01:0"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating checks:Thu Apr 14 13:01:06 EDT 2022¶Finished Generating checks:Thu Apr 14 13:01:06 EDT 2022¶Generating externals:Thu Apr 14 13:01:06 EDT 2022"), Diff(INSERT,"A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):4993¶Test execution time (ms):29"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8187" _type="ConsoleOutput" date="Thu Apr 14 13:01:07 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93659970" type="ConsoleOutput">
    <outputString><![CDATA[A6PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.9285714285714286

Test execution time (ms):20
A6InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.9104477611940298

Test execution time (ms):20
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Apr 14 13:01:07 EDT 2022¶A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):4993"), Diff(INSERT,"A6PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.9285714285714286¶¶Test execution time (ms):20¶A6InterfaceAsType did not pass completely:See console trace about lines failing  this check%0.9104477611940298¶"), Diff(EQUAL,"¶Test execution time (ms):2"), Diff(DELETE,"9"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8188" _type="ConsoleOutput" date="Thu Apr 14 13:01:07 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93660038" type="ConsoleOutput">
    <outputString><![CDATA[A6MnemonicNames did not pass completely:See console trace about lines failing  this check%0.9967051070840197

Test execution time (ms):42
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"A6"), Diff(DELETE,"PublicMethodsOverride did not pass completely:See console trace about lines failing  this check%0.9285714285714286¶¶Test execution time (ms):20¶A6InterfaceAsType"), Diff(INSERT,"MnemonicNames"), Diff(EQUAL," did not pass completely:See console trace about lines failing  this check%0.9"), Diff(DELETE,"104477611940298"), Diff(INSERT,"967051070840197"), Diff(EQUAL,"¶¶Test execution time (ms):"), Diff(INSERT,"4"), Diff(EQUAL,"2"), Diff(DELETE,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8189" _type="ConsoleOutput" date="Thu Apr 14 13:01:07 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="93660125" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):53
A6AccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.2857142857142857
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A6MnemonicNames"), Diff(INSERT,"¶Test execution time (ms):53¶A6AccessModifiersMatched"), Diff(EQUAL," did not pass completely:See console trace about lines failing  this check%0."), Diff(DELETE,"9967051070840197¶¶Test execution time (ms):42"), Diff(INSERT,"2857142857142857"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8191" _type="PauseCommand" date="Thu Apr 14 13:01:09 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="93661997">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1872]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8190" _type="ShellCommand" date="Thu Apr 14 13:01:09 EDT 2022" starttimestamp="1649862007572" timestamp="93661997" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8192" _type="BalloonCommand" date="Thu Apr 14 13:01:10 EDT 2022" message="*******************************************
Worked 41 minutes(fixed)/54 minutes(context based) from
Thu Apr 14 12:01:10 EDT 2022 to Thu Apr 14 13:01:09 EDT 2022
Edited 1 Projects: 
	A6
Edited 7 Files: 
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\server\Server.java
	C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java
	C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectRMI.java
	C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteInterfaceNIO.java
	C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java
	C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteInterfaceNIO.java
Number of insert: 1151
Number of delete: 449
" starttimestamp="1649862007572" timestamp="93662513">
    <fineGrainedWorkTime><![CDATA[54]]></fineGrainedWorkTime>
    <insert><![CDATA[1151]]></insert>
    <startTime><![CDATA[1649952070078]]></startTime>
    <endTime><![CDATA[1649955669569]]></endTime>
    <workTime><![CDATA[41]]></workTime>
    <delete><![CDATA[449]]></delete>
  </Command>
  <Command __id="8194" _type="PauseCommand" date="Thu Apr 14 13:01:30 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="93683087">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[20574]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8193" _type="ShellCommand" date="Thu Apr 14 13:01:30 EDT 2022" starttimestamp="1649862007572" timestamp="93683087" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8196" _type="PauseCommand" date="Thu Apr 14 13:01:36 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93688564">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5477]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8199" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:02:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93736820" type="Debug" />
  <Command __id="8201" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:02:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93736821" type="Debug" />
  <Command __id="8202" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:02:24 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="93736821" type="Run" />
  <Command __id="8204" _type="PauseCommand" date="Thu Apr 14 13:02:31 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93743573">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6752]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8220" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:03:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93775531" type="Run" />
  <Command __id="8222" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:03:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93775531" type="Run" />
  <Command __id="8133" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 12:58:11 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10084" projectName="A6" starttimestamp="1649862007572" timestamp="93483555">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8224" _type="PauseCommand" date="Thu Apr 14 13:03:10 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93783165">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7634]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8225" _type="SelectTextCommand" caretOffset="2762" date="Thu Apr 14 13:03:11 EDT 2022" end="2901" start="2762" starttimestamp="1649862007572" timestamp="93783428" />
  <Command __id="8227" _type="PauseCommand" date="Thu Apr 14 13:03:45 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="93817956">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[34528]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8226" _type="ShellCommand" date="Thu Apr 14 13:03:45 EDT 2022" starttimestamp="1649862007572" timestamp="93817956" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8229" _type="PauseCommand" date="Thu Apr 14 13:05:41 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="93934227">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[116271]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8228" _type="ShellCommand" date="Thu Apr 14 13:05:41 EDT 2022" starttimestamp="1649862007572" timestamp="93934227" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8231" _type="SelectTextCommand" caretOffset="1928" date="Thu Apr 14 13:05:42 EDT 2022" end="1928" start="1921" starttimestamp="1649862007572" timestamp="93934703" />
  <Command __id="8233" _type="PauseCommand" date="Thu Apr 14 13:05:50 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93942717">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[8014]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8232" _type="MoveCaretCommand" caretOffset="1696" date="Thu Apr 14 13:05:50 EDT 2022" docOffset="1696" starttimestamp="1649862007572" timestamp="93942717" />
  <Command __id="8235" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:05:50 EDT 2022" starttimestamp="1649862007572" timestamp="93943157" />
  <Command __id="8237" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:05:50 EDT 2022" starttimestamp="1649862007572" timestamp="93943291" />
  <Command __id="8239" _type="PauseCommand" date="Thu Apr 14 13:05:55 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93947609">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4318]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8238" _type="ShellCommand" date="Thu Apr 14 13:05:55 EDT 2022" starttimestamp="1649862007572" timestamp="93947609" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8241" _type="PauseCommand" date="Thu Apr 14 13:05:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="93950569">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2960]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8269" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Thu Apr 14 13:06:11 EDT 2022" starttimestamp="1649862007572" timestamp="93964196" />
  <Command __id="8271" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:06:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93964217" type="Debug" />
  <Command __id="8272" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Thu Apr 14 13:06:11 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="93964217" type="Run" />
  <Command __id="8273" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:06:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="93964217" type="Debug" />
  <Command __id="8274" _type="ProgramExecutionEvent" className="/A6/src/server/Server.java" date="Thu Apr 14 13:06:11 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="93964217" type="Run" />
  <Command __id="8276" _type="PauseCommand" date="Thu Apr 14 13:06:25 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="93977871">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[13654]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8275" _type="ShellCommand" date="Thu Apr 14 13:06:25 EDT 2022" starttimestamp="1649862007572" timestamp="93977871" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8278" _type="PauseCommand" date="Thu Apr 14 13:06:32 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="93985051">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7180]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8291" _type="ProgramExecutionEvent" className="/A6/src/nioExample/NIOManagerPrintServerLauncherNoFactory.java" date="Thu Apr 14 13:07:19 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="94031966" type="Run" />
  <Command __id="8293" _type="RunCommand" className="/A6/src/nioExample/NIOManagerPrintServerLauncherNoFactory.java" date="Thu Apr 14 13:07:19 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="94031966" type="Run" />
  <Command __id="8294" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:07:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94032082" type="Run" />
  <Command __id="8295" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:07:19 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94032093" type="Run" />
  <Command __id="8296" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:07:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94032095" type="Run" />
  <Command __id="8297" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:07:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94032631" type="Run" />
  <Command __id="8299" _type="PauseCommand" date="Thu Apr 14 13:07:31 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="94043639">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[11008]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8298" _type="ShellCommand" date="Thu Apr 14 13:07:31 EDT 2022" starttimestamp="1649862007572" timestamp="94043639" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8301" _type="PauseCommand" date="Thu Apr 14 13:08:04 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="94077201">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[33562]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8300" _type="ShellCommand" date="Thu Apr 14 13:08:04 EDT 2022" starttimestamp="1649862007572" timestamp="94077201" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8303" _type="PauseCommand" date="Thu Apr 14 13:09:15 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="94147452">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[70251]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8302" _type="ShellCommand" date="Thu Apr 14 13:09:15 EDT 2022" starttimestamp="1649862007572" timestamp="94147452" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8305" _type="PauseCommand" date="Thu Apr 14 13:10:28 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="94221244">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[73792]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8354" _type="ProgramExecutionEvent" className="/A6/src/nioExample/NIOManagerPrintServerLauncherNoFactory.java" date="Thu Apr 14 13:11:53 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="94305653" type="Run" />
  <Command __id="8356" _type="RunCommand" className="/A6/src/nioExample/NIOManagerPrintServerLauncherNoFactory.java" date="Thu Apr 14 13:11:53 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="94305653" type="Run" />
  <Command __id="8357" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:11:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94305771" type="Run" />
  <Command __id="8358" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:11:53 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94305784" type="Run" />
  <Command __id="8359" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:11:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94305787" type="Run" />
  <Command __id="8360" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:11:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94306399" type="Run" />
  <Command __id="8223" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:03:10 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4510" docExpressionCount="451" docLength="4897" projectName="A6" starttimestamp="1649862007572" timestamp="93783165">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager;¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		nioManager = NIOManagerFactory.getSingleton();¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8230" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:05:42 EDT 2022" docASTNodeCount="546" docActiveCodeLength="3843" docExpressionCount="380" docLength="4615" projectName="A6" starttimestamp="1649862007572" timestamp="93934502">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶//		setFactories();¶		initialize(aServerPort);¶	}¶¶//	protected void setFactories() {¶//		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶//	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="8234" _type="Delete" date="Thu Apr 14 13:05:50 EDT 2022" docASTNodeCount="549" docActiveCodeLength="3860" docExpressionCount="382" docLength="4613" endLine="40" length="2" offset="1694" repeat="2" startLine="40" starttimestamp="1649862007572" timestamp="93943152" timestamp2="93943289">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8243" _type="Delete" date="Thu Apr 14 13:05:58 EDT 2022" docASTNodeCount="554" docActiveCodeLength="3892" docExpressionCount="383" docLength="4611" endLine="44" length="2" offset="1747" repeat="2" startLine="44" starttimestamp="1649862007572" timestamp="93950990" timestamp2="93951120">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8248" _type="Delete" date="Thu Apr 14 13:05:59 EDT 2022" docASTNodeCount="554" docActiveCodeLength="3984" docExpressionCount="383" docLength="4609" endLine="45" length="2" offset="1781" repeat="2" startLine="45" starttimestamp="1649862007572" timestamp="93951893" timestamp2="93952053">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8253" _type="Delete" date="Thu Apr 14 13:06:00 EDT 2022" docASTNodeCount="564" docActiveCodeLength="3986" docExpressionCount="391" docLength="4607" endLine="46" length="2" offset="1875" repeat="2" startLine="46" starttimestamp="1649862007572" timestamp="93952504" timestamp2="93952643">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8362" _type="PauseCommand" date="Thu Apr 14 13:12:16 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="94329377">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[22978]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8363" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 13:12:17 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="94329552" />
  <Command __id="8361" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:12:16 EDT 2022" docASTNodeCount="33" docActiveCodeLength="261" docExpressionCount="18" docLength="261" projectName="A6" starttimestamp="1649862007572" timestamp="94329377">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServerLauncherNoFactory.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import assignments.util.mainArgs.ServerArgsProcessor;¶¶public class NIOManagerPrintServerLauncherNoFactory {¶	public static void main(String[] args) {¶		new AnNIOManagerPrintServer(ServerArgsProcessor.getNIOServerPort(args));¶	}¶¶}")]]]></diff>
  </Command>
  <Command __id="8365" _type="PauseCommand" date="Thu Apr 14 13:12:22 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="94335014">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5462]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8366" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 13:12:22 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="94335211" />
  <Command __id="8364" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:12:22 EDT 2022" docASTNodeCount="88" docActiveCodeLength="644" docExpressionCount="64" docLength="644" projectName="A6" starttimestamp="1649862007572" timestamp="94335014">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\NIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶¶public interface NIOManagerPrintServer extends SocketChannelAcceptListener, SocketChannelReadListener, SocketChannelWriteListener {¶¶	ArrayBlockingQueue<ByteBuffer> getBoundedBuffer();¶¶	List<SocketChannel> getSocketList();¶¶	SocketChannel getSocketChannel();¶¶}")]]]></diff>
  </Command>
  <Command __id="8368" _type="PauseCommand" date="Thu Apr 14 13:12:26 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94339364">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4153]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8369" _type="MoveCaretCommand" caretOffset="2521" date="Thu Apr 14 13:12:27 EDT 2022" docOffset="2521" starttimestamp="1649862007572" timestamp="94339584" />
  <Command __id="8367" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:12:26 EDT 2022" docASTNodeCount="564" docActiveCodeLength="3986" docExpressionCount="391" docLength="4607" projectName="A6" starttimestamp="1649862007572" timestamp="94339364">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶"), Diff(DELETE,"//"), Diff(EQUAL,"		setFactories();¶"), Diff(INSERT,""), Diff(EQUAL,"		initialize(aServerPort);¶	}¶¶"), Diff(DELETE,"//"), Diff(EQUAL,"	protected void setFactories() {¶"), Diff(DELETE,"//"), Diff(EQUAL,"		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶"), Diff(DELETE,"//"), Diff(EQUAL,"	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package nioExample;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import assignments.util.MiscAssignmentUtils;

import client.ClientRemoteInterfaceGIPC;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.listeners.SocketChannelAcceptListener;
import inputport.nio.manager.listeners.SocketChannelReadListener;
import inputport.nio.manager.listeners.SocketChannelWriteListener;
import inputport.nio.manager.listeners.WriteBoundedBufferListener;
import readThread.ReadThreadInterface;
import util.trace.factories.FactoryTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;

public class AnNIOManagerPrintServer implements NIOManagerPrintServer {

	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();

	public AnNIOManagerPrintServer(int aServerPort) {
		setTracing();
		setFactories();
		initialize(aServerPort);
	}

	protected void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	protected void setTracing() {
		FactoryTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
	}

	protected void initialize(int aServerPort) {
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new exampleServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		/*
		// Pop value off the bounded buffer
		ByteBuffer originalMessage = null;
		try {
			originalMessage = boundedBuffer.take();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		// Echo recieve message to all clients (except original message sender)
		for (SocketChannel socket : socketList) {
			if (!socket.equals(aSocketChannel)) {
				nioManager.write(socket, originalMessage, this);
			}
		}
		*/
		System.out.println("notifying reader!!");
		reader.notifyThread();
		System.out.println("thread has completed action and is now waiting");

	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){
		return boundedBuffer;
		
	}
	
	@Override
	public List<SocketChannel> getSocketList(){
		return socketList;
	}
	
	@Override
	public SocketChannel getSocketChannel() {
		return currentSocket;
	}

	@Override
	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {
		// TODO Auto-generated method stub
		String aMessageString = new String(aMessage.array());
		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);
	}

}
]]></snapshot>
  </Command>
  <Command __id="8371" _type="PauseCommand" date="Thu Apr 14 13:12:45 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="94357834">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[18250]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8372" _type="SelectTextCommand" caretOffset="2762" date="Thu Apr 14 13:12:45 EDT 2022" end="2901" start="2762" starttimestamp="1649862007572" timestamp="94358012" />
  <Command __id="8370" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:12:45 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4510" docExpressionCount="451" docLength="4897" projectName="A6" starttimestamp="1649862007572" timestamp="94357834">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager;¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		nioManager = NIOManagerFactory.getSingleton();¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8374" _type="PauseCommand" date="Thu Apr 14 13:13:08 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="94380860">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[22848]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8375" _type="MoveCaretCommand" caretOffset="2521" date="Thu Apr 14 13:13:08 EDT 2022" docOffset="2521" starttimestamp="1649862007572" timestamp="94381034" />
  <Command __id="8377" _type="PauseCommand" date="Thu Apr 14 13:13:12 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94385076">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4042]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8376" _type="SelectTextCommand" caretOffset="1554" date="Thu Apr 14 13:13:12 EDT 2022" end="1621" start="1554" starttimestamp="1649862007572" timestamp="94385076" />
  <Command __id="8378" _type="CopyCommand" date="Thu Apr 14 13:13:12 EDT 2022" starttimestamp="1649862007572" timestamp="94385302" />
  <Command __id="8373" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:13:08 EDT 2022" docASTNodeCount="564" docActiveCodeLength="3986" docExpressionCount="391" docLength="4607" projectName="A6" starttimestamp="1649862007572" timestamp="94380860">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\nioExample\AnNIOManagerPrintServer.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package nioExample;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶import assignments.util.MiscAssignmentUtils;¶¶import client.ClientRemoteInterfaceGIPC;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AReadingAcceptCommandFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import inputport.nio.manager.listeners.SocketChannelAcceptListener;¶import inputport.nio.manager.listeners.SocketChannelReadListener;¶import inputport.nio.manager.listeners.SocketChannelWriteListener;¶import inputport.nio.manager.listeners.WriteBoundedBufferListener;¶import readThread.ReadThreadInterface;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶¶public class AnNIOManagerPrintServer implements NIOManagerPrintServer {¶¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶¶	public AnNIOManagerPrintServer(int aServerPort) {¶		setTracing();¶		setFactories();¶		initialize(aServerPort);¶	}¶¶	protected void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	protected void setTracing() {¶		FactoryTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶	}¶¶	protected void initialize(int aServerPort) {¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new exampleServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel aServerSocketChannel, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		/*¶		// Pop value off the bounded buffer¶		ByteBuffer originalMessage = null;¶		try {¶			originalMessage = boundedBuffer.take();¶		} catch (InterruptedException e) {¶			e.printStackTrace();¶		}¶		// Echo recieve message to all clients (except original message sender)¶		for (SocketChannel socket : socketList) {¶			if (!socket.equals(aSocketChannel)) {¶				nioManager.write(socket, originalMessage, this);¶			}¶		}¶		*/¶		System.out.println("notifying reader!!");¶		reader.notifyThread();¶		System.out.println("thread has completed action and is now waiting");¶¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer(){¶		return boundedBuffer;¶		¶	}¶	¶	@Override¶	public List<SocketChannel> getSocketList(){¶		return socketList;¶	}¶	¶	@Override¶	public SocketChannel getSocketChannel() {¶		return currentSocket;¶	}¶¶	@Override¶	public void written(SocketChannel socket, ByteBuffer aMessage, int aLength) {¶		// TODO Auto-generated method stub¶		String aMessageString = new String(aMessage.array());¶		System.out.println("SERVER SENT MESSAGE TO CLIENT: " + aMessageString + "-->" + socket);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8380" _type="PauseCommand" date="Thu Apr 14 13:13:16 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94388679">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3377]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8381" _type="SelectTextCommand" caretOffset="2762" date="Thu Apr 14 13:13:16 EDT 2022" end="2901" start="2762" starttimestamp="1649862007572" timestamp="94388881" />
  <Command __id="8383" _type="PauseCommand" date="Thu Apr 14 13:13:24 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="94397389">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[8508]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8382" _type="SelectTextCommand" caretOffset="1350" date="Thu Apr 14 13:13:24 EDT 2022" end="1382" start="1350" starttimestamp="1649862007572" timestamp="94397389" />
  <Command __id="8384" _type="SelectTextCommand" caretOffset="1350" date="Thu Apr 14 13:13:24 EDT 2022" end="1382" start="1350" starttimestamp="1649862007572" timestamp="94397389" />
  <Command __id="8386" _type="PasteCommand" date="Thu Apr 14 13:13:25 EDT 2022" starttimestamp="1649862007572" timestamp="94397701" />
  <Command __id="8387" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:13:25 EDT 2022" starttimestamp="1649862007572" timestamp="94398330" />
  <Command __id="8388" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:13:25 EDT 2022" starttimestamp="1649862007572" timestamp="94398424" />
  <Command __id="8389" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:13:26 EDT 2022" starttimestamp="1649862007572" timestamp="94398448" />
  <Command __id="8391" _type="PauseCommand" date="Thu Apr 14 13:13:29 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94402242">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3794]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8437" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:14:11 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="94444082" type="Run" />
  <Command __id="8439" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:14:11 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="94444082" type="Run" />
  <Command __id="8440" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:14:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94444294" type="Run" />
  <Command __id="8441" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:14:11 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94444310" type="Run" />
  <Command __id="8442" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:14:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94444312" type="Run" />
  <Command __id="8444" _type="PauseCommand" date="Thu Apr 14 13:14:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94446659">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2347]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8456" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:15:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94512331" type="Run" />
  <Command __id="8458" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:15:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94512349" type="Run" />
  <Command __id="8459" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:15:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94512350" type="Run" />
  <Command __id="8460" _type="ConsoleOutput" date="Thu Apr 14 13:15:19 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="94512355" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOStaticArguments did not pass completely:Error in client (args as 'nio-host nio-port name headless registry-host registry-port gipc-port'): Couldn't find client NIO connection info in traces.%0.8181818181818182

Test execution time (ms):63672
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"GIPCRMINIOStaticArguments did not pass completely:Error in client (args as 'nio-host nio-port name headless registry-host registry-port gipc-port'): Couldn't find client NIO connection info in traces.%0.8181818181818182¶¶Test execution time (ms):63672"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8461" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:15:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94512862" type="Run" />
  <Command __id="8462" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:15:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94512864" type="Run" />
  <Command __id="8463" _type="ShellCommand" date="Thu Apr 14 13:15:20 EDT 2022" starttimestamp="1649862007572" timestamp="94513129" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8464" _type="MoveCaretCommand" caretOffset="2388" date="Thu Apr 14 13:15:20 EDT 2022" docOffset="2388" starttimestamp="1649862007572" timestamp="94513323" />
  <Command __id="8465" _type="MoveCaretCommand" caretOffset="2388" date="Thu Apr 14 13:15:20 EDT 2022" docOffset="2388" starttimestamp="1649862007572" timestamp="94513323" />
  <Command __id="8466" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:15:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94513874" type="Run" />
  <Command __id="8467" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:15:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94513875" type="Run" />
  <Command __id="8469" _type="PauseCommand" date="Thu Apr 14 13:16:16 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="94569134">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[55259]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8477" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:16:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94572448" type="Run" />
  <Command __id="8479" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:16:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94572450" type="Run" />
  <Command __id="8481" _type="PauseCommand" date="Thu Apr 14 13:17:17 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="94629531">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[57081]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8480" _type="ConsoleOutput" date="Thu Apr 14 13:17:17 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="94629531" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*
RMI and GIPC are not checked because NIO failed%0.0

Test execution time (ms):58567
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"GIPCRMINIOOneClient"), Diff(DELETE,"Connection"), Diff(INSERT,"ReadWriteNonAtomic"), Diff(EQUAL," did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*"), Diff(INSERT,"¶RMI and GIPC are not checked because NIO failed"), Diff(EQUAL,"%0.0¶"), Diff(INSERT,"¶"), Diff(EQUAL,"Test execution time (ms):585"), Diff(DELETE,"89"), Diff(INSERT,"67"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8483" _type="PauseCommand" date="Thu Apr 14 13:17:20 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94632429">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2898]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8482" _type="ConsoleOutput" date="Thu Apr 14 13:17:20 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="94632429" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@7b624518 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*¶RMI and GIPC are not checked because NIO failed%0.0¶¶Test execution time (ms):58567"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@7b624518 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8485" _type="PauseCommand" date="Thu Apr 14 13:17:24 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94637276">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4847]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8484" _type="ConsoleOutput" date="Thu Apr 14 13:17:24 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="94637276" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientConnection@4909eb . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIO"), Diff(DELETE,"StaticArguments@7b624518"), Diff(INSERT,"OneClientConnection@4909eb"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="8487" _type="PauseCommand" date="Thu Apr 14 13:17:27 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94639932">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2655]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8486" _type="ConsoleOutput" date="Thu Apr 14 13:17:27 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="94639931" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@7ef42d11 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClient"), Diff(DELETE,"Connection@4909eb"), Diff(INSERT,"ReadWriteNonAtomic@7ef42d11"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="8489" _type="PauseCommand" date="Thu Apr 14 13:17:56 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="94668783">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[28852]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8488" _type="ShellCommand" date="Thu Apr 14 13:17:56 EDT 2022" starttimestamp="1649862007572" timestamp="94668783" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8491" _type="PauseCommand" date="Thu Apr 14 13:18:15 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="94688274">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19491]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8490" _type="ShellCommand" date="Thu Apr 14 13:18:15 EDT 2022" starttimestamp="1649862007572" timestamp="94688274" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8493" _type="PauseCommand" date="Thu Apr 14 13:18:44 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="94717160">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[28886]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8492" _type="ShellCommand" date="Thu Apr 14 13:18:44 EDT 2022" starttimestamp="1649862007572" timestamp="94717160" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8379" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:13:16 EDT 2022" docASTNodeCount="641" docActiveCodeLength="4510" docExpressionCount="451" docLength="4897" projectName="A6" starttimestamp="1649862007572" timestamp="94388679">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager;¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		nioManager = NIOManagerFactory.getSingleton();¶		¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="8385" _type="Replace" date="Thu Apr 14 13:13:25 EDT 2022" docASTNodeCount="644" docActiveCodeLength="4545" docExpressionCount="454" docLength="4932" endLine="32" insertionLength="68" int_docASTNodeCount="635" int_docActiveCodeLength="4477" int_docExpressionCount="449" int_docLength="4864" length="33" offset="1349" startLine="32" starttimestamp="1649862007572" timestamp="94397611">
    <deletedText><![CDATA[	protected NIOManager nioManager;]]></deletedText>
    <insertedText><![CDATA[	protected NIOManager nioManager = NIOManagerFactory.getSingleton();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8393" _type="Delete" date="Thu Apr 14 13:13:30 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4496" docExpressionCount="449" docLength="4883" endLine="48" length="49" offset="1857" repeat="3" startLine="47" starttimestamp="1649862007572" timestamp="94402517" timestamp2="94403537">
    <text><![CDATA[	nioManager = NIOManagerFactory.getSingleton();
]]></text>
  </DocumentChange>
  <Command __id="8495" _type="PauseCommand" date="Thu Apr 14 13:18:49 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94721505">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4345]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8496" _type="MoveCaretCommand" caretOffset="0" date="Thu Apr 14 13:18:49 EDT 2022" docOffset="0" starttimestamp="1649862007572" timestamp="94721699" />
  <Command __id="8497" _type="MoveCaretCommand" caretOffset="530" date="Thu Apr 14 13:18:50 EDT 2022" docOffset="2186" starttimestamp="1649862007572" timestamp="94722565" />
  <Command __id="8499" _type="ShellCommand" date="Thu Apr 14 13:18:51 EDT 2022" starttimestamp="1649862007572" timestamp="94723547" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8501" _type="PauseCommand" date="Thu Apr 14 13:18:55 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94727765">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4218]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="8500" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:18:55 EDT 2022" forward="false" matchWord="false" offset="2186" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="94727765" wrapSearch="false">
    <searchString><![CDATA[listenableExc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8503" _type="PauseCommand" date="Thu Apr 14 13:18:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94730625">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2860]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8502" _type="ShellCommand" date="Thu Apr 14 13:18:58 EDT 2022" starttimestamp="1649862007572" timestamp="94730625" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8505" _type="PauseCommand" date="Thu Apr 14 13:19:08 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="94740637">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10012]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8504" _type="ShellCommand" date="Thu Apr 14 13:19:08 EDT 2022" starttimestamp="1649862007572" timestamp="94740637" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8507" _type="PauseCommand" date="Thu Apr 14 13:19:25 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="94757684">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[17046]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8528" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:19:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94789941" type="Run" />
  <Command __id="8530" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:19:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94789941" type="Run" />
  <Command __id="8532" _type="PauseCommand" date="Thu Apr 14 13:20:06 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="94798789">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8848]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8531" _type="ShellCommand" date="Thu Apr 14 13:20:06 EDT 2022" starttimestamp="1649862007572" timestamp="94798789" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8534" _type="PauseCommand" date="Thu Apr 14 13:21:06 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="94859174">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[60385]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8542" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:21:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94869701" type="Run" />
  <Command __id="8544" _type="ShellCommand" date="Thu Apr 14 13:21:17 EDT 2022" starttimestamp="1649862007572" timestamp="94869799" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8546" _type="PauseCommand" date="Thu Apr 14 13:21:18 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="94871057">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1258]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8545" _type="ShellCommand" date="Thu Apr 14 13:21:18 EDT 2022" starttimestamp="1649862007572" timestamp="94871057" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8548" _type="PauseCommand" date="Thu Apr 14 13:21:21 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94873541">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2484]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8557" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:21:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94889192" type="Run" />
  <Command __id="8494" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:18:49 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="94721505">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="8561" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:21:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94903917" type="Run" />
  <Command __id="8562" _type="MoveCaretCommand" caretOffset="1431" date="Thu Apr 14 13:21:51 EDT 2022" docOffset="1431" starttimestamp="1649862007572" timestamp="94903960" />
  <Command __id="8563" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:21:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="94904089" type="Run" />
  <Command __id="8565" _type="PauseCommand" date="Thu Apr 14 13:22:30 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="94943007">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[38918]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8564" _type="ShellCommand" date="Thu Apr 14 13:22:30 EDT 2022" starttimestamp="1649862007572" timestamp="94943007" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8567" _type="PauseCommand" date="Thu Apr 14 13:23:16 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="94988657">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[45650]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8566" _type="ShellCommand" date="Thu Apr 14 13:23:16 EDT 2022" starttimestamp="1649862007572" timestamp="94988657" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8568" _type="MoveCaretCommand" caretOffset="1335" date="Thu Apr 14 13:23:16 EDT 2022" docOffset="1335" starttimestamp="1649862007572" timestamp="94988774" />
  <Command __id="8569" _type="MoveCaretCommand" caretOffset="1335" date="Thu Apr 14 13:23:16 EDT 2022" docOffset="1335" starttimestamp="1649862007572" timestamp="94988774" />
  <Command __id="8571" _type="PauseCommand" date="Thu Apr 14 13:23:22 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="94994972">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6198]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8570" _type="SelectTextCommand" caretOffset="1387" date="Thu Apr 14 13:23:22 EDT 2022" end="1404" start="1387" starttimestamp="1649862007572" timestamp="94994972" />
  <Command __id="8572" _type="SelectTextCommand" caretOffset="1387" date="Thu Apr 14 13:23:22 EDT 2022" end="1404" start="1387" starttimestamp="1649862007572" timestamp="94994972" />
  <Command __id="8559" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:21:51 EDT 2022" docASTNodeCount="542" docActiveCodeLength="3976" docExpressionCount="366" docLength="4639" projectName="A6" starttimestamp="1649862007572" timestamp="94903700">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		super.init(args);¶		"), Diff(INSERT,"¶		setFactories();¶		¶		"), Diff(EQUAL,"aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		super.init(args);
		
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: "+ mechanism.toString());

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		

}
]]></snapshot>
  </Command>
  <Command __id="8574" _type="PauseCommand" date="Thu Apr 14 13:23:23 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="94996018">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1046]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="8575" _type="CutCommand" date="Thu Apr 14 13:23:23 EDT 2022" starttimestamp="1649862007572" timestamp="94996025" />
  <Command __id="8577" _type="PauseCommand" date="Thu Apr 14 13:23:27 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="94999538">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[3513]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8576" _type="MoveCaretCommand" caretOffset="2284" date="Thu Apr 14 13:23:27 EDT 2022" docOffset="2284" starttimestamp="1649862007572" timestamp="94999538" />
  <Command __id="8578" _type="MoveCaretCommand" caretOffset="2284" date="Thu Apr 14 13:23:27 EDT 2022" docOffset="2284" starttimestamp="1649862007572" timestamp="94999538" />
  <Command __id="8580" _type="InsertStringCommand" date="Thu Apr 14 13:23:27 EDT 2022" starttimestamp="1649862007572" timestamp="94999795" timestamp2="94999795">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8581" _type="InsertStringCommand" date="Thu Apr 14 13:23:27 EDT 2022" starttimestamp="1649862007572" timestamp="94999795" timestamp2="94999795">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8583" _type="PasteCommand" date="Thu Apr 14 13:23:27 EDT 2022" starttimestamp="1649862007572" timestamp="95000288" />
  <Command __id="8584" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:23:28 EDT 2022" starttimestamp="1649862007572" timestamp="95000700" />
  <Command __id="8585" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:23:28 EDT 2022" starttimestamp="1649862007572" timestamp="95000799" />
  <Command __id="8586" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:23:28 EDT 2022" starttimestamp="1649862007572" timestamp="95000824" />
  <Command __id="8587" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:23:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95000900" type="Run" />
  <DocumentChange __id="8573" _type="Delete" date="Thu Apr 14 13:23:23 EDT 2022" docASTNodeCount="538" docActiveCodeLength="3959" docExpressionCount="363" docLength="4622" endLine="35" length="17" offset="1387" startLine="35" starttimestamp="1649862007572" timestamp="94996018">
    <text><![CDATA[super.init(args);]]></text>
  </DocumentChange>
  <DocumentChange __id="8579" _type="Insert" date="Thu Apr 14 13:23:27 EDT 2022" docASTNodeCount="538" docActiveCodeLength="3963" docExpressionCount="363" docLength="4626" length="4" offset="2284" starttimestamp="1649862007572" timestamp="94999789">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="8582" _type="Replace" date="Thu Apr 14 13:23:27 EDT 2022" docASTNodeCount="542" docActiveCodeLength="3980" docExpressionCount="366" docLength="4643" endLine="66" insertionLength="19" int_docASTNodeCount="538" int_docActiveCodeLength="3961" int_docExpressionCount="363" int_docLength="4624" length="2" offset="2286" startLine="66" starttimestamp="1649862007572" timestamp="95000284">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		super.init(args);]]></insertedText>
  </DocumentChange>
  <Command __id="8589" _type="PauseCommand" date="Thu Apr 14 13:23:30 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95003228">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2328]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8590" _type="MoveCaretCommand" caretOffset="2388" date="Thu Apr 14 13:23:31 EDT 2022" docOffset="2388" starttimestamp="1649862007572" timestamp="95003505" />
  <Command __id="8592" _type="PauseCommand" date="Thu Apr 14 13:23:37 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="95009745">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6240]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8591" _type="SelectTextCommand" caretOffset="1757" date="Thu Apr 14 13:23:37 EDT 2022" end="1789" start="1757" starttimestamp="1649862007572" timestamp="95009745" />
  <Command __id="8593" _type="SelectTextCommand" caretOffset="1757" date="Thu Apr 14 13:23:37 EDT 2022" end="1789" start="1757" starttimestamp="1649862007572" timestamp="95009745" />
  <Command __id="8594" _type="CopyCommand" date="Thu Apr 14 13:23:38 EDT 2022" starttimestamp="1649862007572" timestamp="95010429" />
  <Command __id="8595" _type="MoveCaretCommand" caretOffset="1757" date="Thu Apr 14 13:23:38 EDT 2022" docOffset="1757" starttimestamp="1649862007572" timestamp="95010866" />
  <Command __id="8596" _type="MoveCaretCommand" caretOffset="1757" date="Thu Apr 14 13:23:38 EDT 2022" docOffset="1757" starttimestamp="1649862007572" timestamp="95010867" />
  <Command __id="8588" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:23:30 EDT 2022" docASTNodeCount="638" docActiveCodeLength="4496" docExpressionCount="449" docLength="4883" projectName="A6" starttimestamp="1649862007572" timestamp="95003228">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.io.IOException;¶import java.net.InetSocketAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.util.ArrayList;¶import java.util.List;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import nioExample.exampleServerReadThread;¶import readThread.ReadThreadInterface;¶import readThread.ServerReadThread;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.nio.SocketChannelBound;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶¶public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{¶	protected NIOManager nioManager"), Diff(INSERT," = NIOManagerFactory.getSingleton()"), Diff(EQUAL,";¶	int aServerPort;¶	¶	List<SocketChannel> socketList = new ArrayList<SocketChannel>();¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	SocketChannel currentSocket = null;¶	¶	@Override¶	protected void init(String[] args) {¶		setTracing();¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		"), Diff(DELETE,"nioManager = NIOManagerFactory.getSingleton();¶	"), Diff(EQUAL,"	¶		try {¶			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();¶			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);¶			aServerFactoryChannel.socket().bind(anInternetSocketAddress);¶			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes¶																							// that can be read¶					this);¶			¶			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);¶¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ServerReadThread(this);¶				¶		//Create new readThread¶		readThread = new Thread(reader);¶		¶		//Start thread and do some action¶		readThread.start();¶		¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶	¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {¶		nioManager.addReadListener(aSocketChannel, this);¶¶		// save aSocketChannel¶		socketList.add(aSocketChannel);¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶¶		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);¶		System.out.println(aMessageString + "<--" + aSocketChannel);¶¶		currentSocket = aSocketChannel;¶		¶		reader.notifyThread();¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶¶	@Override¶	public List<SocketChannel> getSocketList() {¶		// TODO Auto-generated method stub¶		return socketList;¶	}¶¶	@Override¶	public SocketChannel getSocketChannel() {¶		// TODO Auto-generated method stub¶		return currentSocket;¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import nioExample.exampleServerReadThread;
import readThread.ReadThreadInterface;
import readThread.ServerReadThread;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.nio.SocketChannelBound;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;

public class ServerRemoteObjectNIO extends ServerRemoteObjectGIPC implements ServerRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	
	List<SocketChannel> socketList = new ArrayList<SocketChannel>();
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	SocketChannel currentSocket = null;
	
	@Override
	protected void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
			
		try {
			ServerSocketChannel aServerFactoryChannel = ServerSocketChannel.open();
			InetSocketAddress anInternetSocketAddress = new InetSocketAddress(aServerPort);
			aServerFactoryChannel.socket().bind(anInternetSocketAddress);
			SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);
			nioManager.enableListenableAccepts(aServerFactoryChannel, SelectionKey.OP_READ, // allow incoming writes
																							// that can be read
					this);
			
			//SocketChannelBound.newCase(this, aServerFactoryChannel, anInternetSocketAddress);

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ServerReadThread(this);
				
		//Create new readThread
		readThread = new Thread(reader);
		
		//Start thread and do some action
		readThread.start();
		
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}
	
	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel aSocketChannel) {
		nioManager.addReadListener(aSocketChannel, this);

		// save aSocketChannel
		socketList.add(aSocketChannel);
		
	}

	@Override
	public void socketChannelRead(SocketChannel aSocketChannel, ByteBuffer aMessage, int aLength) {
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);

		String aMessageString = new String(aMessage.array(), aMessage.position(), aLength);
		System.out.println(aMessageString + "<--" + aSocketChannel);

		currentSocket = aSocketChannel;
		
		reader.notifyThread();
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}

	@Override
	public List<SocketChannel> getSocketList() {
		// TODO Auto-generated method stub
		return socketList;
	}

	@Override
	public SocketChannel getSocketChannel() {
		// TODO Auto-generated method stub
		return currentSocket;
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

}
]]></snapshot>
  </Command>
  <Command __id="8598" _type="PauseCommand" date="Thu Apr 14 13:23:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95014853">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3986]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="8599" _type="MoveCaretCommand" caretOffset="2305" date="Thu Apr 14 13:23:42 EDT 2022" docOffset="2305" starttimestamp="1649862007572" timestamp="95015033" />
  <Command __id="8601" _type="PauseCommand" date="Thu Apr 14 13:23:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95017786">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2753]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8600" _type="MoveCaretCommand" caretOffset="1387" date="Thu Apr 14 13:23:45 EDT 2022" docOffset="1387" starttimestamp="1649862007572" timestamp="95017786" />
  <Command __id="8602" _type="MoveCaretCommand" caretOffset="1387" date="Thu Apr 14 13:23:45 EDT 2022" docOffset="1387" starttimestamp="1649862007572" timestamp="95017786" />
  <Command __id="8604" _type="PasteCommand" date="Thu Apr 14 13:23:45 EDT 2022" starttimestamp="1649862007572" timestamp="95018001" />
  <Command __id="8606" _type="PauseCommand" date="Thu Apr 14 13:23:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95019928">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1927]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8647" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:24:02 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95035153" type="Run" />
  <Command __id="8650" _type="PauseCommand" date="Thu Apr 14 13:24:05 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95037914">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2761]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8649" _type="ConsoleOutput" date="Thu Apr 14 13:24:05 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95037914" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.6441416928231337 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"New Client connected to server!!!"), Diff(INSERT,"Server0<-->Generic Client:0.6441416928231337 (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8651" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:24:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95038041" type="Run" />
  <Command __id="8652" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:24:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95038075" type="Run" />
  <Command __id="8653" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:24:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95038127" type="Run" />
  <Command __id="8654" _type="ConsoleOutput" date="Thu Apr 14 13:24:05 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95038130" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@44345b5f
[com.sun.proxy.$Proxy1@2c219ad1, com.sun.proxy.$Proxy1@44345b5f]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.6441416928231337 (Opened)"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@44345b5f¶[com.sun.proxy.$Proxy1@2c219ad1, com.sun.proxy.$Proxy1@44345b5f]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8655" _type="ConsoleOutput" date="Thu Apr 14 13:24:05 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95038338" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64611](remote),objID:[698b4f61:180291a84ff:-7ffe, 8496956323580883115]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64592](remote),objID:[501aa3d9:18029180332:-7ffe, 8001460388645419120]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64611](remote),objID:[698b4f61:180291a84ff:-7ffe, 8496956323580883115]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Client registered "), Diff(DELETE,"GIPC¶com.sun.proxy.$Proxy1@44345b5f¶[com.sun.proxy.$Proxy1@2c219ad1, com.sun.proxy.$Proxy1@44345b5f"), Diff(INSERT,"RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64611](remote),objID:[698b4f61:180291a84ff:-7ffe, 8496956323580883115]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64592](remote),objID:[501aa3d9:18029180332:-7ffe, 8001460388645419120]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64611](remote),objID:[698b4f61:180291a84ff:-7ffe, 8496956323580883115]]]]]"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="8656" _type="ConsoleOutput" date="Thu Apr 14 13:24:05 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95038343" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64611](remote),objID:[698b4f61:180291a84ff:-7ffe, 8496956323580883115]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64592](remote),objID:[501aa3d9:18029180332:-7ffe, 8001460388645419120]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[152.23.238.151:64611](remote),objID:[698b4f61:180291a84ff:-7ffe, 8496956323580883115]]]]]]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8657" _type="ShellCommand" date="Thu Apr 14 13:24:06 EDT 2022" starttimestamp="1649862007572" timestamp="95038787" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8659" _type="PauseCommand" date="Thu Apr 14 13:24:12 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="95044704">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5917]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8667" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:24:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95089904" type="Run" />
  <Command __id="8670" _type="PauseCommand" date="Thu Apr 14 13:25:24 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="95116526">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[26622]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8669" _type="ShellCommand" date="Thu Apr 14 13:25:24 EDT 2022" starttimestamp="1649862007572" timestamp="95116526" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8671" _type="MoveCaretCommand" caretOffset="1488" date="Thu Apr 14 13:25:24 EDT 2022" docOffset="1488" starttimestamp="1649862007572" timestamp="95116598" />
  <Command __id="8672" _type="MoveCaretCommand" caretOffset="1488" date="Thu Apr 14 13:25:24 EDT 2022" docOffset="1488" starttimestamp="1649862007572" timestamp="95116598" />
  <Command __id="8674" _type="PauseCommand" date="Thu Apr 14 13:25:29 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="95121926">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5328]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8673" _type="MoveCaretCommand" caretOffset="2458" date="Thu Apr 14 13:25:29 EDT 2022" docOffset="2458" starttimestamp="1649862007572" timestamp="95121926" />
  <Command __id="8675" _type="MoveCaretCommand" caretOffset="2458" date="Thu Apr 14 13:25:29 EDT 2022" docOffset="2458" starttimestamp="1649862007572" timestamp="95121927" />
  <Command __id="8677" _type="InsertStringCommand" date="Thu Apr 14 13:25:29 EDT 2022" starttimestamp="1649862007572" timestamp="95122216" timestamp2="95122216">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8678" _type="InsertStringCommand" date="Thu Apr 14 13:25:29 EDT 2022" starttimestamp="1649862007572" timestamp="95122216" timestamp2="95122216">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8680" _type="PasteCommand" date="Thu Apr 14 13:25:30 EDT 2022" starttimestamp="1649862007572" timestamp="95122792" />
  <Command __id="8682" _type="InsertStringCommand" date="Thu Apr 14 13:25:30 EDT 2022" starttimestamp="1649862007572" timestamp="95123323" timestamp2="95123323">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8683" _type="InsertStringCommand" date="Thu Apr 14 13:25:30 EDT 2022" starttimestamp="1649862007572" timestamp="95123323" timestamp2="95123323">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8685" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:25:31 EDT 2022" starttimestamp="1649862007572" timestamp="95124076" />
  <Command __id="8686" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:25:31 EDT 2022" starttimestamp="1649862007572" timestamp="95124076" />
  <Command __id="8688" _type="PauseCommand" date="Thu Apr 14 13:25:33 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95126079">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2003]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8687" _type="SelectTextCommand" caretOffset="2368" date="Thu Apr 14 13:25:33 EDT 2022" end="2458" start="2368" starttimestamp="1649862007572" timestamp="95126079" />
  <Command __id="8689" _type="SelectTextCommand" caretOffset="2368" date="Thu Apr 14 13:25:33 EDT 2022" end="2458" start="2368" starttimestamp="1649862007572" timestamp="95126079" />
  <Command __id="8691" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:25:33 EDT 2022" starttimestamp="1649862007572" timestamp="95126413" />
  <Command __id="8692" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:25:33 EDT 2022" starttimestamp="1649862007572" timestamp="95126413" />
  <Command __id="8694" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Apr 14 13:25:34 EDT 2022" starttimestamp="1649862007572" timestamp="95126946" />
  <Command __id="8695" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.goto.lineStart" date="Thu Apr 14 13:25:35 EDT 2022" starttimestamp="1649862007572" timestamp="95127759" />
  <Command __id="8697" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:25:36 EDT 2022" starttimestamp="1649862007572" timestamp="95128485" />
  <Command __id="8698" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:25:36 EDT 2022" starttimestamp="1649862007572" timestamp="95128485" />
  <Command __id="8700" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:25:36 EDT 2022" starttimestamp="1649862007572" timestamp="95128798" />
  <Command __id="8701" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:25:36 EDT 2022" starttimestamp="1649862007572" timestamp="95128798" />
  <Command __id="8703" _type="PauseCommand" date="Thu Apr 14 13:25:41 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="95133986">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5188]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8702" _type="ShellCommand" date="Thu Apr 14 13:25:41 EDT 2022" starttimestamp="1649862007572" timestamp="95133986" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8704" _type="ShellCommand" date="Thu Apr 14 13:25:41 EDT 2022" starttimestamp="1649862007572" timestamp="95134106" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8708" _type="PauseCommand" date="Thu Apr 14 13:25:42 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95135158">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1033]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="8707" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:25:42 EDT 2022" starttimestamp="1649862007572" timestamp="95135158" />
  <Command __id="8709" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:25:42 EDT 2022" starttimestamp="1649862007572" timestamp="95135254" />
  <Command __id="8710" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:25:42 EDT 2022" starttimestamp="1649862007572" timestamp="95135279" />
  <Command __id="8711" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:25:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95135357" type="Run" />
  <Command __id="8713" _type="PauseCommand" date="Thu Apr 14 13:25:46 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95138645">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3288]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8712" _type="ShellCommand" date="Thu Apr 14 13:25:46 EDT 2022" starttimestamp="1649862007572" timestamp="95138645" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8714" _type="ShellCommand" date="Thu Apr 14 13:25:46 EDT 2022" starttimestamp="1649862007572" timestamp="95138788" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8718" _type="PauseCommand" date="Thu Apr 14 13:25:48 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95140486">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1681]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="8738" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:26:03 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="95155728" type="Run" />
  <Command __id="8740" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:26:03 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="95155728" type="Run" />
  <Command __id="8741" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:26:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95155953" type="Run" />
  <Command __id="8742" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:26:03 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95155964" type="Run" />
  <Command __id="8743" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:26:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95155968" type="Run" />
  <Command __id="8745" _type="PauseCommand" date="Thu Apr 14 13:26:05 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95158413">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2445]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8754" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:26:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95167291" type="Run" />
  <Command __id="8756" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:26:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95167292" type="Run" />
  <Command __id="8758" _type="PauseCommand" date="Thu Apr 14 13:26:36 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="95188597">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[21305]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8757" _type="ShellCommand" date="Thu Apr 14 13:26:36 EDT 2022" starttimestamp="1649862007572" timestamp="95188597" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8760" _type="PauseCommand" date="Thu Apr 14 13:26:38 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95191215">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2618]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="8759" _type="CopyCommand" date="Thu Apr 14 13:26:38 EDT 2022" starttimestamp="1649862007572" timestamp="95191215" />
  <Command __id="8762" _type="PauseCommand" date="Thu Apr 14 13:26:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95192438">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1223]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8770" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:27:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95225910" type="Run" />
  <Command __id="8772" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:27:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95225911" type="Run" />
  <Command __id="8774" _type="PauseCommand" date="Thu Apr 14 13:27:15 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95228052">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2141]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8773" _type="ShellCommand" date="Thu Apr 14 13:27:15 EDT 2022" starttimestamp="1649862007572" timestamp="95228052" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8776" _type="PauseCommand" date="Thu Apr 14 13:28:00 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="95272755">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[44703]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8784" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:28:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95284510" type="Run" />
  <Command __id="8786" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:28:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95284510" type="Run" />
  <Command __id="8787" _type="ShellCommand" date="Thu Apr 14 13:28:12 EDT 2022" starttimestamp="1649862007572" timestamp="95285100" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8789" _type="PauseCommand" date="Thu Apr 14 13:28:46 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="95319198">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[34098]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8788" _type="MoveCaretCommand" caretOffset="1615" date="Thu Apr 14 13:28:46 EDT 2022" docOffset="1615" starttimestamp="1649862007572" timestamp="95319198" />
  <Command __id="8790" _type="MoveCaretCommand" caretOffset="1615" date="Thu Apr 14 13:28:46 EDT 2022" docOffset="1615" starttimestamp="1649862007572" timestamp="95319198" />
  <Command __id="8792" _type="PauseCommand" date="Thu Apr 14 13:29:09 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="95341594">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[22396]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8791" _type="ConsoleOutput" date="Thu Apr 14 13:29:09 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95341594" type="ConsoleOutput">
    <outputString><![CDATA[
GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*
RMI and GIPC are not checked because NIO failed%0.0
Test execution time (ms):58579
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"¶GIPCRMINIOOneClient"), Diff(DELETE,"Connection"), Diff(INSERT,"ReadWriteNonAtomic"), Diff(EQUAL," did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*"), Diff(INSERT,"¶RMI and GIPC are not checked because NIO failed"), Diff(EQUAL,"%0.0¶Test execution time (ms):585"), Diff(INSERT,"7"), Diff(EQUAL,"9"), Diff(DELETE,"5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8793" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:29:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95341835" type="Debug" />
  <Command __id="8794" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:29:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95341835" type="Debug" />
  <Command __id="8795" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:29:09 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="95341835" type="Run" />
  <Command __id="8797" _type="PauseCommand" date="Thu Apr 14 13:29:22 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="95355368">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[13533]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8796" _type="SelectTextCommand" caretOffset="1270" date="Thu Apr 14 13:29:22 EDT 2022" end="1273" start="1270" starttimestamp="1649862007572" timestamp="95355368" />
  <Command __id="8798" _type="SelectTextCommand" caretOffset="1270" date="Thu Apr 14 13:29:22 EDT 2022" end="1273" start="1270" starttimestamp="1649862007572" timestamp="95355368" />
  <Command __id="8800" _type="InsertStringCommand" date="Thu Apr 14 13:29:23 EDT 2022" starttimestamp="1649862007572" timestamp="95356200" timestamp2="95356200">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8801" _type="InsertStringCommand" date="Thu Apr 14 13:29:23 EDT 2022" starttimestamp="1649862007572" timestamp="95356200" timestamp2="95356200">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8803" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95356488" timestamp2="95356488">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8804" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95356488" timestamp2="95356488">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8806" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95356689" timestamp2="95356689">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8807" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95356689" timestamp2="95356689">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8809" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95356793" timestamp2="95356793">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8810" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95356793" timestamp2="95356793">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="8812" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95356901" timestamp2="95356901">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8813" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95356901" timestamp2="95356901">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="8815" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95357010" timestamp2="95357010">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="8816" _type="InsertStringCommand" date="Thu Apr 14 13:29:24 EDT 2022" starttimestamp="1649862007572" timestamp="95357011" timestamp2="95357011">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="8817" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:29:25 EDT 2022" starttimestamp="1649862007572" timestamp="95357577" />
  <Command __id="8818" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:29:25 EDT 2022" starttimestamp="1649862007572" timestamp="95357672" />
  <Command __id="8819" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:29:25 EDT 2022" starttimestamp="1649862007572" timestamp="95357719" />
  <Command __id="8821" _type="PauseCommand" date="Thu Apr 14 13:29:26 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95359155">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1436]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8820" _type="MoveCaretCommand" caretOffset="1271" date="Thu Apr 14 13:29:26 EDT 2022" docOffset="1271" starttimestamp="1649862007572" timestamp="95359155" />
  <Command __id="8822" _type="MoveCaretCommand" caretOffset="1271" date="Thu Apr 14 13:29:26 EDT 2022" docOffset="1271" starttimestamp="1649862007572" timestamp="95359155" />
  <Command __id="8824" _type="InsertStringCommand" date="Thu Apr 14 13:29:27 EDT 2022" starttimestamp="1649862007572" timestamp="95359947" timestamp2="95359947">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8825" _type="InsertStringCommand" date="Thu Apr 14 13:29:27 EDT 2022" starttimestamp="1649862007572" timestamp="95359947" timestamp2="95359947">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8827" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:29:28 EDT 2022" starttimestamp="1649862007572" timestamp="95360446" />
  <Command __id="8828" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:29:28 EDT 2022" starttimestamp="1649862007572" timestamp="95360446" />
  <Command __id="8830" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:29:28 EDT 2022" starttimestamp="1649862007572" timestamp="95360663" />
  <Command __id="8831" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:29:28 EDT 2022" starttimestamp="1649862007572" timestamp="95360663" />
  <Command __id="8833" _type="InsertStringCommand" date="Thu Apr 14 13:29:28 EDT 2022" starttimestamp="1649862007572" timestamp="95360973" timestamp2="95360973">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8834" _type="InsertStringCommand" date="Thu Apr 14 13:29:28 EDT 2022" starttimestamp="1649862007572" timestamp="95360973" timestamp2="95360973">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8835" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:29:29 EDT 2022" starttimestamp="1649862007572" timestamp="95361513" />
  <Command __id="8836" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:29:29 EDT 2022" starttimestamp="1649862007572" timestamp="95361601" />
  <Command __id="8837" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:29:29 EDT 2022" starttimestamp="1649862007572" timestamp="95361653" />
  <Command __id="8839" _type="PauseCommand" date="Thu Apr 14 13:29:37 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="95369733">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8080]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8838" _type="ShellCommand" date="Thu Apr 14 13:29:37 EDT 2022" starttimestamp="1649862007572" timestamp="95369733" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8840" _type="ShellCommand" date="Thu Apr 14 13:29:37 EDT 2022" starttimestamp="1649862007572" timestamp="95369851" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8844" _type="PauseCommand" date="Thu Apr 14 13:29:39 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95371480">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1602]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="8843" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:29:39 EDT 2022" starttimestamp="1649862007572" timestamp="95371480" />
  <Command __id="8845" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:29:39 EDT 2022" starttimestamp="1649862007572" timestamp="95371578" />
  <Command __id="8846" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:29:39 EDT 2022" starttimestamp="1649862007572" timestamp="95371616" />
  <Command __id="8848" _type="PauseCommand" date="Thu Apr 14 13:29:53 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="95386307">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[14691]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8847" _type="MoveCaretCommand" caretOffset="1637" date="Thu Apr 14 13:29:53 EDT 2022" docOffset="1637" starttimestamp="1649862007572" timestamp="95386307" />
  <Command __id="8849" _type="MoveCaretCommand" caretOffset="1637" date="Thu Apr 14 13:29:53 EDT 2022" docOffset="1637" starttimestamp="1649862007572" timestamp="95386307" />
  <Command __id="8851" _type="InsertStringCommand" date="Thu Apr 14 13:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="95386537" timestamp2="95386537">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8852" _type="InsertStringCommand" date="Thu Apr 14 13:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="95386538" timestamp2="95386538">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8854" _type="InsertStringCommand" date="Thu Apr 14 13:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="95386842" timestamp2="95386842">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8855" _type="InsertStringCommand" date="Thu Apr 14 13:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="95386842" timestamp2="95386842">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8857" _type="InsertStringCommand" date="Thu Apr 14 13:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="95386977" timestamp2="95386977">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="8858" _type="InsertStringCommand" date="Thu Apr 14 13:29:54 EDT 2022" starttimestamp="1649862007572" timestamp="95386977" timestamp2="95386977">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="8860" _type="InsertStringCommand" date="Thu Apr 14 13:29:55 EDT 2022" starttimestamp="1649862007572" timestamp="95387505" timestamp2="95387505">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8861" _type="InsertStringCommand" date="Thu Apr 14 13:29:55 EDT 2022" starttimestamp="1649862007572" timestamp="95387505" timestamp2="95387505">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8863" _type="InsertStringCommand" date="Thu Apr 14 13:29:55 EDT 2022" starttimestamp="1649862007572" timestamp="95387762" timestamp2="95387762">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8864" _type="InsertStringCommand" date="Thu Apr 14 13:29:55 EDT 2022" starttimestamp="1649862007572" timestamp="95387762" timestamp2="95387762">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8866" _type="InsertStringCommand" date="Thu Apr 14 13:29:55 EDT 2022" starttimestamp="1649862007572" timestamp="95388154" timestamp2="95388154">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8867" _type="InsertStringCommand" date="Thu Apr 14 13:29:55 EDT 2022" starttimestamp="1649862007572" timestamp="95388154" timestamp2="95388154">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8869" _type="InsertStringCommand" date="Thu Apr 14 13:29:55 EDT 2022" starttimestamp="1649862007572" timestamp="95388263" timestamp2="95388263">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8870" _type="InsertStringCommand" date="Thu Apr 14 13:29:55 EDT 2022" starttimestamp="1649862007572" timestamp="95388263" timestamp2="95388263">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8872" _type="InsertStringCommand" date="Thu Apr 14 13:29:56 EDT 2022" starttimestamp="1649862007572" timestamp="95388446" timestamp2="95388446">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8873" _type="InsertStringCommand" date="Thu Apr 14 13:29:56 EDT 2022" starttimestamp="1649862007572" timestamp="95388446" timestamp2="95388446">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8874" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 13:29:56 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="95388448" />
  <Command __id="8878" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 13:29:56 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="95389375" />
  <Command __id="8880" _type="InsertStringCommand" date="Thu Apr 14 13:29:56 EDT 2022" starttimestamp="1649862007572" timestamp="95389384" timestamp2="95389384">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8881" _type="InsertStringCommand" date="Thu Apr 14 13:29:56 EDT 2022" starttimestamp="1649862007572" timestamp="95389384" timestamp2="95389384">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8882" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 13:29:56 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="95389390" />
  <Command __id="8893" _type="PauseCommand" date="Thu Apr 14 13:29:59 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95391754">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2262]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="8597" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:23:42 EDT 2022" docASTNodeCount="542" docActiveCodeLength="3980" docExpressionCount="366" docLength="4643" projectName="A6" starttimestamp="1649862007572" timestamp="95014853">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		"), Diff(DELETE,"super.init(args);"), Diff(EQUAL,"¶		¶		setFactories();¶		¶		aServerPort = ServerArgsProcessor.getNIOServerPort(args);¶		¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶	"), Diff(INSERT,"	super.init(args);¶	"), Diff(EQUAL,"}¶	¶	@Override¶	public void setFactories() {¶		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		
		
		setFactories();
		
		aServerPort = ServerArgsProcessor.getNIOServerPort(args);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: "+ mechanism.toString());

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		

}
]]></snapshot>
  </Command>
  <DocumentChange __id="8603" _type="Replace" date="Thu Apr 14 13:23:45 EDT 2022" docASTNodeCount="548" docActiveCodeLength="4012" docExpressionCount="370" docLength="4675" endLine="35" insertionLength="34" int_docASTNodeCount="542" int_docActiveCodeLength="3978" int_docExpressionCount="366" int_docLength="4641" length="2" offset="1385" startLine="35" starttimestamp="1649862007572" timestamp="95017994">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		setTracing();
		setFactories();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8608" _type="Delete" date="Thu Apr 14 13:23:48 EDT 2022" docASTNodeCount="545" docActiveCodeLength="3989" docExpressionCount="368" docLength="4652" endLine="37" length="23" offset="1400" repeat="7" startLine="35" starttimestamp="1649862007572" timestamp="95020432" timestamp2="95022809">
    <text><![CDATA[
		setFactories();
		]]></text>
  </DocumentChange>
  <DocumentChange __id="8676" _type="Insert" date="Thu Apr 14 13:25:29 EDT 2022" docASTNodeCount="545" docActiveCodeLength="3993" docExpressionCount="368" docLength="4656" length="4" offset="2458" starttimestamp="1649862007572" timestamp="95122210">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="8679" _type="Replace" date="Thu Apr 14 13:25:30 EDT 2022" docASTNodeCount="553" docActiveCodeLength="4065" docExpressionCount="374" docLength="4728" endLine="71" insertionLength="74" int_docASTNodeCount="545" int_docActiveCodeLength="3991" int_docExpressionCount="368" int_docLength="4654" length="2" offset="2460" startLine="71" starttimestamp="1649862007572" timestamp="95122788">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8681" _type="Insert" date="Thu Apr 14 13:25:30 EDT 2022" docASTNodeCount="554" docActiveCodeLength="4066" docExpressionCount="374" docLength="4729" length="1" offset="2534" starttimestamp="1649862007572" timestamp="95123316">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="8684" _type="Delete" date="Thu Apr 14 13:25:31 EDT 2022" docASTNodeCount="553" docActiveCodeLength="4065" docExpressionCount="374" docLength="4728" endLine="71" length="1" offset="2534" startLine="71" starttimestamp="1649862007572" timestamp="95124074">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="8690" _type="Delete" date="Thu Apr 14 13:25:33 EDT 2022" docASTNodeCount="543" docActiveCodeLength="3973" docExpressionCount="366" docLength="4636" endLine="71" length="92" offset="2368" repeat="2" startLine="70" starttimestamp="1649862007572" timestamp="95126410" timestamp2="95126942">
    <text><![CDATA[AcceptCommandFactorySelector.setFactory(new AnAcceptCommandFactory(SelectionKey.OP_READ));
]]></text>
  </DocumentChange>
  <DocumentChange __id="8696" _type="Delete" date="Thu Apr 14 13:25:36 EDT 2022" docASTNodeCount="543" docActiveCodeLength="3971" docExpressionCount="366" docLength="4634" endLine="70" length="2" offset="2368" repeat="2" startLine="70" starttimestamp="1649862007572" timestamp="95128482" timestamp2="95128797">
    <text><![CDATA[		]]></text>
  </DocumentChange>
  <DocumentChange __id="8705" _type="Insert" date="Thu Apr 14 13:25:41 EDT 2022" docASTNodeCount="555" docActiveCodeLength="4052" docExpressionCount="377" docLength="4715" length="81" offset="662" repeat="2" starttimestamp="1649862007572" timestamp="95134125" timestamp2="95134126">
    <text><![CDATA[
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;]]></text>
  </DocumentChange>
  <DocumentChange __id="8715" _type="Insert" date="Thu Apr 14 13:25:46 EDT 2022" docASTNodeCount="567" docActiveCodeLength="4124" docExpressionCount="388" docLength="4787" length="72" offset="510" repeat="2" starttimestamp="1649862007572" timestamp="95138805" timestamp2="95138806">
    <text><![CDATA[
import inputport.nio.manager.factories.classes.AConnectCommandFactory;]]></text>
  </DocumentChange>
  <DocumentChange __id="8799" _type="Replace" date="Thu Apr 14 13:29:23 EDT 2022" docASTNodeCount="568" docActiveCodeLength="4122" docExpressionCount="389" docLength="4785" endLine="28" insertionLength="1" int_docASTNodeCount="563" int_docActiveCodeLength="4121" int_docExpressionCount="387" int_docLength="4784" length="3" offset="1270" startLine="28" starttimestamp="1649862007572" timestamp="95356189">
    <deletedText><![CDATA[int]]></deletedText>
    <insertedText><![CDATA[s]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8802" _type="Insert" date="Thu Apr 14 13:29:24 EDT 2022" docASTNodeCount="568" docActiveCodeLength="4127" docExpressionCount="389" docLength="4790" length="5" offset="1271" repeat="5" starttimestamp="1649862007572" timestamp="95356484" timestamp2="95357005">
    <text><![CDATA[tring]]></text>
  </DocumentChange>
  <DocumentChange __id="8823" _type="Insert" date="Thu Apr 14 13:29:27 EDT 2022" docASTNodeCount="568" docActiveCodeLength="4128" docExpressionCount="389" docLength="4791" length="1" offset="1271" starttimestamp="1649862007572" timestamp="95359944">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="8826" _type="Delete" date="Thu Apr 14 13:29:28 EDT 2022" docASTNodeCount="568" docActiveCodeLength="4126" docExpressionCount="389" docLength="4789" endLine="28" length="2" offset="1270" repeat="2" startLine="28" starttimestamp="1649862007572" timestamp="95360443" timestamp2="95360660">
    <text><![CDATA[sS]]></text>
  </DocumentChange>
  <DocumentChange __id="8832" _type="Insert" date="Thu Apr 14 13:29:28 EDT 2022" docASTNodeCount="568" docActiveCodeLength="4127" docExpressionCount="389" docLength="4790" length="1" offset="1270" starttimestamp="1649862007572" timestamp="95360966">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="8841" _type="Delete" date="Thu Apr 14 13:29:37 EDT 2022" docASTNodeCount="563" docActiveCodeLength="4121" docExpressionCount="387" docLength="4784" endLine="28" length="6" offset="1270" startLine="28" starttimestamp="1649862007572" timestamp="95369874">
    <text><![CDATA[String]]></text>
  </DocumentChange>
  <DocumentChange __id="8842" _type="Insert" date="Thu Apr 14 13:29:37 EDT 2022" docASTNodeCount="567" docActiveCodeLength="4124" docExpressionCount="388" docLength="4787" length="3" offset="1270" starttimestamp="1649862007572" timestamp="95369878">
    <text><![CDATA[int]]></text>
  </DocumentChange>
  <DocumentChange __id="8850" _type="Insert" date="Thu Apr 14 13:29:54 EDT 2022" docASTNodeCount="571" docActiveCodeLength="4138" docExpressionCount="391" docLength="4801" length="14" offset="1637" repeat="11" starttimestamp="1649862007572" timestamp="95386531" timestamp2="95388966">
    <text><![CDATA[
		System.out]]></text>
  </DocumentChange>
  <DocumentChange __id="8879" _type="Replace" date="Thu Apr 14 13:29:56 EDT 2022" docASTNodeCount="567" docActiveCodeLength="4139" docExpressionCount="388" docLength="4802" endLine="41" insertionLength="4" int_docASTNodeCount="569" int_docActiveCodeLength="4135" int_docExpressionCount="389" int_docLength="4798" length="3" offset="1648" startLine="41" starttimestamp="1649862007572" timestamp="95389378">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <Command __id="8892" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 13:29:59 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="95391754" />
  <Command __id="8896" _type="PauseCommand" date="Thu Apr 14 13:30:00 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95393375">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1621]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="8895" _type="InsertStringCommand" date="Thu Apr 14 13:30:00 EDT 2022" starttimestamp="1649862007572" timestamp="95393375" timestamp2="95393375">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8897" _type="InsertStringCommand" date="Thu Apr 14 13:30:00 EDT 2022" starttimestamp="1649862007572" timestamp="95393375" timestamp2="95393375">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8899" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:30:01 EDT 2022" starttimestamp="1649862007572" timestamp="95393882" />
  <Command __id="8900" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:30:01 EDT 2022" starttimestamp="1649862007572" timestamp="95393882" />
  <Command __id="8903" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:30:01 EDT 2022" starttimestamp="1649862007572" timestamp="95394138" />
  <Command __id="8904" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:30:01 EDT 2022" starttimestamp="1649862007572" timestamp="95394138" />
  <Command __id="8906" _type="InsertStringCommand" date="Thu Apr 14 13:30:02 EDT 2022" starttimestamp="1649862007572" timestamp="95394883" timestamp2="95394883">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8907" _type="InsertStringCommand" date="Thu Apr 14 13:30:02 EDT 2022" starttimestamp="1649862007572" timestamp="95394883" timestamp2="95394883">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="8909" _type="InsertStringCommand" date="Thu Apr 14 13:30:02 EDT 2022" starttimestamp="1649862007572" timestamp="95395358" timestamp2="95395358">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8910" _type="InsertStringCommand" date="Thu Apr 14 13:30:02 EDT 2022" starttimestamp="1649862007572" timestamp="95395358" timestamp2="95395358">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8912" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95395669" timestamp2="95395669">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8913" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95395669" timestamp2="95395669">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8915" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95395780" timestamp2="95395780">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8916" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95395781" timestamp2="95395781">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8918" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95396000" timestamp2="95396000">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="8919" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95396001" timestamp2="95396001">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="8921" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95396172" timestamp2="95396172">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8922" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95396172" timestamp2="95396172">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8924" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95396246" timestamp2="95396246">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8925" _type="InsertStringCommand" date="Thu Apr 14 13:30:03 EDT 2022" starttimestamp="1649862007572" timestamp="95396246" timestamp2="95396246">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8927" _type="InsertStringCommand" date="Thu Apr 14 13:30:04 EDT 2022" starttimestamp="1649862007572" timestamp="95396603" timestamp2="95396603">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="8928" _type="InsertStringCommand" date="Thu Apr 14 13:30:04 EDT 2022" starttimestamp="1649862007572" timestamp="95396604" timestamp2="95396604">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="8930" _type="InsertStringCommand" date="Thu Apr 14 13:30:04 EDT 2022" starttimestamp="1649862007572" timestamp="95396637" timestamp2="95396637">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="8931" _type="InsertStringCommand" date="Thu Apr 14 13:30:04 EDT 2022" starttimestamp="1649862007572" timestamp="95396638" timestamp2="95396638">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="8933" _type="InsertStringCommand" date="Thu Apr 14 13:30:04 EDT 2022" starttimestamp="1649862007572" timestamp="95396783" timestamp2="95396783">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8934" _type="InsertStringCommand" date="Thu Apr 14 13:30:04 EDT 2022" starttimestamp="1649862007572" timestamp="95396783" timestamp2="95396783">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="8936" _type="InsertStringCommand" date="Thu Apr 14 13:30:04 EDT 2022" starttimestamp="1649862007572" timestamp="95396993" timestamp2="95396993">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8937" _type="InsertStringCommand" date="Thu Apr 14 13:30:04 EDT 2022" starttimestamp="1649862007572" timestamp="95396993" timestamp2="95396993">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8938" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95397433" />
  <Command __id="8939" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95397433" />
  <Command __id="8940" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95397947" />
  <Command __id="8941" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95397947" />
  <Command __id="8942" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95397977" />
  <Command __id="8943" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95397977" />
  <Command __id="8944" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398009" />
  <Command __id="8945" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398009" />
  <Command __id="8946" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398037" />
  <Command __id="8947" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398037" />
  <Command __id="8948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398069" />
  <Command __id="8949" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398070" />
  <Command __id="8950" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398099" />
  <Command __id="8951" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398099" />
  <Command __id="8952" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398127" />
  <Command __id="8953" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398127" />
  <Command __id="8954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398159" />
  <Command __id="8955" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398159" />
  <DocumentChange __id="8883" _type="Insert" date="Thu Apr 14 13:29:57 EDT 2022" docASTNodeCount="574" docActiveCodeLength="4151" docExpressionCount="394" docLength="4814" length="12" offset="1652" repeat="10" starttimestamp="1649862007572" timestamp="95389492" timestamp2="95393369">
    <text><![CDATA[println("a")]]></text>
  </DocumentChange>
  <DocumentChange __id="8898" _type="Delete" date="Thu Apr 14 13:30:01 EDT 2022" docASTNodeCount="573" docActiveCodeLength="4148" docExpressionCount="393" docLength="4811" endLine="41" length="3" offset="1660" repeat="3" startLine="41" starttimestamp="1649862007572" timestamp="95393880" timestamp2="95394135">
    <text><![CDATA["a"]]></text>
  </DocumentChange>
  <Command __id="8956" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398188" />
  <Command __id="8957" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398189" />
  <Command __id="8958" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398222" />
  <Command __id="8959" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:05 EDT 2022" starttimestamp="1649862007572" timestamp="95398223" />
  <Command __id="8961" _type="InsertStringCommand" date="Thu Apr 14 13:30:06 EDT 2022" starttimestamp="1649862007572" timestamp="95398887" timestamp2="95398887">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8962" _type="InsertStringCommand" date="Thu Apr 14 13:30:06 EDT 2022" starttimestamp="1649862007572" timestamp="95398887" timestamp2="95398887">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8964" _type="InsertStringCommand" date="Thu Apr 14 13:30:06 EDT 2022" starttimestamp="1649862007572" timestamp="95399071" timestamp2="95399071">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8965" _type="InsertStringCommand" date="Thu Apr 14 13:30:06 EDT 2022" starttimestamp="1649862007572" timestamp="95399071" timestamp2="95399071">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8968" _type="PauseCommand" date="Thu Apr 14 13:30:08 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95400535">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1464]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="8967" _type="InsertStringCommand" date="Thu Apr 14 13:30:08 EDT 2022" starttimestamp="1649862007572" timestamp="95400535" timestamp2="95400535">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="8969" _type="InsertStringCommand" date="Thu Apr 14 13:30:08 EDT 2022" starttimestamp="1649862007572" timestamp="95400535" timestamp2="95400535">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="8970" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:08 EDT 2022" starttimestamp="1649862007572" timestamp="95400786" />
  <Command __id="8971" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:08 EDT 2022" starttimestamp="1649862007572" timestamp="95400786" />
  <Command __id="8972" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:08 EDT 2022" starttimestamp="1649862007572" timestamp="95400958" />
  <Command __id="8973" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:08 EDT 2022" starttimestamp="1649862007572" timestamp="95400958" />
  <Command __id="8975" _type="InsertStringCommand" date="Thu Apr 14 13:30:09 EDT 2022" starttimestamp="1649862007572" timestamp="95401618" timestamp2="95401618">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="8976" _type="InsertStringCommand" date="Thu Apr 14 13:30:09 EDT 2022" starttimestamp="1649862007572" timestamp="95401618" timestamp2="95401618">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="8978" _type="InsertStringCommand" date="Thu Apr 14 13:30:09 EDT 2022" starttimestamp="1649862007572" timestamp="95401931" timestamp2="95401931">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8979" _type="InsertStringCommand" date="Thu Apr 14 13:30:09 EDT 2022" starttimestamp="1649862007572" timestamp="95401931" timestamp2="95401931">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8980" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:09 EDT 2022" starttimestamp="1649862007572" timestamp="95402130" />
  <Command __id="8981" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:09 EDT 2022" starttimestamp="1649862007572" timestamp="95402130" />
  <Command __id="8982" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:09 EDT 2022" starttimestamp="1649862007572" timestamp="95402331" />
  <Command __id="8983" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:30:09 EDT 2022" starttimestamp="1649862007572" timestamp="95402331" />
  <DocumentChange __id="8905" _type="Insert" date="Thu Apr 14 13:30:02 EDT 2022" docASTNodeCount="576" docActiveCodeLength="4164" docExpressionCount="396" docLength="4827" length="16" offset="1660" repeat="16" starttimestamp="1649862007572" timestamp="95394879" timestamp2="95401924">
    <text><![CDATA[": "+aServerPort]]></text>
  </DocumentChange>
  <Command __id="8985" _type="PauseCommand" date="Thu Apr 14 13:30:12 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95405338">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3007]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="8986" _type="InsertStringCommand" date="Thu Apr 14 13:30:12 EDT 2022" starttimestamp="1649862007572" timestamp="95405355" timestamp2="95405355">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="8987" _type="InsertStringCommand" date="Thu Apr 14 13:30:12 EDT 2022" starttimestamp="1649862007572" timestamp="95405355" timestamp2="95405355">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="8989" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95405433" timestamp2="95405433">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8990" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95405433" timestamp2="95405433">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8992" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95405543" timestamp2="95405543">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="8993" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95405543" timestamp2="95405543">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="8995" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95405858" timestamp2="95405858">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8996" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95405858" timestamp2="95405858">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8998" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95406055" timestamp2="95406055">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8999" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95406055" timestamp2="95406055">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="9001" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95406200" timestamp2="95406200">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9002" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95406200" timestamp2="95406200">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9004" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95406284" timestamp2="95406284">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9005" _type="InsertStringCommand" date="Thu Apr 14 13:30:13 EDT 2022" starttimestamp="1649862007572" timestamp="95406284" timestamp2="95406284">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9007" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406454" timestamp2="95406454">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="9008" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406454" timestamp2="95406454">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="9010" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406639" timestamp2="95406639">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9011" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406639" timestamp2="95406639">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9013" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406736" timestamp2="95406736">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9014" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406736" timestamp2="95406736">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9016" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406801" timestamp2="95406801">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9017" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406801" timestamp2="95406801">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9019" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406924" timestamp2="95406924">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9020" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406924" timestamp2="95406924">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9022" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406993" timestamp2="95406993">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="9023" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95406994" timestamp2="95406994">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="9025" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95407082" timestamp2="95407082">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9026" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95407082" timestamp2="95407082">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9028" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95407267" timestamp2="95407267">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="9029" _type="InsertStringCommand" date="Thu Apr 14 13:30:14 EDT 2022" starttimestamp="1649862007572" timestamp="95407267" timestamp2="95407267">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="9030" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:30:15 EDT 2022" starttimestamp="1649862007572" timestamp="95407920" />
  <Command __id="9031" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:30:15 EDT 2022" starttimestamp="1649862007572" timestamp="95408024" />
  <Command __id="9032" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:30:15 EDT 2022" starttimestamp="1649862007572" timestamp="95408058" />
  <Command __id="9034" _type="PauseCommand" date="Thu Apr 14 13:30:18 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95410656">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2598]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9042" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:30:24 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="95416963" type="Run" />
  <Command __id="9044" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:30:24 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="95416963" type="Run" />
  <Command __id="9045" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:30:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95417197" type="Run" />
  <Command __id="9046" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:30:24 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95417238" type="Run" />
  <Command __id="9047" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:30:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95417244" type="Run" />
  <Command __id="9049" _type="PauseCommand" date="Thu Apr 14 13:30:27 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95419987">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2743]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9058" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:30:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95428981" type="Run" />
  <Command __id="9060" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:30:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95428983" type="Run" />
  <Command __id="9062" _type="PauseCommand" date="Thu Apr 14 13:31:24 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="95476489">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[47506]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9065" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Thu Apr 14 13:31:27 EDT 2022" starttimestamp="1649862007572" timestamp="95479795" />
  <Command __id="9067" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:31:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95479833" type="Debug" />
  <Command __id="9068" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:31:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95479833" type="Debug" />
  <Command __id="9069" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:31:27 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="95479833" type="Run" />
  <Command __id="9071" _type="PauseCommand" date="Thu Apr 14 13:31:32 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95484811">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4978]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9070" _type="SelectTextCommand" caretOffset="1594" date="Thu Apr 14 13:31:32 EDT 2022" end="1636" start="1594" starttimestamp="1649862007572" timestamp="95484811" />
  <Command __id="9072" _type="SelectTextCommand" caretOffset="1594" date="Thu Apr 14 13:31:32 EDT 2022" end="1636" start="1594" starttimestamp="1649862007572" timestamp="95484811" />
  <Command __id="9074" _type="PasteCommand" date="Thu Apr 14 13:31:33 EDT 2022" starttimestamp="1649862007572" timestamp="95485532" />
  <Command __id="9076" _type="PauseCommand" date="Thu Apr 14 13:31:36 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95489423">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3891]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9075" _type="ShellCommand" date="Thu Apr 14 13:31:36 EDT 2022" starttimestamp="1649862007572" timestamp="95489423" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9077" _type="ShellCommand" date="Thu Apr 14 13:31:37 EDT 2022" starttimestamp="1649862007572" timestamp="95489497" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9081" _type="PauseCommand" date="Thu Apr 14 13:31:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95491766">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2256]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9084" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:31:43 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="95495836" type="Run" />
  <Command __id="9086" _type="RunCommand" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:31:43 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="95495836" type="Run" />
  <Command __id="9087" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:31:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95496053" type="Run" />
  <Command __id="9088" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:31:43 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95496064" type="Run" />
  <Command __id="9089" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:31:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95496068" type="Run" />
  <Command __id="9091" _type="PauseCommand" date="Thu Apr 14 13:31:46 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95498610">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2542]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9100" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:31:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95507438" type="Run" />
  <Command __id="9102" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:31:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95507441" type="Run" />
  <Command __id="9104" _type="PauseCommand" date="Thu Apr 14 13:32:05 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="95518252">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10811]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9122" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:33:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95624665" type="Run" />
  <Command __id="9124" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:33:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95624668" type="Run" />
  <Command __id="9126" _type="PauseCommand" date="Thu Apr 14 13:34:29 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="95662410">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[37742]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9125" _type="ShellCommand" date="Thu Apr 14 13:34:29 EDT 2022" starttimestamp="1649862007572" timestamp="95662410" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9128" _type="PauseCommand" date="Thu Apr 14 13:34:35 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="95667707">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5297]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9127" _type="ShellCommand" date="Thu Apr 14 13:34:35 EDT 2022" starttimestamp="1649862007572" timestamp="95667707" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9129" _type="MoveCaretCommand" caretOffset="2183" date="Thu Apr 14 13:34:35 EDT 2022" docOffset="2183" starttimestamp="1649862007572" timestamp="95667822" />
  <Command __id="9130" _type="MoveCaretCommand" caretOffset="2183" date="Thu Apr 14 13:34:35 EDT 2022" docOffset="2183" starttimestamp="1649862007572" timestamp="95667822" />
  <DocumentChange __id="8984" _type="Insert" date="Thu Apr 14 13:30:12 EDT 2022" docASTNodeCount="576" docActiveCodeLength="4179" docExpressionCount="396" docLength="4842" length="15" offset="1661" repeat="15" starttimestamp="1649862007572" timestamp="95405338" timestamp2="95407264">
    <text><![CDATA[NIO SERVER PORT]]></text>
  </DocumentChange>
  <DocumentChange __id="9036" _type="Insert" date="Thu Apr 14 13:30:18 EDT 2022" docASTNodeCount="576" docActiveCodeLength="4180" docExpressionCount="396" docLength="4843" length="1" offset="1692" starttimestamp="1649862007572" timestamp="95411075">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="9073" _type="Replace" date="Thu Apr 14 13:31:33 EDT 2022" docASTNodeCount="576" docActiveCodeLength="4180" docExpressionCount="396" docLength="4843" endLine="40" insertionLength="42" int_docASTNodeCount="571" int_docActiveCodeLength="4138" int_docExpressionCount="392" int_docLength="4801" length="42" offset="1594" startLine="40" starttimestamp="1649862007572" timestamp="95485524">
    <deletedText><![CDATA[ServerArgsProcessor.getNIOServerPort(args)]]></deletedText>
    <insertedText><![CDATA[ClientArgsProcessor.getNIOServerPort(args)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9078" _type="Insert" date="Thu Apr 14 13:31:37 EDT 2022" docASTNodeCount="584" docActiveCodeLength="4235" docExpressionCount="403" docLength="4898" length="55" offset="364" repeat="2" starttimestamp="1649862007572" timestamp="95489510" timestamp2="95489511">
    <text><![CDATA[
import assignments.util.mainArgs.ClientArgsProcessor;]]></text>
  </DocumentChange>
  <Command __id="9132" _type="PauseCommand" date="Thu Apr 14 13:34:37 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95669929">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2107]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9133" _type="MoveCaretCommand" caretOffset="336" date="Thu Apr 14 13:34:37 EDT 2022" docOffset="2011" starttimestamp="1649862007572" timestamp="95670156" />
  <Command __id="9135" _type="PauseCommand" date="Thu Apr 14 13:34:49 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="95681806">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11650]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9134" _type="ConsoleOutput" date="Thu Apr 14 13:34:49 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95681806" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*
RMI and GIPC are not checked because NIO failed%0.0

Test execution time (ms):58589
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMINIOOneClient"), Diff(DELETE,"Connection"), Diff(INSERT,"ReadWriteNonAtomic"), Diff(EQUAL," did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*"), Diff(INSERT,"¶RMI and GIPC are not checked because NIO failed"), Diff(EQUAL,"%0.0¶¶Test execution time (ms):58"), Diff(DELETE,"61"), Diff(INSERT,"58"), Diff(EQUAL,"9¶")]]]></diff>
  </Command>
  <Command __id="9137" _type="PauseCommand" date="Thu Apr 14 13:35:32 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="95724754">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[42948]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9131" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:34:37 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="9179" docExpressionCount="847" docLength="10084" projectName="A6" starttimestamp="1649862007572" timestamp="95669929">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9136" _type="MoveCaretCommand" caretOffset="4554" date="Thu Apr 14 13:35:32 EDT 2022" docOffset="6229" starttimestamp="1649862007572" timestamp="95724754" />
  <DocumentChange __id="9138" _type="Insert" date="Thu Apr 14 13:35:33 EDT 2022" docASTNodeCount="1186" docActiveCodeLength="9203" docExpressionCount="853" docLength="10108" length="24" offset="6229" repeat="20" starttimestamp="1649862007572" timestamp="95725569" timestamp2="95730617">
    <text><![CDATA[
			System.out.println*]]></text>
  </DocumentChange>
  <Command __id="9139" _type="InsertStringCommand" date="Thu Apr 14 13:35:33 EDT 2022" starttimestamp="1649862007572" timestamp="95725575" timestamp2="95725575">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9142" _type="PauseCommand" date="Thu Apr 14 13:35:34 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95726931">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1356]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="9141" _type="InsertStringCommand" date="Thu Apr 14 13:35:34 EDT 2022" starttimestamp="1649862007572" timestamp="95726931" timestamp2="95726931">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="9144" _type="InsertStringCommand" date="Thu Apr 14 13:35:34 EDT 2022" starttimestamp="1649862007572" timestamp="95727123" timestamp2="95727123">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="9146" _type="InsertStringCommand" date="Thu Apr 14 13:35:34 EDT 2022" starttimestamp="1649862007572" timestamp="95727197" timestamp2="95727197">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9148" _type="InsertStringCommand" date="Thu Apr 14 13:35:34 EDT 2022" starttimestamp="1649862007572" timestamp="95727349" timestamp2="95727349">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9150" _type="InsertStringCommand" date="Thu Apr 14 13:35:35 EDT 2022" starttimestamp="1649862007572" timestamp="95727453" timestamp2="95727453">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9152" _type="InsertStringCommand" date="Thu Apr 14 13:35:35 EDT 2022" starttimestamp="1649862007572" timestamp="95727561" timestamp2="95727561">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9154" _type="InsertStringCommand" date="Thu Apr 14 13:35:35 EDT 2022" starttimestamp="1649862007572" timestamp="95728002" timestamp2="95728002">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9155" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 13:35:35 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="95728007" />
  <Command __id="9159" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 13:35:36 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="95728906" />
  <Command __id="9160" _type="InsertStringCommand" date="Thu Apr 14 13:35:36 EDT 2022" starttimestamp="1649862007572" timestamp="95728910" timestamp2="95728910">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9162" _type="InsertStringCommand" date="Thu Apr 14 13:35:36 EDT 2022" starttimestamp="1649862007572" timestamp="95729088" timestamp2="95729088">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9163" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 13:35:36 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="95729091" />
  <Command __id="9173" _type="PauseCommand" date="Thu Apr 14 13:35:38 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95730653">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1562]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="9172" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 13:35:38 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="95730653" />
  <DocumentChange __id="9174" _type="Delete" date="Thu Apr 14 13:35:38 EDT 2022" docASTNodeCount="1186" docActiveCodeLength="9202" docExpressionCount="851" docLength="10107" endLine="169" length="1" offset="6252" startLine="169" starttimestamp="1649862007572" timestamp="95731138">
    <text><![CDATA[*]]></text>
  </DocumentChange>
  <Command __id="9175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:35:38 EDT 2022" starttimestamp="1649862007572" timestamp="95731141" />
  <Command __id="9177" _type="InsertStringCommand" date="Thu Apr 14 13:35:39 EDT 2022" starttimestamp="1649862007572" timestamp="95731589" timestamp2="95731589">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="9179" _type="InsertStringCommand" date="Thu Apr 14 13:35:39 EDT 2022" starttimestamp="1649862007572" timestamp="95731926" timestamp2="95731926">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="9181" _type="InsertStringCommand" date="Thu Apr 14 13:35:39 EDT 2022" starttimestamp="1649862007572" timestamp="95732345" timestamp2="95732345">
    <data><![CDATA[W]]></data>
  </Command>
  <Command __id="9183" _type="InsertStringCommand" date="Thu Apr 14 13:35:40 EDT 2022" starttimestamp="1649862007572" timestamp="95732544" timestamp2="95732544">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9185" _type="InsertStringCommand" date="Thu Apr 14 13:35:40 EDT 2022" starttimestamp="1649862007572" timestamp="95732701" timestamp2="95732701">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9187" _type="InsertStringCommand" date="Thu Apr 14 13:35:40 EDT 2022" starttimestamp="1649862007572" timestamp="95732832" timestamp2="95732832">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="9189" _type="InsertStringCommand" date="Thu Apr 14 13:35:40 EDT 2022" starttimestamp="1649862007572" timestamp="95732986" timestamp2="95732986">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9191" _type="InsertStringCommand" date="Thu Apr 14 13:35:40 EDT 2022" starttimestamp="1649862007572" timestamp="95733094" timestamp2="95733094">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9193" _type="InsertStringCommand" date="Thu Apr 14 13:35:40 EDT 2022" starttimestamp="1649862007572" timestamp="95733258" timestamp2="95733258">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9195" _type="InsertStringCommand" date="Thu Apr 14 13:35:40 EDT 2022" starttimestamp="1649862007572" timestamp="95733309" timestamp2="95733309">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="9197" _type="InsertStringCommand" date="Thu Apr 14 13:35:41 EDT 2022" starttimestamp="1649862007572" timestamp="95733530" timestamp2="95733530">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="9199" _type="InsertStringCommand" date="Thu Apr 14 13:35:41 EDT 2022" starttimestamp="1649862007572" timestamp="95733656" timestamp2="95733656">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="9201" _type="InsertStringCommand" date="Thu Apr 14 13:35:41 EDT 2022" starttimestamp="1649862007572" timestamp="95733808" timestamp2="95733808">
    <data><![CDATA[K]]></data>
  </Command>
  <Command __id="9203" _type="InsertStringCommand" date="Thu Apr 14 13:35:41 EDT 2022" starttimestamp="1649862007572" timestamp="95733979" timestamp2="95733979">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9205" _type="InsertStringCommand" date="Thu Apr 14 13:35:41 EDT 2022" starttimestamp="1649862007572" timestamp="95734037" timestamp2="95734037">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="9207" _type="InsertStringCommand" date="Thu Apr 14 13:35:41 EDT 2022" starttimestamp="1649862007572" timestamp="95734153" timestamp2="95734153">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="9209" _type="InsertStringCommand" date="Thu Apr 14 13:35:41 EDT 2022" starttimestamp="1649862007572" timestamp="95734229" timestamp2="95734229">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9211" _type="InsertStringCommand" date="Thu Apr 14 13:35:41 EDT 2022" starttimestamp="1649862007572" timestamp="95734369" timestamp2="95734369">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="9213" _type="InsertStringCommand" date="Thu Apr 14 13:35:42 EDT 2022" starttimestamp="1649862007572" timestamp="95734450" timestamp2="95734450">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9215" _type="InsertStringCommand" date="Thu Apr 14 13:35:42 EDT 2022" starttimestamp="1649862007572" timestamp="95734522" timestamp2="95734522">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9217" _type="InsertStringCommand" date="Thu Apr 14 13:35:42 EDT 2022" starttimestamp="1649862007572" timestamp="95735082" timestamp2="95735082">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9219" _type="InsertStringCommand" date="Thu Apr 14 13:35:42 EDT 2022" starttimestamp="1649862007572" timestamp="95735185" timestamp2="95735185">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="9221" _type="InsertStringCommand" date="Thu Apr 14 13:35:42 EDT 2022" starttimestamp="1649862007572" timestamp="95735319" timestamp2="95735319">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9223" _type="InsertStringCommand" date="Thu Apr 14 13:35:42 EDT 2022" starttimestamp="1649862007572" timestamp="95735390" timestamp2="95735390">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9225" _type="InsertStringCommand" date="Thu Apr 14 13:35:43 EDT 2022" starttimestamp="1649862007572" timestamp="95735605" timestamp2="95735605">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9227" _type="InsertStringCommand" date="Thu Apr 14 13:35:43 EDT 2022" starttimestamp="1649862007572" timestamp="95735717" timestamp2="95735717">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9229" _type="InsertStringCommand" date="Thu Apr 14 13:35:43 EDT 2022" starttimestamp="1649862007572" timestamp="95735976" timestamp2="95735976">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="9231" _type="InsertStringCommand" date="Thu Apr 14 13:35:43 EDT 2022" starttimestamp="1649862007572" timestamp="95736089" timestamp2="95736089">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9233" _type="InsertStringCommand" date="Thu Apr 14 13:35:43 EDT 2022" starttimestamp="1649862007572" timestamp="95736151" timestamp2="95736151">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="9235" _type="InsertStringCommand" date="Thu Apr 14 13:35:43 EDT 2022" starttimestamp="1649862007572" timestamp="95736372" timestamp2="95736372">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="9237" _type="InsertStringCommand" date="Thu Apr 14 13:35:44 EDT 2022" starttimestamp="1649862007572" timestamp="95736573" timestamp2="95736573">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9239" _type="InsertStringCommand" date="Thu Apr 14 13:35:44 EDT 2022" starttimestamp="1649862007572" timestamp="95736656" timestamp2="95736656">
    <data><![CDATA[Y]]></data>
  </Command>
  <Command __id="9241" _type="InsertStringCommand" date="Thu Apr 14 13:35:44 EDT 2022" starttimestamp="1649862007572" timestamp="95736798" timestamp2="95736798">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9243" _type="InsertStringCommand" date="Thu Apr 14 13:35:44 EDT 2022" starttimestamp="1649862007572" timestamp="95736957" timestamp2="95736957">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="9245" _type="InsertStringCommand" date="Thu Apr 14 13:35:44 EDT 2022" starttimestamp="1649862007572" timestamp="95736999" timestamp2="95736999">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9247" _type="InsertStringCommand" date="Thu Apr 14 13:35:44 EDT 2022" starttimestamp="1649862007572" timestamp="95737113" timestamp2="95737113">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9249" _type="InsertStringCommand" date="Thu Apr 14 13:35:44 EDT 2022" starttimestamp="1649862007572" timestamp="95737250" timestamp2="95737250">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9251" _type="InsertStringCommand" date="Thu Apr 14 13:35:45 EDT 2022" starttimestamp="1649862007572" timestamp="95737555" timestamp2="95737555">
    <data><![CDATA[:]]></data>
  </Command>
  <Command __id="9253" _type="PauseCommand" date="Thu Apr 14 13:35:47 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95739835">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2280]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9252" _type="MoveCaretCommand" caretOffset="4617" date="Thu Apr 14 13:35:47 EDT 2022" docOffset="6292" starttimestamp="1649862007572" timestamp="95739835" />
  <Command __id="9255" _type="InsertStringCommand" date="Thu Apr 14 13:35:47 EDT 2022" starttimestamp="1649862007572" timestamp="95740221" timestamp2="95740221">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9256" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:35:48 EDT 2022" starttimestamp="1649862007572" timestamp="95740653" />
  <Command __id="9257" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:35:48 EDT 2022" starttimestamp="1649862007572" timestamp="95740752" />
  <Command __id="9258" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:35:48 EDT 2022" starttimestamp="1649862007572" timestamp="95740777" />
  <Command __id="9260" _type="PauseCommand" date="Thu Apr 14 13:35:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95742750">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1973]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9259" _type="SelectTextCommand" caretOffset="4559" date="Thu Apr 14 13:35:50 EDT 2022" end="4618" start="4559" starttimestamp="1649862007572" timestamp="95742750" />
  <Command __id="9261" _type="CopyCommand" date="Thu Apr 14 13:35:50 EDT 2022" starttimestamp="1649862007572" timestamp="95742762" />
  <Command __id="9263" _type="PauseCommand" date="Thu Apr 14 13:35:51 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95744006">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1244]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9262" _type="MoveCaretCommand" caretOffset="4692" date="Thu Apr 14 13:35:51 EDT 2022" docOffset="6367" starttimestamp="1649862007572" timestamp="95744006" />
  <Command __id="9265" _type="InsertStringCommand" date="Thu Apr 14 13:35:51 EDT 2022" starttimestamp="1649862007572" timestamp="95744203" timestamp2="95744203">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9267" _type="PasteCommand" date="Thu Apr 14 13:35:51 EDT 2022" starttimestamp="1649862007572" timestamp="95744422" />
  <Command __id="9269" _type="PauseCommand" date="Thu Apr 14 13:35:54 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95746942">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2520]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9268" _type="SelectTextCommand" caretOffset="4717" date="Thu Apr 14 13:35:54 EDT 2022" end="4752" start="4717" starttimestamp="1649862007572" timestamp="95746942" />
  <Command __id="9271" _type="InsertStringCommand" date="Thu Apr 14 13:35:54 EDT 2022" starttimestamp="1649862007572" timestamp="95747236" timestamp2="95747236">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9273" _type="InsertStringCommand" date="Thu Apr 14 13:35:54 EDT 2022" starttimestamp="1649862007572" timestamp="95747370" timestamp2="95747370">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="9275" _type="InsertStringCommand" date="Thu Apr 14 13:35:55 EDT 2022" starttimestamp="1649862007572" timestamp="95747490" timestamp2="95747490">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9277" _type="InsertStringCommand" date="Thu Apr 14 13:35:55 EDT 2022" starttimestamp="1649862007572" timestamp="95747599" timestamp2="95747599">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9279" _type="InsertStringCommand" date="Thu Apr 14 13:35:55 EDT 2022" starttimestamp="1649862007572" timestamp="95747866" timestamp2="95747866">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9281" _type="InsertStringCommand" date="Thu Apr 14 13:35:55 EDT 2022" starttimestamp="1649862007572" timestamp="95747985" timestamp2="95747985">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9283" _type="InsertStringCommand" date="Thu Apr 14 13:35:55 EDT 2022" starttimestamp="1649862007572" timestamp="95748221" timestamp2="95748221">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="9285" _type="InsertStringCommand" date="Thu Apr 14 13:35:55 EDT 2022" starttimestamp="1649862007572" timestamp="95748329" timestamp2="95748329">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9287" _type="InsertStringCommand" date="Thu Apr 14 13:35:55 EDT 2022" starttimestamp="1649862007572" timestamp="95748407" timestamp2="95748407">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="9289" _type="InsertStringCommand" date="Thu Apr 14 13:35:56 EDT 2022" starttimestamp="1649862007572" timestamp="95748642" timestamp2="95748642">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="9291" _type="InsertStringCommand" date="Thu Apr 14 13:35:56 EDT 2022" starttimestamp="1649862007572" timestamp="95748866" timestamp2="95748866">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9293" _type="InsertStringCommand" date="Thu Apr 14 13:35:56 EDT 2022" starttimestamp="1649862007572" timestamp="95748971" timestamp2="95748971">
    <data><![CDATA[Y]]></data>
  </Command>
  <Command __id="9295" _type="PauseCommand" date="Thu Apr 14 13:35:58 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95751097">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2126]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9294" _type="SelectTextCommand" caretOffset="4600" date="Thu Apr 14 13:35:58 EDT 2022" end="4610" start="4600" starttimestamp="1649862007572" timestamp="95751097" />
  <Command __id="9296" _type="MoveCaretCommand" caretOffset="4597" date="Thu Apr 14 13:35:59 EDT 2022" docOffset="6272" starttimestamp="1649862007572" timestamp="95751787" />
  <Command __id="9298" _type="InsertStringCommand" date="Thu Apr 14 13:35:59 EDT 2022" starttimestamp="1649862007572" timestamp="95752045" timestamp2="95752045">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9300" _type="InsertStringCommand" date="Thu Apr 14 13:35:59 EDT 2022" starttimestamp="1649862007572" timestamp="95752105" timestamp2="95752105">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9302" _type="InsertStringCommand" date="Thu Apr 14 13:35:59 EDT 2022" starttimestamp="1649862007572" timestamp="95752207" timestamp2="95752207">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9304" _type="InsertStringCommand" date="Thu Apr 14 13:35:59 EDT 2022" starttimestamp="1649862007572" timestamp="95752414" timestamp2="95752414">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="9306" _type="InsertStringCommand" date="Thu Apr 14 13:36:00 EDT 2022" starttimestamp="1649862007572" timestamp="95752610" timestamp2="95752610">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9308" _type="InsertStringCommand" date="Thu Apr 14 13:36:00 EDT 2022" starttimestamp="1649862007572" timestamp="95752667" timestamp2="95752667">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9310" _type="InsertStringCommand" date="Thu Apr 14 13:36:00 EDT 2022" starttimestamp="1649862007572" timestamp="95752887" timestamp2="95752887">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9312" _type="InsertStringCommand" date="Thu Apr 14 13:36:00 EDT 2022" starttimestamp="1649862007572" timestamp="95753316" timestamp2="95753316">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="9314" _type="InsertStringCommand" date="Thu Apr 14 13:36:01 EDT 2022" starttimestamp="1649862007572" timestamp="95753502" timestamp2="95753502">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9316" _type="InsertStringCommand" date="Thu Apr 14 13:36:01 EDT 2022" starttimestamp="1649862007572" timestamp="95753551" timestamp2="95753551">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9318" _type="InsertStringCommand" date="Thu Apr 14 13:36:01 EDT 2022" starttimestamp="1649862007572" timestamp="95753655" timestamp2="95753655">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9320" _type="InsertStringCommand" date="Thu Apr 14 13:36:01 EDT 2022" starttimestamp="1649862007572" timestamp="95753747" timestamp2="95753747">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9322" _type="PauseCommand" date="Thu Apr 14 13:36:03 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95756377">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2630]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9321" _type="SelectTextCommand" caretOffset="4729" date="Thu Apr 14 13:36:03 EDT 2022" end="4741" start="4729" starttimestamp="1649862007572" timestamp="95756377" />
  <Command __id="9324" _type="InsertStringCommand" date="Thu Apr 14 13:36:04 EDT 2022" starttimestamp="1649862007572" timestamp="95756503" timestamp2="95756503">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="9326" _type="InsertStringCommand" date="Thu Apr 14 13:36:04 EDT 2022" starttimestamp="1649862007572" timestamp="95756582" timestamp2="95756582">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9328" _type="InsertStringCommand" date="Thu Apr 14 13:36:04 EDT 2022" starttimestamp="1649862007572" timestamp="95756667" timestamp2="95756667">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9330" _type="InsertStringCommand" date="Thu Apr 14 13:36:04 EDT 2022" starttimestamp="1649862007572" timestamp="95756889" timestamp2="95756889">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="9332" _type="InsertStringCommand" date="Thu Apr 14 13:36:04 EDT 2022" starttimestamp="1649862007572" timestamp="95757174" timestamp2="95757174">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9334" _type="InsertStringCommand" date="Thu Apr 14 13:36:04 EDT 2022" starttimestamp="1649862007572" timestamp="95757200" timestamp2="95757200">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9336" _type="InsertStringCommand" date="Thu Apr 14 13:36:05 EDT 2022" starttimestamp="1649862007572" timestamp="95757668" timestamp2="95757668">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9338" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:36:05 EDT 2022" starttimestamp="1649862007572" timestamp="95758150" />
  <Command __id="9340" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:36:05 EDT 2022" starttimestamp="1649862007572" timestamp="95758312" />
  <Command __id="9342" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:36:06 EDT 2022" starttimestamp="1649862007572" timestamp="95758474" />
  <Command __id="9344" _type="InsertStringCommand" date="Thu Apr 14 13:36:06 EDT 2022" starttimestamp="1649862007572" timestamp="95758609" timestamp2="95758609">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9346" _type="InsertStringCommand" date="Thu Apr 14 13:36:06 EDT 2022" starttimestamp="1649862007572" timestamp="95758682" timestamp2="95758682">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9348" _type="InsertStringCommand" date="Thu Apr 14 13:36:06 EDT 2022" starttimestamp="1649862007572" timestamp="95758891" timestamp2="95758891">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9350" _type="InsertStringCommand" date="Thu Apr 14 13:36:06 EDT 2022" starttimestamp="1649862007572" timestamp="95758944" timestamp2="95758944">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="9352" _type="InsertStringCommand" date="Thu Apr 14 13:36:06 EDT 2022" starttimestamp="1649862007572" timestamp="95759186" timestamp2="95759186">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9354" _type="InsertStringCommand" date="Thu Apr 14 13:36:06 EDT 2022" starttimestamp="1649862007572" timestamp="95759326" timestamp2="95759326">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9356" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95759444" timestamp2="95759444">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="9358" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95759606" timestamp2="95759606">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9360" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95759761" timestamp2="95759761">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="9362" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95759822" timestamp2="95759822">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9364" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95759928" timestamp2="95759928">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9366" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95759999" timestamp2="95759999">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="9368" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95760088" timestamp2="95760088">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9370" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95760189" timestamp2="95760189">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9372" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95760310" timestamp2="95760310">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9374" _type="InsertStringCommand" date="Thu Apr 14 13:36:07 EDT 2022" starttimestamp="1649862007572" timestamp="95760402" timestamp2="95760402">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9376" _type="InsertStringCommand" date="Thu Apr 14 13:36:08 EDT 2022" starttimestamp="1649862007572" timestamp="95760592" timestamp2="95760592">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9378" _type="InsertStringCommand" date="Thu Apr 14 13:36:08 EDT 2022" starttimestamp="1649862007572" timestamp="95760720" timestamp2="95760720">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="9380" _type="InsertStringCommand" date="Thu Apr 14 13:36:08 EDT 2022" starttimestamp="1649862007572" timestamp="95760851" timestamp2="95760851">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9382" _type="InsertStringCommand" date="Thu Apr 14 13:36:08 EDT 2022" starttimestamp="1649862007572" timestamp="95760927" timestamp2="95760927">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9384" _type="InsertStringCommand" date="Thu Apr 14 13:36:08 EDT 2022" starttimestamp="1649862007572" timestamp="95761290" timestamp2="95761290">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9386" _type="InsertStringCommand" date="Thu Apr 14 13:36:08 EDT 2022" starttimestamp="1649862007572" timestamp="95761405" timestamp2="95761405">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9388" _type="InsertStringCommand" date="Thu Apr 14 13:36:09 EDT 2022" starttimestamp="1649862007572" timestamp="95761591" timestamp2="95761591">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="9390" _type="InsertStringCommand" date="Thu Apr 14 13:36:09 EDT 2022" starttimestamp="1649862007572" timestamp="95761700" timestamp2="95761700">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9392" _type="InsertStringCommand" date="Thu Apr 14 13:36:09 EDT 2022" starttimestamp="1649862007572" timestamp="95761750" timestamp2="95761750">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9394" _type="InsertStringCommand" date="Thu Apr 14 13:36:09 EDT 2022" starttimestamp="1649862007572" timestamp="95761914" timestamp2="95761914">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9396" _type="InsertStringCommand" date="Thu Apr 14 13:36:09 EDT 2022" starttimestamp="1649862007572" timestamp="95762091" timestamp2="95762091">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9398" _type="InsertStringCommand" date="Thu Apr 14 13:36:10 EDT 2022" starttimestamp="1649862007572" timestamp="95762432" timestamp2="95762432">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="9399" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:36:10 EDT 2022" starttimestamp="1649862007572" timestamp="95762732" />
  <Command __id="9400" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:36:10 EDT 2022" starttimestamp="1649862007572" timestamp="95762834" />
  <Command __id="9401" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:36:10 EDT 2022" starttimestamp="1649862007572" timestamp="95762869" />
  <Command __id="9403" _type="PauseCommand" date="Thu Apr 14 13:36:12 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95764512">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1643]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9402" _type="ShellCommand" date="Thu Apr 14 13:36:12 EDT 2022" starttimestamp="1649862007572" timestamp="95764512" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9405" _type="PauseCommand" date="Thu Apr 14 13:36:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95767049">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2537]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9404" _type="ConsoleOutput" date="Thu Apr 14 13:36:14 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95767049" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@16eb9c05 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMINIOOneClientReadWriteNonAtomic did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*¶RMI and GIPC are not checked because NIO failed%0.0¶¶Test execution time (ms):58589"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@16eb9c05 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9407" _type="PauseCommand" date="Thu Apr 14 13:36:15 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95768356">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1307]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9406" _type="ConsoleOutput" date="Thu Apr 14 13:36:15 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95768356" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@16eb9c05 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOStaticArguments@16eb9c05 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="9409" _type="PauseCommand" date="Thu Apr 14 13:36:17 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95769892">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1536]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9408" _type="ConsoleOutput" date="Thu Apr 14 13:36:17 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95769892" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientConnection@6fa9ce37 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIO"), Diff(DELETE,"StaticArguments@16eb9c05"), Diff(INSERT,"OneClientConnection@6fa9ce37"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="9411" _type="PauseCommand" date="Thu Apr 14 13:36:24 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="95776629">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6737]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9410" _type="ConsoleOutput" date="Thu Apr 14 13:36:24 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95776629" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@92c0be2 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClient"), Diff(DELETE,"Connection@6fa9ce37"), Diff(INSERT,"ReadWriteNonAtomic@92c0be2"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="9413" _type="PauseCommand" date="Thu Apr 14 13:36:31 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="95783588">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6959]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9412" _type="ConsoleOutput" date="Thu Apr 14 13:36:31 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95783588" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@92c0be2 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@92c0be2 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="9415" _type="PauseCommand" date="Thu Apr 14 13:36:42 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="95795380">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11792]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9414" _type="ConsoleOutput" date="Thu Apr 14 13:36:42 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95795380" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Apr 14 13:36:42 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOOneClientReadWriteNonAtomic@92c0be2 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Thu Apr 14 13:36:42 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9417" _type="PauseCommand" date="Thu Apr 14 13:36:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95798257">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2877]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9416" _type="ConsoleOutput" date="Thu Apr 14 13:36:45 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95798257" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:124
Running second pass checks Thu Apr 14 13:36:45 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Apr 14 13:36:45 EDT 2022
End O(n2) inter- and intra class method calls:Thu Apr 14 13:36:45 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and r"), Diff(INSERT,"size:124¶R"), Diff(EQUAL,"unning "), Diff(DELETE,"first"), Diff(INSERT,"second"), Diff(EQUAL," pass checks"), Diff(DELETE,":Thu Apr 14 13:36:42"), Diff(INSERT," Thu Apr 14 13:36:45 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Apr 14 13:36:45 EDT 2022¶End O(n2) inter- and intra class method calls:Thu Apr 14 13:36:45"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="9419" _type="PauseCommand" date="Thu Apr 14 13:36:47 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="95800129">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1872]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9418" _type="ConsoleOutput" date="Thu Apr 14 13:36:47 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95800129" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Apr 14 13:36:47 EDT 2022
Generating checks:Thu Apr 14 13:36:47 EDT 2022
Finished Generating checks:Thu Apr 14 13:36:47 EDT 2022
Generating externals:Thu Apr 14 13:36:47 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:124¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Thu Apr 14 13:36:4"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating check"), Diff(EQUAL,"s:Thu Apr 14 13:36:4"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Finished Generating checks:Thu Apr 14 13:36:47 EDT 2022¶Generating externa"), Diff(EQUAL,"ls:Thu Apr 14 13:36:4"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="9420" _type="ConsoleOutput" date="Thu Apr 14 13:36:48 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95800672" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Apr 14 13:36:48 EDT 2022
Test execution time (ms):5346
A6ExpectedInterfaces did not pass completely:See console trace about lines failing  this check%0.5

Test execution time (ms):18
A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.2413793103448276

Test execution time (ms):15
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Thu Apr 14 13:36:4"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating checks:Thu Apr 14 13:36:47 EDT 2022¶Finished Generating checks:Thu Apr 14 13:36:47 EDT 2022¶Generating externals:Thu Apr 14 13:36:47 EDT 2022"), Diff(INSERT,"Test execution time (ms):5346¶A6ExpectedInterfaces did not pass completely:See console trace about lines failing  this check%0.5¶¶Test execution time (ms):18¶A6ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.2413793103448276¶¶Test execution time (ms):15"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9421" _type="ConsoleOutput" date="Thu Apr 14 13:36:48 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95800736" type="ConsoleOutput">
    <outputString><![CDATA[
A6ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.4
Test execution time (ms):16
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Apr 14 13:36:48 EDT 2022¶Test execution time (ms):5346¶A6ExpectedInterfaces did not pass completely:See console trace about lines failing  this check%0.5¶¶Test execution time (ms):18¶A6ExpectedCall"), Diff(INSERT,"¶A6ExpectedSignature"), Diff(EQUAL,"s did not pass completely:See console trace about lines failing  this check%0."), Diff(DELETE,"2413793103448276¶"), Diff(INSERT,"4"), Diff(EQUAL,"¶Test execution time (ms):1"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9422" _type="ConsoleOutput" date="Thu Apr 14 13:36:48 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="95800836" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (36)
 |- checks (1)
  |~ Checks.java (36)
 |- client (8)
  |~ Client.java (23)
  |~ ClientConfigure.java (284)
  |~ ClientOutCoupler.java (57)
  |~ ClientRemoteInterfaceGIPC.java (33)
  |~ ClientRemoteInterfaceNIO.java (21)
  |~ ClientRemoteInterfaceRMI.java (29)
  |~ ClientRemoteObject.java (293)
  |~ ClientRemoteObjectNIO.java (156)
 |- nioExample (7)
  |~ AnNIOManagerPrintClient.java (124)
  |~ AnNIOManagerPrintServer.java (138)
  |~ exampleClientReadThread.java (66)
  |~ exampleServerReadThread.java (70)
  |~ NIOManagerPrintClientLauncherNoFactory.java (10)
  |~ NIOManagerPrintServer.java (20)
  |~ NIOManagerPrintServerLauncherNoFactory.java (10)
 |- readThread (3)
  |~ ClientReadThread.java (81)
  |~ ReadThreadInterface.java (13)
  |~ ServerReadThread.java (76)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (10)
  |~ OriginalSimulation.java (9)
  |~ Server.java (33)
  |~ ServerConfigure.java (330)
  |- remote (6)
   |~ ServerRemoteInterfaceGIPC.java (44)
   |~ ServerRemoteInterfaceNIO.java (23)
   |~ ServerRemoteInterfaceRMI.java (40)
   |~ ServerRemoteObjectGIPC.java (329)
   |~ ServerRemoteObjectNIO.java (159)
   |~ ServerRemoteObjectRMI.java (245)

Attempting to match to the structure:
|- .* (23)
 |- [a-z]?.*[Cc]lient.* (10)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"¶"), Diff(DELETE,"A6ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.4¶Test execution time (ms):16"), Diff(INSERT,"Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5217391304347826¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (36)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (8)¶  |~ Client.java (23)¶  |~ ClientConfigure.java (284)¶  |~ ClientOutCoupler.java (57)¶  |~ ClientRemoteInterfaceGIPC.java (33)¶  |~ ClientRemoteInterfaceNIO.java (21)¶  |~ ClientRemoteInterfaceRMI.java (29)¶  |~ ClientRemoteObject.java (293)¶  |~ ClientRemoteObjectNIO.java (156)¶ |- nioExample (7)¶  |~ AnNIOManagerPrintClient.java (124)¶  |~ AnNIOManagerPrintServer.java (138)¶  |~ exampleClientReadThread.java (66)¶  |~ exampleServerReadThread.java (70)¶  |~ NIOManagerPrintClientLauncherNoFactory.java (10)¶  |~ NIOManagerPrintServer.java (20)¶  |~ NIOManagerPrintServerLauncherNoFactory.java (10)¶ |- readThread (3)¶  |~ ClientReadThread.java (81)¶  |~ ReadThreadInterface.java (13)¶  |~ ServerReadThread.java (76)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (10)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (33)¶  |~ ServerConfigure.java (330)¶  |- remote (6)¶   |~ ServerRemoteInterfaceGIPC.java (44)¶   |~ ServerRemoteInterfaceNIO.java (23)¶   |~ ServerRemoteInterfaceRMI.java (40)¶   |~ ServerRemoteObjectGIPC.java (329)¶   |~ ServerRemoteObjectNIO.java (159)¶   |~ ServerRemoteObjectRMI.java (245)¶¶Attempting to match to the structure:¶|- .* (23)¶ |- [a-z]?.*[Cc]lient.* (10)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9424" _type="PauseCommand" date="Thu Apr 14 13:36:52 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="95805005">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4169]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9448" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:38:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95929900" type="Run" />
  <Command __id="9450" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:38:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="95929902" type="Run" />
  <Command __id="9452" _type="PauseCommand" date="Thu Apr 14 13:40:11 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="96003543">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[73641]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9464" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:40:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96042529" type="Run" />
  <Command __id="9466" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:40:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96042530" type="Run" />
  <Command __id="9468" _type="PauseCommand" date="Thu Apr 14 13:42:03 EDT 2022" range="1m-2m" starttimestamp="1649862007572" timestamp="96116122">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[73592]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9479" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:42:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96155130" type="Run" />
  <Command __id="9481" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:42:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96155133" type="Run" />
  <Command __id="9483" _type="PauseCommand" date="Thu Apr 14 13:42:45 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96158397">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3264]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9482" _type="ShellCommand" date="Thu Apr 14 13:42:45 EDT 2022" starttimestamp="1649862007572" timestamp="96158397" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9484" _type="MoveCaretCommand" caretOffset="4234" date="Thu Apr 14 13:42:46 EDT 2022" docOffset="5909" starttimestamp="1649862007572" timestamp="96158512" />
  <DocumentChange __id="9176" _type="Insert" date="Thu Apr 14 13:35:39 EDT 2022" docASTNodeCount="1187" docActiveCodeLength="9242" docExpressionCount="853" docLength="10147" length="40" offset="6252" repeat="38" starttimestamp="1649862007572" timestamp="95731586" timestamp2="95737551">
    <text><![CDATA[("WE ARE LOOKING UP RMI REGISTRY HERE:")]]></text>
  </DocumentChange>
  <DocumentChange __id="9254" _type="Insert" date="Thu Apr 14 13:35:47 EDT 2022" docASTNodeCount="1187" docActiveCodeLength="9243" docExpressionCount="853" docLength="10148" length="1" offset="6292" starttimestamp="1649862007572" timestamp="95740217">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="9264" _type="Insert" date="Thu Apr 14 13:35:51 EDT 2022" docASTNodeCount="1187" docActiveCodeLength="9248" docExpressionCount="853" docLength="10153" length="5" offset="6367" starttimestamp="1649862007572" timestamp="95744197">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="9266" _type="Replace" date="Thu Apr 14 13:35:51 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9307" docExpressionCount="859" docLength="10212" endLine="171" insertionLength="62" int_docASTNodeCount="1187" int_docActiveCodeLength="9245" int_docExpressionCount="853" int_docLength="10150" length="3" offset="6369" startLine="171" starttimestamp="1649862007572" timestamp="95744418">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			System.out.println("WE ARE LOOKING UP RMI REGISTRY HERE:");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9270" _type="Replace" date="Thu Apr 14 13:35:54 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9273" docExpressionCount="859" docLength="10178" endLine="171" insertionLength="1" int_docASTNodeCount="1194" int_docActiveCodeLength="9272" int_docExpressionCount="859" int_docLength="10177" length="35" offset="6392" startLine="171" starttimestamp="1649862007572" timestamp="95747230">
    <deletedText><![CDATA[WE ARE LOOKING UP RMI REGISTRY HERE]]></deletedText>
    <insertedText><![CDATA[R]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9272" _type="Insert" date="Thu Apr 14 13:35:54 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9284" docExpressionCount="859" docLength="10189" length="11" offset="6393" repeat="11" starttimestamp="1649862007572" timestamp="95747365" timestamp2="95748966">
    <text><![CDATA[MI REGISTRY]]></text>
  </DocumentChange>
  <DocumentChange __id="9297" _type="Insert" date="Thu Apr 14 13:35:59 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9296" docExpressionCount="859" docLength="10201" length="12" offset="6272" repeat="12" starttimestamp="1649862007572" timestamp="95752039" timestamp2="95753743">
    <text><![CDATA[server from ]]></text>
  </DocumentChange>
  <DocumentChange __id="9323" _type="Replace" date="Thu Apr 14 13:36:04 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9285" docExpressionCount="859" docLength="10190" endLine="171" insertionLength="1" int_docASTNodeCount="1194" int_docActiveCodeLength="9284" int_docExpressionCount="859" int_docLength="10189" length="12" offset="6404" startLine="171" starttimestamp="1649862007572" timestamp="95756497">
    <deletedText><![CDATA[RMI REGISTRY]]></deletedText>
    <insertedText><![CDATA[S]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9325" _type="Insert" date="Thu Apr 14 13:36:04 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9291" docExpressionCount="859" docLength="10196" length="6" offset="6405" repeat="6" starttimestamp="1649862007572" timestamp="95756578" timestamp2="95757665">
    <text><![CDATA[ERVRE ]]></text>
  </DocumentChange>
  <DocumentChange __id="9337" _type="Delete" date="Thu Apr 14 13:36:05 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9288" docExpressionCount="859" docLength="10193" endLine="171" length="3" offset="6408" repeat="3" startLine="171" starttimestamp="1649862007572" timestamp="95758146" timestamp2="95758472">
    <text><![CDATA[RE ]]></text>
  </DocumentChange>
  <DocumentChange __id="9343" _type="Insert" date="Thu Apr 14 13:36:06 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9316" docExpressionCount="859" docLength="10221" length="28" offset="6408" repeat="28" starttimestamp="1649862007572" timestamp="95758605" timestamp2="95762429">
    <text><![CDATA[ER looked up in RMI registry]]></text>
  </DocumentChange>
  <Command __id="9486" _type="PauseCommand" date="Thu Apr 14 13:43:04 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="96176914">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[18402]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9487" _type="MoveCaretCommand" caretOffset="530" date="Thu Apr 14 13:43:04 EDT 2022" docOffset="2186" starttimestamp="1649862007572" timestamp="96177183" />
  <Command __id="9489" _type="PauseCommand" date="Thu Apr 14 13:43:26 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="96198704">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[21521]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9488" _type="MoveCaretCommand" caretOffset="6670" date="Thu Apr 14 13:43:26 EDT 2022" docOffset="8326" starttimestamp="1649862007572" timestamp="96198704" />
  <Command __id="9492" _type="PauseCommand" date="Thu Apr 14 13:43:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96199918">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1214]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9491" _type="ShellCommand" date="Thu Apr 14 13:43:27 EDT 2022" starttimestamp="1649862007572" timestamp="96199918" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9494" _type="PauseCommand" date="Thu Apr 14 13:43:30 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96203251">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3333]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9493" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:30 EDT 2022" forward="false" matchWord="false" offset="8326" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96203251" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9496" _type="PauseCommand" date="Thu Apr 14 13:43:36 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="96209289">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[6038]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9495" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:36 EDT 2022" forward="false" matchWord="false" offset="8421" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96209289" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9498" _type="PauseCommand" date="Thu Apr 14 13:43:39 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96212320">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3031]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9497" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:39 EDT 2022" forward="false" matchWord="false" offset="10063" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96212320" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9499" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:40 EDT 2022" forward="false" matchWord="false" offset="10063" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96213294" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9501" _type="PauseCommand" date="Thu Apr 14 13:43:44 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96216888">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3594]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9500" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:44 EDT 2022" forward="true" matchWord="false" offset="10063" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96216888" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9503" _type="PauseCommand" date="Thu Apr 14 13:43:45 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96218301">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1412]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9502" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:45 EDT 2022" forward="true" matchWord="false" offset="2222" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96218300" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9505" _type="PauseCommand" date="Thu Apr 14 13:43:46 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96219423">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1123]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9504" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:46 EDT 2022" forward="true" matchWord="false" offset="4247" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96219423" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9506" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:47 EDT 2022" forward="true" matchWord="false" offset="6505" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96220339" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9508" _type="PauseCommand" date="Thu Apr 14 13:43:49 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96221826">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1487]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9507" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:49 EDT 2022" forward="true" matchWord="false" offset="8316" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96221826" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9510" _type="PauseCommand" date="Thu Apr 14 13:43:50 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96223024">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1198]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9509" _type="FindCommand" caseSensitive="false" date="Thu Apr 14 13:43:50 EDT 2022" forward="true" matchWord="false" offset="10003" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1649862007572" timestamp="96223024" wrapSearch="false">
    <searchString><![CDATA[SERVER_NAME]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9512" _type="PauseCommand" date="Thu Apr 14 13:44:03 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="96236233">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[13209]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9511" _type="ShellCommand" date="Thu Apr 14 13:44:03 EDT 2022" starttimestamp="1649862007572" timestamp="96236233" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9514" _type="MoveCaretCommand" caretOffset="4234" date="Thu Apr 14 13:44:04 EDT 2022" docOffset="5909" starttimestamp="1649862007572" timestamp="96236723" />
  <Command __id="9516" _type="PauseCommand" date="Thu Apr 14 13:44:26 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="96258917">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[22194]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9485" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:43:04 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="96176914">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9513" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:44:04 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9316" docExpressionCount="859" docLength="10221" projectName="A6" starttimestamp="1649862007572" timestamp="96236523">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			"), Diff(INSERT,"System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE:");¶			"), Diff(EQUAL,"server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			"), Diff(INSERT,"System.out.println("SERVER looked up in RMI registry:");¶			"), Diff(EQUAL,"RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	public String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	//protected int aProposalNumber;
	public int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE:");
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			System.out.println("SERVER looked up in RMI registry:");
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <DocumentChange __id="9525" _type="Insert" date="Thu Apr 14 13:44:28 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9324" docExpressionCount="859" docLength="10229" length="8" offset="4010" repeat="2" starttimestamp="1649862007572" timestamp="96261302" timestamp2="96261433">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <DocumentChange __id="9529" _type="Replace" date="Thu Apr 14 13:44:29 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9343" docExpressionCount="859" docLength="10248" endLine="94" insertionLength="21" int_docASTNodeCount="1194" int_docActiveCodeLength="9322" int_docExpressionCount="859" int_docLength="10227" length="2" offset="4016" startLine="94" starttimestamp="1649862007572" timestamp="96261629">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		ClientArgsProcessor]]></insertedText>
  </DocumentChange>
  <Command __id="9539" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:44:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96267775" type="Run" />
  <Command __id="9541" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:44:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96267776" type="Run" />
  <Command __id="9543" _type="PauseCommand" date="Thu Apr 14 13:44:38 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96270980">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3204]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="9542" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 13:44:38 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="96270980" />
  <Command __id="9544" _type="SelectTextCommand" caretOffset="2343" date="Thu Apr 14 13:44:39 EDT 2022" end="2366" start="2343" starttimestamp="1649862007572" timestamp="96271730" />
  <Command __id="9546" _type="PauseCommand" date="Thu Apr 14 13:44:41 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96273572">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1842]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9545" _type="MoveCaretCommand" caretOffset="2343" date="Thu Apr 14 13:44:41 EDT 2022" docOffset="4018" starttimestamp="1649862007572" timestamp="96273572" />
  <Command __id="9548" _type="PauseCommand" date="Thu Apr 14 13:44:42 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96275037">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1465]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9547" _type="SelectTextCommand" caretOffset="2342" date="Thu Apr 14 13:44:42 EDT 2022" end="2349" start="2342" starttimestamp="1649862007572" timestamp="96275037" />
  <Command __id="9550" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:44:43 EDT 2022" starttimestamp="1649862007572" timestamp="96275667" />
  <Command __id="9552" _type="InsertStringCommand" date="Thu Apr 14 13:44:43 EDT 2022" starttimestamp="1649862007572" timestamp="96276171" timestamp2="96276171">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="9554" _type="InsertStringCommand" date="Thu Apr 14 13:44:44 EDT 2022" starttimestamp="1649862007572" timestamp="96276735" timestamp2="96276735">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="9556" _type="InsertStringCommand" date="Thu Apr 14 13:44:44 EDT 2022" starttimestamp="1649862007572" timestamp="96276912" timestamp2="96276912">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9558" _type="InsertStringCommand" date="Thu Apr 14 13:44:44 EDT 2022" starttimestamp="1649862007572" timestamp="96277002" timestamp2="96277002">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9560" _type="InsertStringCommand" date="Thu Apr 14 13:44:44 EDT 2022" starttimestamp="1649862007572" timestamp="96277228" timestamp2="96277228">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="9562" _type="InsertStringCommand" date="Thu Apr 14 13:44:45 EDT 2022" starttimestamp="1649862007572" timestamp="96277529" timestamp2="96277529">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9564" _type="InsertStringCommand" date="Thu Apr 14 13:44:45 EDT 2022" starttimestamp="1649862007572" timestamp="96277616" timestamp2="96277616">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9566" _type="PauseCommand" date="Thu Apr 14 13:44:46 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96278835">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1219]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9565" _type="MoveCaretCommand" caretOffset="2366" date="Thu Apr 14 13:44:46 EDT 2022" docOffset="4041" starttimestamp="1649862007572" timestamp="96278835" />
  <Command __id="9568" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:44:46 EDT 2022" starttimestamp="1649862007572" timestamp="96279120" />
  <Command __id="9570" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:44:46 EDT 2022" starttimestamp="1649862007572" timestamp="96279266" />
  <Command __id="9572" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:44:46 EDT 2022" starttimestamp="1649862007572" timestamp="96279412" />
  <Command __id="9574" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:44:47 EDT 2022" starttimestamp="1649862007572" timestamp="96279552" />
  <Command __id="9576" _type="InsertStringCommand" date="Thu Apr 14 13:44:48 EDT 2022" starttimestamp="1649862007572" timestamp="96280470" timestamp2="96280470">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9577" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:44:48 EDT 2022" starttimestamp="1649862007572" timestamp="96280803" />
  <Command __id="9579" _type="InsertStringCommand" date="Thu Apr 14 13:44:49 EDT 2022" starttimestamp="1649862007572" timestamp="96281598" timestamp2="96281598">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9580" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Thu Apr 14 13:44:49 EDT 2022" start_end="START" starttimestamp="1649862007572" timestamp="96281601" />
  <Command __id="9584" _type="PauseCommand" date="Thu Apr 14 13:44:59 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="96292405">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[10804]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9583" _type="ShellCommand" date="Thu Apr 14 13:44:59 EDT 2022" starttimestamp="1649862007572" timestamp="96292405" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9585" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Thu Apr 14 13:45:00 EDT 2022" start_end="END" starttimestamp="1649862007572" timestamp="96292459" />
  <Command __id="9587" _type="PauseCommand" date="Thu Apr 14 13:45:35 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="96328056">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[35597]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9596" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:45:38 EDT 2022" starttimestamp="1649862007572" timestamp="96330747" />
  <Command __id="9598" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:45:38 EDT 2022" starttimestamp="1649862007572" timestamp="96330753" />
  <DocumentChange __id="9531" _type="Insert" date="Thu Apr 14 13:44:29 EDT 2022" docASTNodeCount="1198" docActiveCodeLength="9347" docExpressionCount="861" docLength="10252" length="4" offset="4037" repeat="4" starttimestamp="1649862007572" timestamp="96262100" timestamp2="96264669">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="9549" _type="Delete" date="Thu Apr 14 13:44:43 EDT 2022" docASTNodeCount="1198" docActiveCodeLength="9340" docExpressionCount="861" docLength="10245" endLine="94" length="7" offset="4017" startLine="94" starttimestamp="1649862007572" timestamp="96275664">
    <text><![CDATA[	Client]]></text>
  </DocumentChange>
  <DocumentChange __id="9551" _type="Replace" date="Thu Apr 14 13:44:43 EDT 2022" docASTNodeCount="1198" docActiveCodeLength="9341" docExpressionCount="861" docLength="10246" endLine="94" insertionLength="2" int_docASTNodeCount="1198" int_docActiveCodeLength="9339" int_docExpressionCount="861" int_docLength="10244" length="1" offset="4016" startLine="94" starttimestamp="1649862007572" timestamp="96276167">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9553" _type="Insert" date="Thu Apr 14 13:44:44 EDT 2022" docASTNodeCount="1198" docActiveCodeLength="9347" docExpressionCount="861" docLength="10252" length="6" offset="4018" repeat="6" starttimestamp="1649862007572" timestamp="96276730" timestamp2="96277610">
    <text><![CDATA[Server]]></text>
  </DocumentChange>
  <DocumentChange __id="9567" _type="Delete" date="Thu Apr 14 13:44:46 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9343" docExpressionCount="859" docLength="10248" endLine="94" length="4" offset="4037" repeat="4" startLine="94" starttimestamp="1649862007572" timestamp="96279118" timestamp2="96279549">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="9575" _type="Insert" date="Thu Apr 14 13:44:48 EDT 2022" docASTNodeCount="1198" docActiveCodeLength="9347" docExpressionCount="862" docLength="10252" length="4" offset="4037" repeat="4" starttimestamp="1649862007572" timestamp="96280464" timestamp2="96282739">
    <text><![CDATA[.ge;]]></text>
  </DocumentChange>
  <DocumentChange __id="9589" _type="Insert" date="Thu Apr 14 13:45:36 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9324" docExpressionCount="859" docLength="10254" length="2" offset="4018" repeat="2" starttimestamp="1649862007572" timestamp="96328719" timestamp2="96328849">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9600" _type="PauseCommand" date="Thu Apr 14 13:45:52 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="96344537">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[13783]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9601" _type="MoveCaretCommand" caretOffset="2183" date="Thu Apr 14 13:45:52 EDT 2022" docOffset="2183" starttimestamp="1649862007572" timestamp="96344659" />
  <Command __id="9599" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:45:52 EDT 2022" docASTNodeCount="584" docActiveCodeLength="4235" docExpressionCount="403" docLength="4898" projectName="A6" starttimestamp="1649862007572" timestamp="96344536">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObjectNIO.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.io.IOException;¶import java.net.InetAddress;¶import java.nio.ByteBuffer;¶import java.nio.channels.SelectionKey;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.util.concurrent.ArrayBlockingQueue;¶¶import assignments.util.MiscAssignmentUtils;¶"), Diff(INSERT,"import assignments.util.mainArgs.ClientArgsProcessor;¶"), Diff(EQUAL,"import assignments.util.mainArgs.ServerArgsProcessor;¶"), Diff(DELETE,""), Diff(EQUAL,"import inputport.nio.manager.NIOManager;¶import inputport.nio.manager.NIOManagerFactory;¶"), Diff(INSERT,"import inputport.nio.manager.factories.classes.AConnectCommandFactory;¶"), Diff(EQUAL,"import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;¶import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;¶"), Diff(INSERT,"import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;¶"), Diff(EQUAL,"import nioExample.exampleClientReadThread;¶import readThread.ClientReadThread;¶import readThread.ReadThreadInterface;¶import stringProcessors.HalloweenCommandProcessor;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.trace.port.consensus.ProposedStateSet;¶¶public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{¶	protected NIOManager nioManager = NIOManagerFactory.getSingleton();¶	int aServerPort;¶	protected SocketChannel socketChannel;¶	¶	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);¶	ReadThreadInterface reader = null;¶	Thread readThread = null;¶	¶	@Override¶	public void init(String[] args) {¶		"), Diff(DELETE,"¶		"), Diff(INSERT,"setTracing();"), Diff(EQUAL,"¶		setFactories();¶		¶		aServerPort = "), Diff(DELETE,"Server"), Diff(INSERT,"Client"), Diff(EQUAL,"ArgsProcessor.getNIOServerPort(args);¶		"), Diff(INSERT,"System.out.println("NIO SERVER PORT: "+aServerPort);¶		"), Diff(EQUAL,"¶		try {¶			socketChannel = SocketChannel.open();¶			InetAddress aServerAddress = InetAddress.getByName("localhost");¶			¶			nioManager.connect(socketChannel, aServerAddress, aServerPort, ¶					//0, // do not allow any incoming messages¶					SelectionKey.OP_READ,¶					this);¶		} catch (IOException e) {¶			e.printStackTrace();¶		}¶		¶		//Create new read thread Runnable¶		reader = new ClientReadThread(this);¶						¶		//Create new readThread¶		readThread = new Thread(reader);¶				¶		//Start thread and do some action¶		readThread.start();¶		¶		//String aNextLine = "a new client has been initialized";¶		// wrap writes to the buffer and then flips it¶		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());¶		//nioManager.write(socketChannel, aWriteMessage, this);¶		super.init(args);¶	}¶	¶	@Override¶	public void setFactories() {¶		"), Diff(DELETE,"Accep"), Diff(INSERT,"Connec"), Diff(EQUAL,"tCommandFactorySelector.setFactory(new A"), Diff(DELETE,"nAccep"), Diff(INSERT,"Connec"), Diff(EQUAL,"tCommandFactory("), Diff(DELETE,"SelectionKey.OP_READ"), Diff(INSERT,"0"), Diff(EQUAL,"));¶	}¶¶	@Override¶	public void connected(SocketChannel aSocketChannel) {¶		// TODO Auto-generated method stub¶		nioManager.addReadListener(aSocketChannel, this);¶		System.out.println("New Client connected to server!!!");¶		¶	}¶¶	@Override¶	public void notConnected(SocketChannel arg0, Exception arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {¶		// TODO Auto-generated method stub¶		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);¶		boundedBuffer.add(copy);¶		¶		reader.notifyThread();	¶		¶	}¶	¶	@Override¶	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {¶		// TODO Auto-generated method stub¶		return boundedBuffer;¶	}¶	¶	@Override¶	public void simulationCommand(String aCommand) {¶¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism: "+ mechanism.toString());¶¶		if (!mechanism.toString().equals("NIO")) {¶			System.out.println("IPC Mechanism is GIPC or RMI");¶			super.simulationCommand(aCommand);¶			return;¶		}¶		¶		commandProcessor.removePropertyChangeListener(clientOutCoupler);¶		¶		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());¶		nioManager.write(socketChannel, bufferCommand, this);¶¶		// IPC Mechanism Change¶		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶		¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶	}¶	¶	@Override¶	public HalloweenCommandProcessor getCommandProcessor() {¶		return commandProcessor;¶	}¶		¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.io.IOException;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.rmi.RemoteException;
import java.util.concurrent.ArrayBlockingQueue;

import assignments.util.MiscAssignmentUtils;
import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import inputport.nio.manager.NIOManager;
import inputport.nio.manager.NIOManagerFactory;
import inputport.nio.manager.factories.classes.AConnectCommandFactory;
import inputport.nio.manager.factories.classes.AnAcceptCommandFactory;
import inputport.nio.manager.factories.selectors.AcceptCommandFactorySelector;
import inputport.nio.manager.factories.selectors.ConnectCommandFactorySelector;
import nioExample.exampleClientReadThread;
import readThread.ClientReadThread;
import readThread.ReadThreadInterface;
import stringProcessors.HalloweenCommandProcessor;
import util.interactiveMethodInvocation.IPCMechanism;
import util.trace.port.consensus.ProposedStateSet;

public class ClientRemoteObjectNIO extends ClientRemoteObject implements ClientRemoteInterfaceNIO{
	protected NIOManager nioManager = NIOManagerFactory.getSingleton();
	int aServerPort;
	protected SocketChannel socketChannel;
	
	ArrayBlockingQueue<ByteBuffer> boundedBuffer = new ArrayBlockingQueue<ByteBuffer>(500);
	ReadThreadInterface reader = null;
	Thread readThread = null;
	
	@Override
	public void init(String[] args) {
		setTracing();
		setFactories();
		
		aServerPort = ClientArgsProcessor.getNIOServerPort(args);
		System.out.println("NIO SERVER PORT: "+aServerPort);
		
		try {
			socketChannel = SocketChannel.open();
			InetAddress aServerAddress = InetAddress.getByName("localhost");
			
			nioManager.connect(socketChannel, aServerAddress, aServerPort, 
					//0, // do not allow any incoming messages
					SelectionKey.OP_READ,
					this);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//Create new read thread Runnable
		reader = new ClientReadThread(this);
						
		//Create new readThread
		readThread = new Thread(reader);
				
		//Start thread and do some action
		readThread.start();
		
		//String aNextLine = "a new client has been initialized";
		// wrap writes to the buffer and then flips it
		//ByteBuffer aWriteMessage = ByteBuffer.wrap(aNextLine.getBytes());
		//nioManager.write(socketChannel, aWriteMessage, this);
		super.init(args);
	}
	
	@Override
	public void setFactories() {
		ConnectCommandFactorySelector.setFactory(new AConnectCommandFactory(0));
	}

	@Override
	public void connected(SocketChannel aSocketChannel) {
		// TODO Auto-generated method stub
		nioManager.addReadListener(aSocketChannel, this);
		System.out.println("New Client connected to server!!!");
		
	}

	@Override
	public void notConnected(SocketChannel arg0, Exception arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void written(SocketChannel arg0, ByteBuffer arg1, int arg2) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelAccepted(ServerSocketChannel arg0, SocketChannel arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void socketChannelRead(SocketChannel arg0, ByteBuffer aMessage, int arg2) {
		// TODO Auto-generated method stub
		ByteBuffer copy = MiscAssignmentUtils.deepDuplicate(aMessage);
		boundedBuffer.add(copy);
		
		reader.notifyThread();	
		
	}
	
	@Override
	public ArrayBlockingQueue<ByteBuffer> getBoundedBuffer() {
		// TODO Auto-generated method stub
		return boundedBuffer;
	}
	
	@Override
	public void simulationCommand(String aCommand) {

		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism: "+ mechanism.toString());

		if (!mechanism.toString().equals("NIO")) {
			System.out.println("IPC Mechanism is GIPC or RMI");
			super.simulationCommand(aCommand);
			return;
		}
		
		commandProcessor.removePropertyChangeListener(clientOutCoupler);
		
		ByteBuffer bufferCommand = ByteBuffer.wrap(aCommand.getBytes());
		nioManager.write(socketChannel, bufferCommand, this);

		// IPC Mechanism Change
		ProposedStateSet.newCase(this, super.CLIENT_NAME, super.aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, super.broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
		
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
	}
	
	@Override
	public HalloweenCommandProcessor getCommandProcessor() {
		return commandProcessor;
	}
		

}
]]></snapshot>
  </Command>
  <Command __id="9603" _type="PauseCommand" date="Thu Apr 14 13:46:07 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="96359488">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14829]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9604" _type="MoveCaretCommand" caretOffset="2345" date="Thu Apr 14 13:46:07 EDT 2022" docOffset="4020" starttimestamp="1649862007572" timestamp="96359691" />
  <Command __id="9606" _type="PauseCommand" date="Thu Apr 14 13:46:16 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="96369118">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9427]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9605" _type="MoveCaretCommand" caretOffset="4660" date="Thu Apr 14 13:46:16 EDT 2022" docOffset="6335" starttimestamp="1649862007572" timestamp="96369118" />
  <Command __id="9608" _type="PauseCommand" date="Thu Apr 14 13:46:19 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96371690">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2572]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9607" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 13:46:19 EDT 2022" starttimestamp="1649862007572" timestamp="96371690" />
  <Command __id="9609" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Apr 14 13:46:20 EDT 2022" starttimestamp="1649862007572" timestamp="96372467" />
  <Command __id="9611" _type="InsertStringCommand" date="Thu Apr 14 13:46:20 EDT 2022" starttimestamp="1649862007572" timestamp="96372657" timestamp2="96372657">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9612" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96372819" type="Run" />
  <Command __id="9613" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96372825" type="Run" />
  <Command __id="9614" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96372827" type="Run" />
  <Command __id="9615" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Apr 14 13:46:20 EDT 2022" starttimestamp="1649862007572" timestamp="96372852" />
  <Command __id="9616" _type="ConsoleOutput" date="Thu Apr 14 13:46:20 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="96372870" type="ConsoleOutput">
    <outputString><![CDATA[
GIPCRMINIOServerMetaStateNoBroadcast did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*%0.0
Test execution time (ms):112603
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"GIPCRMINIO"), Diff(DELETE,"Client"), Diff(INSERT,"Server"), Diff(EQUAL,"MetaState"), Diff(INSERT,"No"), Diff(EQUAL,"Broadcast did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*%0.0¶"), Diff(DELETE,"¶"), Diff(EQUAL,"Test execution time (ms):1126"), Diff(DELETE,"2"), Diff(INSERT,"0"), Diff(EQUAL,"3¶")]]]></diff>
  </Command>
  <Command __id="9617" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96373342" type="Run" />
  <Command __id="9618" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96373343" type="Run" />
  <Command __id="9620" _type="InsertStringCommand" date="Thu Apr 14 13:46:21 EDT 2022" starttimestamp="1649862007572" timestamp="96373461" timestamp2="96373461">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="9622" _type="InsertStringCommand" date="Thu Apr 14 13:46:21 EDT 2022" starttimestamp="1649862007572" timestamp="96373907" timestamp2="96373907">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="9624" _type="InsertStringCommand" date="Thu Apr 14 13:46:21 EDT 2022" starttimestamp="1649862007572" timestamp="96374128" timestamp2="96374128">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9626" _type="InsertStringCommand" date="Thu Apr 14 13:46:21 EDT 2022" starttimestamp="1649862007572" timestamp="96374233" timestamp2="96374233">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9628" _type="InsertStringCommand" date="Thu Apr 14 13:46:22 EDT 2022" starttimestamp="1649862007572" timestamp="96374488" timestamp2="96374488">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="9630" _type="InsertStringCommand" date="Thu Apr 14 13:46:22 EDT 2022" starttimestamp="1649862007572" timestamp="96374681" timestamp2="96374681">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9632" _type="InsertStringCommand" date="Thu Apr 14 13:46:22 EDT 2022" starttimestamp="1649862007572" timestamp="96374780" timestamp2="96374780">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9634" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:46:22 EDT 2022" starttimestamp="1649862007572" timestamp="96375313" />
  <Command __id="9635" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96375357" type="Run" />
  <Command __id="9636" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96375358" type="Run" />
  <Command __id="9638" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:46:23 EDT 2022" starttimestamp="1649862007572" timestamp="96375470" />
  <Command __id="9640" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:46:23 EDT 2022" starttimestamp="1649862007572" timestamp="96375782" />
  <Command __id="9642" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:46:23 EDT 2022" starttimestamp="1649862007572" timestamp="96375943" />
  <Command __id="9644" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:46:23 EDT 2022" starttimestamp="1649862007572" timestamp="96376098" />
  <Command __id="9646" _type="InsertStringCommand" date="Thu Apr 14 13:46:24 EDT 2022" starttimestamp="1649862007572" timestamp="96376469" timestamp2="96376469">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9648" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:46:24 EDT 2022" starttimestamp="1649862007572" timestamp="96376823" />
  <Command __id="9650" _type="InsertStringCommand" date="Thu Apr 14 13:46:24 EDT 2022" starttimestamp="1649862007572" timestamp="96377212" timestamp2="96377212">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9652" _type="InsertStringCommand" date="Thu Apr 14 13:46:24 EDT 2022" starttimestamp="1649862007572" timestamp="96377327" timestamp2="96377327">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9654" _type="InsertStringCommand" date="Thu Apr 14 13:46:25 EDT 2022" starttimestamp="1649862007572" timestamp="96377592" timestamp2="96377592">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="9656" _type="InsertStringCommand" date="Thu Apr 14 13:46:25 EDT 2022" starttimestamp="1649862007572" timestamp="96377811" timestamp2="96377811">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9658" _type="InsertStringCommand" date="Thu Apr 14 13:46:25 EDT 2022" starttimestamp="1649862007572" timestamp="96377904" timestamp2="96377904">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="9660" _type="InsertStringCommand" date="Thu Apr 14 13:46:25 EDT 2022" starttimestamp="1649862007572" timestamp="96378186" timestamp2="96378186">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="9662" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Apr 14 13:46:26 EDT 2022" starttimestamp="1649862007572" timestamp="96378933" />
  <Command __id="9664" _type="InsertStringCommand" date="Thu Apr 14 13:46:26 EDT 2022" starttimestamp="1649862007572" timestamp="96379178" timestamp2="96379178">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="9666" _type="InsertStringCommand" date="Thu Apr 14 13:46:27 EDT 2022" starttimestamp="1649862007572" timestamp="96379668" timestamp2="96379668">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="9668" _type="InsertStringCommand" date="Thu Apr 14 13:46:27 EDT 2022" starttimestamp="1649862007572" timestamp="96379863" timestamp2="96379863">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="9670" _type="InsertStringCommand" date="Thu Apr 14 13:46:27 EDT 2022" starttimestamp="1649862007572" timestamp="96380043" timestamp2="96380043">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="9672" _type="InsertStringCommand" date="Thu Apr 14 13:46:27 EDT 2022" starttimestamp="1649862007572" timestamp="96380187" timestamp2="96380187">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="9673" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96380367" type="Run" />
  <Command __id="9674" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:46:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96380367" type="Run" />
  <Command __id="9676" _type="PauseCommand" date="Thu Apr 14 13:46:29 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96381508">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1141]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9675" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Apr 14 13:46:29 EDT 2022" starttimestamp="1649862007572" timestamp="96381508" />
  <Command __id="9677" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:46:29 EDT 2022" starttimestamp="1649862007572" timestamp="96381605" />
  <Command __id="9678" _type="EclipseCommand" commandID="" date="Thu Apr 14 13:46:29 EDT 2022" starttimestamp="1649862007572" timestamp="96381636" />
  <Command __id="9680" _type="PauseCommand" date="Thu Apr 14 13:46:39 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="96392201">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10565]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9679" _type="ShellCommand" date="Thu Apr 14 13:46:39 EDT 2022" starttimestamp="1649862007572" timestamp="96392201" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9682" _type="PauseCommand" date="Thu Apr 14 13:47:08 EDT 2022" range="20s-30s" starttimestamp="1649862007572" timestamp="96420643">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[28442]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9681" _type="ShellCommand" date="Thu Apr 14 13:47:08 EDT 2022" starttimestamp="1649862007572" timestamp="96420643" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9684" _type="SelectTextCommand" caretOffset="566" date="Thu Apr 14 13:47:08 EDT 2022" end="566" start="555" starttimestamp="1649862007572" timestamp="96421081" />
  <Command __id="9602" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:46:07 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9324" docExpressionCount="859" docLength="10254" projectName="A6" starttimestamp="1649862007572" timestamp="96359488">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.nio.ByteBuffer;¶import java.nio.channels.SocketChannel;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	public String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	protected boolean broadcastIPCMechanism = false;¶	//protected int aProposalNumber;¶	public int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶				//ClientArgsProcessor.getServerHost(args);¶		"), Diff(INSERT,"¶		//ServerArgsProcessor.ge;¶		"), Diff(EQUAL,"CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE:");¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			System.out.println("SERVER looked up in RMI registry:");¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		setBroadcastMetaState(broadcast);¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	public String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	protected boolean broadcastIPCMechanism = false;
	//protected int aProposalNumber;
	public int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		SERVER_NAME = ClientArgsProcessor.getServerHost(args);
				//ClientArgsProcessor.getServerHost(args);
		
		//ServerArgsProcessor.ge;
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A6
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();

		
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			System.out.println("WE ARE LOOKING UP server from RMI REGISTRY HERE:");
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			System.out.println("SERVER looked up in RMI registry:");
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism gotten from old GIPC simiulation command method");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		setBroadcastMetaState(broadcast);
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}



}
]]></snapshot>
  </Command>
  <DocumentChange __id="9610" _type="Insert" date="Thu Apr 14 13:46:20 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="9325" docExpressionCount="859" docLength="10255" length="1" offset="6335" starttimestamp="1649862007572" timestamp="96372652">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="9619" _type="Insert" date="Thu Apr 14 13:46:21 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9332" docExpressionCount="861" docLength="10262" length="7" offset="6337" repeat="7" starttimestamp="1649862007572" timestamp="96373457" timestamp2="96374775">
    <text><![CDATA[+Server]]></text>
  </DocumentChange>
  <DocumentChange __id="9633" _type="Delete" date="Thu Apr 14 13:46:22 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9327" docExpressionCount="861" docLength="10257" endLine="171" length="5" offset="6339" repeat="5" startLine="171" starttimestamp="1649862007572" timestamp="96375310" timestamp2="96376096">
    <text><![CDATA[erver]]></text>
  </DocumentChange>
  <DocumentChange __id="9645" _type="Insert" date="Thu Apr 14 13:46:24 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9328" docExpressionCount="861" docLength="10258" length="1" offset="6339" starttimestamp="1649862007572" timestamp="96376466">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <DocumentChange __id="9647" _type="Delete" date="Thu Apr 14 13:46:24 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9327" docExpressionCount="861" docLength="10257" endLine="171" length="1" offset="6339" startLine="171" starttimestamp="1649862007572" timestamp="96376819">
    <text><![CDATA[E]]></text>
  </DocumentChange>
  <DocumentChange __id="9649" _type="Insert" date="Thu Apr 14 13:46:24 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9333" docExpressionCount="861" docLength="10263" length="6" offset="6339" repeat="6" starttimestamp="1649862007572" timestamp="96377208" timestamp2="96378181">
    <text><![CDATA[ERVER)]]></text>
  </DocumentChange>
  <DocumentChange __id="9661" _type="Delete" date="Thu Apr 14 13:46:26 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9332" docExpressionCount="861" docLength="10262" endLine="171" length="1" offset="6344" startLine="171" starttimestamp="1649862007572" timestamp="96378930">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <DocumentChange __id="9663" _type="Insert" date="Thu Apr 14 13:46:26 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="9337" docExpressionCount="861" docLength="10267" length="5" offset="6344" repeat="5" starttimestamp="1649862007572" timestamp="96379173" timestamp2="96380183">
    <text><![CDATA[_NAME]]></text>
  </DocumentChange>
  <Command __id="9683" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:47:08 EDT 2022" docASTNodeCount="1262" docActiveCodeLength="9156" docExpressionCount="897" docLength="10216" projectName="A6" starttimestamp="1649862007572" timestamp="96420871">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		//SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		//A6¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶¶		¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9686" _type="PauseCommand" date="Thu Apr 14 13:47:13 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="96426170">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5089]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9687" _type="MoveCaretCommand" caretOffset="4290" date="Thu Apr 14 13:47:14 EDT 2022" docOffset="5788" starttimestamp="1649862007572" timestamp="96426478" />
  <Command __id="9689" _type="PauseCommand" date="Thu Apr 14 13:47:26 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="96439198">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12720]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9688" _type="MoveCaretCommand" caretOffset="1363" date="Thu Apr 14 13:47:26 EDT 2022" docOffset="2861" starttimestamp="1649862007572" timestamp="96439198" />
  <Command __id="9685" _type="DiffBasedFileOpenCommand" date="Thu Apr 14 13:47:13 EDT 2022" docASTNodeCount="921" docActiveCodeLength="6719" docExpressionCount="645" docLength="7483" projectName="A6" starttimestamp="1649862007572" timestamp="96426170">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A6\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.nio.ByteBuffer;¶import java.nio.channels.ServerSocketChannel;¶import java.nio.channels.SocketChannel;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		System.out.println("inside RMI server start");¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		IPCMechanism mechanism = getIPCMechanism();¶		setIPCMechanism(mechanism);¶		boolean broadcast = true;¶		setBroadcastMetaState(broadcast);¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9691" _type="PauseCommand" date="Thu Apr 14 13:47:27 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96440244">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1046]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="9692" _type="InsertStringCommand" date="Thu Apr 14 13:47:27 EDT 2022" starttimestamp="1649862007572" timestamp="96440250" timestamp2="96440250">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="9694" _type="InsertStringCommand" date="Thu Apr 14 13:47:27 EDT 2022" starttimestamp="1649862007572" timestamp="96440393" timestamp2="96440393">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="9696" _type="PauseCommand" date="Thu Apr 14 13:47:31 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96444378">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3985]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9695" _type="SelectTextCommand" caretOffset="1392" date="Thu Apr 14 13:47:31 EDT 2022" end="1446" start="1392" starttimestamp="1649862007572" timestamp="96444378" />
  <Command __id="9697" _type="MoveCaretCommand" caretOffset="1392" date="Thu Apr 14 13:47:32 EDT 2022" docOffset="2890" starttimestamp="1649862007572" timestamp="96445045" />
  <Command __id="9699" _type="PauseCommand" date="Thu Apr 14 13:47:35 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96447825">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2780]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9698" _type="SelectTextCommand" caretOffset="1392" date="Thu Apr 14 13:47:35 EDT 2022" end="1446" start="1392" starttimestamp="1649862007572" timestamp="96447825" />
  <Command __id="9700" _type="MoveCaretCommand" caretOffset="1392" date="Thu Apr 14 13:47:35 EDT 2022" docOffset="2890" starttimestamp="1649862007572" timestamp="96448413" />
  <Command __id="9702" _type="PauseCommand" date="Thu Apr 14 13:47:38 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96451158">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2745]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9701" _type="SelectTextCommand" caretOffset="1392" date="Thu Apr 14 13:47:38 EDT 2022" end="1446" start="1392" starttimestamp="1649862007572" timestamp="96451158" />
  <Command __id="9704" _type="PauseCommand" date="Thu Apr 14 13:47:40 EDT 2022" range="1s-2s" starttimestamp="1649862007572" timestamp="96452778">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1620]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="9703" _type="CopyCommand" date="Thu Apr 14 13:47:40 EDT 2022" starttimestamp="1649862007572" timestamp="96452778" />
  <DocumentChange __id="9690" _type="Insert" date="Thu Apr 14 13:47:27 EDT 2022" docASTNodeCount="917" docActiveCodeLength="6696" docExpressionCount="642" docLength="7485" length="2" offset="2861" repeat="2" starttimestamp="1649862007572" timestamp="96440244" timestamp2="96440389">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9706" _type="PauseCommand" date="Thu Apr 14 13:47:42 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96455241">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2463]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9707" _type="SelectTextCommand" caretOffset="566" date="Thu Apr 14 13:47:43 EDT 2022" end="566" start="555" starttimestamp="1649862007572" timestamp="96455433" />
  <Command __id="9709" _type="PauseCommand" date="Thu Apr 14 13:48:13 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="96485482">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[30049]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9708" _type="ConsoleOutput" date="Thu Apr 14 13:48:13 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="96485482" type="ConsoleOutput">
    <outputString><![CDATA[
GIPCRMINIOServerMetaStateBroadcast did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*%0.0
Test execution time (ms):112607
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"¶GIPCRMINIOServerMetaState"), Diff(DELETE,"No"), Diff(EQUAL,"Broadcast did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*%0.0¶Test execution time (ms):11260"), Diff(DELETE,"3"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9711" _type="PauseCommand" date="Thu Apr 14 13:49:02 EDT 2022" range="30s-1m" starttimestamp="1649862007572" timestamp="96534828">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[49346]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9710" _type="ShellCommand" date="Thu Apr 14 13:49:02 EDT 2022" starttimestamp="1649862007572" timestamp="96534828" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9713" _type="PauseCommand" date="Thu Apr 14 13:49:04 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96537143">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2315]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9712" _type="ConsoleOutput" date="Thu Apr 14 13:49:04 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="96537143" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientConnection@26e3c4a8 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶GIPCRMINIOServerMetaStateBroadcast did not pass completely:In Server enabling GIPC, no line found matching regex: .*?\{main\}.*?ListenableAcceptsEnabled.*%0.0¶Test execution time (ms):112607"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientConnection@26e3c4a8 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9715" _type="PauseCommand" date="Thu Apr 14 13:49:09 EDT 2022" range="5s-10s" starttimestamp="1649862007572" timestamp="96542237">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5094]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9714" _type="ConsoleOutput" date="Thu Apr 14 13:49:09 EDT 2022" overflow="false" starttimestamp="1649862007572" timestamp="96542237" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientConnection@26e3c4a8 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment6.testcases.GIPCRMINIOTwoClientConnection@26e3c4a8 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="9717" _type="PauseCommand" date="Thu Apr 14 13:49:14 EDT 2022" range="2s-5s" starttimestamp="1649862007572" timestamp="96547154">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4917]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9716" _type="ShellCommand" date="Thu Apr 14 13:49:14 EDT 2022" starttimestamp="1649862007572" timestamp="96547154" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9718" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:49:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96547837" type="Debug" />
  <Command __id="9719" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Apr 14 13:49:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1649862007572" timestamp="96547837" type="Debug" />
  <Command __id="9720" _type="ProgramExecutionEvent" className="/A6/src/checks/Checks.java" date="Thu Apr 14 13:49:15 EDT 2022" kind="HitBreakPoint" projectName="A6" starttimestamp="1649862007572" timestamp="96547837" type="Run" />
  <Command __id="9722" _type="PauseCommand" date="Thu Apr 14 13:49:27 EDT 2022" range="10s-20s" starttimestamp="1649862007572" timestamp="96559527">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[11690]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
