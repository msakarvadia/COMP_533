<Events startTimestamp="1648594670066" logVersion="1.0.0.202111260825">
  <Command __id="8" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="22323" type="Run" />
  <Command __id="12" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="23964" type="Run" />
  <Command __id="17" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="26792" type="Run" />
  <Command __id="18" _type="ConsoleOutput" date="Tue Mar 29 18:58:17 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="27232" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.7471571465592182
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.7471571465592182"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="20" _type="PauseCommand" date="Tue Mar 29 18:58:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="28790">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1558]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="21" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="32398" type="Run" />
  <Command __id="24" _type="PauseCommand" date="Tue Mar 29 18:58:23 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="33536">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="27" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="34421" type="Run" />
  <Command __id="28" _type="ConsoleOutput" date="Tue Mar 29 18:58:25 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="35172" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.11580633836753473
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"7471571465592182"), Diff(INSERT,"11580633836753473"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="30" _type="PauseCommand" date="Tue Mar 29 18:58:27 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="36934">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1762]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="31" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="37844" type="Run" />
  <Command __id="36" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="38306" type="Run" />
  <Command __id="37" _type="ConsoleOutput" date="Tue Mar 29 18:58:28 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="38523" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.7471571465592182 (Open"), Diff(INSERT,"Client registered GIPC¶Client register"), Diff(EQUAL,"ed"), Diff(DELETE,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="40" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="39024" type="Run" />
  <Command __id="42" _type="PauseCommand" date="Tue Mar 29 18:58:31 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="41412">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2388]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="43" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="42666" type="Run" />
  <Command __id="46" _type="PauseCommand" date="Tue Mar 29 18:58:38 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="48248">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5582]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="48" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="49472" type="Run" />
  <Command __id="51" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="49633" type="Run" />
  <Command __id="52" _type="ConsoleOutput" date="Tue Mar 29 18:58:40 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="50021" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.11580633836753473 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="53" _type="ConsoleOutput" date="Tue Mar 29 18:58:40 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="50029" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="55" _type="PauseCommand" date="Tue Mar 29 18:58:41 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="51455">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1426]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="58" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:58:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="64645" type="Run" />
  <Command __id="60" _type="ConsoleInput" date="Tue Mar 29 18:58:55 EDT 2022" starttimestamp="1648594670066" timestamp="64984" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="61" _type="ConsoleOutput" date="Tue Mar 29 18:58:55 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="65067" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
NIO
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="62" _type="ConsoleOutput" date="Tue Mar 29 18:58:55 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="65395" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: move 50 -50
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:"), Diff(INSERT,"Command recieved for broadcast: "), Diff(EQUAL,"move 50 -50¶")]]]></diff>
  </Command>
  <Command __id="71" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 18:59:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="83245" type="Run" />
  <Command __id="74" _type="PauseCommand" date="Tue Mar 29 18:59:15 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="85575">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2330]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="73" _type="ShellCommand" date="Tue Mar 29 18:59:15 EDT 2022" starttimestamp="1648594670066" timestamp="85575" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="76" _type="MoveCaretCommand" caretOffset="606" date="Tue Mar 29 18:59:15 EDT 2022" docOffset="973" starttimestamp="1648594670066" timestamp="85897" />
  <Command __id="78" _type="PauseCommand" date="Tue Mar 29 18:59:22 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="92248">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6351]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="77" _type="EclipseCommand" commandID="org.eclipse.ui.file.refresh" date="Tue Mar 29 18:59:22 EDT 2022" starttimestamp="1648594670066" timestamp="92248" />
  <Command __id="79" _type="EclipseCommand" commandID="" date="Tue Mar 29 18:59:22 EDT 2022" starttimestamp="1648594670066" timestamp="92561" />
  <Command __id="80" _type="EclipseCommand" commandID="" date="Tue Mar 29 18:59:22 EDT 2022" starttimestamp="1648594670066" timestamp="92704" />
  <Command __id="82" _type="PauseCommand" date="Tue Mar 29 18:59:32 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="102699">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9995]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="83" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:03:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="323963" type="Run" />
  <Command __id="86" _type="PauseCommand" date="Tue Mar 29 19:03:21 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="330950">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6987]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="146" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 19:03:55 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="365704" type="Run" />
  <Command __id="148" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:03:56 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="365952" type="Run" />
  <Command __id="149" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:03:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="365957" type="Run" />
  <Command __id="150" _type="ConsoleOutput" date="Tue Mar 29 19:03:56 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="366403" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.061890971315441634
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.061890971315441634"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="152" _type="PauseCommand" date="Tue Mar 29 19:03:57 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="367830">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1427]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="151" _type="ShellCommand" date="Tue Mar 29 19:03:57 EDT 2022" starttimestamp="1648594670066" timestamp="367830" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="154" _type="PauseCommand" date="Tue Mar 29 19:03:59 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="369228">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1397]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="174" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:04:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="382720" type="Run" />
  <Command __id="176" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:04:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="383040" type="Run" />
  <Command __id="177" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:04:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="383089" type="Run" />
  <Command __id="178" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:04:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="383156" type="Run" />
  <Command __id="179" _type="ConsoleOutput" date="Tue Mar 29 19:04:13 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="383194" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.6272887857775192 (Opened)
Client registered GIPC
Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner o"), Diff(INSERT,"Server0<-->Generic Client:0.6272887857775192 (O"), Diff(EQUAL,"pened"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered GIPC¶Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="180" _type="ConsoleOutput" date="Tue Mar 29 19:04:13 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="383210" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.6272887857775192 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC¶Client registered"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="182" _type="PauseCommand" date="Tue Mar 29 19:04:14 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="384854">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1644]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="183" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:04:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="395496" type="Run" />
  <Command __id="186" _type="PauseCommand" date="Tue Mar 29 19:04:27 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="397567">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2071]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="191" _type="ShellCommand" date="Tue Mar 29 19:04:34 EDT 2022" starttimestamp="1648594670066" timestamp="404785" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="194" _type="PauseCommand" date="Tue Mar 29 19:04:38 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="408833">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4048]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="195" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:04:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="410255" type="Run" />
  <Command __id="198" _type="PauseCommand" date="Tue Mar 29 19:04:42 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="412598">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2343]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="201" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:04:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="425340" type="Run" />
  <Command __id="204" _type="PauseCommand" date="Tue Mar 29 19:06:49 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="538974">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[113634]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="225" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 19:07:00 EDT 2022" starttimestamp="1648594670066" timestamp="550414" />
  <Command __id="227" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:07:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="550463" type="Debug" />
  <Command __id="228" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 19:07:00 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="550464" type="Run" />
  <Command __id="229" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:07:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="550464" type="Debug" />
  <Command __id="230" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 19:07:00 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="550464" type="Run" />
  <Command __id="232" _type="PauseCommand" date="Tue Mar 29 19:07:22 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="572422">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[21958]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="236" _type="ProgramExecutionEvent" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 19:07:30 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="579938" type="Run" />
  <Command __id="238" _type="RunCommand" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 19:07:30 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="579939" type="Run" />
  <Command __id="239" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:07:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="580243" type="Run" />
  <Command __id="240" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:07:30 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="580283" type="Run" />
  <Command __id="241" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:07:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="580290" type="Run" />
  <Command __id="243" _type="PauseCommand" date="Tue Mar 29 19:07:34 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="584830">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4539]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="242" _type="ShellCommand" date="Tue Mar 29 19:07:34 EDT 2022" starttimestamp="1648594670066" timestamp="584829" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="245" _type="PauseCommand" date="Tue Mar 29 19:07:57 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="607627">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22798]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="255" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 19:08:03 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="612951" type="Run" />
  <Command __id="257" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:03 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="613179" type="Run" />
  <Command __id="258" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="613183" type="Run" />
  <Command __id="259" _type="ConsoleOutput" date="Tue Mar 29 19:08:03 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="613658" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.680375238213941
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.680375238213941"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="261" _type="PauseCommand" date="Tue Mar 29 19:08:04 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="614767">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1109]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="260" _type="ShellCommand" date="Tue Mar 29 19:08:04 EDT 2022" starttimestamp="1648594670066" timestamp="614767" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="263" _type="PauseCommand" date="Tue Mar 29 19:08:06 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="615967">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1200]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="282" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="625881" type="Run" />
  <Command __id="284" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="626167" type="Run" />
  <Command __id="285" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="626204" type="Run" />
  <Command __id="286" _type="ConsoleOutput" date="Tue Mar 29 19:08:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="626205" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.19639198433718963 (Opened)
Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Server0<-->Generic Client:0.19639198433718963 (Opened)¶"), Diff(EQUAL,"Client registered"), Diff(INSERT," GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="287" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="626257" type="Run" />
  <Command __id="288" _type="ConsoleOutput" date="Tue Mar 29 19:08:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="626515" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.19639198433718963 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="289" _type="ConsoleOutput" date="Tue Mar 29 19:08:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="626521" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="290" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="626619" type="Run" />
  <Command __id="291" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="626619" type="Run" />
  <Command __id="293" _type="PauseCommand" date="Tue Mar 29 19:08:19 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="629323">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2704]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="297" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="638520" type="Run" />
  <Command __id="300" _type="PauseCommand" date="Tue Mar 29 19:08:29 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="639763">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1243]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="312" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="656202" type="Run" />
  <Command __id="314" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:08:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="656233" type="Run" />
  <Command __id="75" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 18:59:15 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1643" docExpressionCount="148" docLength="1857" projectName="A5" starttimestamp="1648594670066" timestamp="85671">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.trickOrTreat.LocalCommandObserved;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.rmi.RemoteException;

import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;

@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})
public class ClientOutCoupler implements PropertyChangeListener{
	ServerRemoteInterfaceGIPC ObservingServer;
	ClientRemoteInterfaceGIPC originalClient;
	String ORIGINAL_CLIENT_NAME;
	
	int aProposalNumber = 0;
	
	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {
		ObservingServer = anObservingServer;
		originalClient = aClient;
		ORIGINAL_CLIENT_NAME = aClientName;
		
		
	}
	
	
	@Override
	public void propertyChange(PropertyChangeEvent anEvent) {
		System.out.println("PROPERTY CHANGE");
		if (!anEvent.getPropertyName().equals("InputString")) return;
		String newCommand = (String) anEvent.getNewValue();
		LocalCommandObserved.newCase(this, newCommand);
		
		System.out.println("Command being sent from coupler:" + newCommand);
		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);
		try {
			//TODO need the client type to be that of a simulationParameterBean
			
			//ObservingServer.broadcastIPCMechanism(originalClient.getIPCMechanism(), originalClient, aProposalNumber, originalClient.getBroadcastMetaState());
			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		aProposalNumber++;
	
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="87" _type="Replace" date="Tue Mar 29 19:03:21 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" endLine="53" insertionLength="1800" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1857" offset="0" startLine="0" starttimestamp="1648594670066" timestamp="331714">
    <deletedText><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.trickOrTreat.LocalCommandObserved;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.rmi.RemoteException;

import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;

@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})
public class ClientOutCoupler implements PropertyChangeListener{
	ServerRemoteInterfaceGIPC ObservingServer;
	ClientRemoteInterfaceGIPC originalClient;
	String ORIGINAL_CLIENT_NAME;
	
	int aProposalNumber = 0;
	
	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {
		ObservingServer = anObservingServer;
		originalClient = aClient;
		ORIGINAL_CLIENT_NAME = aClientName;
		
		
	}
	
	
	@Override
	public void propertyChange(PropertyChangeEvent anEvent) {
		System.out.println("PROPERTY CHANGE");
		if (!anEvent.getPropertyName().equals("InputString")) return;
		String newCommand = (String) anEvent.getNewValue();
		LocalCommandObserved.newCase(this, newCommand);
		
		System.out.println("Command being sent from coupler:" + newCommand);
		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);
		try {
			//TODO need the client type to be that of a simulationParameterBean
			
			//ObservingServer.broadcastIPCMechanism(originalClient.getIPCMechanism(), originalClient, aProposalNumber, originalClient.getBroadcastMetaState());
			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		aProposalNumber++;
	
	}

}
]]></deletedText>
    <insertedText><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.trickOrTreat.LocalCommandObserved;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.rmi.RemoteException;

import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;

@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})
public class ClientOutCoupler implements PropertyChangeListener{
	ServerRemoteInterfaceGIPC ObservingServer;
	ClientRemoteInterfaceGIPC originalClient;
	String ORIGINAL_CLIENT_NAME;
	
	int aProposalNumber = 0;
	
	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {
		ObservingServer = anObservingServer;
		originalClient = aClient;
		ORIGINAL_CLIENT_NAME = aClientName;
		
		
	}
	
	@Override
	public void propertyChange(PropertyChangeEvent anEvent) {
		System.out.println("PROPERTY CHANGE");
		if (!anEvent.getPropertyName().equals("InputString")) return;
		String newCommand = (String) anEvent.getNewValue();
		LocalCommandObserved.newCase(this, newCommand);
		
		System.out.println("Command being sent from coupler:" + newCommand);
		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);
		try {
			//TODO need the client type to be that of a simulationParameterBean
			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);
			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		aProposalNumber++;
	
	}

}
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="233" _type="Replace" date="Tue Mar 29 19:07:22 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1625" docExpressionCount="148" docLength="1625" endLine="51" insertionLength="1625" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1800" offset="0" startLine="0" starttimestamp="1648594670066" timestamp="572568">
    <deletedText><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.trickOrTreat.LocalCommandObserved;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.rmi.RemoteException;

import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;

@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})
public class ClientOutCoupler implements PropertyChangeListener{
	ServerRemoteInterfaceGIPC ObservingServer;
	ClientRemoteInterfaceGIPC originalClient;
	String ORIGINAL_CLIENT_NAME;
	
	int aProposalNumber = 0;
	
	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {
		ObservingServer = anObservingServer;
		originalClient = aClient;
		ORIGINAL_CLIENT_NAME = aClientName;
		
		
	}
	
	@Override
	public void propertyChange(PropertyChangeEvent anEvent) {
		System.out.println("PROPERTY CHANGE");
		if (!anEvent.getPropertyName().equals("InputString")) return;
		String newCommand = (String) anEvent.getNewValue();
		LocalCommandObserved.newCase(this, newCommand);
		
		System.out.println("Command being sent from coupler:" + newCommand);
		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);
		try {
			//TODO need the client type to be that of a simulationParameterBean
			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);
			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		aProposalNumber++;
	
	}

}
]]></deletedText>
    <insertedText><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.trickOrTreat.LocalCommandObserved;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.rmi.RemoteException;

import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;

@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})
public class ClientOutCoupler implements PropertyChangeListener{
	ServerRemoteInterfaceGIPC ObservingServer;
	ClientRemoteInterfaceGIPC originalClient;
	String ORIGINAL_CLIENT_NAME;
	
	int aProposalNumber = 0;
	
	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {
		ObservingServer = anObservingServer;
		originalClient = aClient;
		ORIGINAL_CLIENT_NAME = aClientName;
		
		
	}
	
	@Override
	public void propertyChange(PropertyChangeEvent anEvent) {
		System.out.println("PROPERTY CHANGE");
		if (!anEvent.getPropertyName().equals("InputString")) return;
		String newCommand = (String) anEvent.getNewValue();
		LocalCommandObserved.newCase(this, newCommand);
		
		System.out.println("Command being sent from coupler:" + newCommand);
		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);
		try {
			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		aProposalNumber++;
	
	}

}
]]></insertedText>
  </DocumentChange>
  <Command __id="316" _type="PauseCommand" date="Tue Mar 29 19:08:47 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="657369">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1136]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="344" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Tue Mar 29 19:09:31 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="701128" type="Run" />
  <Command __id="346" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Tue Mar 29 19:09:31 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="701129" type="Run" />
  <Command __id="348" _type="PauseCommand" date="Tue Mar 29 19:09:33 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="703417">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2288]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="347" _type="ShellCommand" date="Tue Mar 29 19:09:33 EDT 2022" starttimestamp="1648594670066" timestamp="703417" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="350" _type="PauseCommand" date="Tue Mar 29 19:09:35 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="705595">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2178]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="349" _type="ConsoleOutput" date="Tue Mar 29 19:09:35 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="705595" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Tue Mar 29 19:09:35 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:53080 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"Building symbol table and running first pass checks:Tue Mar 29 19:09:35 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="352" _type="PauseCommand" date="Tue Mar 29 19:09:37 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="707616">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2021]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="351" _type="ConsoleOutput" date="Tue Mar 29 19:09:37 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="707616" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Tue Mar 29 19:09:37 EDT 2022
Start O(n2) inter- and intra class method calls:Tue Mar 29 19:09:37 EDT 2022
End O(n2) inter- and intra class method calls:Tue Mar 29 19:09:37 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:80¶Running second pass checks Tue Mar 29 19:09:37 EDT 2022¶Start O(n2) inter- and intra class method calls:Tue Mar 29 19:09:37 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Tue Mar 29 19:09:3"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="353" _type="ConsoleOutput" date="Tue Mar 29 19:09:38 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="708567" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Tue Mar 29 19:09:38 EDT 2022
Generating checks:Tue Mar 29 19:09:38 EDT 2022
Finished Generating checks:Tue Mar 29 19:09:38 EDT 2022
Generating externals:Tue Mar 29 19:09:38 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Tue Mar 29 19:09:3"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Tue Mar 29 19:09:38 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Tue Mar 29 19:09:3"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Tue Mar 29 19:09:3"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="354" _type="ConsoleOutput" date="Tue Mar 29 19:09:38 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="708726" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Tue Mar 29 19:09:38 EDT 2022
Test execution time (ms):3160
Test execution time (ms):17
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Tue Mar 29 19:09:38 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Tue Mar 29 19:09:38 EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Tue Mar 29 19:09:38 EDT 2022¶Generating externals:Tue Mar 29 19:09:38 EDT 2022"), Diff(INSERT,"Test execution time (ms):3160¶Test execution time (ms):17"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="355" _type="ConsoleOutput" date="Tue Mar 29 19:09:38 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="708832" type="ConsoleOutput">
    <outputString><![CDATA[A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.2962962962962963

Test execution time (ms):19
Test execution time (ms):4
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):5

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (49)
  |~ ClientRemoteInterfaceGIPC.java (25)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (250)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (26)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (199)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Tue Mar 29 19:09:38 EDT 2022¶Test execution time (ms):3160¶Test execution time (ms):17"), Diff(INSERT,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.2962962962962963¶¶Test execution time (ms):19¶Test execution time (ms):4¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):5¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (49)¶  |~ ClientRemoteInterfaceGIPC.java (25)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (250)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (26)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (199)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="357" _type="PauseCommand" date="Tue Mar 29 19:09:41 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="711884">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3052]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="356" _type="ConsoleOutput" date="Tue Mar 29 19:09:41 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="711884" type="ConsoleOutput">
    <outputString><![CDATA[eckStyleWarningsRatioTestCase) [WARN] C:\Users\mannu\COMP_533\A5\.\src\server\ServerConfigure.java:60:36: Parameter aClient should be final. [FinalParameters]

Test execution time (ms):3
Test execution time (ms):8
Test execution time (ms):8
Test execution time (ms):5
Test execution time (ms):5
Test execution time (ms):4
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.2962962962962963¶¶Test execution time (ms):19¶Test execution time (ms):4¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):5¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was f"), Diff(INSERT,"eckStyleWarningsRatioTestCase) [WARN] C:\Users\mannu\COMP_533\A5\.\src\server\ServerConfigure.java:60:36: Parameter aClient sh"), Diff(EQUAL,"ou"), Diff(DELETE,"n"), Diff(INSERT,"l"), Diff(EQUAL,"d "), Diff(DELETE,"to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (49)¶  |~ ClientRemoteInterfaceGIPC.java (25)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (250)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (26)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (199)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)"), Diff(INSERT,"be final. [FinalParameters]¶¶Test execution time (ms):3¶Test execution time (ms):8¶Test execution time (ms):8¶Test execution time (ms):5¶Test execution time (ms):5¶Test execution time (ms):4"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="359" _type="PauseCommand" date="Tue Mar 29 19:10:03 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="733696">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[21812]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="358" _type="ConsoleOutput" date="Tue Mar 29 19:10:03 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="733696" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):18603
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"eckStyleWarningsRatioTestCase) [WARN] C:\Users\mannu\COMP_533\A5\.\src\server\ServerConfigure.java:60:36: Parameter aClient should be final. [FinalParameters]¶¶Test execution time (ms):3¶Test execution time (ms):8¶Test execution time (ms):8¶Test execution time (ms):5¶Test execution time (ms):5¶Test execution time (ms):4"), Diff(INSERT,"Test execution time (ms):18603"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="361" _type="PauseCommand" date="Tue Mar 29 19:10:17 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="747245">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13549]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="360" _type="ConsoleOutput" date="Tue Mar 29 19:10:17 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="747245" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13544
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1"), Diff(DELETE,"8603"), Diff(INSERT,"3544"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="363" _type="PauseCommand" date="Tue Mar 29 19:11:15 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="805805">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[58560]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="362" _type="ConsoleOutput" date="Tue Mar 29 19:11:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="805805" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via GIPC, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*%0.5

Test execution time (ms):58555
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMIOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via GIPC, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*%0.5¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"13544"), Diff(INSERT,"58555"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="365" _type="PauseCommand" date="Tue Mar 29 19:11:19 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="809224">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3419]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="364" _type="ConsoleOutput" date="Tue Mar 29 19:11:19 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="809224" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIOneClientReadWriteNonAtomic@2d0aeb4d . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMIOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via GIPC, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*%0.5¶¶Test execution time (ms):58555"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIOneClientReadWriteNonAtomic@2d0aeb4d . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="367" _type="PauseCommand" date="Tue Mar 29 19:12:32 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="882930">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[73706]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="366" _type="ConsoleOutput" date="Tue Mar 29 19:12:32 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="882930" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):67586
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIOneClientReadWriteNonAtomic@2d0aeb4d . Results may change."), Diff(INSERT,"Test execution time (ms):67586"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="369" _type="PauseCommand" date="Tue Mar 29 19:13:51 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="961150">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[78220]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="368" _type="ShellCommand" date="Tue Mar 29 19:13:51 EDT 2022" starttimestamp="1648594670066" timestamp="961150" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="370" _type="EclipseCommand" commandID="" date="Tue Mar 29 19:13:51 EDT 2022" starttimestamp="1648594670066" timestamp="961851" />
  <Command __id="371" _type="EclipseCommand" commandID="" date="Tue Mar 29 19:13:51 EDT 2022" starttimestamp="1648594670066" timestamp="961859" />
  <Command __id="373" _type="PauseCommand" date="Tue Mar 29 19:14:13 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="983551">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[21692]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="372" _type="ShellCommand" date="Tue Mar 29 19:14:13 EDT 2022" starttimestamp="1648594670066" timestamp="983551" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="375" _type="PauseCommand" date="Tue Mar 29 19:14:25 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="995467">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11916]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="374" _type="ConsoleOutput" date="Tue Mar 29 19:14:25 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="995467" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via RMI, no line found matching regex: .*?\{RMI TCP Connection.*?\}.*?ProposalLearnedNotificationSent.*
GIPC is not checked because RMI failed%0.25

Test execution time (ms):112581
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via RMI, no line found matching regex: .*?\{RMI TCP Connection.*?\}.*?ProposalLearnedNotificationSent.*¶GIPC is not checked because RMI failed%0.25¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"67"), Diff(INSERT,"112"), Diff(EQUAL,"58"), Diff(DELETE,"6"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="377" _type="PauseCommand" date="Tue Mar 29 19:14:48 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="1018093">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22626]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="376" _type="ConsoleOutput" date="Tue Mar 29 19:14:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1018093" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22570
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via RMI, no line found matching regex: .*?\{RMI TCP Connection.*?\}.*?ProposalLearnedNotificationSent.*¶GIPC is not checked because RMI failed%0.25¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"112581"), Diff(INSERT,"22570"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="379" _type="PauseCommand" date="Tue Mar 29 19:15:10 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="1040653">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22560]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="378" _type="ConsoleOutput" date="Tue Mar 29 19:15:10 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1040653" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22552
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):225"), Diff(DELETE,"70"), Diff(INSERT,"52"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="381" _type="PauseCommand" date="Tue Mar 29 19:17:03 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="1153221">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[112568]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="380" _type="ConsoleOutput" date="Tue Mar 29 19:17:03 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1153221" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateNoBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112566
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMIServerMetaStateNoBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"22552"), Diff(INSERT,"112566"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="383" _type="PauseCommand" date="Tue Mar 29 19:18:10 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="1220176">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[66955]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="382" _type="ShellCommand" date="Tue Mar 29 19:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="1220176" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="385" _type="PauseCommand" date="Tue Mar 29 19:18:25 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="1235288">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15112]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="384" _type="ShellCommand" date="Tue Mar 29 19:18:25 EDT 2022" starttimestamp="1648594670066" timestamp="1235288" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="387" _type="PauseCommand" date="Tue Mar 29 19:18:55 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="1265780">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30492]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="388" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:19:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1313862" type="Debug" />
  <Command __id="390" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Tue Mar 29 19:19:43 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="1313863" type="Run" />
  <Command __id="391" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:19:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1313863" type="Debug" />
  <Command __id="392" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Tue Mar 29 19:19:43 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="1313863" type="Run" />
  <Command __id="394" _type="PauseCommand" date="Tue Mar 29 19:19:56 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="1326261">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12398]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="416" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1347831" type="Run" />
  <Command __id="419" _type="PauseCommand" date="Tue Mar 29 19:20:19 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="1349208">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1377]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="418" _type="ShellCommand" date="Tue Mar 29 19:20:19 EDT 2022" starttimestamp="1648594670066" timestamp="1349208" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="420" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 19:20:19 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="1349480" type="Run" />
  <Command __id="421" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:19 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1349731" type="Run" />
  <Command __id="422" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1349739" type="Run" />
  <Command __id="423" _type="ConsoleOutput" date="Tue Mar 29 19:20:20 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1350243" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.8330341872935373
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"5368660365435505"), Diff(INSERT,"8330341872935373"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="424" _type="ShellCommand" date="Tue Mar 29 19:20:20 EDT 2022" starttimestamp="1648594670066" timestamp="1350315" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="425" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1351026" type="Run" />
  <Command __id="426" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1351234" type="Run" />
  <Command __id="427" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1351316" type="Run" />
  <Command __id="428" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1351365" type="Run" />
  <Command __id="429" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1351438" type="Run" />
  <Command __id="430" _type="ConsoleOutput" date="Tue Mar 29 19:20:21 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1351544" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.5368660365435505 (Opened)
Client registered GIPC
Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.8330341872935373"), Diff(INSERT,"Server0<-->Generic Client:0.5368660365435505 (Opened)¶Client registered GIPC¶Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="431" _type="ConsoleOutput" date="Tue Mar 29 19:20:21 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1351572" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.5368660365435505 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC¶Client registered"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="433" _type="PauseCommand" date="Tue Mar 29 19:20:22 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="1352908">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1336]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="436" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:26 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1356309" type="Run" />
  <Command __id="438" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:26 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1356309" type="Run" />
  <Command __id="439" _type="ShellCommand" date="Tue Mar 29 19:20:27 EDT 2022" starttimestamp="1648594670066" timestamp="1356981" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="440" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1357557" type="Run" />
  <Command __id="441" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1357817" type="Run" />
  <Command __id="442" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1357847" type="Run" />
  <Command __id="443" _type="ConsoleOutput" date="Tue Mar 29 19:20:27 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1357861" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.8330341872935373 (Opened)
Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner o"), Diff(INSERT,"Server0<-->Generic Client:0.8330341872935373 (O"), Diff(EQUAL,"pened"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="444" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:20:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1357898" type="Run" />
  <Command __id="445" _type="ConsoleOutput" date="Tue Mar 29 19:20:28 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1358159" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.8330341872935373 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="446" _type="ConsoleOutput" date="Tue Mar 29 19:20:28 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="1358163" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="448" _type="PauseCommand" date="Tue Mar 29 19:20:30 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="1360456">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2293]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="461" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:21:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="1396413" type="Run" />
  <Command __id="315" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:08:47 EDT 2022" docASTNodeCount="812" docActiveCodeLength="5824" docExpressionCount="599" docLength="6282" projectName="A5" starttimestamp="1648594670066" timestamp="657369">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC{
	
	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
		
	}
	
	
	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		createGIPCRegistry();
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);
		
		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);	
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="464" _type="PauseCommand" date="Tue Mar 29 19:23:53 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="1563708">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[167295]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="465" _type="MoveCaretCommand" caretOffset="7131" date="Tue Mar 29 19:23:53 EDT 2022" docOffset="8807" starttimestamp="1648594670066" timestamp="1563869" />
  <Command __id="467" _type="PauseCommand" date="Tue Mar 29 19:24:13 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="1583814">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[19945]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="501" _type="ShellCommand" date="Tue Mar 29 19:46:49 EDT 2022" starttimestamp="1648594670066" timestamp="2939401" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="504" _type="EclipseCommand" commandID="" date="Tue Mar 29 19:46:50 EDT 2022" starttimestamp="1648594670066" timestamp="2940115" />
  <Command __id="505" _type="EclipseCommand" commandID="" date="Tue Mar 29 19:46:50 EDT 2022" starttimestamp="1648594670066" timestamp="2940456" />
  <Command __id="507" _type="PauseCommand" date="Tue Mar 29 19:46:55 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="2944995">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4539]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="506" _type="MoveCaretCommand" caretOffset="8795" date="Tue Mar 29 19:46:55 EDT 2022" docOffset="8795" starttimestamp="1648594670066" timestamp="2944995" />
  <Command __id="463" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:23:53 EDT 2022" docASTNodeCount="1048" docActiveCodeLength="8016" docExpressionCount="753" docLength="8824" projectName="A5" starttimestamp="1648594670066" timestamp="1563708">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.inputParameters.SimulationParametersListener;
import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		if(mechanism.equals("GIPC")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		System.out.print("HERE in broadcase meta method");
		//Broadcast meta State via RMI always
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="503" _type="Replace" date="Tue Mar 29 19:46:50 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8301" docExpressionCount="768" docLength="9103" endLine="250" insertionLength="9103" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="8824" offset="0" startLine="0" starttimestamp="1648594670066" timestamp="2940068">
    <deletedText><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.inputParameters.SimulationParametersListener;
import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		if(mechanism.equals("GIPC")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		System.out.print("HERE in broadcase meta method");
		//Broadcast meta State via RMI always
	}


}
]]></deletedText>
    <insertedText><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		if(mechanism.equals("GIPC")) {
			//TODO if IPC mechanism changes
			
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></insertedText>
  </DocumentChange>
  <Command __id="509" _type="PauseCommand" date="Tue Mar 29 19:46:59 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="2949283">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4288]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="555" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:47:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3005031" type="Run" />
  <Command __id="557" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:47:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3005031" type="Run" />
  <Command __id="559" _type="PauseCommand" date="Tue Mar 29 19:48:01 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3011922">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6891]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="558" _type="ShellCommand" date="Tue Mar 29 19:48:01 EDT 2022" starttimestamp="1648594670066" timestamp="3011922" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="561" _type="PauseCommand" date="Tue Mar 29 19:48:04 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3014823">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2901]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="563" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:48:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3018583" type="Run" />
  <Command __id="565" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:48:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3018755" type="Run" />
  <Command __id="567" _type="PauseCommand" date="Tue Mar 29 19:48:11 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3021378">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2623]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="566" _type="ConsoleInput" date="Tue Mar 29 19:48:11 EDT 2022" starttimestamp="1648594670066" timestamp="3021378" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="568" _type="ConsoleOutput" date="Tue Mar 29 19:48:11 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3021440" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
RMI
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener."), Diff(DELETE,"ipcMechanism(util.interactiveMethodInvocation."), Diff(INSERT,"simulationCommand(java.lang.String)[move 50 -50]¶"), Diff(EQUAL,"IPC"), Diff(INSERT," "), Diff(EQUAL,"Mechanism"), Diff(DELETE,")["), Diff(INSERT,"¶"), Diff(EQUAL,"RMI"), Diff(DELETE,"]"), Diff(INSERT,"¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="569" _type="ConsoleOutput" date="Tue Mar 29 19:48:11 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3021629" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: move 50 -50
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶RMI¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Command recieved for broadcast: move 50 -50"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="571" _type="PauseCommand" date="Tue Mar 29 19:48:14 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3024510">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2881]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="570" _type="ShellCommand" date="Tue Mar 29 19:48:14 EDT 2022" starttimestamp="1648594670066" timestamp="3024510" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="573" _type="PauseCommand" date="Tue Mar 29 19:48:19 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3029425">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4915]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="578" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:48:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3048660" type="Run" />
  <Command __id="581" _type="PauseCommand" date="Tue Mar 29 19:49:02 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="3072154">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[23494]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="580" _type="ConsoleInput" date="Tue Mar 29 19:49:02 EDT 2022" starttimestamp="1648594670066" timestamp="3072154" type="Exception">
    <outputString><![CDATA[i RMI
]]></outputString>
  </Command>
  <Command __id="582" _type="ConsoleOutput" date="Tue Mar 29 19:49:02 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3072211" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Command recieved for broadcast: move 50 -50"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="584" _type="PauseCommand" date="Tue Mar 29 19:49:17 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="3087645">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[15434]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="588" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:49:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3102703" type="Run" />
  <Command __id="508" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:46:59 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="2949283">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	"), Diff(DELETE,"¶	"), Diff(EQUAL,"@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			"), Diff(DELETE,"¶			"), Diff(EQUAL,"//ObservingServer.broadcastIPCMechanism("), Diff(DELETE,"originalClient.get"), Diff(EQUAL,"IPCMechanism"), Diff(DELETE,"()"), Diff(EQUAL,", originalClient, aProposalNumber, "), Diff(DELETE,"originalClient.getBroadcastMetaState()"), Diff(INSERT,"broadcast"), Diff(EQUAL,");¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.port.consensus.RemoteProposeRequestSent;
import util.trace.trickOrTreat.LocalCommandObserved;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.rmi.RemoteException;

import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;

@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})
public class ClientOutCoupler implements PropertyChangeListener{
	ServerRemoteInterfaceGIPC ObservingServer;
	ClientRemoteInterfaceGIPC originalClient;
	String ORIGINAL_CLIENT_NAME;
	
	int aProposalNumber = 0;
	
	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {
		ObservingServer = anObservingServer;
		originalClient = aClient;
		ORIGINAL_CLIENT_NAME = aClientName;
		
		
	}
	
	@Override
	public void propertyChange(PropertyChangeEvent anEvent) {
		System.out.println("PROPERTY CHANGE");
		if (!anEvent.getPropertyName().equals("InputString")) return;
		String newCommand = (String) anEvent.getNewValue();
		LocalCommandObserved.newCase(this, newCommand);
		
		System.out.println("Command being sent from coupler:" + newCommand);
		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);
		try {
			//TODO need the client type to be that of a simulationParameterBean
			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);
			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		aProposalNumber++;
	
	}

}
]]></snapshot>
  </Command>
  <Command __id="591" _type="PauseCommand" date="Tue Mar 29 19:49:42 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3112068">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[9365]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="592" _type="MoveCaretCommand" caretOffset="4817" date="Tue Mar 29 19:49:42 EDT 2022" docOffset="4817" starttimestamp="1648594670066" timestamp="3112215" />
  <Command __id="590" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:49:42 EDT 2022" docASTNodeCount="912" docActiveCodeLength="6627" docExpressionCount="665" docLength="7144" projectName="A5" starttimestamp="1648594670066" timestamp="3112068">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶"), Diff(INSERT,"import util.interactiveMethodInvocation.IPCMechanism;¶"), Diff(EQUAL,"import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import "), Diff(DELETE,"	"), Diff(EQUAL,"util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({"), Diff(INSERT," "), Diff(EQUAL,"DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC"), Diff(INSERT," "), Diff(EQUAL,"})¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC"), Diff(INSERT," "), Diff(EQUAL,"{¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	private static "), Diff(DELETE," "), Diff(EQUAL,"String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	//"), Diff(INSERT," "), Diff(EQUAL,"A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	//"), Diff(INSERT," "), Diff(EQUAL,"int aProposalNumber = 0;¶"), Diff(DELETE,"	¶¶	"), Diff(EQUAL,"¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		"), Diff(DELETE,"		"), Diff(EQUAL,"//"), Diff(INSERT," "), Diff(EQUAL,"ClientArgsProcessor.getServerHost(args);¶"), Diff(DELETE,"		¶		¶		"), Diff(EQUAL,"¶	}¶"), Diff(DELETE,"	¶	"), Diff(EQUAL,"¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)"), Diff(DELETE," "), Diff(INSERT,"¶			"), Diff(EQUAL,"throws RemoteException {¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		//"), Diff(INSERT," "), Diff(EQUAL,"TODO Check is this is where delay is needed¶		long aDelay = getDelay();"), Diff(DELETE," "), Diff(EQUAL,"¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		System.out.println("Command recieved for broadcast: ""), Diff(INSERT," "), Diff(EQUAL,"+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			if"), Diff(INSERT," "), Diff(EQUAL,"(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//"), Diff(INSERT," "), Diff(EQUAL,"Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			if (aNewCommand.charAt(0) == 'q') {¶				//"), Diff(INSERT," "), Diff(EQUAL,"Need to quit¶				this.quit(0);¶			}¶		}¶"), Diff(DELETE,"				"), Diff(INSERT,"¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶"), Diff(EQUAL,"¶	}¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	@Override¶	protected void setTracing() {¶		//"), Diff(INSERT," "), Diff(EQUAL,"A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶"), Diff(DELETE,"				"), Diff(EQUAL,"¶		//"), Diff(INSERT," "), Diff(EQUAL,"A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();"), Diff(DELETE,"		"), Diff(EQUAL,"¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶"), Diff(DELETE,"		¶		"), Diff(EQUAL,"¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//"), Diff(INSERT," "), Diff(EQUAL,"Create remote server object¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			//"), Diff(INSERT," "), Diff(EQUAL,"create proxy of remote server object¶			//"), Diff(INSERT," "), Diff(EQUAL,"UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//"), Diff(INSERT," "), Diff(EQUAL,"send server to RMI server¶			//"), Diff(INSERT," "), Diff(EQUAL,"rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			System.out.println("Server proxy sent to RMI Registry");¶"), Diff(DELETE,"			¶			¶			"), Diff(EQUAL,"¶		} catch"), Diff(INSERT," "), Diff(EQUAL,"(Exception e)"), Diff(INSERT," "), Diff(EQUAL,"{¶			e.printStackTrace();¶		}¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶	}¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	@Override¶	public void "), Diff(DELETE," "), Diff(EQUAL,"start"), Diff(DELETE," "), Diff(EQUAL,"(String[] args) {¶		init(args);"), Diff(DELETE,"¶		"), Diff(EQUAL,"¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo)"), Diff(INSERT," "), Diff(EQUAL,"{¶		// TODO Auto-generated method stub¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶	}¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);"), Diff(DELETE,"	"), Diff(EQUAL,"¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)
			throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="594" _type="PauseCommand" date="Tue Mar 29 19:49:49 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3119608">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7393]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="595" _type="MoveCaretCommand" caretOffset="8795" date="Tue Mar 29 19:49:49 EDT 2022" docOffset="8795" starttimestamp="1648594670066" timestamp="3119708" />
  <Command __id="597" _type="PauseCommand" date="Tue Mar 29 19:49:57 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3127889">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8181]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="596" _type="MoveCaretCommand" caretOffset="7528" date="Tue Mar 29 19:49:57 EDT 2022" docOffset="7528" starttimestamp="1648594670066" timestamp="3127889" />
  <Command __id="599" _type="PauseCommand" date="Tue Mar 29 19:50:04 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3134353">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6464]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="593" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:49:49 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8301" docExpressionCount="768" docLength="9103" projectName="A5" starttimestamp="1648594670066" timestamp="3119608">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶"), Diff(DELETE,"import assignments.util.inputParameters.SimulationParametersListener;¶"), Diff(EQUAL,"import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	"), Diff(INSERT,"private static boolean broadcastIPCMechansim = false;¶	"), Diff(EQUAL,"¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"if(mechanism.equals("GIPC")) {¶			"), Diff(INSERT,"//TODO if IPC mechanism changes¶			¶			"), Diff(EQUAL,"commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		"), Diff(DELETE,"System.out.print("HERE in broadcase meta method");¶		//Broadcast meta State via RMI always"), Diff(INSERT,"broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		"), Diff(EQUAL,"¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		if(mechanism.equals("GIPC")) {
			//TODO if IPC mechanism changes
			
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="598" _type="SelectTextCommand" caretOffset="7699" date="Tue Mar 29 19:50:04 EDT 2022" end="7730" start="7699" starttimestamp="1648594670066" timestamp="3134353" />
  <Command __id="642" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 19:50:44 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="3174741" type="Run" />
  <Command __id="644" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:44 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3174867" type="Run" />
  <Command __id="645" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3174871" type="Run" />
  <Command __id="646" _type="ConsoleOutput" date="Tue Mar 29 19:50:45 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3175211" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.35398689990492715
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.35398689990492715"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="647" _type="ShellCommand" date="Tue Mar 29 19:50:46 EDT 2022" starttimestamp="1648594670066" timestamp="3176150" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="649" _type="PauseCommand" date="Tue Mar 29 19:50:47 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3177779">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1628]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="648" _type="ShellCommand" date="Tue Mar 29 19:50:47 EDT 2022" starttimestamp="1648594670066" timestamp="3177778" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="650" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 19:50:48 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="3177985" type="Run" />
  <Command __id="651" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:48 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3178240" type="Run" />
  <Command __id="652" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3178244" type="Run" />
  <Command __id="653" _type="ConsoleOutput" date="Tue Mar 29 19:50:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3178663" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.3060155864943954
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.3"), Diff(DELETE,"5398689990492715"), Diff(INSERT,"060155864943954"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="654" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3179121" type="Run" />
  <Command __id="656" _type="PauseCommand" date="Tue Mar 29 19:50:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3180575">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1454]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="659" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3183934" type="Run" />
  <Command __id="661" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3184151" type="Run" />
  <Command __id="662" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3184213" type="Run" />
  <Command __id="663" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3184287" type="Run" />
  <Command __id="664" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3184390" type="Run" />
  <Command __id="665" _type="ConsoleOutput" date="Tue Mar 29 19:50:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3184438" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.35398689990492715 (Opened)
Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.3060155864943954"), Diff(INSERT,"Server0<-->Generic Client:0.35398689990492715 (Opened)¶Client registered GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="666" _type="ConsoleOutput" date="Tue Mar 29 19:50:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3184504" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.35398689990492715 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="667" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3184712" type="Run" />
  <Command __id="668" _type="ConsoleOutput" date="Tue Mar 29 19:50:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3184765" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="669" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3185314" type="Run" />
  <Command __id="670" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3185314" type="Run" />
  <Command __id="671" _type="ShellCommand" date="Tue Mar 29 19:50:55 EDT 2022" starttimestamp="1648594670066" timestamp="3185812" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="673" _type="PauseCommand" date="Tue Mar 29 19:50:57 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3187501">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1689]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="672" _type="ShellCommand" date="Tue Mar 29 19:50:57 EDT 2022" starttimestamp="1648594670066" timestamp="3187501" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="674" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3188128" type="Run" />
  <Command __id="675" _type="ConsoleOutput" date="Tue Mar 29 19:50:58 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3188428" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.3060155864943954 (Opened)
Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Server0<-->Generic Client:0.3060155864943954 (Opened)¶"), Diff(EQUAL,"Client registered"), Diff(INSERT," GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="676" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3188430" type="Run" />
  <Command __id="677" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3188466" type="Run" />
  <Command __id="678" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:50:58 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3188516" type="Run" />
  <Command __id="679" _type="ConsoleOutput" date="Tue Mar 29 19:50:58 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3188744" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.3060155864943954 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="680" _type="ConsoleOutput" date="Tue Mar 29 19:50:58 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3188746" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="682" _type="PauseCommand" date="Tue Mar 29 19:51:00 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3190017">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1271]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="685" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:51:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3203538" type="Run" />
  <Command __id="688" _type="PauseCommand" date="Tue Mar 29 19:51:17 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3207468">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3930]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="693" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:51:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3218476" type="Run" />
  <Command __id="695" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:51:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3218507" type="Run" />
  <Command __id="697" _type="PauseCommand" date="Tue Mar 29 19:51:30 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3220573">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2066]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="696" _type="ConsoleInput" date="Tue Mar 29 19:51:30 EDT 2022" starttimestamp="1648594670066" timestamp="3220573" type="Exception">
    <outputString><![CDATA[i GIPC
]]></outputString>
  </Command>
  <Command __id="698" _type="ConsoleOutput" date="Tue Mar 29 19:51:30 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3220640" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="700" _type="PauseCommand" date="Tue Mar 29 19:51:37 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3227154">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6514]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="704" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:51:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3242194" type="Run" />
  <Command __id="707" _type="PauseCommand" date="Tue Mar 29 19:51:58 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3248752">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6558]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="706" _type="ShellCommand" date="Tue Mar 29 19:51:58 EDT 2022" starttimestamp="1648594670066" timestamp="3248752" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="709" _type="PauseCommand" date="Tue Mar 29 19:52:02 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3252088">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3336]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="708" _type="ShellCommand" date="Tue Mar 29 19:52:02 EDT 2022" starttimestamp="1648594670066" timestamp="3252088" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="600" _type="Delete" date="Tue Mar 29 19:50:04 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8299" docExpressionCount="768" docLength="9070" endLine="215" length="33" offset="7699" repeat="2" startLine="214" starttimestamp="1648594670066" timestamp="3134795" timestamp2="3136717">
    <text><![CDATA[//TODO if IPC mechanism changes
]]></text>
  </DocumentChange>
  <Command __id="711" _type="PauseCommand" date="Tue Mar 29 19:52:10 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3260291">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8203]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="712" _type="MoveCaretCommand" caretOffset="973" date="Tue Mar 29 19:52:10 EDT 2022" docOffset="973" starttimestamp="1648594670066" timestamp="3260430" />
  <Command __id="710" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:52:10 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="3260291">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="714" _type="PauseCommand" date="Tue Mar 29 19:52:19 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3269473">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9043]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="715" _type="MoveCaretCommand" caretOffset="4817" date="Tue Mar 29 19:52:19 EDT 2022" docOffset="4817" starttimestamp="1648594670066" timestamp="3269581" />
  <Command __id="717" _type="PauseCommand" date="Tue Mar 29 19:52:32 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="3281959">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12378]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="716" _type="MoveCaretCommand" caretOffset="4333" date="Tue Mar 29 19:52:32 EDT 2022" docOffset="4333" starttimestamp="1648594670066" timestamp="3281959" />
  <Command __id="718" _type="MoveCaretCommand" caretOffset="4332" date="Tue Mar 29 19:52:32 EDT 2022" docOffset="4332" starttimestamp="1648594670066" timestamp="3282782" />
  <Command __id="720" _type="PauseCommand" date="Tue Mar 29 19:52:34 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3284516">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1734]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="719" _type="SelectTextCommand" caretOffset="4302" date="Tue Mar 29 19:52:34 EDT 2022" end="4309" start="4302" starttimestamp="1648594670066" timestamp="3284516" />
  <Command __id="722" _type="InsertStringCommand" date="Tue Mar 29 19:52:34 EDT 2022" starttimestamp="1648594670066" timestamp="3284895" timestamp2="3284895">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="724" _type="InsertStringCommand" date="Tue Mar 29 19:52:35 EDT 2022" starttimestamp="1648594670066" timestamp="3285021" timestamp2="3285021">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="726" _type="InsertStringCommand" date="Tue Mar 29 19:52:35 EDT 2022" starttimestamp="1648594670066" timestamp="3285223" timestamp2="3285223">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="728" _type="InsertStringCommand" date="Tue Mar 29 19:52:35 EDT 2022" starttimestamp="1648594670066" timestamp="3285409" timestamp2="3285409">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="730" _type="InsertStringCommand" date="Tue Mar 29 19:52:35 EDT 2022" starttimestamp="1648594670066" timestamp="3285661" timestamp2="3285661">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="732" _type="InsertStringCommand" date="Tue Mar 29 19:52:35 EDT 2022" starttimestamp="1648594670066" timestamp="3285822" timestamp2="3285822">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="734" _type="InsertStringCommand" date="Tue Mar 29 19:52:36 EDT 2022" starttimestamp="1648594670066" timestamp="3286029" timestamp2="3286029">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="736" _type="InsertStringCommand" date="Tue Mar 29 19:52:36 EDT 2022" starttimestamp="1648594670066" timestamp="3286123" timestamp2="3286123">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="738" _type="InsertStringCommand" date="Tue Mar 29 19:52:36 EDT 2022" starttimestamp="1648594670066" timestamp="3286252" timestamp2="3286252">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="740" _type="InsertStringCommand" date="Tue Mar 29 19:52:36 EDT 2022" starttimestamp="1648594670066" timestamp="3286344" timestamp2="3286344">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="742" _type="InsertStringCommand" date="Tue Mar 29 19:52:36 EDT 2022" starttimestamp="1648594670066" timestamp="3286445" timestamp2="3286445">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="744" _type="InsertStringCommand" date="Tue Mar 29 19:52:36 EDT 2022" starttimestamp="1648594670066" timestamp="3286604" timestamp2="3286604">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="746" _type="InsertStringCommand" date="Tue Mar 29 19:52:36 EDT 2022" starttimestamp="1648594670066" timestamp="3286677" timestamp2="3286677">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="747" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 19:52:37 EDT 2022" starttimestamp="1648594670066" timestamp="3287148" />
  <Command __id="748" _type="EclipseCommand" commandID="" date="Tue Mar 29 19:52:37 EDT 2022" starttimestamp="1648594670066" timestamp="3287244" />
  <Command __id="749" _type="EclipseCommand" commandID="" date="Tue Mar 29 19:52:37 EDT 2022" starttimestamp="1648594670066" timestamp="3287282" />
  <Command __id="750" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:52:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3287389" type="Run" />
  <Command __id="751" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:52:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3287389" type="Run" />
  <Command __id="752" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:52:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3287390" type="Run" />
  <Command __id="754" _type="PauseCommand" date="Tue Mar 29 19:52:58 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="3308856">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[21466]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="753" _type="MoveCaretCommand" caretOffset="3552" date="Tue Mar 29 19:52:58 EDT 2022" docOffset="3552" starttimestamp="1648594670066" timestamp="3308856" />
  <Command __id="756" _type="InsertStringCommand" date="Tue Mar 29 19:52:59 EDT 2022" starttimestamp="1648594670066" timestamp="3309145" timestamp2="3309145">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="758" _type="InsertStringCommand" date="Tue Mar 29 19:52:59 EDT 2022" starttimestamp="1648594670066" timestamp="3309679" timestamp2="3309679">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="760" _type="InsertStringCommand" date="Tue Mar 29 19:52:59 EDT 2022" starttimestamp="1648594670066" timestamp="3309821" timestamp2="3309821">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="762" _type="InsertStringCommand" date="Tue Mar 29 19:52:59 EDT 2022" starttimestamp="1648594670066" timestamp="3309904" timestamp2="3309904">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="764" _type="InsertStringCommand" date="Tue Mar 29 19:53:00 EDT 2022" starttimestamp="1648594670066" timestamp="3309976" timestamp2="3309976">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="766" _type="InsertStringCommand" date="Tue Mar 29 19:53:00 EDT 2022" starttimestamp="1648594670066" timestamp="3310075" timestamp2="3310075">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="768" _type="InsertStringCommand" date="Tue Mar 29 19:53:00 EDT 2022" starttimestamp="1648594670066" timestamp="3310370" timestamp2="3310370">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="770" _type="InsertStringCommand" date="Tue Mar 29 19:53:01 EDT 2022" starttimestamp="1648594670066" timestamp="3310974" timestamp2="3310974">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="772" _type="InsertStringCommand" date="Tue Mar 29 19:53:01 EDT 2022" starttimestamp="1648594670066" timestamp="3311057" timestamp2="3311057">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="774" _type="InsertStringCommand" date="Tue Mar 29 19:53:01 EDT 2022" starttimestamp="1648594670066" timestamp="3311124" timestamp2="3311124">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="776" _type="InsertStringCommand" date="Tue Mar 29 19:53:01 EDT 2022" starttimestamp="1648594670066" timestamp="3311255" timestamp2="3311255">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="778" _type="InsertStringCommand" date="Tue Mar 29 19:53:01 EDT 2022" starttimestamp="1648594670066" timestamp="3311338" timestamp2="3311338">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="780" _type="InsertStringCommand" date="Tue Mar 29 19:53:01 EDT 2022" starttimestamp="1648594670066" timestamp="3311462" timestamp2="3311462">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="781" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 19:53:02 EDT 2022" starttimestamp="1648594670066" timestamp="3312324" />
  <Command __id="783" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:02 EDT 2022" starttimestamp="1648594670066" timestamp="3312597" />
  <Command __id="785" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313098" />
  <Command __id="787" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313127" />
  <Command __id="789" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313158" />
  <Command __id="791" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313189" />
  <Command __id="793" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313217" />
  <Command __id="795" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313250" />
  <Command __id="797" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313379" />
  <Command __id="799" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313566" />
  <Command __id="801" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313741" />
  <Command __id="803" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:03 EDT 2022" starttimestamp="1648594670066" timestamp="3313911" />
  <Command __id="805" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:04 EDT 2022" starttimestamp="1648594670066" timestamp="3314088" />
  <Command __id="807" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 19:53:04 EDT 2022" starttimestamp="1648594670066" timestamp="3314244" />
  <Command __id="809" _type="InsertStringCommand" date="Tue Mar 29 19:53:04 EDT 2022" starttimestamp="1648594670066" timestamp="3314375" timestamp2="3314375">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="811" _type="InsertStringCommand" date="Tue Mar 29 19:53:04 EDT 2022" starttimestamp="1648594670066" timestamp="3314557" timestamp2="3314557">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="813" _type="InsertStringCommand" date="Tue Mar 29 19:53:04 EDT 2022" starttimestamp="1648594670066" timestamp="3314643" timestamp2="3314643">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="815" _type="InsertStringCommand" date="Tue Mar 29 19:53:04 EDT 2022" starttimestamp="1648594670066" timestamp="3314806" timestamp2="3314806">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="817" _type="InsertStringCommand" date="Tue Mar 29 19:53:05 EDT 2022" starttimestamp="1648594670066" timestamp="3314952" timestamp2="3314952">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="819" _type="InsertStringCommand" date="Tue Mar 29 19:53:05 EDT 2022" starttimestamp="1648594670066" timestamp="3315033" timestamp2="3315033">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="821" _type="InsertStringCommand" date="Tue Mar 29 19:53:05 EDT 2022" starttimestamp="1648594670066" timestamp="3315229" timestamp2="3315229">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="822" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 19:53:05 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3315671" />
  <Command __id="826" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 19:53:06 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3316326" />
  <Command __id="829" _type="InsertStringCommand" date="Tue Mar 29 19:53:06 EDT 2022" starttimestamp="1648594670066" timestamp="3316407" timestamp2="3316407">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="830" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 19:53:06 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3316478" />
  <Command __id="833" _type="PauseCommand" date="Tue Mar 29 19:53:08 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3318102">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1315]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="832" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 19:53:08 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3318102" />
  <Command __id="835" _type="InsertStringCommand" date="Tue Mar 29 19:53:08 EDT 2022" starttimestamp="1648594670066" timestamp="3318203" timestamp2="3318203">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="837" _type="PauseCommand" date="Tue Mar 29 19:53:09 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3319213">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1010]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="893" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 19:53:26 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="3336436" type="Run" />
  <Command __id="895" _type="ShellCommand" date="Tue Mar 29 19:53:26 EDT 2022" starttimestamp="1648594670066" timestamp="3336441" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="897" _type="PauseCommand" date="Tue Mar 29 19:53:27 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3337664">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1223]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="896" _type="ConsoleOutput" date="Tue Mar 29 19:53:27 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3337664" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.3165659512027408
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"9417316369338367"), Diff(INSERT,"3165659512027408"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="899" _type="PauseCommand" date="Tue Mar 29 19:53:32 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3342050">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4386]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="898" _type="ConsoleOutput" date="Tue Mar 29 19:53:32 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3342050" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.9417316369338367 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:"), Diff(INSERT,"Server0<-->"), Diff(EQUAL,"Generic Client:0."), Diff(DELETE,"3165659512027408"), Diff(INSERT,"9417316369338367 (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="900" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:53:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3342435" type="Run" />
  <Command __id="901" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:53:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3342436" type="Run" />
  <Command __id="902" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:53:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3342522" type="Run" />
  <Command __id="903" _type="ConsoleOutput" date="Tue Mar 29 19:53:32 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3342650" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.9417316369338367 (Opened)"), Diff(INSERT,"Client registered GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="904" _type="ConsoleOutput" date="Tue Mar 29 19:53:32 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3342911" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="905" _type="ConsoleOutput" date="Tue Mar 29 19:53:32 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3342914" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="907" _type="PauseCommand" date="Tue Mar 29 19:53:34 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3344420">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1506]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="906" _type="ConsoleOutput" date="Tue Mar 29 19:53:34 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3344420" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.3165659512027408 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client register"), Diff(INSERT,"Server0<-->Generic Client:0.3165659512027408 (Open"), Diff(EQUAL,"ed"), Diff(INSERT,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="908" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:53:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3344566" type="Run" />
  <Command __id="909" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:53:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3344599" type="Run" />
  <Command __id="910" _type="ConsoleOutput" date="Tue Mar 29 19:53:34 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3344680" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.3165659512027408 (Opened)"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="911" _type="ConsoleOutput" date="Tue Mar 29 19:53:34 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3344685" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered GIPC¶Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="913" _type="PauseCommand" date="Tue Mar 29 19:53:38 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3348048">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3363]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="914" _type="ShellCommand" date="Tue Mar 29 19:53:43 EDT 2022" starttimestamp="1648594670066" timestamp="3353919" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="917" _type="PauseCommand" date="Tue Mar 29 19:53:46 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3355961">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2042]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="916" _type="ShellCommand" date="Tue Mar 29 19:53:46 EDT 2022" starttimestamp="1648594670066" timestamp="3355961" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="919" _type="PauseCommand" date="Tue Mar 29 19:53:51 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3361379">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5417]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="927" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:54:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3387560" type="Run" />
  <Command __id="713" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:52:19 EDT 2022" docASTNodeCount="912" docActiveCodeLength="6627" docExpressionCount="665" docLength="7144" projectName="A5" starttimestamp="1648594670066" timestamp="3269473">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="721" _type="Replace" date="Tue Mar 29 19:52:34 EDT 2022" docASTNodeCount="912" docActiveCodeLength="6621" docExpressionCount="665" docLength="7138" endLine="119" insertionLength="1" int_docASTNodeCount="912" int_docActiveCodeLength="6620" int_docExpressionCount="665" int_docLength="7137" length="7" offset="4302" startLine="119" starttimestamp="1648594670066" timestamp="3284883">
    <deletedText><![CDATA[Command]]></deletedText>
    <insertedText><![CDATA[I]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="723" _type="Insert" date="Tue Mar 29 19:52:35 EDT 2022" docASTNodeCount="912" docActiveCodeLength="6633" docExpressionCount="665" docLength="7150" length="12" offset="4303" repeat="12" starttimestamp="1648594670066" timestamp="3285016" timestamp2="3286673">
    <text><![CDATA[PC Mechanism]]></text>
  </DocumentChange>
  <DocumentChange __id="755" _type="Insert" date="Tue Mar 29 19:52:59 EDT 2022" docASTNodeCount="916" docActiveCodeLength="6651" docExpressionCount="668" docLength="7168" length="18" offset="3552" repeat="13" starttimestamp="1648594670066" timestamp="3309134" timestamp2="3311460">
    <text><![CDATA[
			print(client)]]></text>
  </DocumentChange>
  <DocumentChange __id="782" _type="Delete" date="Tue Mar 29 19:53:02 EDT 2022" docASTNodeCount="912" docActiveCodeLength="6638" docExpressionCount="665" docLength="7155" endLine="90" length="13" offset="3557" repeat="13" startLine="90" starttimestamp="1648594670066" timestamp="3312591" timestamp2="3314239">
    <text><![CDATA[print(client)]]></text>
  </DocumentChange>
  <DocumentChange __id="808" _type="Insert" date="Tue Mar 29 19:53:04 EDT 2022" docASTNodeCount="916" docActiveCodeLength="6648" docExpressionCount="668" docLength="7165" length="10" offset="3557" repeat="10" starttimestamp="1648594670066" timestamp="3314369" timestamp2="3316303">
    <text><![CDATA[system.out]]></text>
  </DocumentChange>
  <DocumentChange __id="827" _type="Replace" date="Tue Mar 29 19:53:06 EDT 2022" docASTNodeCount="916" docActiveCodeLength="6648" docExpressionCount="668" docLength="7165" endLine="90" insertionLength="6" int_docASTNodeCount="912" int_docActiveCodeLength="6642" int_docExpressionCount="665" int_docLength="7159" length="6" offset="3557" startLine="90" starttimestamp="1648594670066" timestamp="3316348">
    <deletedText><![CDATA[system]]></deletedText>
    <insertedText><![CDATA[System]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="828" _type="Replace" date="Tue Mar 29 19:53:06 EDT 2022" docASTNodeCount="912" docActiveCodeLength="6649" docExpressionCount="665" docLength="7166" endLine="90" insertionLength="4" int_docASTNodeCount="914" int_docActiveCodeLength="6645" int_docExpressionCount="666" int_docLength="7162" length="3" offset="3564" startLine="90" starttimestamp="1648594670066" timestamp="3316386">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="831" _type="Insert" date="Tue Mar 29 19:53:06 EDT 2022" docASTNodeCount="918" docActiveCodeLength="6650" docExpressionCount="670" docLength="7167" length="1" offset="3568" starttimestamp="1648594670066" timestamp="3316787">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="834" _type="Replace" date="Tue Mar 29 19:53:08 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6658" docExpressionCount="671" docLength="7175" endLine="90" insertionLength="9" int_docASTNodeCount="912" int_docActiveCodeLength="6649" int_docExpressionCount="665" int_docLength="7166" length="1" offset="3568" startLine="90" starttimestamp="1648594670066" timestamp="3318110">
    <deletedText><![CDATA[p]]></deletedText>
    <insertedText><![CDATA[print(b);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="839" _type="Insert" date="Tue Mar 29 19:53:10 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6660" docExpressionCount="671" docLength="7177" length="2" offset="3573" repeat="2" starttimestamp="1648594670066" timestamp="3320045" timestamp2="3320231">
    <text><![CDATA[ln]]></text>
  </DocumentChange>
  <DocumentChange __id="845" _type="Delete" date="Tue Mar 29 19:53:11 EDT 2022" docASTNodeCount="918" docActiveCodeLength="6658" docExpressionCount="670" docLength="7175" endLine="90" length="2" offset="3575" repeat="2" startLine="90" starttimestamp="1648594670066" timestamp="3321457" timestamp2="3321594">
    <text><![CDATA[(b]]></text>
  </DocumentChange>
  <DocumentChange __id="849" _type="Insert" date="Tue Mar 29 19:53:11 EDT 2022" docASTNodeCount="918" docActiveCodeLength="6659" docExpressionCount="670" docLength="7176" length="1" offset="3575" starttimestamp="1648594670066" timestamp="3321853">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="851" _type="Delete" date="Tue Mar 29 19:53:12 EDT 2022" docASTNodeCount="918" docActiveCodeLength="6658" docExpressionCount="670" docLength="7175" endLine="90" length="1" offset="3575" startLine="90" starttimestamp="1648594670066" timestamp="3322318">
    <text><![CDATA[c]]></text>
  </DocumentChange>
  <DocumentChange __id="853" _type="Insert" date="Tue Mar 29 19:53:12 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6666" docExpressionCount="671" docLength="7183" length="8" offset="3575" repeat="7" starttimestamp="1648594670066" timestamp="3322566" timestamp2="3323809">
    <text><![CDATA[(client)]]></text>
  </DocumentChange>
  <DocumentChange __id="867" _type="Delete" date="Tue Mar 29 19:53:14 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6665" docExpressionCount="671" docLength="7182" endLine="90" length="1" offset="3582" startLine="90" starttimestamp="1648594670066" timestamp="3324317">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="930" _type="PauseCommand" date="Tue Mar 29 19:54:41 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="3411754">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[24194]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="944" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 19:55:08 EDT 2022" starttimestamp="1648594670066" timestamp="3437983" />
  <Command __id="946" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:55:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3438026" type="Debug" />
  <Command __id="947" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:55:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3438026" type="Debug" />
  <Command __id="948" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 19:55:08 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="3438026" type="Run" />
  <Command __id="929" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:54:41 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="3411754">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="950" _type="PauseCommand" date="Tue Mar 29 19:55:11 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3441679">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3653]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="951" _type="MoveCaretCommand" caretOffset="3582" date="Tue Mar 29 19:55:11 EDT 2022" docOffset="3582" starttimestamp="1648594670066" timestamp="3441793" />
  <Command __id="949" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:55:11 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6665" docExpressionCount="671" docLength="7182" projectName="A5" starttimestamp="1648594670066" timestamp="3441679">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			"), Diff(INSERT,"System.out.println(client);¶			"), Diff(EQUAL,"if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println(""), Diff(DELETE,"Command"), Diff(INSERT,"IPC Mechanism"), Diff(EQUAL," recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)
			throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="953" _type="PauseCommand" date="Tue Mar 29 19:55:18 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3448686">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6892]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="954" _type="MoveCaretCommand" caretOffset="973" date="Tue Mar 29 19:55:18 EDT 2022" docOffset="973" starttimestamp="1648594670066" timestamp="3448775" />
  <Command __id="952" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:55:18 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="3448685">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="956" _type="PauseCommand" date="Tue Mar 29 19:55:38 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="3468884">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[20109]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="957" _type="MoveCaretCommand" caretOffset="3582" date="Tue Mar 29 19:55:39 EDT 2022" docOffset="3582" starttimestamp="1648594670066" timestamp="3468975" />
  <Command __id="959" _type="PauseCommand" date="Tue Mar 29 19:56:15 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="3505108">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[36133]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="958" _type="SelectTextCommand" caretOffset="3557" date="Tue Mar 29 19:56:15 EDT 2022" end="3584" start="3557" starttimestamp="1648594670066" timestamp="3505108" />
  <Command __id="960" _type="CopyCommand" date="Tue Mar 29 19:56:16 EDT 2022" starttimestamp="1648594670066" timestamp="3506077" />
  <Command __id="961" _type="MoveCaretCommand" caretOffset="3491" date="Tue Mar 29 19:56:17 EDT 2022" docOffset="3491" starttimestamp="1648594670066" timestamp="3507076" />
  <Command __id="963" _type="InsertStringCommand" date="Tue Mar 29 19:56:17 EDT 2022" starttimestamp="1648594670066" timestamp="3507582" timestamp2="3507582">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="965" _type="PasteCommand" date="Tue Mar 29 19:56:18 EDT 2022" starttimestamp="1648594670066" timestamp="3508219" />
  <Command __id="966" _type="MoveCaretCommand" caretOffset="3497" date="Tue Mar 29 19:56:18 EDT 2022" docOffset="3497" starttimestamp="1648594670066" timestamp="3508610" />
  <Command __id="968" _type="PauseCommand" date="Tue Mar 29 19:56:21 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3511509">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2899]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="967" _type="SelectTextCommand" caretOffset="3564" date="Tue Mar 29 19:56:21 EDT 2022" end="3578" start="3564" starttimestamp="1648594670066" timestamp="3511509" />
  <Command __id="969" _type="CopyCommand" date="Tue Mar 29 19:56:21 EDT 2022" starttimestamp="1648594670066" timestamp="3511637" />
  <Command __id="971" _type="PauseCommand" date="Tue Mar 29 19:56:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3513727">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2090]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1004" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3541727" type="Run" />
  <Command __id="1006" _type="ConsoleOutput" date="Tue Mar 29 19:56:51 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3541916" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.8797167329048325 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5234730647955128"), Diff(INSERT,"Server0<-->Generic Client:0.8797167329048325 (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1007" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3541975" type="Run" />
  <Command __id="1008" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3542050" type="Run" />
  <Command __id="1009" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3542109" type="Run" />
  <Command __id="1010" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3542207" type="Run" />
  <Command __id="1011" _type="ConsoleOutput" date="Tue Mar 29 19:56:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3542229" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.8797167329048325 (Open"), Diff(INSERT,"Client registered GIPC¶Client register"), Diff(EQUAL,"ed"), Diff(DELETE,")"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1012" _type="ConsoleOutput" date="Tue Mar 29 19:56:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3542515" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC¶Client registered"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1013" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3542621" type="Run" />
  <Command __id="1014" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3542622" type="Run" />
  <Command __id="1015" _type="ShellCommand" date="Tue Mar 29 19:56:53 EDT 2022" starttimestamp="1648594670066" timestamp="3543365" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1016" _type="ShellCommand" date="Tue Mar 29 19:56:53 EDT 2022" starttimestamp="1648594670066" timestamp="3543796" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1017" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3543881" type="Run" />
  <Command __id="1018" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3544197" type="Run" />
  <Command __id="1019" _type="ConsoleOutput" date="Tue Mar 29 19:56:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3544199" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.5234730647955128 (Opened)
Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner o"), Diff(INSERT,"Server0<-->Generic Client:0.5234730647955128 (O"), Diff(EQUAL,"pened"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1020" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3544237" type="Run" />
  <Command __id="1021" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:56:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3544296" type="Run" />
  <Command __id="1022" _type="ConsoleOutput" date="Tue Mar 29 19:56:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3544458" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.5234730647955128 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1023" _type="ConsoleOutput" date="Tue Mar 29 19:56:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3544464" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1025" _type="PauseCommand" date="Tue Mar 29 19:56:57 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3547429">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2965]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1024" _type="ShellCommand" date="Tue Mar 29 19:56:57 EDT 2022" starttimestamp="1648594670066" timestamp="3547429" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1027" _type="PauseCommand" date="Tue Mar 29 19:57:07 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3556943">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9514]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1036" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:57:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3574242" type="Run" />
  <Command __id="1038" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 19:57:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3574274" type="Run" />
  <Command __id="1040" _type="PauseCommand" date="Tue Mar 29 19:57:48 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="3598672">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[24398]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1039" _type="MoveCaretCommand" caretOffset="1632" date="Tue Mar 29 19:57:48 EDT 2022" docOffset="1632" starttimestamp="1648594670066" timestamp="3598672" />
  <Command __id="1042" _type="PauseCommand" date="Tue Mar 29 19:57:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3600273">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1601]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="1041" _type="BalloonCommand" date="Tue Mar 29 19:57:50 EDT 2022" message="*******************************************
Worked 10 minutes(fixed)/36 minutes(context based) from
Tue Mar 29 18:58:08 EDT 2022 to Tue Mar 29 19:57:48 EDT 2022
Edited 1 Projects: 
	A5
Edited 2 Files: 
	C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java
	C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java
Number of insert: 54
Number of delete: 50
" starttimestamp="1648594670066" timestamp="3600273">
    <fineGrainedWorkTime><![CDATA[36]]></fineGrainedWorkTime>
    <insert><![CDATA[54]]></insert>
    <startTime><![CDATA[1648594688150]]></startTime>
    <endTime><![CDATA[1648598268738]]></endTime>
    <workTime><![CDATA[10]]></workTime>
    <delete><![CDATA[50]]></delete>
  </Command>
  <Command __id="955" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:55:38 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6665" docExpressionCount="671" docLength="7182" projectName="A5" starttimestamp="1648594670066" timestamp="3468884">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="962" _type="Insert" date="Tue Mar 29 19:56:17 EDT 2022" docASTNodeCount="919" docActiveCodeLength="6667" docExpressionCount="671" docLength="7184" length="2" offset="3491" starttimestamp="1648594670066" timestamp="3507580">
    <text><![CDATA[		]]></text>
  </DocumentChange>
  <DocumentChange __id="964" _type="Replace" date="Tue Mar 29 19:56:18 EDT 2022" docASTNodeCount="926" docActiveCodeLength="6694" docExpressionCount="677" docLength="7211" endLine="88" insertionLength="29" int_docASTNodeCount="919" int_docActiveCodeLength="6665" int_docExpressionCount="671" int_docLength="7182" length="2" offset="3491" startLine="88" starttimestamp="1648594670066" timestamp="3508209">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		System.out.println(client);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="972" _type="Replace" date="Tue Mar 29 19:56:23 EDT 2022" docASTNodeCount="926" docActiveCodeLength="6702" docExpressionCount="677" docLength="7219" endLine="88" insertionLength="14" int_docASTNodeCount="925" int_docActiveCodeLength="6688" int_docExpressionCount="676" int_docLength="7205" length="6" offset="3512" startLine="88" starttimestamp="1648594670066" timestamp="3513815">
    <deletedText><![CDATA[client]]></deletedText>
    <insertedText><![CDATA[clientListGIPC]]></insertedText>
  </DocumentChange>
  <Command __id="1044" _type="PauseCommand" date="Tue Mar 29 19:58:01 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="3611281">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[11008]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1045" _type="MoveCaretCommand" caretOffset="973" date="Tue Mar 29 19:58:01 EDT 2022" docOffset="973" starttimestamp="1648594670066" timestamp="3611385" />
  <Command __id="1048" _type="PauseCommand" date="Tue Mar 29 19:58:06 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3616689">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5304]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1047" _type="ShellCommand" date="Tue Mar 29 19:58:06 EDT 2022" starttimestamp="1648594670066" timestamp="3616689" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1050" _type="PauseCommand" date="Tue Mar 29 19:58:08 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3618398">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1709]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="1049" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 19:58:08 EDT 2022" forward="false" matchWord="false" offset="973" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="3618398" wrapSearch="false">
    <searchString><![CDATA[register]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1052" _type="PauseCommand" date="Tue Mar 29 19:58:11 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3621100">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2702]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="1051" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 19:58:11 EDT 2022" forward="true" matchWord="false" offset="973" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="3621100" wrapSearch="false">
    <searchString><![CDATA[register]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1054" _type="PauseCommand" date="Tue Mar 29 19:58:12 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3622286">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1186]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1053" _type="ShellCommand" date="Tue Mar 29 19:58:12 EDT 2022" starttimestamp="1648594670066" timestamp="3622286" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1055" _type="MoveCaretCommand" caretOffset="988" date="Tue Mar 29 19:58:13 EDT 2022" docOffset="988" starttimestamp="1648594670066" timestamp="3623130" />
  <Command __id="1043" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:58:01 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="3611281">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1057" _type="PauseCommand" date="Tue Mar 29 19:58:15 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3625051">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1921]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1058" _type="MoveCaretCommand" caretOffset="7699" date="Tue Mar 29 19:58:15 EDT 2022" docOffset="7699" starttimestamp="1648594670066" timestamp="3625142" />
  <Command __id="1061" _type="PauseCommand" date="Tue Mar 29 19:58:17 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3627033">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1891]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1060" _type="ShellCommand" date="Tue Mar 29 19:58:17 EDT 2022" starttimestamp="1648594670066" timestamp="3627033" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1063" _type="PauseCommand" date="Tue Mar 29 19:58:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3628562">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1529]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="1062" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 19:58:18 EDT 2022" forward="true" matchWord="false" offset="7699" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="3628562" wrapSearch="false">
    <searchString><![CDATA[register]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1065" _type="PauseCommand" date="Tue Mar 29 19:58:21 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3631359">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2797]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="1064" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 19:58:21 EDT 2022" forward="false" matchWord="false" offset="7699" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="3631359" wrapSearch="false">
    <searchString><![CDATA[register]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1067" _type="PauseCommand" date="Tue Mar 29 19:58:26 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3636841">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[5482]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="1066" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 19:58:26 EDT 2022" forward="false" matchWord="false" offset="6404" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="3636841" wrapSearch="false">
    <searchString><![CDATA[register]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="1069" _type="PauseCommand" date="Tue Mar 29 19:58:29 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3639157">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2316]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1068" _type="ShellCommand" date="Tue Mar 29 19:58:29 EDT 2022" starttimestamp="1648594670066" timestamp="3639157" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1071" _type="PauseCommand" date="Tue Mar 29 19:58:50 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="3660414">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21257]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1070" _type="MoveCaretCommand" caretOffset="5336" date="Tue Mar 29 19:58:50 EDT 2022" docOffset="5336" starttimestamp="1648594670066" timestamp="3660414" />
  <Command __id="1056" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:58:15 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8299" docExpressionCount="768" docLength="9070" projectName="A5" starttimestamp="1648594670066" timestamp="3625051">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		if(mechanism.equals("GIPC")) {¶			"), Diff(DELETE,"//TODO if IPC mechanism changes¶"), Diff(EQUAL,"			¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		if(mechanism.equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="1073" _type="PauseCommand" date="Tue Mar 29 19:59:40 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="3710758">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[50344]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1074" _type="SelectTextCommand" caretOffset="889" date="Tue Mar 29 19:59:40 EDT 2022" end="889" start="880" starttimestamp="1648594670066" timestamp="3710918" />
  <Command __id="1076" _type="PauseCommand" date="Tue Mar 29 20:00:06 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="3736029">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[25111]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1075" _type="ConsoleInput" date="Tue Mar 29 20:00:06 EDT 2022" starttimestamp="1648594670066" timestamp="3736029" type="Exception">
    <outputString><![CDATA[i RMI
]]></outputString>
  </Command>
  <Command __id="1077" _type="ConsoleOutput" date="Tue Mar 29 20:00:06 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3736081" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Command recieved for broadcast: move 50 -50¶[]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1079" _type="PauseCommand" date="Tue Mar 29 20:00:14 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3744375">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8294]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1078" _type="ConsoleInput" date="Tue Mar 29 20:00:14 EDT 2022" starttimestamp="1648594670066" timestamp="3744375" type="Exception">
    <outputString><![CDATA[i RMI
]]></outputString>
  </Command>
  <Command __id="1080" _type="ConsoleOutput" date="Tue Mar 29 20:00:14 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3744443" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="1082" _type="PauseCommand" date="Tue Mar 29 20:00:19 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3749561">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5118]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1086" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:00:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3764600" type="Run" />
  <Command __id="1072" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 19:59:40 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1253" docExpressionCount="90" docLength="1253" projectName="A5" starttimestamp="1648594670066" timestamp="3710758">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="1089" _type="PauseCommand" date="Tue Mar 29 20:00:45 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="3775054">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10454]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1090" _type="MoveCaretCommand" caretOffset="1632" date="Tue Mar 29 20:00:45 EDT 2022" docOffset="1632" starttimestamp="1648594670066" timestamp="3775179" />
  <Command __id="1092" _type="PauseCommand" date="Tue Mar 29 20:00:47 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3777235">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2056]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1088" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:00:45 EDT 2022" docASTNodeCount="926" docActiveCodeLength="6702" docExpressionCount="677" docLength="7219" projectName="A5" starttimestamp="1648594670066" timestamp="3775054">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶"), Diff(INSERT,"		System.out.println(clientListGIPC);"), Diff(EQUAL,"¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)
			throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="1091" _type="MoveCaretCommand" caretOffset="2949" date="Tue Mar 29 20:00:47 EDT 2022" docOffset="2949" starttimestamp="1648594670066" timestamp="3777235" />
  <Command __id="1094" _type="InsertStringCommand" date="Tue Mar 29 20:00:47 EDT 2022" starttimestamp="1648594670066" timestamp="3777504" timestamp2="3777504">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1097" _type="PauseCommand" date="Tue Mar 29 20:00:48 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3778560">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1056]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1096" _type="InsertStringCommand" date="Tue Mar 29 20:00:48 EDT 2022" starttimestamp="1648594670066" timestamp="3778560" timestamp2="3778560">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1099" _type="InsertStringCommand" date="Tue Mar 29 20:00:49 EDT 2022" starttimestamp="1648594670066" timestamp="3779102" timestamp2="3779102">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1101" _type="InsertStringCommand" date="Tue Mar 29 20:00:49 EDT 2022" starttimestamp="1648594670066" timestamp="3779249" timestamp2="3779249">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1103" _type="InsertStringCommand" date="Tue Mar 29 20:00:49 EDT 2022" starttimestamp="1648594670066" timestamp="3779357" timestamp2="3779357">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1105" _type="InsertStringCommand" date="Tue Mar 29 20:00:49 EDT 2022" starttimestamp="1648594670066" timestamp="3779461" timestamp2="3779461">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1107" _type="InsertStringCommand" date="Tue Mar 29 20:00:49 EDT 2022" starttimestamp="1648594670066" timestamp="3779581" timestamp2="3779581">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1109" _type="InsertStringCommand" date="Tue Mar 29 20:00:49 EDT 2022" starttimestamp="1648594670066" timestamp="3779703" timestamp2="3779703">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1111" _type="InsertStringCommand" date="Tue Mar 29 20:00:49 EDT 2022" starttimestamp="1648594670066" timestamp="3779919" timestamp2="3779919">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1112" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:00:49 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3779922" />
  <DocumentChange __id="1093" _type="Insert" date="Tue Mar 29 20:00:47 EDT 2022" docASTNodeCount="928" docActiveCodeLength="6714" docExpressionCount="679" docLength="7231" length="12" offset="2949" repeat="9" starttimestamp="1648594670066" timestamp="3777496" timestamp2="3779915">
    <text><![CDATA[
		aClient.]]></text>
  </DocumentChange>
  <Command __id="1114" _type="PauseCommand" date="Tue Mar 29 20:00:56 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3786566">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[6643]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1113" _type="Insert" date="Tue Mar 29 20:00:56 EDT 2022" docASTNodeCount="928" docActiveCodeLength="6715" docExpressionCount="679" docLength="7232" length="1" offset="2961" starttimestamp="1648594670066" timestamp="3786565">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1115" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:00:56 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3786585" />
  <DocumentChange __id="1116" _type="Delete" date="Tue Mar 29 20:00:57 EDT 2022" docASTNodeCount="928" docActiveCodeLength="6714" docExpressionCount="679" docLength="7231" endLine="72" length="1" offset="2961" startLine="72" starttimestamp="1648594670066" timestamp="3787261">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1117" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:00:57 EDT 2022" starttimestamp="1648594670066" timestamp="3787265" />
  <DocumentChange __id="1118" _type="Insert" date="Tue Mar 29 20:00:57 EDT 2022" docASTNodeCount="929" docActiveCodeLength="6715" docExpressionCount="679" docLength="7232" length="1" offset="2961" starttimestamp="1648594670066" timestamp="3787890">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <Command __id="1119" _type="InsertStringCommand" date="Tue Mar 29 20:00:57 EDT 2022" starttimestamp="1648594670066" timestamp="3787897" timestamp2="3787897">
    <data><![CDATA[N]]></data>
  </Command>
  <DocumentChange __id="1120" _type="Delete" date="Tue Mar 29 20:00:58 EDT 2022" docASTNodeCount="928" docActiveCodeLength="6714" docExpressionCount="679" docLength="7231" endLine="72" length="1" offset="2961" startLine="72" starttimestamp="1648594670066" timestamp="3788537">
    <text><![CDATA[N]]></text>
  </DocumentChange>
  <Command __id="1121" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:00:58 EDT 2022" starttimestamp="1648594670066" timestamp="3788539" />
  <Command __id="1123" _type="InsertStringCommand" date="Tue Mar 29 20:00:59 EDT 2022" starttimestamp="1648594670066" timestamp="3789214" timestamp2="3789214">
    <data><![CDATA[g]]></data>
  </Command>
  <DocumentChange __id="1122" _type="Insert" date="Tue Mar 29 20:00:59 EDT 2022" docASTNodeCount="932" docActiveCodeLength="6715" docExpressionCount="680" docLength="7232" length="1" offset="2961" starttimestamp="1648594670066" timestamp="3789204">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <Command __id="1125" _type="PauseCommand" date="Tue Mar 29 20:01:00 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3790309">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1095]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="1124" _type="Delete" date="Tue Mar 29 20:01:00 EDT 2022" docASTNodeCount="926" docActiveCodeLength="6706" docExpressionCount="677" docLength="7223" endLine="72" length="9" offset="2953" repeat="9" startLine="72" starttimestamp="1648594670066" timestamp="3790309" timestamp2="3792886">
    <text><![CDATA[aClient.g]]></text>
  </DocumentChange>
  <Command __id="1126" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:00 EDT 2022" starttimestamp="1648594670066" timestamp="3790314" />
  <Command __id="1128" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:00 EDT 2022" starttimestamp="1648594670066" timestamp="3790532" />
  <Command __id="1131" _type="PauseCommand" date="Tue Mar 29 20:01:01 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3791919">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1387]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1130" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:01 EDT 2022" starttimestamp="1648594670066" timestamp="3791919" />
  <Command __id="1133" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:02 EDT 2022" starttimestamp="1648594670066" timestamp="3792065" />
  <Command __id="1135" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:02 EDT 2022" starttimestamp="1648594670066" timestamp="3792241" />
  <Command __id="1137" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:02 EDT 2022" starttimestamp="1648594670066" timestamp="3792411" />
  <Command __id="1139" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:02 EDT 2022" starttimestamp="1648594670066" timestamp="3792581" />
  <Command __id="1141" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:02 EDT 2022" starttimestamp="1648594670066" timestamp="3792738" />
  <Command __id="1143" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:02 EDT 2022" starttimestamp="1648594670066" timestamp="3792889" />
  <DocumentChange __id="1144" _type="Insert" date="Tue Mar 29 20:01:03 EDT 2022" docASTNodeCount="930" docActiveCodeLength="6720" docExpressionCount="680" docLength="7237" length="14" offset="2953" repeat="13" starttimestamp="1648594670066" timestamp="3793297" timestamp2="3797023">
    <text><![CDATA[print(aClient)]]></text>
  </DocumentChange>
  <Command __id="1145" _type="InsertStringCommand" date="Tue Mar 29 20:01:03 EDT 2022" starttimestamp="1648594670066" timestamp="3793302" timestamp2="3793302">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="1147" _type="InsertStringCommand" date="Tue Mar 29 20:01:03 EDT 2022" starttimestamp="1648594670066" timestamp="3793512" timestamp2="3793512">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1149" _type="InsertStringCommand" date="Tue Mar 29 20:01:03 EDT 2022" starttimestamp="1648594670066" timestamp="3793607" timestamp2="3793607">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1151" _type="InsertStringCommand" date="Tue Mar 29 20:01:03 EDT 2022" starttimestamp="1648594670066" timestamp="3793698" timestamp2="3793698">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1153" _type="InsertStringCommand" date="Tue Mar 29 20:01:03 EDT 2022" starttimestamp="1648594670066" timestamp="3793768" timestamp2="3793768">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1155" _type="InsertStringCommand" date="Tue Mar 29 20:01:04 EDT 2022" starttimestamp="1648594670066" timestamp="3794057" timestamp2="3794057">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1158" _type="PauseCommand" date="Tue Mar 29 20:01:05 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3795402">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1345]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1157" _type="InsertStringCommand" date="Tue Mar 29 20:01:05 EDT 2022" starttimestamp="1648594670066" timestamp="3795402" timestamp2="3795402">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1160" _type="InsertStringCommand" date="Tue Mar 29 20:01:06 EDT 2022" starttimestamp="1648594670066" timestamp="3795974" timestamp2="3795974">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1162" _type="InsertStringCommand" date="Tue Mar 29 20:01:06 EDT 2022" starttimestamp="1648594670066" timestamp="3796454" timestamp2="3796454">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1164" _type="InsertStringCommand" date="Tue Mar 29 20:01:06 EDT 2022" starttimestamp="1648594670066" timestamp="3796619" timestamp2="3796619">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1166" _type="InsertStringCommand" date="Tue Mar 29 20:01:06 EDT 2022" starttimestamp="1648594670066" timestamp="3796719" timestamp2="3796719">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1168" _type="InsertStringCommand" date="Tue Mar 29 20:01:06 EDT 2022" starttimestamp="1648594670066" timestamp="3796916" timestamp2="3796916">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1170" _type="InsertStringCommand" date="Tue Mar 29 20:01:07 EDT 2022" starttimestamp="1648594670066" timestamp="3797026" timestamp2="3797026">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1171" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 20:01:07 EDT 2022" starttimestamp="1648594670066" timestamp="3797768" />
  <DocumentChange __id="1172" _type="Delete" date="Tue Mar 29 20:01:08 EDT 2022" docASTNodeCount="926" docActiveCodeLength="6706" docExpressionCount="677" docLength="7223" endLine="72" length="14" offset="2953" repeat="14" startLine="72" starttimestamp="1648594670066" timestamp="3798381" timestamp2="3799803">
    <text><![CDATA[print(aClient)]]></text>
  </DocumentChange>
  <Command __id="1173" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="3798387" />
  <Command __id="1175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="3798889" />
  <Command __id="1177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="3798920" />
  <Command __id="1179" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3798948" />
  <Command __id="1181" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3798980" />
  <Command __id="1183" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799010" />
  <Command __id="1185" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799039" />
  <Command __id="1187" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799070" />
  <Command __id="1189" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799100" />
  <Command __id="1191" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799131" />
  <Command __id="1193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799160" />
  <Command __id="1195" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799307" />
  <Command __id="1197" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799470" />
  <Command __id="1199" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="3799805" />
  <Command __id="1201" _type="InsertStringCommand" date="Tue Mar 29 20:01:10 EDT 2022" starttimestamp="1648594670066" timestamp="3800037" timestamp2="3800037">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1203" _type="InsertStringCommand" date="Tue Mar 29 20:01:10 EDT 2022" starttimestamp="1648594670066" timestamp="3800312" timestamp2="3800312">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="1205" _type="InsertStringCommand" date="Tue Mar 29 20:01:10 EDT 2022" starttimestamp="1648594670066" timestamp="3800444" timestamp2="3800444">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1207" _type="InsertStringCommand" date="Tue Mar 29 20:01:10 EDT 2022" starttimestamp="1648594670066" timestamp="3800671" timestamp2="3800671">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1209" _type="InsertStringCommand" date="Tue Mar 29 20:01:10 EDT 2022" starttimestamp="1648594670066" timestamp="3800727" timestamp2="3800727">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1211" _type="InsertStringCommand" date="Tue Mar 29 20:01:11 EDT 2022" starttimestamp="1648594670066" timestamp="3801141" timestamp2="3801141">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1213" _type="InsertStringCommand" date="Tue Mar 29 20:01:11 EDT 2022" starttimestamp="1648594670066" timestamp="3801374" timestamp2="3801374">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1214" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:01:11 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3801378" />
  <Command __id="1216" _type="PauseCommand" date="Tue Mar 29 20:01:13 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3803240">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1862]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1215" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:01:13 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3803240" />
  <Command __id="1217" _type="SelectTextCommand" caretOffset="2953" date="Tue Mar 29 20:01:14 EDT 2022" end="2960" start="2953" starttimestamp="1648594670066" timestamp="3803968" />
  <Command __id="1219" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:01:14 EDT 2022" starttimestamp="1648594670066" timestamp="3804325" />
  <Command __id="1221" _type="PauseCommand" date="Tue Mar 29 20:01:15 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3805630">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1305]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1220" _type="MoveCaretCommand" caretOffset="3034" date="Tue Mar 29 20:01:15 EDT 2022" docOffset="3034" starttimestamp="1648594670066" timestamp="3805630" />
  <Command __id="1223" _type="InsertStringCommand" date="Tue Mar 29 20:01:15 EDT 2022" starttimestamp="1648594670066" timestamp="3805857" timestamp2="3805857">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1225" _type="InsertStringCommand" date="Tue Mar 29 20:01:16 EDT 2022" starttimestamp="1648594670066" timestamp="3806202" timestamp2="3806202">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1227" _type="InsertStringCommand" date="Tue Mar 29 20:01:16 EDT 2022" starttimestamp="1648594670066" timestamp="3806332" timestamp2="3806332">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="1229" _type="InsertStringCommand" date="Tue Mar 29 20:01:16 EDT 2022" starttimestamp="1648594670066" timestamp="3806500" timestamp2="3806500">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1231" _type="InsertStringCommand" date="Tue Mar 29 20:01:16 EDT 2022" starttimestamp="1648594670066" timestamp="3806719" timestamp2="3806719">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1233" _type="InsertStringCommand" date="Tue Mar 29 20:01:17 EDT 2022" starttimestamp="1648594670066" timestamp="3807126" timestamp2="3807126">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1235" _type="InsertStringCommand" date="Tue Mar 29 20:01:17 EDT 2022" starttimestamp="1648594670066" timestamp="3807225" timestamp2="3807225">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1237" _type="InsertStringCommand" date="Tue Mar 29 20:01:17 EDT 2022" starttimestamp="1648594670066" timestamp="3807427" timestamp2="3807427">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1238" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:01:17 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3807431" />
  <Command __id="1243" _type="PauseCommand" date="Tue Mar 29 20:01:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3808929">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1498]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <DocumentChange __id="1200" _type="Insert" date="Tue Mar 29 20:01:10 EDT 2022" docASTNodeCount="928" docActiveCodeLength="6713" docExpressionCount="679" docLength="7230" length="7" offset="2953" repeat="7" starttimestamp="1648594670066" timestamp="3800033" timestamp2="3801370">
    <text><![CDATA[System.]]></text>
  </DocumentChange>
  <DocumentChange __id="1218" _type="Delete" date="Tue Mar 29 20:01:14 EDT 2022" docASTNodeCount="926" docActiveCodeLength="6706" docExpressionCount="677" docLength="7223" endLine="72" length="7" offset="2953" startLine="72" starttimestamp="1648594670066" timestamp="3804320">
    <text><![CDATA[System.]]></text>
  </DocumentChange>
  <Command __id="1242" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:01:18 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3808929" />
  <Command __id="1244" _type="InsertStringCommand" date="Tue Mar 29 20:01:18 EDT 2022" starttimestamp="1648594670066" timestamp="3808933" timestamp2="3808933">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1246" _type="InsertStringCommand" date="Tue Mar 29 20:01:19 EDT 2022" starttimestamp="1648594670066" timestamp="3809730" timestamp2="3809730">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1247" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:01:19 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3809734" />
  <Command __id="1258" _type="PauseCommand" date="Tue Mar 29 20:01:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3813166">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3432]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1257" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:01:23 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3813166" />
  <Command __id="1260" _type="InsertStringCommand" date="Tue Mar 29 20:01:23 EDT 2022" starttimestamp="1648594670066" timestamp="3813617" timestamp2="3813617">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1262" _type="InsertStringCommand" date="Tue Mar 29 20:01:23 EDT 2022" starttimestamp="1648594670066" timestamp="3813868" timestamp2="3813868">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1264" _type="InsertStringCommand" date="Tue Mar 29 20:01:24 EDT 2022" starttimestamp="1648594670066" timestamp="3814009" timestamp2="3814009">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1266" _type="InsertStringCommand" date="Tue Mar 29 20:01:24 EDT 2022" starttimestamp="1648594670066" timestamp="3814067" timestamp2="3814067">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1268" _type="InsertStringCommand" date="Tue Mar 29 20:01:24 EDT 2022" starttimestamp="1648594670066" timestamp="3814215" timestamp2="3814215">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1270" _type="InsertStringCommand" date="Tue Mar 29 20:01:24 EDT 2022" starttimestamp="1648594670066" timestamp="3814342" timestamp2="3814342">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1272" _type="PauseCommand" date="Tue Mar 29 20:01:25 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3815694">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1352]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1320" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:01:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3842071" type="Run" />
  <Command __id="1322" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:01:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3842268" type="Run" />
  <Command __id="1323" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:01:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3842352" type="Run" />
  <Command __id="1324" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:01:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3842387" type="Run" />
  <Command __id="1325" _type="ConsoleOutput" date="Tue Mar 29 20:01:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3842412" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.01778245517945276 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@3f5807f8
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.01778245517945276"), Diff(INSERT,"Server0<-->Generic Client:0.01778245517945276 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@3f5807f8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1326" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:01:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3842452" type="Run" />
  <Command __id="1327" _type="ConsoleOutput" date="Tue Mar 29 20:01:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3842628" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.01778245517945276 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@3f5807f8"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1328" _type="ConsoleOutput" date="Tue Mar 29 20:01:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3842631" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1330" _type="PauseCommand" date="Tue Mar 29 20:01:54 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3843988">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1357]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1334" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:02:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3857471" type="Run" />
  <Command __id="1337" _type="PauseCommand" date="Tue Mar 29 20:02:13 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="3863398">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5927]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1340" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:02:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3872394" type="Run" />
  <Command __id="1343" _type="PauseCommand" date="Tue Mar 29 20:02:26 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3876602">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4208]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1344" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:02:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3887421" type="Run" />
  <Command __id="1347" _type="PauseCommand" date="Tue Mar 29 20:02:47 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="3897455">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10034]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1346" _type="ShellCommand" date="Tue Mar 29 20:02:47 EDT 2022" starttimestamp="1648594670066" timestamp="3897455" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1348" _type="MoveCaretCommand" caretOffset="2861" date="Tue Mar 29 20:02:47 EDT 2022" docOffset="2861" starttimestamp="1648594670066" timestamp="3897545" />
  <Command __id="1350" _type="PauseCommand" date="Tue Mar 29 20:03:10 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="3919969">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[22424]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <DocumentChange __id="1222" _type="Insert" date="Tue Mar 29 20:01:15 EDT 2022" docASTNodeCount="933" docActiveCodeLength="6738" docExpressionCount="683" docLength="7255" length="32" offset="3034" repeat="28" starttimestamp="1648594670066" timestamp="3805850" timestamp2="3816189">
    <text><![CDATA[
		System.out.println(aClient);]]></text>
  </DocumentChange>
  <Command __id="1349" _type="MoveCaretCommand" caretOffset="3066" date="Tue Mar 29 20:03:10 EDT 2022" docOffset="3066" starttimestamp="1648594670066" timestamp="3919969" />
  <DocumentChange __id="1351" _type="Insert" date="Tue Mar 29 20:03:10 EDT 2022" docASTNodeCount="937" docActiveCodeLength="6752" docExpressionCount="686" docLength="7269" length="14" offset="3066" repeat="11" starttimestamp="1648594670066" timestamp="3920712" timestamp2="3923306">
    <text><![CDATA[
		System.out]]></text>
  </DocumentChange>
  <Command __id="1352" _type="InsertStringCommand" date="Tue Mar 29 20:03:10 EDT 2022" starttimestamp="1648594670066" timestamp="3920734" timestamp2="3920734">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1355" _type="PauseCommand" date="Tue Mar 29 20:03:11 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3921919">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1185]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1354" _type="InsertStringCommand" date="Tue Mar 29 20:03:11 EDT 2022" starttimestamp="1648594670066" timestamp="3921919" timestamp2="3921919">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1357" _type="InsertStringCommand" date="Tue Mar 29 20:03:12 EDT 2022" starttimestamp="1648594670066" timestamp="3922044" timestamp2="3922044">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="1359" _type="InsertStringCommand" date="Tue Mar 29 20:03:12 EDT 2022" starttimestamp="1648594670066" timestamp="3922129" timestamp2="3922129">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1361" _type="InsertStringCommand" date="Tue Mar 29 20:03:12 EDT 2022" starttimestamp="1648594670066" timestamp="3922285" timestamp2="3922285">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1363" _type="InsertStringCommand" date="Tue Mar 29 20:03:12 EDT 2022" starttimestamp="1648594670066" timestamp="3922436" timestamp2="3922436">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1365" _type="InsertStringCommand" date="Tue Mar 29 20:03:12 EDT 2022" starttimestamp="1648594670066" timestamp="3922652" timestamp2="3922652">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1367" _type="InsertStringCommand" date="Tue Mar 29 20:03:12 EDT 2022" starttimestamp="1648594670066" timestamp="3922789" timestamp2="3922789">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1368" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:03:12 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3922792" />
  <Command __id="1372" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:03:13 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3923573" />
  <DocumentChange __id="1373" _type="Replace" date="Tue Mar 29 20:03:13 EDT 2022" docASTNodeCount="937" docActiveCodeLength="6753" docExpressionCount="686" docLength="7270" endLine="76" insertionLength="4" int_docASTNodeCount="935" int_docActiveCodeLength="6749" int_docExpressionCount="684" int_docLength="7266" length="3" offset="3077" startLine="76" starttimestamp="1648594670066" timestamp="3923577">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <Command __id="1374" _type="InsertStringCommand" date="Tue Mar 29 20:03:13 EDT 2022" starttimestamp="1648594670066" timestamp="3923587" timestamp2="3923587">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1375" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:03:13 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3923616" />
  <Command __id="1385" _type="PauseCommand" date="Tue Mar 29 20:03:16 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3926547">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2707]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1384" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:03:16 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3926547" />
  <Command __id="1387" _type="PauseCommand" date="Tue Mar 29 20:03:20 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3930688">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[4141]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1386" _type="SelectTextCommand" caretOffset="1664" date="Tue Mar 29 20:03:20 EDT 2022" end="1678" start="1664" starttimestamp="1648594670066" timestamp="3930688" />
  <Command __id="1388" _type="CopyCommand" date="Tue Mar 29 20:03:20 EDT 2022" starttimestamp="1648594670066" timestamp="3930904" />
  <Command __id="1390" _type="PauseCommand" date="Tue Mar 29 20:03:25 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3935512">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[4608]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1389" _type="MoveCaretCommand" caretOffset="3089" date="Tue Mar 29 20:03:25 EDT 2022" docOffset="3089" starttimestamp="1648594670066" timestamp="3935512" />
  <Command __id="1392" _type="PasteCommand" date="Tue Mar 29 20:03:25 EDT 2022" starttimestamp="1648594670066" timestamp="3935800" />
  <Command __id="1393" _type="MoveCaretCommand" caretOffset="3104" date="Tue Mar 29 20:03:26 EDT 2022" docOffset="3104" starttimestamp="1648594670066" timestamp="3936641" />
  <Command __id="1395" _type="InsertStringCommand" date="Tue Mar 29 20:03:27 EDT 2022" starttimestamp="1648594670066" timestamp="3937188" timestamp2="3937188">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1396" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:03:27 EDT 2022" starttimestamp="1648594670066" timestamp="3937588" />
  <Command __id="1397" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:03:27 EDT 2022" starttimestamp="1648594670066" timestamp="3937677" />
  <Command __id="1398" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:03:27 EDT 2022" starttimestamp="1648594670066" timestamp="3937724" />
  <Command __id="1399" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:03:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3937806" type="Run" />
  <Command __id="1400" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:03:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3937806" type="Run" />
  <Command __id="1402" _type="PauseCommand" date="Tue Mar 29 20:03:29 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3939457">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1651]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1401" _type="MoveCaretCommand" caretOffset="3105" date="Tue Mar 29 20:03:29 EDT 2022" docOffset="3105" starttimestamp="1648594670066" timestamp="3939457" />
  <Command __id="1404" _type="PauseCommand" date="Tue Mar 29 20:03:31 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3940969">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1512]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1403" _type="MoveCaretCommand" caretOffset="3103" date="Tue Mar 29 20:03:31 EDT 2022" docOffset="3103" starttimestamp="1648594670066" timestamp="3940969" />
  <DocumentChange __id="1376" _type="Insert" date="Tue Mar 29 20:03:13 EDT 2022" docASTNodeCount="939" docActiveCodeLength="6762" docExpressionCount="688" docLength="7279" length="9" offset="3081" repeat="8" starttimestamp="1648594670066" timestamp="3923840" timestamp2="3925051">
    <text><![CDATA[println()]]></text>
  </DocumentChange>
  <DocumentChange __id="1391" _type="Insert" date="Tue Mar 29 20:03:25 EDT 2022" docASTNodeCount="940" docActiveCodeLength="6776" docExpressionCount="689" docLength="7293" length="14" offset="3089" starttimestamp="1648594670066" timestamp="3935796">
    <text><![CDATA[clientListGIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="1394" _type="Insert" date="Tue Mar 29 20:03:27 EDT 2022" docASTNodeCount="940" docActiveCodeLength="6777" docExpressionCount="689" docLength="7294" length="1" offset="3104" starttimestamp="1648594670066" timestamp="3937181">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="1406" _type="PauseCommand" date="Tue Mar 29 20:03:32 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3941979">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1010]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="1407" _type="InsertStringCommand" date="Tue Mar 29 20:03:32 EDT 2022" starttimestamp="1648594670066" timestamp="3941986" timestamp2="3941986">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1408" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:03:32 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="3941991" />
  <DocumentChange __id="1405" _type="Insert" date="Tue Mar 29 20:03:32 EDT 2022" docASTNodeCount="942" docActiveCodeLength="6779" docExpressionCount="691" docLength="7296" length="2" offset="3103" repeat="2" starttimestamp="1648594670066" timestamp="3941979" timestamp2="3942672">
    <text><![CDATA[.e]]></text>
  </DocumentChange>
  <Command __id="1411" _type="PauseCommand" date="Tue Mar 29 20:03:34 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3944614">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2623]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="1410" _type="Delete" date="Tue Mar 29 20:03:34 EDT 2022" docASTNodeCount="942" docActiveCodeLength="6778" docExpressionCount="690" docLength="7295" endLine="76" length="1" offset="3104" startLine="76" starttimestamp="1648594670066" timestamp="3944614">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <Command __id="1413" _type="PauseCommand" date="Tue Mar 29 20:03:36 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3946609">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[1995]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1412" _type="Insert" date="Tue Mar 29 20:03:36 EDT 2022" docASTNodeCount="942" docActiveCodeLength="6780" docExpressionCount="691" docLength="7297" length="2" offset="3104" repeat="2" starttimestamp="1648594670066" timestamp="3946609" timestamp2="3947247">
    <text><![CDATA[it]]></text>
  </DocumentChange>
  <Command __id="1416" _type="PauseCommand" date="Tue Mar 29 20:03:39 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3948946">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2336]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1420" _type="PauseCommand" date="Tue Mar 29 20:03:40 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3950206">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[1261]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1419" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:03:40 EDT 2022" starttimestamp="1648594670066" timestamp="3950206" />
  <Command __id="1421" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:03:40 EDT 2022" starttimestamp="1648594670066" timestamp="3950284" />
  <Command __id="1422" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:03:40 EDT 2022" starttimestamp="1648594670066" timestamp="3950325" />
  <Command __id="1423" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:03:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3950392" type="Run" />
  <Command __id="1424" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:03:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3950393" type="Run" />
  <Command __id="1425" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:03:40 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="3950434" />
  <Command __id="1427" _type="PauseCommand" date="Tue Mar 29 20:03:44 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="3954189">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3755]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1458" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:04:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3976047" type="Run" />
  <Command __id="1460" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:04:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3976252" type="Run" />
  <Command __id="1461" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:04:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3976358" type="Run" />
  <Command __id="1462" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:04:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3976398" type="Run" />
  <Command __id="1463" _type="ConsoleOutput" date="Tue Mar 29 20:04:06 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3976453" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.1522342246077002 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@2ab19710
[com.sun.proxy.$Proxy1@2ab19710]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.1522342246077002"), Diff(INSERT,"Server0<-->Generic Client:0.1522342246077002 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@2ab19710¶[com.sun.proxy.$Proxy1@2ab19710]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1464" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:04:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="3976469" type="Run" />
  <Command __id="1465" _type="ConsoleOutput" date="Tue Mar 29 20:04:06 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3976779" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.1522342246077002 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@2ab19710¶[com.sun.proxy.$Proxy1@2ab19710]"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1466" _type="ConsoleOutput" date="Tue Mar 29 20:04:06 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="3976783" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1468" _type="PauseCommand" date="Tue Mar 29 20:04:07 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="3977931">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1148]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1473" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:04:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4006390" type="Run" />
  <Command __id="1475" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:04:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4006423" type="Run" />
  <Command __id="1477" _type="PauseCommand" date="Tue Mar 29 20:04:51 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="4021052">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[14629]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1503" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 20:08:01 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4211002" type="Run" />
  <Command __id="1505" _type="ConsoleOutput" date="Tue Mar 29 20:08:01 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4211367" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.44931578901984404
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.44931578901984404"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1506" _type="ShellCommand" date="Tue Mar 29 20:08:02 EDT 2022" starttimestamp="1648594670066" timestamp="4212317" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1508" _type="PauseCommand" date="Tue Mar 29 20:08:06 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="4216003">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3686]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1512" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:08:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4221656" type="Run" />
  <Command __id="1515" _type="PauseCommand" date="Tue Mar 29 20:08:20 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4230032">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8376]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1514" _type="ShellCommand" date="Tue Mar 29 20:08:20 EDT 2022" starttimestamp="1648594670066" timestamp="4230032" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1517" _type="PauseCommand" date="Tue Mar 29 20:08:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="4233801">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3768]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1516" _type="ConsoleInput" date="Tue Mar 29 20:08:23 EDT 2022" starttimestamp="1648594670066" timestamp="4233800" type="Exception">
    <outputString><![CDATA[b true
]]></outputString>
  </Command>
  <Command __id="1518" _type="ConsoleOutput" date="Tue Mar 29 20:08:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4233869" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.broadcastMetaState(boolean)[true]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.broadcastMetaState(boolean)[true]"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="1520" _type="PauseCommand" date="Tue Mar 29 20:08:29 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4239318">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5449]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1522" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:08:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4246123" type="Run" />
  <Command __id="1525" _type="PauseCommand" date="Tue Mar 29 20:08:37 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="4247267">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1144]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1559" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:09:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4310128" type="Run" />
  <Command __id="1561" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:09:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4310320" type="Run" />
  <Command __id="1562" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:09:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4310393" type="Run" />
  <Command __id="1563" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:09:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4310429" type="Run" />
  <Command __id="1564" _type="ConsoleOutput" date="Tue Mar 29 20:09:40 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4310487" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.02251870311772408 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@7118eccd
[com.sun.proxy.$Proxy1@7118eccd]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.02251870311772408"), Diff(INSERT,"Server0<-->Generic Client:0.02251870311772408 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@7118eccd¶[com.sun.proxy.$Proxy1@7118eccd]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1565" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:09:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4310495" type="Run" />
  <Command __id="1566" _type="ConsoleOutput" date="Tue Mar 29 20:09:40 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4310768" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.02251870311772408 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@7118eccd¶[com.sun.proxy.$Proxy1@7118eccd]"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1567" _type="ConsoleOutput" date="Tue Mar 29 20:09:40 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4310777" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1569" _type="PauseCommand" date="Tue Mar 29 20:09:41 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="4311831">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1054]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1568" _type="ShellCommand" date="Tue Mar 29 20:09:41 EDT 2022" starttimestamp="1648594670066" timestamp="4311831" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1570" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:09:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4312576" type="Run" />
  <Command __id="1571" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:09:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4312577" type="Run" />
  <Command __id="1573" _type="PauseCommand" date="Tue Mar 29 20:09:43 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="4313854">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1277]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1572" _type="ConsoleInput" date="Tue Mar 29 20:09:43 EDT 2022" starttimestamp="1648594670066" timestamp="4313854" type="Exception">
    <outputString><![CDATA[b true
]]></outputString>
  </Command>
  <Command __id="1574" _type="ConsoleOutput" date="Tue Mar 29 20:09:43 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4313929" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.broadcastMetaState(boolean)[true]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.broadcastMetaState(boolean)[true]"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="1576" _type="PauseCommand" date="Tue Mar 29 20:09:49 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4319054">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5125]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1575" _type="ConsoleInput" date="Tue Mar 29 20:09:49 EDT 2022" starttimestamp="1648594670066" timestamp="4319054" type="Exception">
    <outputString><![CDATA[i gipc
]]></outputString>
  </Command>
  <Command __id="1577" _type="ConsoleOutput" date="Tue Mar 29 20:09:49 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4319127" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener."), Diff(DELETE,"broadcastMetaState(boolean)[true"), Diff(INSERT,"ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC"), Diff(EQUAL,"]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="1579" _type="PauseCommand" date="Tue Mar 29 20:09:55 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4325135">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6008]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1583" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:10:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4340443" type="Run" />
  <Command __id="1585" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:10:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4340460" type="Run" />
  <Command __id="1587" _type="PauseCommand" date="Tue Mar 29 20:11:29 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="4419630">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[79170]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1586" _type="ShellCommand" date="Tue Mar 29 20:11:29 EDT 2022" starttimestamp="1648594670066" timestamp="4419630" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1589" _type="PauseCommand" date="Tue Mar 29 20:12:51 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="4501456">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[81826]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1588" _type="ShellCommand" date="Tue Mar 29 20:12:51 EDT 2022" starttimestamp="1648594670066" timestamp="4501456" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1590" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:12:52 EDT 2022" starttimestamp="1648594670066" timestamp="4502154" />
  <Command __id="1591" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:12:52 EDT 2022" starttimestamp="1648594670066" timestamp="4502160" />
  <Command __id="1593" _type="PauseCommand" date="Tue Mar 29 20:13:00 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4510391">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8231]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1592" _type="ShellCommand" date="Tue Mar 29 20:13:00 EDT 2022" starttimestamp="1648594670066" timestamp="4510391" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1595" _type="PauseCommand" date="Tue Mar 29 20:13:54 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="4564896">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[54505]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1609" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 20:14:03 EDT 2022" starttimestamp="1648594670066" timestamp="4573261" />
  <Command __id="1611" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:14:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4573296" type="Debug" />
  <Command __id="1612" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 20:14:03 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4573296" type="Run" />
  <Command __id="1613" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:14:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4573296" type="Debug" />
  <Command __id="1614" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 20:14:03 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4573296" type="Run" />
  <Command __id="1616" _type="PauseCommand" date="Tue Mar 29 20:14:10 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4580512">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7216]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1647" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:14:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4611914" type="Run" />
  <Command __id="1650" _type="PauseCommand" date="Tue Mar 29 20:14:49 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4619281">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7367]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1680" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 20:15:23 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4653068" type="Run" />
  <Command __id="1682" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:15:23 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4653297" type="Run" />
  <Command __id="1683" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:15:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4653300" type="Run" />
  <Command __id="1684" _type="ConsoleOutput" date="Tue Mar 29 20:15:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4653634" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.44863270091163054
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.44863270091163054"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1685" _type="ShellCommand" date="Tue Mar 29 20:15:24 EDT 2022" starttimestamp="1648594670066" timestamp="4654612" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1687" _type="PauseCommand" date="Tue Mar 29 20:15:25 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="4655920">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1308]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1705" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:15:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4665050" type="Run" />
  <Command __id="1707" _type="ConsoleOutput" date="Tue Mar 29 20:15:35 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4665219" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.2918316833923813 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Server0<-->Generic Client:0."), Diff(DELETE,"44863270091163054 (Opened)¶Client registered GIPC¶Client registered"), Diff(INSERT,"2918316833923813 (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1708" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:15:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4665336" type="Run" />
  <Command __id="1709" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:15:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4665377" type="Run" />
  <Command __id="1710" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:15:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4665444" type="Run" />
  <Command __id="1711" _type="ConsoleOutput" date="Tue Mar 29 20:15:35 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4665462" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.2918316833923813 (Opened)"), Diff(INSERT,"Client registered GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1712" _type="ConsoleOutput" date="Tue Mar 29 20:15:35 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4665687" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1713" _type="ConsoleOutput" date="Tue Mar 29 20:15:35 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4665692" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1715" _type="PauseCommand" date="Tue Mar 29 20:15:37 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="4667393">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1701]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1718" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:15:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4680459" type="Run" />
  <DocumentChange __id="1415" _type="Delete" date="Tue Mar 29 20:03:39 EDT 2022" docASTNodeCount="940" docActiveCodeLength="6777" docExpressionCount="689" docLength="7294" endLine="76" length="3" offset="3103" repeat="3" startLine="76" starttimestamp="1648594670066" timestamp="3948945" timestamp2="3949675">
    <text><![CDATA[.it]]></text>
  </DocumentChange>
  <DocumentChange __id="1617" _type="Replace" date="Tue Mar 29 20:14:10 EDT 2022" docASTNodeCount="812" docActiveCodeLength="5824" docExpressionCount="599" docLength="6282" endLine="226" insertionLength="6282" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="7294" offset="0" startLine="0" starttimestamp="1648594670066" timestamp="4580604">
    <deletedText><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)
			throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></deletedText>
    <insertedText><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC{
	
	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
		
	}
	
	
	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		createGIPCRegistry();
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);
		
		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);	
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></insertedText>
  </DocumentChange>
  <Command __id="1721" _type="PauseCommand" date="Tue Mar 29 20:15:59 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4689784">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[9325]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1726" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:16:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4695376" type="Run" />
  <Command __id="1728" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:16:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4695407" type="Run" />
  <Command __id="1730" _type="PauseCommand" date="Tue Mar 29 20:17:23 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="4773091">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[77684]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1767" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 20:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="4820789" />
  <Command __id="1769" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:18:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4820833" type="Debug" />
  <Command __id="1770" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 20:18:10 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4820833" type="Run" />
  <Command __id="1771" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:18:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4820833" type="Debug" />
  <Command __id="1772" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 20:18:10 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4820833" type="Run" />
  <Command __id="1774" _type="PauseCommand" date="Tue Mar 29 20:18:15 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="4825752">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4919]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1800" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4875142" type="Run" />
  <Command __id="1802" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4875341" type="Run" />
  <Command __id="1803" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4875404" type="Run" />
  <Command __id="1804" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4875442" type="Run" />
  <Command __id="1805" _type="ConsoleOutput" date="Tue Mar 29 20:19:05 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4875477" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.9837236553565863 (Opened)
Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9837236553565863"), Diff(INSERT,"Server0<-->Generic Client:0.9837236553565863 (Opened)¶Client registered GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1806" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4875497" type="Run" />
  <Command __id="1807" _type="ConsoleOutput" date="Tue Mar 29 20:19:05 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4875784" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.9837236553565863 (Opened)¶"), Diff(EQUAL,"Client registered"), Diff(DELETE," GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1808" _type="ConsoleOutput" date="Tue Mar 29 20:19:05 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4875793" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1810" _type="PauseCommand" date="Tue Mar 29 20:19:07 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="4877593">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1800]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1821" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4886362" type="Run" />
  <Command __id="1823" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4886639" type="Run" />
  <Command __id="1824" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4886675" type="Run" />
  <Command __id="1825" _type="ConsoleOutput" date="Tue Mar 29 20:19:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4886716" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.5876799494388208 (Opened)
Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5876799494388208"), Diff(INSERT,"Server0<-->Generic Client:0.5876799494388208 (Opened)¶Client registered GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1826" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4886726" type="Run" />
  <Command __id="1827" _type="ConsoleOutput" date="Tue Mar 29 20:19:17 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4886957" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.5876799494388208 (Opened)¶"), Diff(EQUAL,"Client registered"), Diff(DELETE," GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1828" _type="ConsoleOutput" date="Tue Mar 29 20:19:17 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4886958" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1830" _type="PauseCommand" date="Tue Mar 29 20:19:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="4888053">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1095]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1831" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4890520" type="Run" />
  <Command __id="1834" _type="PauseCommand" date="Tue Mar 29 20:19:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="4893419">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2899]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1839" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4905440" type="Run" />
  <Command __id="1841" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4905472" type="Run" />
  <Command __id="1843" _type="PauseCommand" date="Tue Mar 29 20:19:42 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4912892">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7420]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1844" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4916683" type="Run" />
  <Command __id="1846" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:19:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4916700" type="Run" />
  <Command __id="1848" _type="PauseCommand" date="Tue Mar 29 20:20:15 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="4945569">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[28869]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1847" _type="ShellCommand" date="Tue Mar 29 20:20:15 EDT 2022" starttimestamp="1648594670066" timestamp="4945569" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1850" _type="PauseCommand" date="Tue Mar 29 20:20:26 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="4956897">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11328]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1849" _type="ShellCommand" date="Tue Mar 29 20:20:26 EDT 2022" starttimestamp="1648594670066" timestamp="4956897" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1852" _type="PauseCommand" date="Tue Mar 29 20:20:37 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="4967417">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10520]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1851" _type="ShellCommand" date="Tue Mar 29 20:20:37 EDT 2022" starttimestamp="1648594670066" timestamp="4967417" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1854" _type="SelectTextCommand" caretOffset="2879" date="Tue Mar 29 20:20:37 EDT 2022" end="2879" start="2861" starttimestamp="1648594670066" timestamp="4967734" />
  <Command __id="1856" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:20:37 EDT 2022" starttimestamp="1648594670066" timestamp="4967858" />
  <Command __id="1857" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:20:38 EDT 2022" starttimestamp="1648594670066" timestamp="4967937" />
  <Command __id="1858" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:20:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4967993" type="Run" />
  <Command __id="1859" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:20:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4967994" type="Run" />
  <Command __id="1860" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:20:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4967994" type="Run" />
  <Command __id="1861" _type="ShellCommand" date="Tue Mar 29 20:20:38 EDT 2022" starttimestamp="1648594670066" timestamp="4968010" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1862" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:20:39 EDT 2022" starttimestamp="1648594670066" timestamp="4968956" />
  <Command __id="1863" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:20:39 EDT 2022" starttimestamp="1648594670066" timestamp="4968992" />
  <Command __id="1864" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:20:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4969024" type="Run" />
  <Command __id="1865" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:20:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4969024" type="Run" />
  <Command __id="1866" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:20:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4969807" type="Debug" />
  <Command __id="1867" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 20:20:39 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4969807" type="Run" />
  <Command __id="1868" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:20:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4969807" type="Debug" />
  <Command __id="1869" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 20:20:39 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4969807" type="Run" />
  <Command __id="1870" _type="ShellCommand" date="Tue Mar 29 20:20:39 EDT 2022" starttimestamp="1648594670066" timestamp="4969831" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1871" _type="ConsoleOutput" date="Tue Mar 29 20:20:39 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4969873" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:54222 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"ARead"), Diff(EQUAL,"Command "), Diff(DELETE,"recieved for broadcast: move 50 -50"), Diff(INSERT,"for java.nio.channels.SocketChannel[connected local=/127.0.0.1:54222 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1872" _type="ConsoleOutput" date="Tue Mar 29 20:20:39 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="4969876" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:54235 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:542"), Diff(DELETE,"22"), Diff(INSERT,"35"), Diff(EQUAL," remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host¶")]]]></diff>
  </Command>
  <Command __id="1874" _type="PauseCommand" date="Tue Mar 29 20:20:47 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="4977475">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7599]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1873" _type="MoveCaretCommand" caretOffset="613" date="Tue Mar 29 20:20:47 EDT 2022" docOffset="613" starttimestamp="1648594670066" timestamp="4977475" />
  <Command __id="1876" _type="PauseCommand" date="Tue Mar 29 20:21:03 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="4993851">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16376]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1884" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:21:05 EDT 2022" starttimestamp="1648594670066" timestamp="4995390" />
  <Command __id="1886" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:21:05 EDT 2022" starttimestamp="1648594670066" timestamp="4995419" />
  <Command __id="1887" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:21:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4996195" type="Debug" />
  <Command __id="1888" _type="ProgramExecutionEvent" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 20:21:06 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4996195" type="Run" />
  <Command __id="1889" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:21:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="4996195" type="Debug" />
  <Command __id="1890" _type="ProgramExecutionEvent" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 20:21:06 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="4996195" type="Run" />
  <Command __id="1891" _type="ShellCommand" date="Tue Mar 29 20:21:06 EDT 2022" starttimestamp="1648594670066" timestamp="4996214" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1893" _type="PauseCommand" date="Tue Mar 29 20:21:09 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="4999522">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3308]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1892" _type="ShellCommand" date="Tue Mar 29 20:21:09 EDT 2022" starttimestamp="1648594670066" timestamp="4999522" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1894" _type="ShellCommand" date="Tue Mar 29 20:21:09 EDT 2022" starttimestamp="1648594670066" timestamp="4999641" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1720" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:15:59 EDT 2022" docASTNodeCount="1048" docActiveCodeLength="8016" docExpressionCount="753" docLength="8824" projectName="A5" starttimestamp="1648594670066" timestamp="4689784">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶"), Diff(INSERT,"import assignments.util.inputParameters.SimulationParametersListener;¶"), Diff(EQUAL,"import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	"), Diff(DELETE,"private static boolean broadcastIPCMechansim = false;¶	"), Diff(EQUAL,"¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		"), Diff(DELETE,"¶		"), Diff(EQUAL,"if(mechanism.equals("GIPC")) {¶			"), Diff(DELETE,"			¶			"), Diff(EQUAL,"commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		"), Diff(DELETE,"broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		"), Diff(INSERT,"System.out.print("HERE in broadcase meta method");¶		//Broadcast meta State via RMI always"), Diff(EQUAL,"¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.inputParameters.SimulationParametersListener;
import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		if(mechanism.equals("GIPC")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		System.out.print("HERE in broadcase meta method");
		//Broadcast meta State via RMI always
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="1740" _type="Replace" date="Tue Mar 29 20:18:02 EDT 2022" docASTNodeCount="971" docActiveCodeLength="7341" docExpressionCount="694" docLength="8149" endLine="250" insertionLength="8149" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="8824" offset="0" startLine="0" starttimestamp="1648594670066" timestamp="4812603">
    <deletedText><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.inputParameters.SimulationParametersListener;
import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		if(mechanism.equals("GIPC")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		System.out.print("HERE in broadcase meta method");
		//Broadcast meta State via RMI always
	}


}
]]></deletedText>
    <insertedText><![CDATA[package client;

import util.annotations.Tags;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.inputParameters.SimulationParametersListener;
import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
	

		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean bool) {
		System.out.print("HERE in broadcase meta method");
		//Broadcast meta State via RMI always
	}


}
]]></insertedText>
  </DocumentChange>
  <Command __id="1853" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:20:37 EDT 2022" docASTNodeCount="812" docActiveCodeLength="5824" docExpressionCount="599" docLength="6282" projectName="A5" starttimestamp="1648594670066" timestamp="4967532">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶"), Diff(DELETE,"import util.interactiveMethodInvocation.IPCMechanism;¶"), Diff(EQUAL,"import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import "), Diff(INSERT,"	"), Diff(EQUAL,"util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({"), Diff(DELETE," "), Diff(EQUAL,"DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC"), Diff(DELETE," "), Diff(EQUAL,"})¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC"), Diff(DELETE," "), Diff(EQUAL,"{¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	private static "), Diff(INSERT," "), Diff(EQUAL,"String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	//"), Diff(DELETE," "), Diff(EQUAL,"A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	//"), Diff(DELETE," "), Diff(EQUAL,"int aProposalNumber = 0;¶"), Diff(INSERT,"	¶¶	"), Diff(EQUAL,"¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		"), Diff(INSERT,"		"), Diff(EQUAL,"//"), Diff(DELETE," "), Diff(EQUAL,"ClientArgsProcessor.getServerHost(args);¶"), Diff(INSERT,"		¶		¶		"), Diff(EQUAL,"¶	}¶"), Diff(INSERT,"	¶	"), Diff(EQUAL,"¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)"), Diff(DELETE,"¶			"), Diff(INSERT," "), Diff(EQUAL,"throws RemoteException {¶"), Diff(INSERT,"		"), Diff(EQUAL,"¶		//"), Diff(DELETE," "), Diff(EQUAL,"TODO Check is this is where delay is needed¶		long aDelay = getDelay();"), Diff(INSERT," "), Diff(EQUAL,"¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶"), Diff(INSERT,"		"), Diff(EQUAL,"¶		System.out.println("Command recieved for broadcast: ""), Diff(DELETE," "), Diff(EQUAL,"+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		"), Diff(DELETE,"System.out.println(clientListGIPC);"), Diff(EQUAL,"¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			"), Diff(DELETE,"System.out.println(client);¶			"), Diff(EQUAL,"if"), Diff(DELETE," "), Diff(EQUAL,"(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//"), Diff(DELETE," "), Diff(EQUAL,"Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶"), Diff(INSERT,"			"), Diff(EQUAL,"¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶"), Diff(INSERT,"			"), Diff(EQUAL,"¶			if (aNewCommand.charAt(0) == 'q') {¶				//"), Diff(DELETE," "), Diff(EQUAL,"Need to quit¶				this.quit(0);¶			}¶		}¶"), Diff(DELETE,"¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶"), Diff(INSERT,"				"), Diff(EQUAL,"¶	}¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	@Override¶	protected void setTracing() {¶		//"), Diff(DELETE," "), Diff(EQUAL,"A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶"), Diff(INSERT,"				"), Diff(EQUAL,"¶		//"), Diff(DELETE," "), Diff(EQUAL,"A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();"), Diff(INSERT,"		"), Diff(EQUAL,"¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶"), Diff(INSERT,"		"), Diff(EQUAL,"¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶"), Diff(INSERT,"		¶		"), Diff(EQUAL,"¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//"), Diff(DELETE," "), Diff(EQUAL,"Create remote server object¶"), Diff(INSERT,"			"), Diff(EQUAL,"¶			//"), Diff(DELETE," "), Diff(EQUAL,"create proxy of remote server object¶			//"), Diff(DELETE," "), Diff(EQUAL,"UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//"), Diff(DELETE," "), Diff(EQUAL,"send server to RMI server¶			//"), Diff(DELETE," "), Diff(EQUAL,"rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶"), Diff(INSERT,"			"), Diff(EQUAL,"¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶"), Diff(INSERT,"			"), Diff(EQUAL,"¶			System.out.println("Server proxy sent to RMI Registry");¶"), Diff(INSERT,"			¶			¶			"), Diff(EQUAL,"¶		} catch"), Diff(DELETE," "), Diff(EQUAL,"(Exception e)"), Diff(DELETE," "), Diff(EQUAL,"{¶			e.printStackTrace();¶		}¶"), Diff(INSERT,"		"), Diff(EQUAL,"¶	}¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	@Override¶	public void "), Diff(INSERT," "), Diff(EQUAL,"start"), Diff(INSERT," "), Diff(EQUAL,"(String[] args) {¶		init(args);"), Diff(INSERT,"¶		"), Diff(EQUAL,"¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo)"), Diff(DELETE," "), Diff(EQUAL,"{¶		// TODO Auto-generated method stub¶"), Diff(INSERT,"		"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶"), Diff(INSERT,"		"), Diff(EQUAL,"¶	}¶"), Diff(INSERT,"	"), Diff(EQUAL,"¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶"), Diff(INSERT,"		"), Diff(EQUAL,"¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);"), Diff(INSERT,"	"), Diff(EQUAL,"¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC{
	
	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
		
	}
	
	
	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		createGIPCRegistry();
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);
		
		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);	
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1855" _type="Replace" date="Tue Mar 29 20:20:37 EDT 2022" docASTNodeCount="940" docActiveCodeLength="6777" docExpressionCount="689" docLength="7294" endLine="199" insertionLength="7294" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="6282" offset="0" startLine="0" starttimestamp="1648594670066" timestamp="4967800">
    <deletedText><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC{
	
	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
		
	}
	
	
	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		createGIPCRegistry();
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);
		
		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);	
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></deletedText>
    <insertedText><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)
			throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></insertedText>
  </DocumentChange>
  <Command __id="1878" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:21:04 EDT 2022" docASTNodeCount="131" docActiveCodeLength="1033" docExpressionCount="77" docLength="1033" projectName="A5" starttimestamp="1648594670066" timestamp="4993979">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶"), Diff(DELETE,"import util.interactiveMethodInvocation.IPCMechanism;¶"), Diff(EQUAL,"import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;"), Diff(DELETE,"¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;"), Diff(EQUAL,"¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1881" _type="Replace" date="Tue Mar 29 20:21:04 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1253" docExpressionCount="90" docLength="1253" endLine="26" insertionLength="1253" int_docASTNodeCount="1" int_docActiveCodeLength="0" int_docExpressionCount="0" int_docLength="0" length="1033" offset="0" startLine="0" starttimestamp="1648594670066" timestamp="4994267">
    <deletedText><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;
	
	

}
]]></deletedText>
    <insertedText><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;
	
	

}
]]></insertedText>
  </DocumentChange>
  <Command __id="1896" _type="PauseCommand" date="Tue Mar 29 20:21:15 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5005366">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5725]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1897" _type="MoveCaretCommand" caretOffset="613" date="Tue Mar 29 20:21:15 EDT 2022" docOffset="613" starttimestamp="1648594670066" timestamp="5005462" />
  <Command __id="1899" _type="PauseCommand" date="Tue Mar 29 20:21:27 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="5017653">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12191]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1975" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:23:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5121042" type="Run" />
  <Command __id="1977" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:23:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5121089" type="Run" />
  <Command __id="1979" _type="MoveCaretCommand" caretOffset="988" date="Tue Mar 29 20:23:12 EDT 2022" docOffset="988" starttimestamp="1648594670066" timestamp="5122041" />
  <Command __id="1981" _type="PauseCommand" date="Tue Mar 29 20:23:40 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="5150570">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[28529]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1980" _type="ConsoleInput" date="Tue Mar 29 20:23:40 EDT 2022" starttimestamp="1648594670066" timestamp="5150570" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="1982" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:23:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5150605" type="Run" />
  <Command __id="1983" _type="ConsoleOutput" date="Tue Mar 29 20:23:40 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5150626" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
NIO
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="1984" _type="ConsoleOutput" date="Tue Mar 29 20:23:40 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5150665" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: move 50 -50
[]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]¶IPC Mechanism¶NIO¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Command recieved for broadcast: move 50 -50¶[]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1895" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:21:15 EDT 2022" docASTNodeCount="940" docActiveCodeLength="6777" docExpressionCount="689" docLength="7294" projectName="A5" starttimestamp="1648594670066" timestamp="5005366">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶"), Diff(INSERT,"import util.interactiveMethodInvocation.IPCMechanism;¶"), Diff(EQUAL,"import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import "), Diff(DELETE,"	"), Diff(EQUAL,"util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({"), Diff(INSERT," "), Diff(EQUAL,"DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC"), Diff(INSERT," "), Diff(EQUAL,"})¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC"), Diff(INSERT," "), Diff(EQUAL,"{¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	private static "), Diff(DELETE," "), Diff(EQUAL,"String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	//"), Diff(INSERT," "), Diff(EQUAL,"A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	//"), Diff(INSERT," "), Diff(EQUAL,"int aProposalNumber = 0;¶"), Diff(DELETE,"	¶¶	"), Diff(EQUAL,"¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		"), Diff(DELETE,"		"), Diff(EQUAL,"//"), Diff(INSERT," "), Diff(EQUAL,"ClientArgsProcessor.getServerHost(args);¶"), Diff(DELETE,"		¶		¶		"), Diff(EQUAL,"¶	}¶"), Diff(DELETE,"	¶	"), Diff(EQUAL,"¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶	"), Diff(INSERT,"	System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	"), Diff(EQUAL,"}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)"), Diff(DELETE," "), Diff(INSERT,"¶			"), Diff(EQUAL,"throws RemoteException {¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		//"), Diff(INSERT," "), Diff(EQUAL,"TODO Check is this is where delay is needed¶		long aDelay = getDelay();"), Diff(DELETE," "), Diff(EQUAL,"¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		System.out.println("Command recieved for broadcast: ""), Diff(INSERT," "), Diff(EQUAL,"+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		"), Diff(INSERT,"System.out.println(clientListGIPC);"), Diff(EQUAL,"¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			"), Diff(INSERT,"System.out.println(client);¶			"), Diff(EQUAL,"if"), Diff(INSERT," "), Diff(EQUAL,"(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//"), Diff(INSERT," "), Diff(EQUAL,"Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			if (aNewCommand.charAt(0) == 'q') {¶				//"), Diff(INSERT," "), Diff(EQUAL,"Need to quit¶				this.quit(0);¶			}¶		}¶"), Diff(DELETE,"				"), Diff(INSERT,"¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶"), Diff(EQUAL,"¶	}¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	@Override¶	protected void setTracing() {¶		//"), Diff(INSERT," "), Diff(EQUAL,"A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶"), Diff(DELETE,"				"), Diff(EQUAL,"¶		//"), Diff(INSERT," "), Diff(EQUAL,"A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();"), Diff(DELETE,"		"), Diff(EQUAL,"¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶"), Diff(DELETE,"		¶		"), Diff(EQUAL,"¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//"), Diff(INSERT," "), Diff(EQUAL,"Create remote server object¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			//"), Diff(INSERT," "), Diff(EQUAL,"create proxy of remote server object¶			//"), Diff(INSERT," "), Diff(EQUAL,"UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//"), Diff(INSERT," "), Diff(EQUAL,"send server to RMI server¶			//"), Diff(INSERT," "), Diff(EQUAL,"rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶"), Diff(DELETE,"			"), Diff(EQUAL,"¶			System.out.println("Server proxy sent to RMI Registry");¶"), Diff(DELETE,"			¶			¶			"), Diff(EQUAL,"¶		} catch"), Diff(INSERT," "), Diff(EQUAL,"(Exception e)"), Diff(INSERT," "), Diff(EQUAL,"{¶			e.printStackTrace();¶		}¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶	}¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	@Override¶	public void "), Diff(DELETE," "), Diff(EQUAL,"start"), Diff(DELETE," "), Diff(EQUAL,"(String[] args) {¶		init(args);"), Diff(DELETE,"¶		"), Diff(EQUAL,"¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo)"), Diff(INSERT," "), Diff(EQUAL,"{¶		// TODO Auto-generated method stub¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶	}¶"), Diff(DELETE,"	"), Diff(EQUAL,"¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶"), Diff(DELETE,"		"), Diff(EQUAL,"¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);"), Diff(DELETE,"	"), Diff(EQUAL,"¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)
			throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="1978" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:23:11 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="5121900">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1986" _type="PauseCommand" date="Tue Mar 29 20:23:46 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5156060">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5395]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1987" _type="MoveCaretCommand" caretOffset="613" date="Tue Mar 29 20:23:46 EDT 2022" docOffset="613" starttimestamp="1648594670066" timestamp="5156209" />
  <Command __id="1989" _type="PauseCommand" date="Tue Mar 29 20:23:51 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5161848">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5639]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1988" _type="MoveCaretCommand" caretOffset="3603" date="Tue Mar 29 20:23:51 EDT 2022" docOffset="3603" starttimestamp="1648594670066" timestamp="5161848" />
  <Command __id="1991" _type="InsertStringCommand" date="Tue Mar 29 20:23:52 EDT 2022" starttimestamp="1648594670066" timestamp="5162145" timestamp2="5162145">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1993" _type="InsertStringCommand" date="Tue Mar 29 20:23:52 EDT 2022" starttimestamp="1648594670066" timestamp="5162900" timestamp2="5162900">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="1995" _type="InsertStringCommand" date="Tue Mar 29 20:23:53 EDT 2022" starttimestamp="1648594670066" timestamp="5162975" timestamp2="5162975">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="1997" _type="InsertStringCommand" date="Tue Mar 29 20:23:53 EDT 2022" starttimestamp="1648594670066" timestamp="5163095" timestamp2="5163095">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1999" _type="InsertStringCommand" date="Tue Mar 29 20:23:53 EDT 2022" starttimestamp="1648594670066" timestamp="5163287" timestamp2="5163287">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2001" _type="InsertStringCommand" date="Tue Mar 29 20:23:53 EDT 2022" starttimestamp="1648594670066" timestamp="5163448" timestamp2="5163448">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2003" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:23:54 EDT 2022" starttimestamp="1648594670066" timestamp="5164226" />
  <Command __id="2005" _type="InsertStringCommand" date="Tue Mar 29 20:23:54 EDT 2022" starttimestamp="1648594670066" timestamp="5164350" timestamp2="5164350">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2007" _type="InsertStringCommand" date="Tue Mar 29 20:23:54 EDT 2022" starttimestamp="1648594670066" timestamp="5164453" timestamp2="5164453">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2009" _type="InsertStringCommand" date="Tue Mar 29 20:23:55 EDT 2022" starttimestamp="1648594670066" timestamp="5165166" timestamp2="5165166">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2010" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:23:55 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="5165170" />
  <Command __id="2013" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:23:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5165613" type="Run" />
  <Command __id="2015" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:23:55 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="5165880" />
  <Command __id="2017" _type="InsertStringCommand" date="Tue Mar 29 20:23:55 EDT 2022" starttimestamp="1648594670066" timestamp="5165893" timestamp2="5165893">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2018" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:23:55 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="5165916" />
  <Command __id="2029" _type="PauseCommand" date="Tue Mar 29 20:23:59 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5169411">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[3265]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2032" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:23:59 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="5169865" />
  <Command __id="2034" _type="InsertStringCommand" date="Tue Mar 29 20:23:59 EDT 2022" starttimestamp="1648594670066" timestamp="5169919" timestamp2="5169919">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2036" _type="InsertStringCommand" date="Tue Mar 29 20:24:00 EDT 2022" starttimestamp="1648594670066" timestamp="5170032" timestamp2="5170032">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2038" _type="InsertStringCommand" date="Tue Mar 29 20:24:00 EDT 2022" starttimestamp="1648594670066" timestamp="5170149" timestamp2="5170149">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2040" _type="InsertStringCommand" date="Tue Mar 29 20:24:00 EDT 2022" starttimestamp="1648594670066" timestamp="5170254" timestamp2="5170254">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2042" _type="InsertStringCommand" date="Tue Mar 29 20:24:00 EDT 2022" starttimestamp="1648594670066" timestamp="5170667" timestamp2="5170667">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="2044" _type="InsertStringCommand" date="Tue Mar 29 20:24:00 EDT 2022" starttimestamp="1648594670066" timestamp="5170809" timestamp2="5170809">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1985" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:23:46 EDT 2022" docASTNodeCount="940" docActiveCodeLength="6777" docExpressionCount="689" docLength="7294" projectName="A5" starttimestamp="1648594670066" timestamp="5156060">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1990" _type="Insert" date="Tue Mar 29 20:23:52 EDT 2022" docASTNodeCount="942" docActiveCodeLength="6786" docExpressionCount="690" docLength="7303" length="9" offset="3603" repeat="6" starttimestamp="1648594670066" timestamp="5162136" timestamp2="5163443">
    <text><![CDATA[
		Systm]]></text>
  </DocumentChange>
  <DocumentChange __id="2002" _type="Delete" date="Tue Mar 29 20:23:54 EDT 2022" docASTNodeCount="942" docActiveCodeLength="6785" docExpressionCount="690" docLength="7302" endLine="92" length="1" offset="3611" startLine="92" starttimestamp="1648594670066" timestamp="5164222">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <DocumentChange __id="2004" _type="Insert" date="Tue Mar 29 20:23:54 EDT 2022" docASTNodeCount="944" docActiveCodeLength="6791" docExpressionCount="692" docLength="7308" length="6" offset="3611" repeat="6" starttimestamp="1648594670066" timestamp="5164346" timestamp2="5165715">
    <text><![CDATA[em.out]]></text>
  </DocumentChange>
  <DocumentChange __id="2016" _type="Replace" date="Tue Mar 29 20:23:55 EDT 2022" docASTNodeCount="940" docActiveCodeLength="6792" docExpressionCount="689" docLength="7309" endLine="92" insertionLength="4" int_docASTNodeCount="942" int_docActiveCodeLength="6788" int_docExpressionCount="690" int_docLength="7305" length="3" offset="3614" startLine="92" starttimestamp="1648594670066" timestamp="5165884">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2019" _type="Insert" date="Tue Mar 29 20:23:56 EDT 2022" docASTNodeCount="947" docActiveCodeLength="6802" docExpressionCount="695" docLength="7319" length="10" offset="3618" repeat="9" starttimestamp="1648594670066" timestamp="5166146" timestamp2="5168688">
    <text><![CDATA[println(l)]]></text>
  </DocumentChange>
  <DocumentChange __id="2028" _type="Delete" date="Tue Mar 29 20:23:59 EDT 2022" docASTNodeCount="946" docActiveCodeLength="6801" docExpressionCount="694" docLength="7318" endLine="92" length="1" offset="3626" startLine="92" starttimestamp="1648594670066" timestamp="5169411">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2030" _type="Insert" date="Tue Mar 29 20:23:59 EDT 2022" docASTNodeCount="947" docActiveCodeLength="6814" docExpressionCount="695" docLength="7331" length="13" offset="3626" repeat="13" starttimestamp="1648594670066" timestamp="5169703" timestamp2="5171806">
    <text><![CDATA[clientListGip]]></text>
  </DocumentChange>
  <DocumentChange __id="2055" _type="Delete" date="Tue Mar 29 20:24:02 EDT 2022" docASTNodeCount="947" docActiveCodeLength="6812" docExpressionCount="695" docLength="7329" endLine="92" length="2" offset="3637" repeat="2" startLine="92" starttimestamp="1648594670066" timestamp="5172192" timestamp2="5172329">
    <text><![CDATA[ip]]></text>
  </DocumentChange>
  <Command __id="2046" _type="InsertStringCommand" date="Tue Mar 29 20:24:00 EDT 2022" starttimestamp="1648594670066" timestamp="5170929" timestamp2="5170929">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2048" _type="InsertStringCommand" date="Tue Mar 29 20:24:01 EDT 2022" starttimestamp="1648594670066" timestamp="5171091" timestamp2="5171091">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2050" _type="InsertStringCommand" date="Tue Mar 29 20:24:01 EDT 2022" starttimestamp="1648594670066" timestamp="5171436" timestamp2="5171436">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="2052" _type="InsertStringCommand" date="Tue Mar 29 20:24:01 EDT 2022" starttimestamp="1648594670066" timestamp="5171564" timestamp2="5171564">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2054" _type="InsertStringCommand" date="Tue Mar 29 20:24:01 EDT 2022" starttimestamp="1648594670066" timestamp="5171810" timestamp2="5171810">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="2056" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:24:02 EDT 2022" starttimestamp="1648594670066" timestamp="5172195" />
  <Command __id="2058" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:24:02 EDT 2022" starttimestamp="1648594670066" timestamp="5172331" />
  <Command __id="2060" _type="InsertStringCommand" date="Tue Mar 29 20:24:02 EDT 2022" starttimestamp="1648594670066" timestamp="5172517" timestamp2="5172517">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="2062" _type="InsertStringCommand" date="Tue Mar 29 20:24:02 EDT 2022" starttimestamp="1648594670066" timestamp="5172592" timestamp2="5172592">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="2064" _type="InsertStringCommand" date="Tue Mar 29 20:24:02 EDT 2022" starttimestamp="1648594670066" timestamp="5172801" timestamp2="5172801">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="2067" _type="PauseCommand" date="Tue Mar 29 20:24:03 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5173914">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1113]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="2066" _type="InsertStringCommand" date="Tue Mar 29 20:24:03 EDT 2022" starttimestamp="1648594670066" timestamp="5173914" timestamp2="5173914">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2068" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:24:03 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="5173919" />
  <Command __id="2072" _type="PauseCommand" date="Tue Mar 29 20:24:05 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5175370">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1451]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2071" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:24:05 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="5175370" />
  <Command __id="2074" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:24:05 EDT 2022" starttimestamp="1648594670066" timestamp="5175806" />
  <Command __id="2076" _type="InsertStringCommand" date="Tue Mar 29 20:24:06 EDT 2022" starttimestamp="1648594670066" timestamp="5175965" timestamp2="5175965">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2078" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:24:06 EDT 2022" starttimestamp="1648594670066" timestamp="5176486" />
  <Command __id="2080" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:24:06 EDT 2022" starttimestamp="1648594670066" timestamp="5176643" />
  <Command __id="2082" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:24:07 EDT 2022" starttimestamp="1648594670066" timestamp="5176957" />
  <Command __id="2084" _type="InsertStringCommand" date="Tue Mar 29 20:24:07 EDT 2022" starttimestamp="1648594670066" timestamp="5177277" timestamp2="5177277">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2085" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:24:07 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="5177280" />
  <Command __id="2089" _type="PauseCommand" date="Tue Mar 29 20:24:09 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5178974">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1694]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2093" _type="PauseCommand" date="Tue Mar 29 20:24:10 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5180205">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[1231]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2092" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:24:10 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="5180205" />
  <Command __id="2095" _type="InsertStringCommand" date="Tue Mar 29 20:24:10 EDT 2022" starttimestamp="1648594670066" timestamp="5180492" timestamp2="5180492">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2096" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:24:11 EDT 2022" starttimestamp="1648594670066" timestamp="5181439" />
  <Command __id="2097" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:24:11 EDT 2022" starttimestamp="1648594670066" timestamp="5181537" />
  <Command __id="2098" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:24:11 EDT 2022" starttimestamp="1648594670066" timestamp="5181567" />
  <Command __id="2099" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5181671" type="Run" />
  <Command __id="2100" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5181672" type="Run" />
  <Command __id="2101" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5181672" type="Run" />
  <Command __id="2103" _type="PauseCommand" date="Tue Mar 29 20:24:12 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5182818">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1146]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2102" _type="MoveCaretCommand" caretOffset="3626" date="Tue Mar 29 20:24:12 EDT 2022" docOffset="3626" starttimestamp="1648594670066" timestamp="5182818" />
  <Command __id="2105" _type="InsertStringCommand" date="Tue Mar 29 20:24:13 EDT 2022" starttimestamp="1648594670066" timestamp="5183096" timestamp2="5183096">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2107" _type="InsertStringCommand" date="Tue Mar 29 20:24:13 EDT 2022" starttimestamp="1648594670066" timestamp="5183217" timestamp2="5183217">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2109" _type="InsertStringCommand" date="Tue Mar 29 20:24:13 EDT 2022" starttimestamp="1648594670066" timestamp="5183337" timestamp2="5183337">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2111" _type="InsertStringCommand" date="Tue Mar 29 20:24:13 EDT 2022" starttimestamp="1648594670066" timestamp="5183445" timestamp2="5183445">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2113" _type="InsertStringCommand" date="Tue Mar 29 20:24:13 EDT 2022" starttimestamp="1648594670066" timestamp="5183649" timestamp2="5183649">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2115" _type="InsertStringCommand" date="Tue Mar 29 20:24:13 EDT 2022" starttimestamp="1648594670066" timestamp="5183714" timestamp2="5183714">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="2117" _type="InsertStringCommand" date="Tue Mar 29 20:24:14 EDT 2022" starttimestamp="1648594670066" timestamp="5184529" timestamp2="5184529">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2119" _type="PauseCommand" date="Tue Mar 29 20:24:15 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5185920">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1391]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2118" _type="MoveCaretCommand" caretOffset="3648" date="Tue Mar 29 20:24:15 EDT 2022" docOffset="3648" starttimestamp="1648594670066" timestamp="5185920" />
  <Command __id="2121" _type="InsertStringCommand" date="Tue Mar 29 20:24:16 EDT 2022" starttimestamp="1648594670066" timestamp="5186746" timestamp2="5186746">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="2123" _type="PauseCommand" date="Tue Mar 29 20:24:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5188270">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1524]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2122" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:24:18 EDT 2022" starttimestamp="1648594670066" timestamp="5188270" />
  <Command __id="2124" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:24:18 EDT 2022" starttimestamp="1648594670066" timestamp="5188360" />
  <Command __id="2125" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:24:18 EDT 2022" starttimestamp="1648594670066" timestamp="5188398" />
  <Command __id="2126" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5188505" type="Run" />
  <Command __id="2127" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5188505" type="Run" />
  <Command __id="2128" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5188505" type="Run" />
  <DocumentChange __id="2059" _type="Insert" date="Tue Mar 29 20:24:02 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6818" docExpressionCount="697" docLength="7335" length="6" offset="3637" repeat="6" starttimestamp="1648594670066" timestamp="5172515" timestamp2="5175334">
    <text><![CDATA[IPC.lg]]></text>
  </DocumentChange>
  <DocumentChange __id="2073" _type="Delete" date="Tue Mar 29 20:24:05 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6817" docExpressionCount="697" docLength="7334" endLine="92" length="1" offset="3642" startLine="92" starttimestamp="1648594670066" timestamp="5175802">
    <text><![CDATA[g]]></text>
  </DocumentChange>
  <DocumentChange __id="2075" _type="Insert" date="Tue Mar 29 20:24:06 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6818" docExpressionCount="697" docLength="7335" length="1" offset="3642" starttimestamp="1648594670066" timestamp="5175961">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="2077" _type="Delete" date="Tue Mar 29 20:24:06 EDT 2022" docASTNodeCount="947" docActiveCodeLength="6815" docExpressionCount="695" docLength="7332" endLine="92" length="3" offset="3640" repeat="3" startLine="92" starttimestamp="1648594670066" timestamp="5176483" timestamp2="5176954">
    <text><![CDATA[.le]]></text>
  </DocumentChange>
  <DocumentChange __id="2083" _type="Insert" date="Tue Mar 29 20:24:07 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6818" docExpressionCount="697" docLength="7335" length="3" offset="3640" repeat="3" starttimestamp="1648594670066" timestamp="5177273" timestamp2="5177980">
    <text><![CDATA[.le]]></text>
  </DocumentChange>
  <DocumentChange __id="2088" _type="Delete" date="Tue Mar 29 20:24:09 EDT 2022" docASTNodeCount="947" docActiveCodeLength="6815" docExpressionCount="695" docLength="7332" endLine="92" length="3" offset="3640" repeat="3" startLine="92" starttimestamp="1648594670066" timestamp="5178974" timestamp2="5179655">
    <text><![CDATA[.le]]></text>
  </DocumentChange>
  <DocumentChange __id="2094" _type="Insert" date="Tue Mar 29 20:24:10 EDT 2022" docASTNodeCount="947" docActiveCodeLength="6816" docExpressionCount="695" docLength="7333" length="1" offset="3641" starttimestamp="1648594670066" timestamp="5180482">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2104" _type="Insert" date="Tue Mar 29 20:24:13 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6823" docExpressionCount="697" docLength="7340" length="7" offset="3626" repeat="7" starttimestamp="1648594670066" timestamp="5183091" timestamp2="5184521">
    <text><![CDATA[length(]]></text>
  </DocumentChange>
  <DocumentChange __id="2120" _type="Insert" date="Tue Mar 29 20:24:16 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6824" docExpressionCount="697" docLength="7341" length="1" offset="3648" starttimestamp="1648594670066" timestamp="5186738">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="2130" _type="PauseCommand" date="Tue Mar 29 20:24:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5193122">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4617]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="2129" _type="Delete" date="Tue Mar 29 20:24:23 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6823" docExpressionCount="697" docLength="7340" endLine="92" length="1" offset="3648" startLine="92" starttimestamp="1648594670066" timestamp="5193122">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="2131" _type="UndoCommand" date="Tue Mar 29 20:24:23 EDT 2022" starttimestamp="1648594670066" timestamp="5193137" />
  <Command __id="2133" _type="UndoCommand" date="Tue Mar 29 20:24:23 EDT 2022" starttimestamp="1648594670066" timestamp="5193661" />
  <Command __id="2135" _type="PauseCommand" date="Tue Mar 29 20:24:26 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5196041">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2380]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2134" _type="ShellCommand" date="Tue Mar 29 20:24:26 EDT 2022" starttimestamp="1648594670066" timestamp="5196041" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2137" _type="PauseCommand" date="Tue Mar 29 20:24:35 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5205669">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9628]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2136" _type="ShellCommand" date="Tue Mar 29 20:24:35 EDT 2022" starttimestamp="1648594670066" timestamp="5205669" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2138" _type="MoveCaretCommand" caretOffset="3626" date="Tue Mar 29 20:24:35 EDT 2022" docOffset="3626" starttimestamp="1648594670066" timestamp="5205726" />
  <Command __id="2140" _type="InsertStringCommand" date="Tue Mar 29 20:24:36 EDT 2022" starttimestamp="1648594670066" timestamp="5206096" timestamp2="5206096">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2142" _type="InsertStringCommand" date="Tue Mar 29 20:24:36 EDT 2022" starttimestamp="1648594670066" timestamp="5206212" timestamp2="5206212">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2144" _type="InsertStringCommand" date="Tue Mar 29 20:24:36 EDT 2022" starttimestamp="1648594670066" timestamp="5206415" timestamp2="5206415">
    <data><![CDATA[z]]></data>
  </Command>
  <Command __id="2146" _type="InsertStringCommand" date="Tue Mar 29 20:24:36 EDT 2022" starttimestamp="1648594670066" timestamp="5206582" timestamp2="5206582">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2148" _type="InsertStringCommand" date="Tue Mar 29 20:24:36 EDT 2022" starttimestamp="1648594670066" timestamp="5206851" timestamp2="5206851">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2150" _type="PauseCommand" date="Tue Mar 29 20:24:38 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5208214">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1363]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2149" _type="MoveCaretCommand" caretOffset="3646" date="Tue Mar 29 20:24:38 EDT 2022" docOffset="3646" starttimestamp="1648594670066" timestamp="5208214" />
  <Command __id="2152" _type="InsertStringCommand" date="Tue Mar 29 20:24:38 EDT 2022" starttimestamp="1648594670066" timestamp="5208715" timestamp2="5208715">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="2154" _type="PauseCommand" date="Tue Mar 29 20:24:40 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5210301">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1586]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2153" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:24:40 EDT 2022" starttimestamp="1648594670066" timestamp="5210301" />
  <Command __id="2155" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:24:40 EDT 2022" starttimestamp="1648594670066" timestamp="5210389" />
  <Command __id="2156" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:24:40 EDT 2022" starttimestamp="1648594670066" timestamp="5210431" />
  <Command __id="2157" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5210539" type="Run" />
  <Command __id="2158" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5210539" type="Run" />
  <Command __id="2159" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:24:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5210539" type="Run" />
  <DocumentChange __id="2132" _type="Delete" date="Tue Mar 29 20:24:23 EDT 2022" docASTNodeCount="947" docActiveCodeLength="6816" docExpressionCount="695" docLength="7333" endLine="92" length="7" offset="3626" startLine="92" starttimestamp="1648594670066" timestamp="5193652">
    <text><![CDATA[length(]]></text>
  </DocumentChange>
  <DocumentChange __id="2139" _type="Insert" date="Tue Mar 29 20:24:36 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6821" docExpressionCount="697" docLength="7338" length="5" offset="3626" repeat="5" starttimestamp="1648594670066" timestamp="5206086" timestamp2="5206846">
    <text><![CDATA[size(]]></text>
  </DocumentChange>
  <DocumentChange __id="2151" _type="Insert" date="Tue Mar 29 20:24:38 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6822" docExpressionCount="697" docLength="7339" length="1" offset="3646" starttimestamp="1648594670066" timestamp="5208704">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="2161" _type="PauseCommand" date="Tue Mar 29 20:24:47 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5217478">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6939]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="2160" _type="Delete" date="Tue Mar 29 20:24:47 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6821" docExpressionCount="697" docLength="7338" endLine="92" length="1" offset="3646" startLine="92" starttimestamp="1648594670066" timestamp="5217478">
    <text><![CDATA[)]]></text>
  </DocumentChange>
  <Command __id="2162" _type="UndoCommand" date="Tue Mar 29 20:24:47 EDT 2022" starttimestamp="1648594670066" timestamp="5217492" />
  <Command __id="2164" _type="UndoCommand" date="Tue Mar 29 20:24:47 EDT 2022" starttimestamp="1648594670066" timestamp="5217892" />
  <Command __id="2166" _type="PauseCommand" date="Tue Mar 29 20:24:48 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5218923">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1031]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2249" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:26:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5331013" type="Run" />
  <Command __id="2251" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:26:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5331082" type="Run" />
  <Command __id="2252" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:26:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5331146" type="Run" />
  <Command __id="2253" _type="ConsoleOutput" date="Tue Mar 29 20:26:41 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5331185" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.6658045514232223"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2254" _type="ConsoleOutput" date="Tue Mar 29 20:26:41 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5331366" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner open"), Diff(INSERT,"Client register"), Diff(EQUAL,"ed¶")]]]></diff>
  </Command>
  <Command __id="2255" _type="ConsoleOutput" date="Tue Mar 29 20:26:41 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5331370" type="ConsoleOutput">
    <outputString><![CDATA[Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2256" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:26:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5331940" type="Run" />
  <Command __id="2257" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:26:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5331940" type="Run" />
  <Command __id="2258" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:26:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5332282" type="Run" />
  <Command __id="2259" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:26:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5332357" type="Run" />
  <Command __id="2260" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:26:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5332424" type="Run" />
  <Command __id="2261" _type="ConsoleOutput" date="Tue Mar 29 20:26:42 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5332493" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2262" _type="ConsoleOutput" date="Tue Mar 29 20:26:42 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5332612" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2264" _type="PauseCommand" date="Tue Mar 29 20:26:47 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5337539">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4927]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2283" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 29 20:27:20 EDT 2022" docOffset="0" starttimestamp="1648594670066" timestamp="5369942" />
  <Command __id="2281" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:27:19 EDT 2022" docASTNodeCount="53" docActiveCodeLength="314" docExpressionCount="32" docLength="314" projectName="A4" starttimestamp="1648594670066" timestamp="5369745">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A4\src\server\Server.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server;

import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({ DistributedTags.SERVER, DistributedTags.RMI })
public class Server {

	public static void main(final String[] args) {
		final ServerRemoteObject server = new ServerRemoteObject();

		server.start(args);
	}

}
]]></snapshot>
  </Command>
  <Command __id="2285" _type="PauseCommand" date="Tue Mar 29 20:27:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5373505">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3563]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2289" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 29 20:27:25 EDT 2022" docOffset="0" starttimestamp="1648594670066" timestamp="5375694" />
  <Command __id="2290" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:27:26 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5376114" type="Run" />
  <Command __id="2287" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:27:25 EDT 2022" docASTNodeCount="605" docActiveCodeLength="4301" docExpressionCount="446" docLength="4713" projectName="A4" starttimestamp="1648594670066" timestamp="5375475">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A4\src\server\ServerRemoteObject.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterface;
import util.annotations.Tags;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI})
public class ServerRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterface{
	List<ClientRemoteInterface> clientList = new ArrayList<ClientRemoteInterface>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//int aProposalNumber = 0;
	
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterface aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterface originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterface client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterface server = new ServerRemoteObject();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterface) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

}
]]></snapshot>
  </Command>
  <Command __id="2292" _type="PauseCommand" date="Tue Mar 29 20:28:44 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="5454014">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[77900]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2315" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 20:30:03 EDT 2022" starttimestamp="1648594670066" timestamp="5533912" />
  <Command __id="2317" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:30:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5533957" type="Debug" />
  <Command __id="2318" _type="ProgramExecutionEvent" className="/A4/src/client/Client.java" date="Tue Mar 29 20:30:04 EDT 2022" kind="HitBreakPoint" projectName="A4" starttimestamp="1648594670066" timestamp="5533957" type="Run" />
  <Command __id="2319" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:30:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5533957" type="Debug" />
  <Command __id="2320" _type="ProgramExecutionEvent" className="/A4/src/client/Client.java" date="Tue Mar 29 20:30:04 EDT 2022" kind="HitBreakPoint" projectName="A4" starttimestamp="1648594670066" timestamp="5533957" type="Run" />
  <Command __id="2294" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:29:03 EDT 2022" docASTNodeCount="605" docActiveCodeLength="4301" docExpressionCount="446" docLength="4713" projectName="A4" starttimestamp="1648594670066" timestamp="5473255">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A4\src\server\ServerRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterface;¶import util.annotations.Tags;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI})¶public class ServerRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterface{¶	List<ClientRemoteInterface> clientList = new ArrayList<ClientRemoteInterface>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//int aProposalNumber = 0;¶	¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterface aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterface originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterface client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterface server = new ServerRemoteObject();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterface) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2322" _type="PauseCommand" date="Tue Mar 29 20:30:09 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5539609">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5652]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2323" _type="MoveCaretCommand" caretOffset="3647" date="Tue Mar 29 20:30:09 EDT 2022" docOffset="3647" starttimestamp="1648594670066" timestamp="5539772" />
  <Command __id="2321" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:30:09 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6823" docExpressionCount="697" docLength="7340" projectName="A5" starttimestamp="1648594670066" timestamp="5539609">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2325" _type="PauseCommand" date="Tue Mar 29 20:30:19 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5549263">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9491]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2326" _type="MoveCaretCommand" caretOffset="1195" date="Tue Mar 29 20:30:19 EDT 2022" docOffset="1195" starttimestamp="1648594670066" timestamp="5549751" />
  <Command __id="2328" _type="PauseCommand" date="Tue Mar 29 20:30:47 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="5577001">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[27250]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2327" _type="MoveCaretCommand" caretOffset="599" date="Tue Mar 29 20:30:47 EDT 2022" docOffset="599" starttimestamp="1648594670066" timestamp="5577001" />
  <Command __id="2330" _type="InsertStringCommand" date="Tue Mar 29 20:30:47 EDT 2022" starttimestamp="1648594670066" timestamp="5577445" timestamp2="5577445">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2332" _type="PauseCommand" date="Tue Mar 29 20:30:49 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5579821">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2375]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2331" _type="MoveCaretCommand" caretOffset="733" date="Tue Mar 29 20:30:49 EDT 2022" docOffset="733" starttimestamp="1648594670066" timestamp="5579820" />
  <Command __id="2334" _type="InsertStringCommand" date="Tue Mar 29 20:30:50 EDT 2022" starttimestamp="1648594670066" timestamp="5580081" timestamp2="5580081">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2336" _type="PauseCommand" date="Tue Mar 29 20:30:51 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5581081">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1000]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2335" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:30:51 EDT 2022" starttimestamp="1648594670066" timestamp="5581081" />
  <Command __id="2337" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:30:51 EDT 2022" starttimestamp="1648594670066" timestamp="5581183" />
  <Command __id="2338" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:30:51 EDT 2022" starttimestamp="1648594670066" timestamp="5581211" />
  <Command __id="2324" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:30:19 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1253" docExpressionCount="90" docLength="1253" projectName="A5" starttimestamp="1648594670066" timestamp="5549263">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶"), Diff(INSERT,"import util.interactiveMethodInvocation.IPCMechanism;¶"), Diff(EQUAL,"import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;"), Diff(INSERT,"¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;"), Diff(EQUAL,"¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2329" _type="Insert" date="Tue Mar 29 20:30:47 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1256" docExpressionCount="90" docLength="1256" length="3" offset="599" starttimestamp="1648594670066" timestamp="5577438">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="2333" _type="Insert" date="Tue Mar 29 20:30:50 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1259" docExpressionCount="90" docLength="1259" length="3" offset="733" starttimestamp="1648594670066" timestamp="5580073">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="2340" _type="PauseCommand" date="Tue Mar 29 20:30:55 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5585015">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3804]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2341" _type="MoveCaretCommand" caretOffset="3647" date="Tue Mar 29 20:30:55 EDT 2022" docOffset="3647" starttimestamp="1648594670066" timestamp="5585112" />
  <Command __id="2339" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:30:55 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6823" docExpressionCount="697" docLength="7340" projectName="A5" starttimestamp="1648594670066" timestamp="5585015">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2343" _type="PauseCommand" date="Tue Mar 29 20:31:14 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="5604558">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[19446]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2344" _type="MoveCaretCommand" caretOffset="988" date="Tue Mar 29 20:31:14 EDT 2022" docOffset="988" starttimestamp="1648594670066" timestamp="5604653" />
  <Command __id="2342" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:31:14 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="5604558">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2346" _type="PauseCommand" date="Tue Mar 29 20:31:17 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5607069">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2416]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2347" _type="MoveCaretCommand" caretOffset="5336" date="Tue Mar 29 20:31:17 EDT 2022" docOffset="5336" starttimestamp="1648594670066" timestamp="5607161" />
  <Command __id="2349" _type="PauseCommand" date="Tue Mar 29 20:31:23 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5613420">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6259]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2348" _type="MoveCaretCommand" caretOffset="7664" date="Tue Mar 29 20:31:23 EDT 2022" docOffset="7664" starttimestamp="1648594670066" timestamp="5613420" />
  <Command __id="2351" _type="PauseCommand" date="Tue Mar 29 20:31:25 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5615790">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2370]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2350" _type="MoveCaretCommand" caretOffset="7660" date="Tue Mar 29 20:31:25 EDT 2022" docOffset="7660" starttimestamp="1648594670066" timestamp="5615790" />
  <Command __id="2353" _type="InsertStringCommand" date="Tue Mar 29 20:31:26 EDT 2022" starttimestamp="1648594670066" timestamp="5616350" timestamp2="5616350">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2355" _type="InsertStringCommand" date="Tue Mar 29 20:31:26 EDT 2022" starttimestamp="1648594670066" timestamp="5616602" timestamp2="5616602">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="2357" _type="InsertStringCommand" date="Tue Mar 29 20:31:27 EDT 2022" starttimestamp="1648594670066" timestamp="5617178" timestamp2="5617178">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2359" _type="InsertStringCommand" date="Tue Mar 29 20:31:27 EDT 2022" starttimestamp="1648594670066" timestamp="5617323" timestamp2="5617323">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2361" _type="InsertStringCommand" date="Tue Mar 29 20:31:27 EDT 2022" starttimestamp="1648594670066" timestamp="5617469" timestamp2="5617469">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2363" _type="PauseCommand" date="Tue Mar 29 20:31:30 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5620469">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3000]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2362" _type="MoveCaretCommand" caretOffset="8171" date="Tue Mar 29 20:31:30 EDT 2022" docOffset="8171" starttimestamp="1648594670066" timestamp="5620469" />
  <Command __id="2365" _type="InsertStringCommand" date="Tue Mar 29 20:31:31 EDT 2022" starttimestamp="1648594670066" timestamp="5621218" timestamp2="5621218">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2367" _type="InsertStringCommand" date="Tue Mar 29 20:31:31 EDT 2022" starttimestamp="1648594670066" timestamp="5621361" timestamp2="5621361">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2369" _type="InsertStringCommand" date="Tue Mar 29 20:31:31 EDT 2022" starttimestamp="1648594670066" timestamp="5621502" timestamp2="5621502">
    <data><![CDATA[*]]></data>
  </Command>
  <Command __id="2371" _type="InsertStringCommand" date="Tue Mar 29 20:31:32 EDT 2022" starttimestamp="1648594670066" timestamp="5622086" timestamp2="5622086">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="2373" _type="PauseCommand" date="Tue Mar 29 20:31:33 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5623436">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1350]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2372" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:31:33 EDT 2022" starttimestamp="1648594670066" timestamp="5623436" />
  <Command __id="2374" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:31:33 EDT 2022" starttimestamp="1648594670066" timestamp="5623530" />
  <Command __id="2375" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:31:33 EDT 2022" starttimestamp="1648594670066" timestamp="5623565" />
  <Command __id="2345" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:31:17 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8299" docExpressionCount="768" docLength="9070" projectName="A5" starttimestamp="1648594670066" timestamp="5607069">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶"), Diff(DELETE,"import assignments.util.inputParameters.SimulationParametersListener;¶"), Diff(EQUAL,"import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	"), Diff(INSERT,"private static boolean broadcastIPCMechansim = false;¶	"), Diff(EQUAL,"¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"if(mechanism.equals("GIPC")) {¶			"), Diff(INSERT,"			¶			"), Diff(EQUAL,"commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		"), Diff(DELETE,"System.out.print("HERE in broadcase meta method");¶		//Broadcast meta State via RMI always"), Diff(INSERT,"broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		"), Diff(EQUAL,"¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		if(mechanism.equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="2352" _type="Insert" date="Tue Mar 29 20:31:26 EDT 2022" docASTNodeCount="910" docActiveCodeLength="8353" docExpressionCount="655" docLength="9078" length="8" offset="7660" repeat="5" starttimestamp="1648594670066" timestamp="5616340" timestamp2="5617463">
    <text><![CDATA[
		/***]]></text>
  </DocumentChange>
  <DocumentChange __id="2364" _type="Insert" date="Tue Mar 29 20:31:31 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7800" docExpressionCount="730" docLength="9082" length="4" offset="8171" repeat="4" starttimestamp="1648594670066" timestamp="5621206" timestamp2="5622070">
    <text><![CDATA[***/]]></text>
  </DocumentChange>
  <Command __id="2377" _type="PauseCommand" date="Tue Mar 29 20:32:07 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="5657403">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[33838]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2378" _type="MoveCaretCommand" caretOffset="3647" date="Tue Mar 29 20:32:07 EDT 2022" docOffset="3647" starttimestamp="1648594670066" timestamp="5657564" />
  <Command __id="2380" _type="PauseCommand" date="Tue Mar 29 20:32:20 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="5670546">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12982]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2379" _type="SelectTextCommand" caretOffset="3568" date="Tue Mar 29 20:32:20 EDT 2022" end="3649" start="3568" starttimestamp="1648594670066" timestamp="5670546" />
  <Command __id="2381" _type="SelectTextCommand" caretOffset="3568" date="Tue Mar 29 20:32:20 EDT 2022" end="3649" start="3568" starttimestamp="1648594670066" timestamp="5670546" />
  <Command __id="2382" _type="CopyCommand" date="Tue Mar 29 20:32:20 EDT 2022" starttimestamp="1648594670066" timestamp="5670808" />
  <Command __id="2384" _type="PauseCommand" date="Tue Mar 29 20:32:22 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5672515">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1707]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2383" _type="MoveCaretCommand" caretOffset="3261" date="Tue Mar 29 20:32:22 EDT 2022" docOffset="3261" starttimestamp="1648594670066" timestamp="5672515" />
  <Command __id="2385" _type="MoveCaretCommand" caretOffset="3261" date="Tue Mar 29 20:32:22 EDT 2022" docOffset="3261" starttimestamp="1648594670066" timestamp="5672515" />
  <Command __id="2387" _type="InsertStringCommand" date="Tue Mar 29 20:32:23 EDT 2022" starttimestamp="1648594670066" timestamp="5673472" timestamp2="5673472">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="2388" _type="InsertStringCommand" date="Tue Mar 29 20:32:23 EDT 2022" starttimestamp="1648594670066" timestamp="5673472" timestamp2="5673472">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="2390" _type="PasteCommand" date="Tue Mar 29 20:32:24 EDT 2022" starttimestamp="1648594670066" timestamp="5674207" />
  <Command __id="2392" _type="InsertStringCommand" date="Tue Mar 29 20:32:24 EDT 2022" starttimestamp="1648594670066" timestamp="5674544" timestamp2="5674544">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2393" _type="InsertStringCommand" date="Tue Mar 29 20:32:24 EDT 2022" starttimestamp="1648594670066" timestamp="5674544" timestamp2="5674544">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2395" _type="PauseCommand" date="Tue Mar 29 20:32:27 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5677142">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2598]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2394" _type="SelectTextCommand" caretOffset="3232" date="Tue Mar 29 20:32:27 EDT 2022" end="3258" start="3232" starttimestamp="1648594670066" timestamp="5677142" />
  <Command __id="2396" _type="SelectTextCommand" caretOffset="3232" date="Tue Mar 29 20:32:27 EDT 2022" end="3258" start="3232" starttimestamp="1648594670066" timestamp="5677142" />
  <Command __id="2398" _type="InsertStringCommand" date="Tue Mar 29 20:32:27 EDT 2022" starttimestamp="1648594670066" timestamp="5677560" timestamp2="5677560">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="2399" _type="InsertStringCommand" date="Tue Mar 29 20:32:27 EDT 2022" starttimestamp="1648594670066" timestamp="5677560" timestamp2="5677560">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="2401" _type="InsertStringCommand" date="Tue Mar 29 20:32:28 EDT 2022" starttimestamp="1648594670066" timestamp="5678052" timestamp2="5678052">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="2402" _type="InsertStringCommand" date="Tue Mar 29 20:32:28 EDT 2022" starttimestamp="1648594670066" timestamp="5678052" timestamp2="5678052">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="2376" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:32:07 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6823" docExpressionCount="697" docLength="7340" projectName="A5" starttimestamp="1648594670066" timestamp="5657403">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)¶			throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2386" _type="Insert" date="Tue Mar 29 20:32:23 EDT 2022" docASTNodeCount="949" docActiveCodeLength="6825" docExpressionCount="697" docLength="7342" length="2" offset="3261" starttimestamp="1648594670066" timestamp="5673469">
    <text><![CDATA[		]]></text>
  </DocumentChange>
  <DocumentChange __id="2389" _type="Replace" date="Tue Mar 29 20:32:24 EDT 2022" docASTNodeCount="965" docActiveCodeLength="6906" docExpressionCount="711" docLength="7423" endLine="82" insertionLength="83" int_docASTNodeCount="949" int_docActiveCodeLength="6823" int_docExpressionCount="697" int_docLength="7340" length="2" offset="3261" startLine="82" starttimestamp="1648594670066" timestamp="5674199">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2391" _type="Insert" date="Tue Mar 29 20:32:24 EDT 2022" docASTNodeCount="965" docActiveCodeLength="6910" docExpressionCount="711" docLength="7427" length="4" offset="3344" starttimestamp="1648594670066" timestamp="5674536">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2397" _type="Replace" date="Tue Mar 29 20:32:27 EDT 2022" docASTNodeCount="964" docActiveCodeLength="6885" docExpressionCount="710" docLength="7402" endLine="81" insertionLength="1" int_docASTNodeCount="964" int_docActiveCodeLength="6884" int_docExpressionCount="710" int_docLength="7401" length="26" offset="3232" startLine="81" starttimestamp="1648594670066" timestamp="5677551">
    <deletedText><![CDATA[			throws RemoteException ]]></deletedText>
    <insertedText><![CDATA[\]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2400" _type="Insert" date="Tue Mar 29 20:32:28 EDT 2022" docASTNodeCount="964" docActiveCodeLength="6886" docExpressionCount="710" docLength="7403" length="1" offset="3233" starttimestamp="1648594670066" timestamp="5678045">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <Command __id="2404" _type="PauseCommand" date="Tue Mar 29 20:32:29 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5679707">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1655]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:29 EDT 2022" starttimestamp="1648594670066" timestamp="5679711" />
  <Command __id="2406" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:29 EDT 2022" starttimestamp="1648594670066" timestamp="5679711" />
  <Command __id="2408" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:29 EDT 2022" starttimestamp="1648594670066" timestamp="5679865" />
  <Command __id="2409" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:29 EDT 2022" starttimestamp="1648594670066" timestamp="5679866" />
  <Command __id="2411" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:30 EDT 2022" starttimestamp="1648594670066" timestamp="5680252" />
  <Command __id="2412" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:30 EDT 2022" starttimestamp="1648594670066" timestamp="5680252" />
  <Command __id="2414" _type="PauseCommand" date="Tue Mar 29 20:32:32 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5682421">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2169]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2413" _type="MoveCaretCommand" caretOffset="3235" date="Tue Mar 29 20:32:32 EDT 2022" docOffset="3235" starttimestamp="1648594670066" timestamp="5682421" />
  <Command __id="2415" _type="MoveCaretCommand" caretOffset="3235" date="Tue Mar 29 20:32:32 EDT 2022" docOffset="3235" starttimestamp="1648594670066" timestamp="5682421" />
  <Command __id="2417" _type="InsertStringCommand" date="Tue Mar 29 20:32:32 EDT 2022" starttimestamp="1648594670066" timestamp="5682816" timestamp2="5682816">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2418" _type="InsertStringCommand" date="Tue Mar 29 20:32:32 EDT 2022" starttimestamp="1648594670066" timestamp="5682816" timestamp2="5682816">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2419" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Mar 29 20:32:33 EDT 2022" starttimestamp="1648594670066" timestamp="5683720" />
  <Command __id="2420" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Mar 29 20:32:33 EDT 2022" starttimestamp="1648594670066" timestamp="5683720" />
  <Command __id="2422" _type="InsertStringCommand" date="Tue Mar 29 20:32:34 EDT 2022" starttimestamp="1648594670066" timestamp="5684276" timestamp2="5684276">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2423" _type="InsertStringCommand" date="Tue Mar 29 20:32:34 EDT 2022" starttimestamp="1648594670066" timestamp="5684276" timestamp2="5684276">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="2425" _type="InsertStringCommand" date="Tue Mar 29 20:32:34 EDT 2022" starttimestamp="1648594670066" timestamp="5684527" timestamp2="5684527">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2426" _type="InsertStringCommand" date="Tue Mar 29 20:32:34 EDT 2022" starttimestamp="1648594670066" timestamp="5684527" timestamp2="5684527">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="2428" _type="InsertStringCommand" date="Tue Mar 29 20:32:34 EDT 2022" starttimestamp="1648594670066" timestamp="5684630" timestamp2="5684630">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2429" _type="InsertStringCommand" date="Tue Mar 29 20:32:34 EDT 2022" starttimestamp="1648594670066" timestamp="5684630" timestamp2="5684630">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2431" _type="InsertStringCommand" date="Tue Mar 29 20:32:34 EDT 2022" starttimestamp="1648594670066" timestamp="5684770" timestamp2="5684770">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2432" _type="InsertStringCommand" date="Tue Mar 29 20:32:34 EDT 2022" starttimestamp="1648594670066" timestamp="5684770" timestamp2="5684770">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2434" _type="InsertStringCommand" date="Tue Mar 29 20:32:35 EDT 2022" starttimestamp="1648594670066" timestamp="5685190" timestamp2="5685190">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2435" _type="InsertStringCommand" date="Tue Mar 29 20:32:35 EDT 2022" starttimestamp="1648594670066" timestamp="5685190" timestamp2="5685190">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2437" _type="InsertStringCommand" date="Tue Mar 29 20:32:35 EDT 2022" starttimestamp="1648594670066" timestamp="5685298" timestamp2="5685298">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2438" _type="InsertStringCommand" date="Tue Mar 29 20:32:35 EDT 2022" starttimestamp="1648594670066" timestamp="5685298" timestamp2="5685298">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="2440" _type="InsertStringCommand" date="Tue Mar 29 20:32:35 EDT 2022" starttimestamp="1648594670066" timestamp="5685480" timestamp2="5685480">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2441" _type="InsertStringCommand" date="Tue Mar 29 20:32:35 EDT 2022" starttimestamp="1648594670066" timestamp="5685480" timestamp2="5685480">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2442" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:32:35 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="5685484" />
  <Command __id="2446" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:32:36 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="5686119" />
  <Command __id="2448" _type="InsertStringCommand" date="Tue Mar 29 20:32:36 EDT 2022" starttimestamp="1648594670066" timestamp="5686130" timestamp2="5686130">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2449" _type="InsertStringCommand" date="Tue Mar 29 20:32:36 EDT 2022" starttimestamp="1648594670066" timestamp="5686130" timestamp2="5686130">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2450" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 20:32:36 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="5686138" />
  <DocumentChange __id="2403" _type="Delete" date="Tue Mar 29 20:32:29 EDT 2022" docASTNodeCount="964" docActiveCodeLength="6882" docExpressionCount="710" docLength="7399" endLine="81" length="4" offset="3230" repeat="3" startLine="80" starttimestamp="1648594670066" timestamp="5679707" timestamp2="5680245">
    <text><![CDATA[
\\]]></text>
  </DocumentChange>
  <DocumentChange __id="2416" _type="Insert" date="Tue Mar 29 20:32:32 EDT 2022" docASTNodeCount="969" docActiveCodeLength="6896" docExpressionCount="712" docLength="7413" length="14" offset="3235" repeat="11" starttimestamp="1648594670066" timestamp="5682806" timestamp2="5685924">
    <text><![CDATA[System.out
		]]></text>
  </DocumentChange>
  <DocumentChange __id="2447" _type="Replace" date="Tue Mar 29 20:32:36 EDT 2022" docASTNodeCount="968" docActiveCodeLength="6897" docExpressionCount="714" docLength="7414" endLine="81" insertionLength="4" int_docASTNodeCount="966" int_docActiveCodeLength="6893" int_docExpressionCount="712" int_docLength="7410" length="3" offset="3242" startLine="81" starttimestamp="1648594670066" timestamp="5686122">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <Command __id="2452" _type="PauseCommand" date="Tue Mar 29 20:32:37 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5687308">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1170]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="2451" _type="Insert" date="Tue Mar 29 20:32:37 EDT 2022" docASTNodeCount="971" docActiveCodeLength="6902" docExpressionCount="714" docLength="7419" length="5" offset="3246" repeat="5" starttimestamp="1648594670066" timestamp="5687308" timestamp2="5688551">
    <text><![CDATA[prinl]]></text>
  </DocumentChange>
  <Command __id="2458" _type="PauseCommand" date="Tue Mar 29 20:32:39 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5688959">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1651]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="2457" _type="Delete" date="Tue Mar 29 20:32:39 EDT 2022" docASTNodeCount="971" docActiveCodeLength="6901" docExpressionCount="714" docLength="7418" endLine="81" length="1" offset="3250" startLine="81" starttimestamp="1648594670066" timestamp="5688959">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="2459" _type="Insert" date="Tue Mar 29 20:32:39 EDT 2022" docASTNodeCount="972" docActiveCodeLength="6910" docExpressionCount="717" docLength="7427" length="9" offset="3250" repeat="8" starttimestamp="1648594670066" timestamp="5689053" timestamp2="5691266">
    <text><![CDATA[tln(:cli)]]></text>
  </DocumentChange>
  <Command __id="2465" _type="PauseCommand" date="Tue Mar 29 20:32:40 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5690822">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1769]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2464" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 20:32:40 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="5690822" />
  <Command __id="2467" _type="InsertStringCommand" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691104" timestamp2="5691104">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2468" _type="InsertStringCommand" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691104" timestamp2="5691104">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2470" _type="InsertStringCommand" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691195" timestamp2="5691195">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2471" _type="InsertStringCommand" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691195" timestamp2="5691195">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2473" _type="InsertStringCommand" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691268" timestamp2="5691268">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2474" _type="InsertStringCommand" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691268" timestamp2="5691268">
    <data><![CDATA[i]]></data>
  </Command>
  <DocumentChange __id="2475" _type="Delete" date="Tue Mar 29 20:32:41 EDT 2022" docASTNodeCount="970" docActiveCodeLength="6906" docExpressionCount="715" docLength="7423" endLine="81" length="4" offset="3254" repeat="4" startLine="81" starttimestamp="1648594670066" timestamp="5691563" timestamp2="5692308">
    <text><![CDATA[:cli]]></text>
  </DocumentChange>
  <Command __id="2476" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691566" />
  <Command __id="2477" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691566" />
  <Command __id="2479" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691728" />
  <Command __id="2480" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691728" />
  <Command __id="2482" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691900" />
  <Command __id="2483" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:41 EDT 2022" starttimestamp="1648594670066" timestamp="5691900" />
  <Command __id="2485" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:42 EDT 2022" starttimestamp="1648594670066" timestamp="5692313" />
  <Command __id="2486" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:32:42 EDT 2022" starttimestamp="1648594670066" timestamp="5692313" />
  <Command __id="2488" _type="InsertStringCommand" date="Tue Mar 29 20:32:42 EDT 2022" starttimestamp="1648594670066" timestamp="5692633" timestamp2="5692633">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2489" _type="InsertStringCommand" date="Tue Mar 29 20:32:42 EDT 2022" starttimestamp="1648594670066" timestamp="5692634" timestamp2="5692634">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="2491" _type="InsertStringCommand" date="Tue Mar 29 20:32:42 EDT 2022" starttimestamp="1648594670066" timestamp="5692875" timestamp2="5692875">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2492" _type="InsertStringCommand" date="Tue Mar 29 20:32:42 EDT 2022" starttimestamp="1648594670066" timestamp="5692875" timestamp2="5692875">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2494" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5692986" timestamp2="5692986">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2495" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5692987" timestamp2="5692987">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2497" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693111" timestamp2="5693111">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2498" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693111" timestamp2="5693111">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2500" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693175" timestamp2="5693175">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2501" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693175" timestamp2="5693175">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2503" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693672" timestamp2="5693672">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2504" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693673" timestamp2="5693673">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2506" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693799" timestamp2="5693799">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2507" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693799" timestamp2="5693799">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2509" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693904" timestamp2="5693904">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2510" _type="InsertStringCommand" date="Tue Mar 29 20:32:43 EDT 2022" starttimestamp="1648594670066" timestamp="5693904" timestamp2="5693904">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2512" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694044" timestamp2="5694044">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2513" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694044" timestamp2="5694044">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="2515" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694092" timestamp2="5694092">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2516" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694092" timestamp2="5694092">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2518" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694238" timestamp2="5694238">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2519" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694238" timestamp2="5694238">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2521" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694329" timestamp2="5694329">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2522" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694329" timestamp2="5694329">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2524" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694463" timestamp2="5694463">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2525" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694463" timestamp2="5694463">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2527" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694515" timestamp2="5694515">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2528" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694515" timestamp2="5694515">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="2530" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694656" timestamp2="5694656">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2531" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694656" timestamp2="5694656">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2533" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694733" timestamp2="5694733">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2534" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694733" timestamp2="5694733">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2536" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694855" timestamp2="5694855">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2537" _type="InsertStringCommand" date="Tue Mar 29 20:32:44 EDT 2022" starttimestamp="1648594670066" timestamp="5694855" timestamp2="5694855">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2539" _type="InsertStringCommand" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5694949" timestamp2="5694949">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2540" _type="InsertStringCommand" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5694949" timestamp2="5694949">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="2542" _type="InsertStringCommand" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695047" timestamp2="5695047">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2543" _type="InsertStringCommand" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695047" timestamp2="5695047">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2545" _type="InsertStringCommand" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695188" timestamp2="5695188">
    <data><![CDATA[z]]></data>
  </Command>
  <Command __id="2546" _type="InsertStringCommand" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695188" timestamp2="5695188">
    <data><![CDATA[z]]></data>
  </Command>
  <Command __id="2548" _type="InsertStringCommand" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695360" timestamp2="5695360">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2549" _type="InsertStringCommand" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695360" timestamp2="5695360">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2550" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695655" />
  <Command __id="2551" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695655" />
  <Command __id="2552" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695831" />
  <Command __id="2553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 20:32:45 EDT 2022" starttimestamp="1648594670066" timestamp="5695831" />
  <Command __id="2555" _type="InsertStringCommand" date="Tue Mar 29 20:32:46 EDT 2022" starttimestamp="1648594670066" timestamp="5696673" timestamp2="5696673">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2556" _type="InsertStringCommand" date="Tue Mar 29 20:32:46 EDT 2022" starttimestamp="1648594670066" timestamp="5696674" timestamp2="5696674">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="2557" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:32:47 EDT 2022" starttimestamp="1648594670066" timestamp="5697090" />
  <Command __id="2558" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:32:47 EDT 2022" starttimestamp="1648594670066" timestamp="5697186" />
  <Command __id="2559" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:32:47 EDT 2022" starttimestamp="1648594670066" timestamp="5697260" />
  <Command __id="2561" _type="PauseCommand" date="Tue Mar 29 20:33:06 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="5716887">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[19627]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2560" _type="ShellCommand" date="Tue Mar 29 20:33:06 EDT 2022" starttimestamp="1648594670066" timestamp="5716887" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2562" _type="ShellCommand" date="Tue Mar 29 20:33:07 EDT 2022" starttimestamp="1648594670066" timestamp="5716999" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2574" _type="PauseCommand" date="Tue Mar 29 20:33:10 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5719976">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2926]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2573" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 20:33:10 EDT 2022" starttimestamp="1648594670066" timestamp="5719976" />
  <Command __id="2575" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:33:10 EDT 2022" starttimestamp="1648594670066" timestamp="5720075" />
  <Command __id="2576" _type="EclipseCommand" commandID="" date="Tue Mar 29 20:33:10 EDT 2022" starttimestamp="1648594670066" timestamp="5720113" />
  <DocumentChange __id="2487" _type="Insert" date="Tue Mar 29 20:32:42 EDT 2022" docASTNodeCount="971" docActiveCodeLength="6928" docExpressionCount="716" docLength="7445" length="22" offset="3254" repeat="21" starttimestamp="1648594670066" timestamp="5692630" timestamp2="5695357">
    <text><![CDATA["client list and size"]]></text>
  </DocumentChange>
  <DocumentChange __id="2554" _type="Insert" date="Tue Mar 29 20:32:46 EDT 2022" docASTNodeCount="971" docActiveCodeLength="6929" docExpressionCount="716" docLength="7446" length="1" offset="3277" starttimestamp="1648594670066" timestamp="5696665">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="2563" _type="Delete" date="Tue Mar 29 20:33:07 EDT 2022" docASTNodeCount="965" docActiveCodeLength="6882" docExpressionCount="711" docLength="7399" endLine="105" length="47" offset="4007" startLine="105" starttimestamp="1648594670066" timestamp="5717044">
    <text><![CDATA[client.inCoupler(aNewCommand, aProposalNumber);]]></text>
  </DocumentChange>
  <DocumentChange __id="2564" _type="Insert" date="Tue Mar 29 20:33:07 EDT 2022" docASTNodeCount="983" docActiveCodeLength="7012" docExpressionCount="721" docLength="7563" length="164" offset="4007" repeat="9" starttimestamp="1648594670066" timestamp="5717050" timestamp2="5717071">
    <text><![CDATA[try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}]]></text>
  </DocumentChange>
  <Command __id="2578" _type="PauseCommand" date="Tue Mar 29 20:33:17 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5727791">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7677]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2579" _type="MoveCaretCommand" caretOffset="736" date="Tue Mar 29 20:33:17 EDT 2022" docOffset="736" starttimestamp="1648594670066" timestamp="5727901" />
  <Command __id="2577" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:33:17 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1259" docExpressionCount="90" docLength="1259" projectName="A5" starttimestamp="1648594670066" timestamp="5727790">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	"), Diff(INSERT,"¶	"), Diff(EQUAL,"public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	"), Diff(INSERT,"¶	"), Diff(EQUAL,"void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="2581" _type="PauseCommand" date="Tue Mar 29 20:33:20 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5730670">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2769]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2582" _type="MoveCaretCommand" caretOffset="3278" date="Tue Mar 29 20:33:20 EDT 2022" docOffset="3278" starttimestamp="1648594670066" timestamp="5730769" />
  <Command __id="2584" _type="PauseCommand" date="Tue Mar 29 20:33:29 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5739167">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8398]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2583" _type="ShellCommand" date="Tue Mar 29 20:33:29 EDT 2022" starttimestamp="1648594670066" timestamp="5739167" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2586" _type="PauseCommand" date="Tue Mar 29 20:33:31 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5740939">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1772]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2585" _type="ShellCommand" date="Tue Mar 29 20:33:31 EDT 2022" starttimestamp="1648594670066" timestamp="5740939" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2587" _type="ProgramExecutionEvent" className="/A4/src/client/Client.java" date="Tue Mar 29 20:33:31 EDT 2022" kind="HitBreakPoint" projectName="A4" starttimestamp="1648594670066" timestamp="5741030" type="Run" />
  <Command __id="2588" _type="RunCommand" className="/A4/src/client/Client.java" date="Tue Mar 29 20:33:31 EDT 2022" kind="HitBreakPoint" projectName="A4" starttimestamp="1648594670066" timestamp="5741030" type="Run" />
  <Command __id="2589" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:33:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5741249" type="Run" />
  <Command __id="2590" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:33:31 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5741263" type="Run" />
  <Command __id="2591" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:33:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5741266" type="Run" />
  <Command __id="2592" _type="ConsoleOutput" date="Tue Mar 29 20:33:31 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5741615" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.345889065271448
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.345889065271448"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2594" _type="PauseCommand" date="Tue Mar 29 20:33:33 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5743005">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1390]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2593" _type="ShellCommand" date="Tue Mar 29 20:33:33 EDT 2022" starttimestamp="1648594670066" timestamp="5743005" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2596" _type="PauseCommand" date="Tue Mar 29 20:33:34 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="5744443">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1438]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2597" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:33:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5746282" type="Run" />
  <Command __id="2600" _type="PauseCommand" date="Tue Mar 29 20:33:38 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5748731">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2449]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2599" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Tue Mar 29 20:33:38 EDT 2022" starttimestamp="1648594670066" timestamp="5748731" />
  <Command __id="2601" _type="RunCommand" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 20:33:38 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="5748845" type="Run" />
  <Command __id="2602" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:33:39 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5749350" type="Run" />
  <Command __id="2603" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:33:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5749356" type="Run" />
  <Command __id="2604" _type="ShellCommand" date="Tue Mar 29 20:33:39 EDT 2022" starttimestamp="1648594670066" timestamp="5749708" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2605" _type="ShellCommand" date="Tue Mar 29 20:33:40 EDT 2022" starttimestamp="1648594670066" timestamp="5750332" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2606" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:33:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5750674" type="Run" />
  <Command __id="2607" _type="ExceptionCommand" date="Tue Mar 29 20:33:40 EDT 2022" starttimestamp="1648594670066" timestamp="5750799" type="Exception">
    <exceptionString><![CDATA[java.rmi.NotBoundException: SERVER
	at java.rmi/sun.rmi.registry.RegistryImpl.lookup(RegistryImpl.java:234)
	at java.rmi/sun.rmi.registry.RegistryImpl_Skel.dispatch(RegistryImpl_Skel.java:133)
	at java.rmi/sun.rmi.server.UnicastServerRef.oldDispatch(UnicastServerRef.java:468)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:298)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
	at java.rmi/sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:303)
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:279)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:380)
	at java.rmi/sun.rmi.registry.RegistryImpl_Stub.lookup(RegistryImpl_Stub.java:123)
	at client.ClientRemoteObject.init(ClientRemoteObject.java:104)
	at coupledsims.AStandAloneTwoCoupledHalloweenSimulations.start(AStandAloneTwoCoupledHalloweenSimulations.java:95)
	at client.Client.main(Client.java:14)
java.lang.NullPointerException
	at client.ClientRemoteObject.init(ClientRemoteObject.java:125)
	at coupledsims.AStandAloneTwoCoupledHalloweenSimulations.start(AStandAloneTwoCoupledHalloweenSimulations.java:95)
	at client.Client.main(Client.java:14)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2609" _type="PauseCommand" date="Tue Mar 29 20:33:49 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5759510">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[8711]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2608" _type="ShellCommand" date="Tue Mar 29 20:33:49 EDT 2022" starttimestamp="1648594670066" timestamp="5759510" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2611" _type="PauseCommand" date="Tue Mar 29 20:33:54 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5764244">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4734]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2612" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:33:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5765744" type="Run" />
  <Command __id="2615" _type="PauseCommand" date="Tue Mar 29 20:33:58 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5768758">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3014]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2628" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 20:34:11 EDT 2022" starttimestamp="1648594670066" timestamp="5781837" />
  <Command __id="2630" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:34:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5781850" type="Debug" />
  <Command __id="2631" _type="ProgramExecutionEvent" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 20:34:11 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="5781850" type="Run" />
  <Command __id="2632" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:34:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5781850" type="Debug" />
  <Command __id="2633" _type="ProgramExecutionEvent" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 20:34:11 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="5781850" type="Run" />
  <Command __id="2635" _type="PauseCommand" date="Tue Mar 29 20:34:17 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5787501">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5651]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2634" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Tue Mar 29 20:34:17 EDT 2022" starttimestamp="1648594670066" timestamp="5787501" />
  <Command __id="2636" _type="ProgramExecutionEvent" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 20:34:17 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="5787913" type="Run" />
  <Command __id="2637" _type="RunCommand" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 20:34:17 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="5787913" type="Run" />
  <Command __id="2638" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:34:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5788138" type="Run" />
  <Command __id="2639" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:34:18 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5788155" type="Run" />
  <Command __id="2640" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:34:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5788160" type="Run" />
  <Command __id="2642" _type="PauseCommand" date="Tue Mar 29 20:34:22 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5792660">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4500]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2641" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.run" date="Tue Mar 29 20:34:22 EDT 2022" starttimestamp="1648594670066" timestamp="5792660" />
  <Command __id="2643" _type="RunCommand" className="/A5/src/server/Server.java" date="Tue Mar 29 20:34:22 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="5792729" type="Run" />
  <Command __id="2644" _type="ConsoleOutput" date="Tue Mar 29 20:34:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5793161" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.919520359227703
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"345889065271448"), Diff(INSERT,"919520359227703¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2645" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:34:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5793777" type="Run" />
  <Command __id="2646" _type="ConsoleOutput" date="Tue Mar 29 20:34:24 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5793956" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.919520359227703¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2648" _type="PauseCommand" date="Tue Mar 29 20:34:31 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="5801882">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7926]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2652" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:34:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5807164" type="Run" />
  <Command __id="2654" _type="ConsoleOutput" date="Tue Mar 29 20:34:37 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5807223" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.03911351359002668 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@35918557
[com.sun.proxy.$Proxy1@35918557]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.03911351359002668"), Diff(INSERT,"Server0<-->Generic Client:0.03911351359002668 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@35918557¶[com.sun.proxy.$Proxy1@35918557]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2655" _type="ConsoleOutput" date="Tue Mar 29 20:34:37 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5807381" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.03911351359002668 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC¶com.sun.proxy.$Proxy1@35918557¶[com.sun.proxy.$Proxy1@35918557]"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2656" _type="ConsoleOutput" date="Tue Mar 29 20:34:37 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="5807411" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2657" _type="ShellCommand" date="Tue Mar 29 20:34:38 EDT 2022" starttimestamp="1648594670066" timestamp="5808291" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2658" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:34:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5808896" type="Run" />
  <Command __id="2660" _type="PauseCommand" date="Tue Mar 29 20:34:56 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="5826693">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[17797]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="2663" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:35:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="5837196" type="Run" />
  <Command __id="2666" _type="PauseCommand" date="Tue Mar 29 20:36:09 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="5899596">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[62400]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2665" _type="ShellCommand" date="Tue Mar 29 20:36:09 EDT 2022" starttimestamp="1648594670066" timestamp="5899596" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2668" _type="PauseCommand" date="Tue Mar 29 20:36:12 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5902550">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2954]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2667" _type="ShellCommand" date="Tue Mar 29 20:36:12 EDT 2022" starttimestamp="1648594670066" timestamp="5902550" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2670" _type="PauseCommand" date="Tue Mar 29 20:36:14 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="5904818">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2268]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2669" _type="ShellCommand" date="Tue Mar 29 20:36:14 EDT 2022" starttimestamp="1648594670066" timestamp="5904818" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2672" _type="PauseCommand" date="Tue Mar 29 20:37:00 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="5950789">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[45971]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2671" _type="ShellCommand" date="Tue Mar 29 20:37:00 EDT 2022" starttimestamp="1648594670066" timestamp="5950789" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2673" _type="ShellCommand" date="Tue Mar 29 20:37:01 EDT 2022" starttimestamp="1648594670066" timestamp="5950972" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2675" _type="PauseCommand" date="Tue Mar 29 20:40:00 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="6129966">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[178994]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2674" _type="ShellCommand" date="Tue Mar 29 20:40:00 EDT 2022" starttimestamp="1648594670066" timestamp="6129966" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2580" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:33:20 EDT 2022" docASTNodeCount="983" docActiveCodeLength="7012" docExpressionCount="721" docLength="7563" projectName="A5" starttimestamp="1648594670066" timestamp="5730670">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber)"), Diff(INSERT,"{"), Diff(EQUAL,"¶		"), Diff(DELETE,"	throws RemoteException {¶"), Diff(INSERT,"System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		"), Diff(EQUAL,"¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶"), Diff(INSERT,"			try {¶	"), Diff(EQUAL,"			client.inCoupler(aNewCommand, aProposalNumber);¶			"), Diff(INSERT,"} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			"), Diff(EQUAL,"ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		System.out.println("client list and size");
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="2677" _type="PauseCommand" date="Tue Mar 29 20:40:10 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6140544">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10578]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2678" _type="MoveCaretCommand" caretOffset="988" date="Tue Mar 29 20:40:10 EDT 2022" docOffset="988" starttimestamp="1648594670066" timestamp="6140648" />
  <Command __id="2680" _type="PauseCommand" date="Tue Mar 29 20:40:23 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6153243">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12595]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2679" _type="ShellCommand" date="Tue Mar 29 20:40:23 EDT 2022" starttimestamp="1648594670066" timestamp="6153243" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2682" _type="PauseCommand" date="Tue Mar 29 20:42:35 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="6285770">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[132527]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2681" _type="ShellCommand" date="Tue Mar 29 20:42:35 EDT 2022" starttimestamp="1648594670066" timestamp="6285770" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2683" _type="MoveCaretCommand" caretOffset="961" date="Tue Mar 29 20:42:35 EDT 2022" docOffset="961" starttimestamp="1648594670066" timestamp="6285796" />
  <Command __id="2676" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:40:10 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="6140544">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2685" _type="PauseCommand" date="Tue Mar 29 20:42:43 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6293501">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7705]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2686" _type="MoveCaretCommand" caretOffset="3278" date="Tue Mar 29 20:42:43 EDT 2022" docOffset="3278" starttimestamp="1648594670066" timestamp="6293621" />
  <Command __id="2688" _type="PauseCommand" date="Tue Mar 29 20:42:48 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6298651">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5030]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2687" _type="MoveCaretCommand" caretOffset="1726" date="Tue Mar 29 20:42:48 EDT 2022" docOffset="1726" starttimestamp="1648594670066" timestamp="6298651" />
  <Command __id="2689" _type="MoveCaretCommand" caretOffset="1726" date="Tue Mar 29 20:42:48 EDT 2022" docOffset="1726" starttimestamp="1648594670066" timestamp="6298651" />
  <Command __id="2691" _type="PauseCommand" date="Tue Mar 29 20:42:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="6300601">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1950]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2690" _type="SelectTextCommand" caretOffset="1658" date="Tue Mar 29 20:42:50 EDT 2022" end="1694" start="1658" starttimestamp="1648594670066" timestamp="6300601" />
  <Command __id="2692" _type="SelectTextCommand" caretOffset="1658" date="Tue Mar 29 20:42:50 EDT 2022" end="1694" start="1658" starttimestamp="1648594670066" timestamp="6300601" />
  <Command __id="2694" _type="PauseCommand" date="Tue Mar 29 20:42:53 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6303810">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3209]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2693" _type="ShellCommand" date="Tue Mar 29 20:42:53 EDT 2022" starttimestamp="1648594670066" timestamp="6303810" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2696" _type="PauseCommand" date="Tue Mar 29 20:43:05 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6315695">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11885]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2695" _type="ShellCommand" date="Tue Mar 29 20:43:05 EDT 2022" starttimestamp="1648594670066" timestamp="6315695" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2698" _type="PauseCommand" date="Tue Mar 29 20:43:14 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6323957">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8262]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2697" _type="MoveCaretCommand" caretOffset="1679" date="Tue Mar 29 20:43:14 EDT 2022" docOffset="1679" starttimestamp="1648594670066" timestamp="6323957" />
  <Command __id="2699" _type="MoveCaretCommand" caretOffset="1679" date="Tue Mar 29 20:43:14 EDT 2022" docOffset="1679" starttimestamp="1648594670066" timestamp="6323957" />
  <Command __id="2701" _type="PauseCommand" date="Tue Mar 29 20:43:18 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6328343">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4386]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2700" _type="SelectTextCommand" caretOffset="1650" date="Tue Mar 29 20:43:18 EDT 2022" end="1693" start="1650" starttimestamp="1648594670066" timestamp="6328343" />
  <Command __id="2702" _type="SelectTextCommand" caretOffset="1650" date="Tue Mar 29 20:43:18 EDT 2022" end="1693" start="1650" starttimestamp="1648594670066" timestamp="6328343" />
  <Command __id="2704" _type="PauseCommand" date="Tue Mar 29 20:43:19 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="6329526">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1183]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2703" _type="MoveCaretCommand" caretOffset="1636" date="Tue Mar 29 20:43:19 EDT 2022" docOffset="1636" starttimestamp="1648594670066" timestamp="6329526" />
  <Command __id="2705" _type="MoveCaretCommand" caretOffset="1636" date="Tue Mar 29 20:43:19 EDT 2022" docOffset="1636" starttimestamp="1648594670066" timestamp="6329527" />
  <Command __id="2707" _type="PauseCommand" date="Tue Mar 29 20:43:32 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6342629">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13102]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2706" _type="SelectTextCommand" caretOffset="3109" date="Tue Mar 29 20:43:32 EDT 2022" end="3109" start="2887" starttimestamp="1648594670066" timestamp="6342629" />
  <Command __id="2708" _type="SelectTextCommand" caretOffset="3109" date="Tue Mar 29 20:43:32 EDT 2022" end="3109" start="2887" starttimestamp="1648594670066" timestamp="6342629" />
  <Command __id="2709" _type="MoveCaretCommand" caretOffset="2889" date="Tue Mar 29 20:43:33 EDT 2022" docOffset="2889" starttimestamp="1648594670066" timestamp="6343400" />
  <Command __id="2710" _type="MoveCaretCommand" caretOffset="2889" date="Tue Mar 29 20:43:33 EDT 2022" docOffset="2889" starttimestamp="1648594670066" timestamp="6343400" />
  <Command __id="2712" _type="PauseCommand" date="Tue Mar 29 20:43:38 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6348849">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5449]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2711" _type="SelectTextCommand" caretOffset="2972" date="Tue Mar 29 20:43:38 EDT 2022" end="2994" start="2972" starttimestamp="1648594670066" timestamp="6348849" />
  <Command __id="2713" _type="SelectTextCommand" caretOffset="2972" date="Tue Mar 29 20:43:38 EDT 2022" end="2994" start="2972" starttimestamp="1648594670066" timestamp="6348849" />
  <Command __id="2715" _type="PauseCommand" date="Tue Mar 29 20:43:40 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="6350291">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1442]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2714" _type="SelectTextCommand" caretOffset="2979" date="Tue Mar 29 20:43:40 EDT 2022" end="2979" start="2967" starttimestamp="1648594670066" timestamp="6350291" />
  <Command __id="2716" _type="SelectTextCommand" caretOffset="2979" date="Tue Mar 29 20:43:40 EDT 2022" end="2979" start="2967" starttimestamp="1648594670066" timestamp="6350291" />
  <Command __id="2718" _type="PauseCommand" date="Tue Mar 29 20:43:46 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6356572">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[6281]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2717" _type="MoveCaretCommand" caretOffset="3079" date="Tue Mar 29 20:43:46 EDT 2022" docOffset="3079" starttimestamp="1648594670066" timestamp="6356572" />
  <Command __id="2719" _type="MoveCaretCommand" caretOffset="3079" date="Tue Mar 29 20:43:46 EDT 2022" docOffset="3079" starttimestamp="1648594670066" timestamp="6356572" />
  <Command __id="2721" _type="PauseCommand" date="Tue Mar 29 20:44:04 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6374303">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[17731]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2720" _type="SelectTextCommand" caretOffset="3100" date="Tue Mar 29 20:44:04 EDT 2022" end="3100" start="3085" starttimestamp="1648594670066" timestamp="6374303" />
  <Command __id="2722" _type="SelectTextCommand" caretOffset="3100" date="Tue Mar 29 20:44:04 EDT 2022" end="3100" start="3085" starttimestamp="1648594670066" timestamp="6374304" />
  <Command __id="2724" _type="PauseCommand" date="Tue Mar 29 20:44:16 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6386801">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[12497]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2723" _type="SelectTextCommand" caretOffset="3159" date="Tue Mar 29 20:44:16 EDT 2022" end="3159" start="3137" starttimestamp="1648594670066" timestamp="6386801" />
  <Command __id="2725" _type="SelectTextCommand" caretOffset="3159" date="Tue Mar 29 20:44:16 EDT 2022" end="3159" start="3137" starttimestamp="1648594670066" timestamp="6386801" />
  <Command __id="2727" _type="PauseCommand" date="Tue Mar 29 20:44:30 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6400336">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[13535]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2726" _type="SelectTextCommand" caretOffset="3807" date="Tue Mar 29 20:44:30 EDT 2022" end="3807" start="3764" starttimestamp="1648594670066" timestamp="6400336" />
  <Command __id="2728" _type="SelectTextCommand" caretOffset="3807" date="Tue Mar 29 20:44:30 EDT 2022" end="3807" start="3764" starttimestamp="1648594670066" timestamp="6400336" />
  <Command __id="2730" _type="PauseCommand" date="Tue Mar 29 20:44:39 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6409269">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[8933]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2729" _type="SelectTextCommand" caretOffset="3699" date="Tue Mar 29 20:44:39 EDT 2022" end="3699" start="3680" starttimestamp="1648594670066" timestamp="6409269" />
  <Command __id="2731" _type="SelectTextCommand" caretOffset="3699" date="Tue Mar 29 20:44:39 EDT 2022" end="3699" start="3680" starttimestamp="1648594670066" timestamp="6409270" />
  <Command __id="2733" _type="PauseCommand" date="Tue Mar 29 20:44:50 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6420504">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[11234]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2732" _type="MoveCaretCommand" caretOffset="3709" date="Tue Mar 29 20:44:50 EDT 2022" docOffset="3709" starttimestamp="1648594670066" timestamp="6420504" />
  <Command __id="2734" _type="MoveCaretCommand" caretOffset="3709" date="Tue Mar 29 20:44:50 EDT 2022" docOffset="3709" starttimestamp="1648594670066" timestamp="6420504" />
  <Command __id="2736" _type="PauseCommand" date="Tue Mar 29 20:45:00 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6430744">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10240]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2740" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 29 20:45:19 EDT 2022" docOffset="0" starttimestamp="1648594670066" timestamp="6449560" />
  <Command __id="2738" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:45:19 EDT 2022" docASTNodeCount="605" docActiveCodeLength="4301" docExpressionCount="446" docLength="4713" projectName="A4" starttimestamp="1648594670066" timestamp="6449303">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A4\src\server\ServerRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterface;¶import util.annotations.Tags;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI})¶public class ServerRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterface{¶	List<ClientRemoteInterface> clientList = new ArrayList<ClientRemoteInterface>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//int aProposalNumber = 0;¶	¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterface aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterface originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterface client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterface server = new ServerRemoteObject();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterface) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2742" _type="PauseCommand" date="Tue Mar 29 20:45:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6453010">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3450]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2743" _type="SelectTextCommand" caretOffset="1702" date="Tue Mar 29 20:45:23 EDT 2022" end="1702" start="1663" starttimestamp="1648594670066" timestamp="6453188" />
  <Command __id="2745" _type="PauseCommand" date="Tue Mar 29 20:45:25 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="6455026">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1838]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2744" _type="MoveCaretCommand" caretOffset="1632" date="Tue Mar 29 20:45:25 EDT 2022" docOffset="1632" starttimestamp="1648594670066" timestamp="6455026" />
  <Command __id="2741" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:45:23 EDT 2022" docASTNodeCount="983" docActiveCodeLength="7012" docExpressionCount="721" docLength="7563" projectName="A5" starttimestamp="1648594670066" timestamp="6453010">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2747" _type="PauseCommand" date="Tue Mar 29 20:46:01 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="6490985">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[35959]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2748" _type="MoveCaretCommand" caretOffset="8175" date="Tue Mar 29 20:46:01 EDT 2022" docOffset="8175" starttimestamp="1648594670066" timestamp="6491117" />
  <Command __id="2750" _type="PauseCommand" date="Tue Mar 29 20:48:05 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="6615361">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[124244]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2749" _type="MoveCaretCommand" caretOffset="6533" date="Tue Mar 29 20:48:05 EDT 2022" docOffset="6533" starttimestamp="1648594670066" timestamp="6615361" />
  <Command __id="2752" _type="PauseCommand" date="Tue Mar 29 20:48:15 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6625420">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10059]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2751" _type="SelectTextCommand" caretOffset="6407" date="Tue Mar 29 20:48:15 EDT 2022" end="6407" start="6391" starttimestamp="1648594670066" timestamp="6625420" />
  <Command __id="2746" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:46:01 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7800" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="6490985">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		"), Diff(INSERT,"/***¶		"), Diff(EQUAL,"if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}"), Diff(INSERT,"***/"), Diff(EQUAL,"¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		/***
		if(mechanism.equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}***/
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="2754" _type="PauseCommand" date="Tue Mar 29 20:48:44 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="6654009">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[28589]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2755" _type="MoveCaretCommand" caretOffset="1632" date="Tue Mar 29 20:48:44 EDT 2022" docOffset="1632" starttimestamp="1648594670066" timestamp="6654145" />
  <Command __id="2757" _type="PauseCommand" date="Tue Mar 29 20:48:50 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6660430">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6285]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2756" _type="SelectTextCommand" caretOffset="1559" date="Tue Mar 29 20:48:50 EDT 2022" end="1590" start="1559" starttimestamp="1648594670066" timestamp="6660430" />
  <Command __id="2758" _type="SelectTextCommand" caretOffset="1559" date="Tue Mar 29 20:48:50 EDT 2022" end="1590" start="1559" starttimestamp="1648594670066" timestamp="6660430" />
  <Command __id="2760" _type="PauseCommand" date="Tue Mar 29 20:48:55 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6665001">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4571]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2759" _type="SelectTextCommand" caretOffset="1545" date="Tue Mar 29 20:48:55 EDT 2022" end="1557" start="1545" starttimestamp="1648594670066" timestamp="6665001" />
  <Command __id="2761" _type="SelectTextCommand" caretOffset="1545" date="Tue Mar 29 20:48:55 EDT 2022" end="1557" start="1545" starttimestamp="1648594670066" timestamp="6665002" />
  <Command __id="2763" _type="PauseCommand" date="Tue Mar 29 20:48:56 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="6666601">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1599]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2762" _type="SelectTextCommand" caretOffset="1564" date="Tue Mar 29 20:48:56 EDT 2022" end="1629" start="1564" starttimestamp="1648594670066" timestamp="6666601" />
  <Command __id="2764" _type="SelectTextCommand" caretOffset="1564" date="Tue Mar 29 20:48:56 EDT 2022" end="1629" start="1564" starttimestamp="1648594670066" timestamp="6666601" />
  <Command __id="2753" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:48:44 EDT 2022" docASTNodeCount="983" docActiveCodeLength="7012" docExpressionCount="721" docLength="7563" projectName="A5" starttimestamp="1648594670066" timestamp="6654009">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2766" _type="PauseCommand" date="Tue Mar 29 20:48:57 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="6667702">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1101]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2767" _type="MoveCaretCommand" caretOffset="961" date="Tue Mar 29 20:48:57 EDT 2022" docOffset="961" starttimestamp="1648594670066" timestamp="6667855" />
  <Command __id="2765" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:48:57 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="6667702">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2769" _type="PauseCommand" date="Tue Mar 29 20:49:04 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6674505">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6650]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2770" _type="SelectTextCommand" caretOffset="6407" date="Tue Mar 29 20:49:04 EDT 2022" end="6407" start="6391" starttimestamp="1648594670066" timestamp="6674645" />
  <Command __id="2772" _type="PauseCommand" date="Tue Mar 29 20:49:13 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6683202">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[8557]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2771" _type="SelectTextCommand" caretOffset="5799" date="Tue Mar 29 20:49:13 EDT 2022" end="5884" start="5799" starttimestamp="1648594670066" timestamp="6683202" />
  <Command __id="2774" _type="PauseCommand" date="Tue Mar 29 20:49:17 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6687599">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4397]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2773" _type="SelectTextCommand" caretOffset="6390" date="Tue Mar 29 20:49:17 EDT 2022" end="6408" start="6390" starttimestamp="1648594670066" timestamp="6687599" />
  <Command __id="2768" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:49:04 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7800" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="6674505">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2776" _type="PauseCommand" date="Tue Mar 29 20:49:36 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6706391">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[18792]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2777" _type="MoveCaretCommand" caretOffset="736" date="Tue Mar 29 20:49:36 EDT 2022" docOffset="736" starttimestamp="1648594670066" timestamp="6706537" />
  <Command __id="2775" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:49:36 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1259" docExpressionCount="90" docLength="1259" projectName="A5" starttimestamp="1648594670066" timestamp="6706391">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2779" _type="PauseCommand" date="Tue Mar 29 20:50:03 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="6733669">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[27132]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2780" _type="MoveCaretCommand" caretOffset="961" date="Tue Mar 29 20:50:03 EDT 2022" docOffset="961" starttimestamp="1648594670066" timestamp="6733802" />
  <Command __id="2778" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:50:03 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="6733669">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2782" _type="PauseCommand" date="Tue Mar 29 20:50:17 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6747046">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13244]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2783" _type="SelectTextCommand" caretOffset="6390" date="Tue Mar 29 20:50:17 EDT 2022" end="6408" start="6390" starttimestamp="1648594670066" timestamp="6747164" />
  <Command __id="2785" _type="PauseCommand" date="Tue Mar 29 20:50:21 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6751686">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4522]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2784" _type="SelectTextCommand" caretOffset="6393" date="Tue Mar 29 20:50:21 EDT 2022" end="6417" start="6393" starttimestamp="1648594670066" timestamp="6751686" />
  <Command __id="2781" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:50:17 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7800" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="6747046">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2787" _type="PauseCommand" date="Tue Mar 29 20:50:41 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6771497">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[19811]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2788" _type="MoveCaretCommand" caretOffset="961" date="Tue Mar 29 20:50:41 EDT 2022" docOffset="961" starttimestamp="1648594670066" timestamp="6771629" />
  <Command __id="2790" _type="PauseCommand" date="Tue Mar 29 20:50:45 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6775470">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3841]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2789" _type="SelectTextCommand" caretOffset="760" date="Tue Mar 29 20:50:45 EDT 2022" end="777" start="760" starttimestamp="1648594670066" timestamp="6775470" />
  <Command __id="2792" _type="PauseCommand" date="Tue Mar 29 20:50:52 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6781970">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[6500]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2791" _type="SelectTextCommand" caretOffset="1640" date="Tue Mar 29 20:50:52 EDT 2022" end="1655" start="1640" starttimestamp="1648594670066" timestamp="6781970" />
  <Command __id="2794" _type="PauseCommand" date="Tue Mar 29 20:51:33 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="6823259">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[41289]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2793" _type="SelectTextCommand" caretOffset="589" date="Tue Mar 29 20:51:33 EDT 2022" end="646" start="589" starttimestamp="1648594670066" timestamp="6823259" />
  <Command __id="2796" _type="PauseCommand" date="Tue Mar 29 20:51:39 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6829133">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5874]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2795" _type="SelectTextCommand" caretOffset="1639" date="Tue Mar 29 20:51:39 EDT 2022" end="1655" start="1639" starttimestamp="1648594670066" timestamp="6829133" />
  <Command __id="2798" _type="PauseCommand" date="Tue Mar 29 20:51:47 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6837627">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[8494]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2797" _type="MoveCaretCommand" caretOffset="1645" date="Tue Mar 29 20:51:47 EDT 2022" docOffset="1645" starttimestamp="1648594670066" timestamp="6837627" />
  <Command __id="2800" _type="PauseCommand" date="Tue Mar 29 20:51:57 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="6847886">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10259]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2799" _type="MoveCaretCommand" caretOffset="1786" date="Tue Mar 29 20:51:57 EDT 2022" docOffset="1786" starttimestamp="1648594670066" timestamp="6847886" />
  <Command __id="2786" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:50:41 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="6771497">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2802" _type="PauseCommand" date="Tue Mar 29 20:52:07 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6857348">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9462]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2803" _type="SelectTextCommand" caretOffset="1564" date="Tue Mar 29 20:52:07 EDT 2022" end="1629" start="1564" starttimestamp="1648594670066" timestamp="6857474" />
  <Command __id="2801" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:52:07 EDT 2022" docASTNodeCount="983" docActiveCodeLength="7012" docExpressionCount="721" docLength="7563" projectName="A5" starttimestamp="1648594670066" timestamp="6857348">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2805" _type="PauseCommand" date="Tue Mar 29 20:52:12 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6862620">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5146]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2806" _type="SelectTextCommand" caretOffset="6393" date="Tue Mar 29 20:52:12 EDT 2022" end="6417" start="6393" starttimestamp="1648594670066" timestamp="6862766" />
  <Command __id="2808" _type="PauseCommand" date="Tue Mar 29 20:52:17 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6866993">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4227]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2807" _type="MoveCaretCommand" caretOffset="6565" date="Tue Mar 29 20:52:17 EDT 2022" docOffset="6565" starttimestamp="1648594670066" timestamp="6866993" />
  <Command __id="2804" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 20:52:12 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7800" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="6862620">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2810" _type="PauseCommand" date="Tue Mar 29 20:52:19 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6869288">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2295]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="2809" _type="Delete" date="Tue Mar 29 20:52:19 EDT 2022" docASTNodeCount="1037" docActiveCodeLength="7871" docExpressionCount="737" docLength="9080" endLine="182" length="2" offset="6563" repeat="2" startLine="182" starttimestamp="1648594670066" timestamp="6869288" timestamp2="6869461">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="2811" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:52:19 EDT 2022" starttimestamp="1648594670066" timestamp="6869297" />
  <Command __id="2813" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 20:52:19 EDT 2022" starttimestamp="1648594670066" timestamp="6869464" />
  <Command __id="2814" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Mar 29 20:52:20 EDT 2022" starttimestamp="1648594670066" timestamp="6870053" />
  <Command __id="2865" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 20:53:02 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="6912798" type="Run" />
  <Command __id="2867" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:53:03 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="6913031" type="Run" />
  <Command __id="2868" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:53:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="6913034" type="Run" />
  <Command __id="2869" _type="ConsoleOutput" date="Tue Mar 29 20:53:03 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="6913354" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.7643216259804041
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.7643216259804041"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2871" _type="PauseCommand" date="Tue Mar 29 20:53:04 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="6914604">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1250]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2883" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:53:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="6923266" type="Run" />
  <Command __id="2885" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 20:53:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="6923266" type="Run" />
  <Command __id="2887" _type="PauseCommand" date="Tue Mar 29 20:53:15 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="6925685">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2419]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2886" _type="ShellCommand" date="Tue Mar 29 20:53:15 EDT 2022" starttimestamp="1648594670066" timestamp="6925685" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2889" _type="PauseCommand" date="Tue Mar 29 20:53:22 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="6932736">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7051]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="2946" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:01:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="7398345" type="Run" />
  <Command __id="2948" _type="ConsoleOutput" date="Tue Mar 29 21:01:08 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="7398607" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.2728853333852942 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@32cd3b36
[com.sun.proxy.$Proxy1@4d350ef3, com.sun.proxy.$Proxy1@423a6d5d, com.sun.proxy.$Proxy1@32cd3b36]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered"), Diff(INSERT,"Server0<-->Generic Client:0.2728853333852942 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@32cd3b36¶[com.sun.proxy.$Proxy1@4d350ef3, com.sun.proxy.$Proxy1@423a6d5d, com.sun.proxy.$Proxy1@32cd3b36]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2949" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:01:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="7398635" type="Run" />
  <Command __id="2950" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:01:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="7398670" type="Run" />
  <Command __id="2951" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:01:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="7398720" type="Run" />
  <Command __id="2952" _type="ConsoleOutput" date="Tue Mar 29 21:01:08 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="7398821" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.2728853333852942 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@32cd3b36¶[com.sun.proxy.$Proxy1@4d350ef3, com.sun.proxy.$Proxy1@423a6d5d, com.sun.proxy.$Proxy1@32cd3b36]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2953" _type="ConsoleOutput" date="Tue Mar 29 21:01:09 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="7399018" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2955" _type="PauseCommand" date="Tue Mar 29 21:01:10 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="7400866">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1848]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3005" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:13:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8123248" type="Run" />
  <DocumentChange __id="2815" _type="Insert" date="Tue Mar 29 20:52:20 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7804" docExpressionCount="730" docLength="9082" length="2" offset="6492" repeat="2" starttimestamp="1648594670066" timestamp="6870693" timestamp2="6870835">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3008" _type="PauseCommand" date="Tue Mar 29 21:14:49 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="8219162">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[95914]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3009" _type="SelectTextCommand" caretOffset="1564" date="Tue Mar 29 21:14:49 EDT 2022" end="1629" start="1564" starttimestamp="1648594670066" timestamp="8219293" />
  <Command __id="3011" _type="PauseCommand" date="Tue Mar 29 21:14:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8220776">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1483]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3010" _type="MoveCaretCommand" caretOffset="1629" date="Tue Mar 29 21:14:50 EDT 2022" docOffset="1629" starttimestamp="1648594670066" timestamp="8220776" />
  <Command __id="3012" _type="MoveCaretCommand" caretOffset="1629" date="Tue Mar 29 21:14:50 EDT 2022" docOffset="1629" starttimestamp="1648594670066" timestamp="8220777" />
  <Command __id="3014" _type="PauseCommand" date="Tue Mar 29 21:14:53 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8223865">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3088]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3013" _type="SelectTextCommand" caretOffset="1632" date="Tue Mar 29 21:14:53 EDT 2022" end="1724" start="1632" starttimestamp="1648594670066" timestamp="8223865" />
  <Command __id="3015" _type="SelectTextCommand" caretOffset="1632" date="Tue Mar 29 21:14:53 EDT 2022" end="1724" start="1632" starttimestamp="1648594670066" timestamp="8223865" />
  <Command __id="3016" _type="CopyCommand" date="Tue Mar 29 21:14:54 EDT 2022" starttimestamp="1648594670066" timestamp="8224079" />
  <Command __id="3018" _type="PauseCommand" date="Tue Mar 29 21:14:55 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8225264">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1185]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3017" _type="MoveCaretCommand" caretOffset="1724" date="Tue Mar 29 21:14:55 EDT 2022" docOffset="1724" starttimestamp="1648594670066" timestamp="8225264" />
  <Command __id="3019" _type="MoveCaretCommand" caretOffset="1724" date="Tue Mar 29 21:14:55 EDT 2022" docOffset="1724" starttimestamp="1648594670066" timestamp="8225265" />
  <Command __id="3021" _type="InsertStringCommand" date="Tue Mar 29 21:14:55 EDT 2022" starttimestamp="1648594670066" timestamp="8225513" timestamp2="8225513">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3022" _type="InsertStringCommand" date="Tue Mar 29 21:14:55 EDT 2022" starttimestamp="1648594670066" timestamp="8225513" timestamp2="8225513">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3024" _type="PasteCommand" date="Tue Mar 29 21:14:55 EDT 2022" starttimestamp="1648594670066" timestamp="8225760" />
  <Command __id="3026" _type="PauseCommand" date="Tue Mar 29 21:14:57 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8227299">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1539]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3025" _type="MoveCaretCommand" caretOffset="1773" date="Tue Mar 29 21:14:57 EDT 2022" docOffset="1773" starttimestamp="1648594670066" timestamp="8227299" />
  <Command __id="3027" _type="MoveCaretCommand" caretOffset="1773" date="Tue Mar 29 21:14:57 EDT 2022" docOffset="1773" starttimestamp="1648594670066" timestamp="8227299" />
  <Command __id="3029" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:14:57 EDT 2022" starttimestamp="1648594670066" timestamp="8227611" />
  <Command __id="3030" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:14:57 EDT 2022" starttimestamp="1648594670066" timestamp="8227611" />
  <Command __id="3032" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:14:57 EDT 2022" starttimestamp="1648594670066" timestamp="8227778" />
  <Command __id="3033" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:14:57 EDT 2022" starttimestamp="1648594670066" timestamp="8227778" />
  <Command __id="3035" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:14:57 EDT 2022" starttimestamp="1648594670066" timestamp="8227893" />
  <Command __id="3036" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:14:57 EDT 2022" starttimestamp="1648594670066" timestamp="8227893" />
  <Command __id="3038" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:14:58 EDT 2022" starttimestamp="1648594670066" timestamp="8228048" />
  <Command __id="3039" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:14:58 EDT 2022" starttimestamp="1648594670066" timestamp="8228048" />
  <Command __id="3041" _type="InsertStringCommand" date="Tue Mar 29 21:14:58 EDT 2022" starttimestamp="1648594670066" timestamp="8228273" timestamp2="8228273">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3042" _type="InsertStringCommand" date="Tue Mar 29 21:14:58 EDT 2022" starttimestamp="1648594670066" timestamp="8228273" timestamp2="8228273">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3044" _type="InsertStringCommand" date="Tue Mar 29 21:14:58 EDT 2022" starttimestamp="1648594670066" timestamp="8228450" timestamp2="8228450">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3045" _type="InsertStringCommand" date="Tue Mar 29 21:14:58 EDT 2022" starttimestamp="1648594670066" timestamp="8228450" timestamp2="8228450">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3047" _type="InsertStringCommand" date="Tue Mar 29 21:14:58 EDT 2022" starttimestamp="1648594670066" timestamp="8228580" timestamp2="8228580">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3048" _type="InsertStringCommand" date="Tue Mar 29 21:14:58 EDT 2022" starttimestamp="1648594670066" timestamp="8228580" timestamp2="8228580">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3050" _type="PauseCommand" date="Tue Mar 29 21:15:00 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8230584">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2004]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3106" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 21:15:12 EDT 2022" starttimestamp="1648594670066" timestamp="8242321" />
  <Command __id="3108" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:15:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8242368" type="Debug" />
  <Command __id="3109" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 21:15:12 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="8242368" type="Run" />
  <Command __id="3110" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:15:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8242368" type="Debug" />
  <Command __id="3111" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 21:15:12 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="8242368" type="Run" />
  <Command __id="3113" _type="PauseCommand" date="Tue Mar 29 21:15:22 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8252275">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[9907]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3112" _type="ShellCommand" date="Tue Mar 29 21:15:22 EDT 2022" starttimestamp="1648594670066" timestamp="8252275" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3114" _type="ShellCommand" date="Tue Mar 29 21:15:22 EDT 2022" starttimestamp="1648594670066" timestamp="8252401" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3118" _type="PauseCommand" date="Tue Mar 29 21:15:23 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8253828">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1397]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3117" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:15:23 EDT 2022" starttimestamp="1648594670066" timestamp="8253828" />
  <Command __id="3119" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:15:23 EDT 2022" starttimestamp="1648594670066" timestamp="8253918" />
  <Command __id="3120" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:15:24 EDT 2022" starttimestamp="1648594670066" timestamp="8253972" />
  <Command __id="3122" _type="MoveCaretCommand" caretOffset="6494" date="Tue Mar 29 21:15:25 EDT 2022" docOffset="6494" starttimestamp="1648594670066" timestamp="8255023" />
  <Command __id="3007" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:14:49 EDT 2022" docASTNodeCount="983" docActiveCodeLength="7012" docExpressionCount="721" docLength="7563" projectName="A5" starttimestamp="1648594670066" timestamp="8219162">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3020" _type="Insert" date="Tue Mar 29 21:14:55 EDT 2022" docASTNodeCount="983" docActiveCodeLength="7015" docExpressionCount="721" docLength="7566" length="3" offset="1724" starttimestamp="1648594670066" timestamp="8225501">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="3023" _type="Replace" date="Tue Mar 29 21:14:55 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7107" docExpressionCount="727" docLength="7658" endLine="40" insertionLength="93" int_docASTNodeCount="983" int_docActiveCodeLength="7014" int_docExpressionCount="721" int_docLength="7565" length="1" offset="1726" startLine="40" starttimestamp="1648594670066" timestamp="8225755">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3028" _type="Delete" date="Tue Mar 29 21:14:57 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7103" docExpressionCount="727" docLength="7654" endLine="40" length="4" offset="1769" repeat="4" startLine="40" starttimestamp="1648594670066" timestamp="8227605" timestamp2="8228045">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3040" _type="Insert" date="Tue Mar 29 21:14:58 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7106" docExpressionCount="727" docLength="7657" length="3" offset="1769" repeat="3" starttimestamp="1648594670066" timestamp="8228268" timestamp2="8228576">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="3052" _type="Delete" date="Tue Mar 29 21:15:00 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7103" docExpressionCount="727" docLength="7654" endLine="40" length="3" offset="1811" repeat="3" startLine="40" starttimestamp="1648594670066" timestamp="8230928" timestamp2="8231266">
    <text><![CDATA[IPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3061" _type="Insert" date="Tue Mar 29 21:15:01 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7104" docExpressionCount="727" docLength="7655" length="1" offset="1811" starttimestamp="1648594670066" timestamp="8231624">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="3064" _type="Delete" date="Tue Mar 29 21:15:02 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7102" docExpressionCount="727" docLength="7653" endLine="40" length="2" offset="1810" repeat="2" startLine="40" starttimestamp="1648594670066" timestamp="8232233" timestamp2="8232420">
    <text><![CDATA[GR]]></text>
  </DocumentChange>
  <DocumentChange __id="3070" _type="Insert" date="Tue Mar 29 21:15:02 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7105" docExpressionCount="727" docLength="7656" length="3" offset="1810" repeat="3" starttimestamp="1648594670066" timestamp="8232592" timestamp2="8233080">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="3115" _type="Delete" date="Tue Mar 29 21:15:22 EDT 2022" docASTNodeCount="983" docActiveCodeLength="7074" docExpressionCount="721" docLength="7625" endLine="40" length="31" offset="1727" startLine="40" starttimestamp="1648594670066" timestamp="8252424">
    <text><![CDATA[List<ClientRemoteInterfaceGIPC>]]></text>
  </DocumentChange>
  <DocumentChange __id="3116" _type="Insert" date="Tue Mar 29 21:15:22 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7104" docExpressionCount="727" docLength="7655" length="30" offset="1727" starttimestamp="1648594670066" timestamp="8252431">
    <text><![CDATA[List<ClientRemoteInterfaceRMI>]]></text>
  </DocumentChange>
  <Command __id="3121" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:15:24 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7804" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="8254829">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		"), Diff(INSERT,"//"), Diff(EQUAL,"clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		"), Diff(DELETE,"//"), Diff(EQUAL,"clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		//clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		/***
		if(mechanism.equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}***/
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="3124" _type="PauseCommand" date="Tue Mar 29 21:16:03 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="8293866">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[38843]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3125" _type="SelectTextCommand" caretOffset="1757" date="Tue Mar 29 21:16:04 EDT 2022" end="1757" start="1727" starttimestamp="1648594670066" timestamp="8293996" />
  <Command __id="3127" _type="PauseCommand" date="Tue Mar 29 21:16:09 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8299927">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5931]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3126" _type="SelectTextCommand" caretOffset="2974" date="Tue Mar 29 21:16:09 EDT 2022" end="3201" start="2974" starttimestamp="1648594670066" timestamp="8299927" />
  <Command __id="3128" _type="SelectTextCommand" caretOffset="2974" date="Tue Mar 29 21:16:09 EDT 2022" end="3201" start="2974" starttimestamp="1648594670066" timestamp="8299927" />
  <Command __id="3129" _type="CopyCommand" date="Tue Mar 29 21:16:10 EDT 2022" starttimestamp="1648594670066" timestamp="8300190" />
  <Command __id="3131" _type="PauseCommand" date="Tue Mar 29 21:16:11 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8301279">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1089]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3130" _type="MoveCaretCommand" caretOffset="3201" date="Tue Mar 29 21:16:11 EDT 2022" docOffset="3201" starttimestamp="1648594670066" timestamp="8301279" />
  <Command __id="3132" _type="MoveCaretCommand" caretOffset="3201" date="Tue Mar 29 21:16:11 EDT 2022" docOffset="3201" starttimestamp="1648594670066" timestamp="8301279" />
  <Command __id="3134" _type="PauseCommand" date="Tue Mar 29 21:16:12 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8302463">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1184]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3133" _type="SelectTextCommand" caretOffset="2962" date="Tue Mar 29 21:16:12 EDT 2022" end="3201" start="2962" starttimestamp="1648594670066" timestamp="8302463" />
  <Command __id="3135" _type="SelectTextCommand" caretOffset="2962" date="Tue Mar 29 21:16:12 EDT 2022" end="3201" start="2962" starttimestamp="1648594670066" timestamp="8302463" />
  <Command __id="3136" _type="CopyCommand" date="Tue Mar 29 21:16:12 EDT 2022" starttimestamp="1648594670066" timestamp="8302697" />
  <Command __id="3137" _type="MoveCaretCommand" caretOffset="3201" date="Tue Mar 29 21:16:13 EDT 2022" docOffset="3201" starttimestamp="1648594670066" timestamp="8303497" />
  <Command __id="3138" _type="MoveCaretCommand" caretOffset="3201" date="Tue Mar 29 21:16:13 EDT 2022" docOffset="3201" starttimestamp="1648594670066" timestamp="8303497" />
  <Command __id="3140" _type="InsertStringCommand" date="Tue Mar 29 21:16:13 EDT 2022" starttimestamp="1648594670066" timestamp="8303859" timestamp2="8303859">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3141" _type="InsertStringCommand" date="Tue Mar 29 21:16:13 EDT 2022" starttimestamp="1648594670066" timestamp="8303859" timestamp2="8303859">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3143" _type="InsertStringCommand" date="Tue Mar 29 21:16:14 EDT 2022" starttimestamp="1648594670066" timestamp="8303977" timestamp2="8303977">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3144" _type="InsertStringCommand" date="Tue Mar 29 21:16:14 EDT 2022" starttimestamp="1648594670066" timestamp="8303977" timestamp2="8303977">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3146" _type="PasteCommand" date="Tue Mar 29 21:16:14 EDT 2022" starttimestamp="1648594670066" timestamp="8304206" />
  <Command __id="3148" _type="PauseCommand" date="Tue Mar 29 21:16:15 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8305822">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1615]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3147" _type="MoveCaretCommand" caretOffset="3248" date="Tue Mar 29 21:16:15 EDT 2022" docOffset="3248" starttimestamp="1648594670066" timestamp="8305821" />
  <Command __id="3149" _type="MoveCaretCommand" caretOffset="3248" date="Tue Mar 29 21:16:15 EDT 2022" docOffset="3248" starttimestamp="1648594670066" timestamp="8305822" />
  <Command __id="3150" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 21:16:16 EDT 2022" starttimestamp="1648594670066" timestamp="8306380" />
  <Command __id="3151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 21:16:16 EDT 2022" starttimestamp="1648594670066" timestamp="8306380" />
  <Command __id="3153" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:16 EDT 2022" starttimestamp="1648594670066" timestamp="8306667" />
  <Command __id="3154" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:16 EDT 2022" starttimestamp="1648594670066" timestamp="8306667" />
  <Command __id="3156" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:16 EDT 2022" starttimestamp="1648594670066" timestamp="8306824" />
  <Command __id="3157" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:16 EDT 2022" starttimestamp="1648594670066" timestamp="8306824" />
  <Command __id="3159" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8306988" />
  <Command __id="3160" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8306988" />
  <Command __id="3162" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8307146" />
  <Command __id="3163" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8307146" />
  <Command __id="3165" _type="InsertStringCommand" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8307387" timestamp2="8307387">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3166" _type="InsertStringCommand" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8307387" timestamp2="8307387">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3168" _type="InsertStringCommand" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8307513" timestamp2="8307513">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3169" _type="InsertStringCommand" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8307513" timestamp2="8307513">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3171" _type="InsertStringCommand" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8307646" timestamp2="8307646">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3172" _type="InsertStringCommand" date="Tue Mar 29 21:16:17 EDT 2022" starttimestamp="1648594670066" timestamp="8307646" timestamp2="8307646">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3174" _type="PauseCommand" date="Tue Mar 29 21:16:19 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8309796">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2150]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3173" _type="SelectTextCommand" caretOffset="3270" date="Tue Mar 29 21:16:19 EDT 2022" end="3274" start="3270" starttimestamp="1648594670066" timestamp="8309796" />
  <Command __id="3175" _type="SelectTextCommand" caretOffset="3270" date="Tue Mar 29 21:16:19 EDT 2022" end="3274" start="3270" starttimestamp="1648594670066" timestamp="8309796" />
  <Command __id="3177" _type="InsertStringCommand" date="Tue Mar 29 21:16:20 EDT 2022" starttimestamp="1648594670066" timestamp="8310018" timestamp2="8310018">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3178" _type="InsertStringCommand" date="Tue Mar 29 21:16:20 EDT 2022" starttimestamp="1648594670066" timestamp="8310018" timestamp2="8310018">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3180" _type="InsertStringCommand" date="Tue Mar 29 21:16:20 EDT 2022" starttimestamp="1648594670066" timestamp="8310097" timestamp2="8310097">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3181" _type="InsertStringCommand" date="Tue Mar 29 21:16:20 EDT 2022" starttimestamp="1648594670066" timestamp="8310098" timestamp2="8310098">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3183" _type="InsertStringCommand" date="Tue Mar 29 21:16:20 EDT 2022" starttimestamp="1648594670066" timestamp="8310245" timestamp2="8310245">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3184" _type="InsertStringCommand" date="Tue Mar 29 21:16:20 EDT 2022" starttimestamp="1648594670066" timestamp="8310245" timestamp2="8310245">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3185" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:16:21 EDT 2022" starttimestamp="1648594670066" timestamp="8310946" />
  <Command __id="3186" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:16:21 EDT 2022" starttimestamp="1648594670066" timestamp="8311047" />
  <Command __id="3187" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:16:21 EDT 2022" starttimestamp="1648594670066" timestamp="8311118" />
  <Command __id="3189" _type="PauseCommand" date="Tue Mar 29 21:16:26 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8316478">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5360]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3188" _type="ShellCommand" date="Tue Mar 29 21:16:26 EDT 2022" starttimestamp="1648594670066" timestamp="8316478" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3190" _type="ShellCommand" date="Tue Mar 29 21:16:26 EDT 2022" starttimestamp="1648594670066" timestamp="8316620" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3196" _type="SelectTextCommand" caretOffset="1306" date="Tue Mar 29 21:16:26 EDT 2022" end="1306" start="1299" starttimestamp="1648594670066" timestamp="8316866" />
  <Command __id="3198" _type="PauseCommand" date="Tue Mar 29 21:16:28 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8318377">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1511]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3197" _type="MoveCaretCommand" caretOffset="1307" date="Tue Mar 29 21:16:28 EDT 2022" docOffset="1307" starttimestamp="1648594670066" timestamp="8318377" />
  <Command __id="3200" _type="InsertStringCommand" date="Tue Mar 29 21:16:28 EDT 2022" starttimestamp="1648594670066" timestamp="8318848" timestamp2="8318848">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3202" _type="InsertStringCommand" date="Tue Mar 29 21:16:29 EDT 2022" starttimestamp="1648594670066" timestamp="8319044" timestamp2="8319044">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3204" _type="InsertStringCommand" date="Tue Mar 29 21:16:29 EDT 2022" starttimestamp="1648594670066" timestamp="8319168" timestamp2="8319168">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="3206" _type="InsertStringCommand" date="Tue Mar 29 21:16:29 EDT 2022" starttimestamp="1648594670066" timestamp="8319322" timestamp2="8319322">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="3208" _type="InsertStringCommand" date="Tue Mar 29 21:16:29 EDT 2022" starttimestamp="1648594670066" timestamp="8319425" timestamp2="8319425">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3210" _type="InsertStringCommand" date="Tue Mar 29 21:16:29 EDT 2022" starttimestamp="1648594670066" timestamp="8319509" timestamp2="8319509">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="3212" _type="InsertStringCommand" date="Tue Mar 29 21:16:29 EDT 2022" starttimestamp="1648594670066" timestamp="8319736" timestamp2="8319736">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3214" _type="InsertStringCommand" date="Tue Mar 29 21:16:29 EDT 2022" starttimestamp="1648594670066" timestamp="8319851" timestamp2="8319851">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3216" _type="InsertStringCommand" date="Tue Mar 29 21:16:30 EDT 2022" starttimestamp="1648594670066" timestamp="8320182" timestamp2="8320182">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3218" _type="InsertStringCommand" date="Tue Mar 29 21:16:30 EDT 2022" starttimestamp="1648594670066" timestamp="8320356" timestamp2="8320356">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3220" _type="InsertStringCommand" date="Tue Mar 29 21:16:30 EDT 2022" starttimestamp="1648594670066" timestamp="8320489" timestamp2="8320489">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3222" _type="InsertStringCommand" date="Tue Mar 29 21:16:30 EDT 2022" starttimestamp="1648594670066" timestamp="8320550" timestamp2="8320550">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3224" _type="InsertStringCommand" date="Tue Mar 29 21:16:30 EDT 2022" starttimestamp="1648594670066" timestamp="8320646" timestamp2="8320646">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3226" _type="InsertStringCommand" date="Tue Mar 29 21:16:30 EDT 2022" starttimestamp="1648594670066" timestamp="8320754" timestamp2="8320754">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3228" _type="InsertStringCommand" date="Tue Mar 29 21:16:31 EDT 2022" starttimestamp="1648594670066" timestamp="8321040" timestamp2="8321040">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="3230" _type="InsertStringCommand" date="Tue Mar 29 21:16:31 EDT 2022" starttimestamp="1648594670066" timestamp="8321298" timestamp2="8321298">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="3232" _type="InsertStringCommand" date="Tue Mar 29 21:16:31 EDT 2022" starttimestamp="1648594670066" timestamp="8321444" timestamp2="8321444">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3234" _type="InsertStringCommand" date="Tue Mar 29 21:16:31 EDT 2022" starttimestamp="1648594670066" timestamp="8321674" timestamp2="8321674">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3236" _type="InsertStringCommand" date="Tue Mar 29 21:16:31 EDT 2022" starttimestamp="1648594670066" timestamp="8321821" timestamp2="8321821">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="3238" _type="InsertStringCommand" date="Tue Mar 29 21:16:32 EDT 2022" starttimestamp="1648594670066" timestamp="8322240" timestamp2="8322240">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3240" _type="InsertStringCommand" date="Tue Mar 29 21:16:32 EDT 2022" starttimestamp="1648594670066" timestamp="8322342" timestamp2="8322342">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3242" _type="InsertStringCommand" date="Tue Mar 29 21:16:32 EDT 2022" starttimestamp="1648594670066" timestamp="8322440" timestamp2="8322440">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3244" _type="InsertStringCommand" date="Tue Mar 29 21:16:32 EDT 2022" starttimestamp="1648594670066" timestamp="8322539" timestamp2="8322539">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3245" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:16:33 EDT 2022" starttimestamp="1648594670066" timestamp="8323081" />
  <Command __id="3246" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:16:33 EDT 2022" starttimestamp="1648594670066" timestamp="8323174" />
  <Command __id="3247" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:16:33 EDT 2022" starttimestamp="1648594670066" timestamp="8323235" />
  <Command __id="3123" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:16:03 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7104" docExpressionCount="727" docLength="7655" projectName="A5" starttimestamp="1648594670066" timestamp="8293866">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();"), Diff(INSERT,"¶	List<ClientRemoteInterfaceRMI> clientListRMI = new ArrayList<ClientRemoteInterfaceRMI>();"), Diff(EQUAL,"¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceRMI> clientListRMI = new ArrayList<ClientRemoteInterfaceRMI>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		System.out.println("client list and size");
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="3139" _type="Insert" date="Tue Mar 29 21:16:13 EDT 2022" docASTNodeCount="997" docActiveCodeLength="7110" docExpressionCount="727" docLength="7661" length="6" offset="3201" repeat="2" starttimestamp="1648594670066" timestamp="8303850" timestamp2="8303970">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="3145" _type="Replace" date="Tue Mar 29 21:16:14 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7349" docExpressionCount="754" docLength="7900" endLine="80" insertionLength="240" int_docASTNodeCount="997" int_docActiveCodeLength="7109" int_docExpressionCount="727" int_docLength="7660" length="1" offset="3206" startLine="80" starttimestamp="1648594670066" timestamp="8304194">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3152" _type="Delete" date="Tue Mar 29 21:16:16 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7345" docExpressionCount="754" docLength="7896" endLine="81" length="4" offset="3245" repeat="4" startLine="81" starttimestamp="1648594670066" timestamp="8306663" timestamp2="8307143">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3164" _type="Insert" date="Tue Mar 29 21:16:17 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7348" docExpressionCount="754" docLength="7899" length="3" offset="3245" repeat="3" starttimestamp="1648594670066" timestamp="8307380" timestamp2="8307639">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="3176" _type="Replace" date="Tue Mar 29 21:16:20 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7345" docExpressionCount="754" docLength="7896" endLine="81" insertionLength="1" int_docASTNodeCount="1034" int_docActiveCodeLength="7344" int_docExpressionCount="754" int_docLength="7895" length="4" offset="3270" startLine="81" starttimestamp="1648594670066" timestamp="8310005">
    <deletedText><![CDATA[GIPC]]></deletedText>
    <insertedText><![CDATA[R]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3179" _type="Insert" date="Tue Mar 29 21:16:20 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7347" docExpressionCount="754" docLength="7898" length="2" offset="3271" repeat="2" starttimestamp="1648594670066" timestamp="8310093" timestamp2="8310239">
    <text><![CDATA[MI]]></text>
  </DocumentChange>
  <Command __id="3191" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:16:26 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1259" docExpressionCount="90" docLength="1259" projectName="A5" starttimestamp="1648594670066" timestamp="8316681">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3192" _type="Insert" date="Tue Mar 29 21:16:26 EDT 2022" docASTNodeCount="162" docActiveCodeLength="1321" docExpressionCount="93" docLength="1321" length="62" offset="1246" repeat="4" starttimestamp="1648594670066" timestamp="8316696" timestamp2="8316699">
    <text><![CDATA[

	void registerClientRMI(ClientRemoteInterfaceRMI aClient);]]></text>
  </DocumentChange>
  <DocumentChange __id="3199" _type="Insert" date="Tue Mar 29 21:16:28 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1344" docExpressionCount="94" docLength="1344" length="23" offset="1307" repeat="23" starttimestamp="1648594670066" timestamp="8318832" timestamp2="8322535">
    <text><![CDATA[ throws RemoteException]]></text>
  </DocumentChange>
  <Command __id="3249" _type="PauseCommand" date="Tue Mar 29 21:16:34 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8324359">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1124]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3250" _type="MoveCaretCommand" caretOffset="3273" date="Tue Mar 29 21:16:34 EDT 2022" docOffset="3273" starttimestamp="1648594670066" timestamp="8324491" />
  <Command __id="3252" _type="PauseCommand" date="Tue Mar 29 21:16:37 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8327126">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2635]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3251" _type="SelectTextCommand" caretOffset="3302" date="Tue Mar 29 21:16:37 EDT 2022" end="3305" start="3302" starttimestamp="1648594670066" timestamp="8327126" />
  <Command __id="3253" _type="SelectTextCommand" caretOffset="3302" date="Tue Mar 29 21:16:37 EDT 2022" end="3305" start="3302" starttimestamp="1648594670066" timestamp="8327126" />
  <Command __id="3255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:37 EDT 2022" starttimestamp="1648594670066" timestamp="8327883" />
  <Command __id="3256" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:37 EDT 2022" starttimestamp="1648594670066" timestamp="8327883" />
  <Command __id="3258" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 21:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="8328124" />
  <Command __id="3260" _type="InsertStringCommand" date="Tue Mar 29 21:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="8328662" timestamp2="8328662">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3261" _type="InsertStringCommand" date="Tue Mar 29 21:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="8328662" timestamp2="8328662">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3263" _type="InsertStringCommand" date="Tue Mar 29 21:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="8328868" timestamp2="8328868">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3264" _type="InsertStringCommand" date="Tue Mar 29 21:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="8328868" timestamp2="8328868">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3266" _type="InsertStringCommand" date="Tue Mar 29 21:16:39 EDT 2022" starttimestamp="1648594670066" timestamp="8328973" timestamp2="8328973">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3267" _type="InsertStringCommand" date="Tue Mar 29 21:16:39 EDT 2022" starttimestamp="1648594670066" timestamp="8328973" timestamp2="8328973">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3268" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:16:39 EDT 2022" starttimestamp="1648594670066" timestamp="8329763" />
  <Command __id="3269" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:16:39 EDT 2022" starttimestamp="1648594670066" timestamp="8329852" />
  <Command __id="3270" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:16:39 EDT 2022" starttimestamp="1648594670066" timestamp="8329891" />
  <Command __id="3272" _type="PauseCommand" date="Tue Mar 29 21:16:44 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8334083">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4192]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3271" _type="SelectTextCommand" caretOffset="3322" date="Tue Mar 29 21:16:44 EDT 2022" end="3439" start="3322" starttimestamp="1648594670066" timestamp="8334083" />
  <Command __id="3273" _type="SelectTextCommand" caretOffset="3322" date="Tue Mar 29 21:16:44 EDT 2022" end="3439" start="3322" starttimestamp="1648594670066" timestamp="8334083" />
  <Command __id="3275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:44 EDT 2022" starttimestamp="1648594670066" timestamp="8334350" />
  <Command __id="3276" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:44 EDT 2022" starttimestamp="1648594670066" timestamp="8334350" />
  <Command __id="3248" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:16:34 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7347" docExpressionCount="754" docLength="7898" projectName="A5" starttimestamp="1648594670066" timestamp="8324359">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceRMI> clientListRMI = new ArrayList<ClientRemoteInterfaceRMI>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}"), Diff(INSERT,"¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceRMI aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}"), Diff(EQUAL,"¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceRMI> clientListRMI = new ArrayList<ClientRemoteInterfaceRMI>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceRMI aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		System.out.println("client list and size");
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="3254" _type="Delete" date="Tue Mar 29 21:16:37 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7343" docExpressionCount="754" docLength="7894" endLine="83" length="4" offset="3302" repeat="2" startLine="83" starttimestamp="1648594670066" timestamp="8327876" timestamp2="8328121">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3259" _type="Insert" date="Tue Mar 29 21:16:38 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7346" docExpressionCount="754" docLength="7897" length="3" offset="3302" repeat="3" starttimestamp="1648594670066" timestamp="8328657" timestamp2="8328968">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="3274" _type="Delete" date="Tue Mar 29 21:16:44 EDT 2022" docASTNodeCount="1013" docActiveCodeLength="7229" docExpressionCount="736" docLength="7780" endLine="86" length="117" offset="3322" startLine="84" starttimestamp="1648594670066" timestamp="8334341">
    <text><![CDATA[	System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);]]></text>
  </DocumentChange>
  <Command __id="3278" _type="PauseCommand" date="Tue Mar 29 21:16:45 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8335684">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1334]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3279" _type="UndoCommand" date="Tue Mar 29 21:16:45 EDT 2022" starttimestamp="1648594670066" timestamp="8335693" />
  <Command __id="3281" _type="PauseCommand" date="Tue Mar 29 21:16:47 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8337238">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1545]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3280" _type="MoveCaretCommand" caretOffset="3366" date="Tue Mar 29 21:16:47 EDT 2022" docOffset="3366" starttimestamp="1648594670066" timestamp="8337238" />
  <Command __id="3282" _type="MoveCaretCommand" caretOffset="3366" date="Tue Mar 29 21:16:47 EDT 2022" docOffset="3366" starttimestamp="1648594670066" timestamp="8337238" />
  <Command __id="3283" _type="MoveCaretCommand" caretOffset="3365" date="Tue Mar 29 21:16:47 EDT 2022" docOffset="3365" starttimestamp="1648594670066" timestamp="8337908" />
  <Command __id="3284" _type="MoveCaretCommand" caretOffset="3365" date="Tue Mar 29 21:16:47 EDT 2022" docOffset="3365" starttimestamp="1648594670066" timestamp="8337908" />
  <Command __id="3286" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:48 EDT 2022" starttimestamp="1648594670066" timestamp="8338250" />
  <Command __id="3287" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:48 EDT 2022" starttimestamp="1648594670066" timestamp="8338250" />
  <Command __id="3289" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:48 EDT 2022" starttimestamp="1648594670066" timestamp="8338385" />
  <Command __id="3290" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:48 EDT 2022" starttimestamp="1648594670066" timestamp="8338385" />
  <Command __id="3292" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:48 EDT 2022" starttimestamp="1648594670066" timestamp="8338492" />
  <Command __id="3293" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:48 EDT 2022" starttimestamp="1648594670066" timestamp="8338492" />
  <Command __id="3295" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:49 EDT 2022" starttimestamp="1648594670066" timestamp="8339092" />
  <Command __id="3296" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:49 EDT 2022" starttimestamp="1648594670066" timestamp="8339092" />
  <Command __id="3298" _type="InsertStringCommand" date="Tue Mar 29 21:16:49 EDT 2022" starttimestamp="1648594670066" timestamp="8339339" timestamp2="8339339">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3299" _type="InsertStringCommand" date="Tue Mar 29 21:16:49 EDT 2022" starttimestamp="1648594670066" timestamp="8339339" timestamp2="8339339">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3301" _type="InsertStringCommand" date="Tue Mar 29 21:16:49 EDT 2022" starttimestamp="1648594670066" timestamp="8339499" timestamp2="8339499">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3302" _type="InsertStringCommand" date="Tue Mar 29 21:16:49 EDT 2022" starttimestamp="1648594670066" timestamp="8339499" timestamp2="8339499">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3304" _type="InsertStringCommand" date="Tue Mar 29 21:16:49 EDT 2022" starttimestamp="1648594670066" timestamp="8339575" timestamp2="8339575">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3305" _type="InsertStringCommand" date="Tue Mar 29 21:16:49 EDT 2022" starttimestamp="1648594670066" timestamp="8339575" timestamp2="8339575">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3307" _type="PauseCommand" date="Tue Mar 29 21:16:52 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8341996">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2421]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3306" _type="SelectTextCommand" caretOffset="3432" date="Tue Mar 29 21:16:52 EDT 2022" end="3435" start="3432" starttimestamp="1648594670066" timestamp="8341996" />
  <Command __id="3308" _type="SelectTextCommand" caretOffset="3432" date="Tue Mar 29 21:16:52 EDT 2022" end="3435" start="3432" starttimestamp="1648594670066" timestamp="8341996" />
  <Command __id="3310" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:52 EDT 2022" starttimestamp="1648594670066" timestamp="8342268" />
  <Command __id="3311" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:16:52 EDT 2022" starttimestamp="1648594670066" timestamp="8342268" />
  <Command __id="3313" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 21:16:52 EDT 2022" starttimestamp="1648594670066" timestamp="8342507" />
  <Command __id="3315" _type="InsertStringCommand" date="Tue Mar 29 21:16:52 EDT 2022" starttimestamp="1648594670066" timestamp="8342899" timestamp2="8342899">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3316" _type="InsertStringCommand" date="Tue Mar 29 21:16:52 EDT 2022" starttimestamp="1648594670066" timestamp="8342900" timestamp2="8342900">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3318" _type="InsertStringCommand" date="Tue Mar 29 21:16:53 EDT 2022" starttimestamp="1648594670066" timestamp="8343046" timestamp2="8343046">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3319" _type="InsertStringCommand" date="Tue Mar 29 21:16:53 EDT 2022" starttimestamp="1648594670066" timestamp="8343046" timestamp2="8343046">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3321" _type="InsertStringCommand" date="Tue Mar 29 21:16:53 EDT 2022" starttimestamp="1648594670066" timestamp="8343167" timestamp2="8343167">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3322" _type="InsertStringCommand" date="Tue Mar 29 21:16:53 EDT 2022" starttimestamp="1648594670066" timestamp="8343167" timestamp2="8343167">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3323" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:16:53 EDT 2022" starttimestamp="1648594670066" timestamp="8343641" />
  <Command __id="3324" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:16:53 EDT 2022" starttimestamp="1648594670066" timestamp="8343725" />
  <Command __id="3325" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:16:53 EDT 2022" starttimestamp="1648594670066" timestamp="8343766" />
  <DocumentChange __id="3277" _type="Insert" date="Tue Mar 29 21:16:45 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7346" docExpressionCount="754" docLength="7897" length="117" offset="3322" starttimestamp="1648594670066" timestamp="8335684">
    <text><![CDATA[	System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);]]></text>
  </DocumentChange>
  <DocumentChange __id="3285" _type="Delete" date="Tue Mar 29 21:16:48 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7342" docExpressionCount="754" docLength="7893" endLine="84" length="4" offset="3361" repeat="4" startLine="84" starttimestamp="1648594670066" timestamp="8338243" timestamp2="8339089">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3297" _type="Insert" date="Tue Mar 29 21:16:49 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7345" docExpressionCount="754" docLength="7896" length="3" offset="3361" repeat="3" starttimestamp="1648594670066" timestamp="8339331" timestamp2="8339571">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="3309" _type="Delete" date="Tue Mar 29 21:16:52 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7341" docExpressionCount="754" docLength="7892" endLine="86" length="4" offset="3432" repeat="2" startLine="86" starttimestamp="1648594670066" timestamp="8342263" timestamp2="8342501">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3314" _type="Insert" date="Tue Mar 29 21:16:52 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7344" docExpressionCount="754" docLength="7895" length="3" offset="3432" repeat="3" starttimestamp="1648594670066" timestamp="8342894" timestamp2="8343161">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <Command __id="3327" _type="PauseCommand" date="Tue Mar 29 21:17:22 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="8372228">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[28462]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3328" _type="MoveCaretCommand" caretOffset="1786" date="Tue Mar 29 21:17:22 EDT 2022" docOffset="1786" starttimestamp="1648594670066" timestamp="8372354" />
  <Command __id="3326" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:17:22 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="8372228">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3330" _type="PauseCommand" date="Tue Mar 29 21:17:27 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8377794">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5440]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3331" _type="MoveCaretCommand" caretOffset="6494" date="Tue Mar 29 21:17:27 EDT 2022" docOffset="6494" starttimestamp="1648594670066" timestamp="8377895" />
  <Command __id="3329" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:17:27 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7804" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="8377794">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		//clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3333" _type="PauseCommand" date="Tue Mar 29 21:17:37 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8387196">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9301]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3334" _type="MoveCaretCommand" caretOffset="1330" date="Tue Mar 29 21:17:37 EDT 2022" docOffset="1330" starttimestamp="1648594670066" timestamp="8387296" />
  <Command __id="3332" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:17:37 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1344" docExpressionCount="94" docLength="1344" projectName="A5" starttimestamp="1648594670066" timestamp="8387196">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;"), Diff(INSERT,"¶¶	void registerClientRMI(ClientRemoteInterfaceRMI aClient) throws RemoteException;"), Diff(EQUAL,"¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="3336" _type="PauseCommand" date="Tue Mar 29 21:17:50 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="8400423">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13127]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3337" _type="MoveCaretCommand" caretOffset="6494" date="Tue Mar 29 21:17:50 EDT 2022" docOffset="6494" starttimestamp="1648594670066" timestamp="8400534" />
  <Command __id="3335" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:17:50 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7804" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="8400423">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		//clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3339" _type="PauseCommand" date="Tue Mar 29 21:17:52 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8402451">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1917]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3340" _type="MoveCaretCommand" caretOffset="1330" date="Tue Mar 29 21:17:52 EDT 2022" docOffset="1330" starttimestamp="1648594670066" timestamp="8402572" />
  <Command __id="3338" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:17:52 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1344" docExpressionCount="94" docLength="1344" projectName="A5" starttimestamp="1648594670066" timestamp="8402451">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3342" _type="PauseCommand" date="Tue Mar 29 21:17:55 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8405879">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3307]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3343" _type="MoveCaretCommand" caretOffset="3435" date="Tue Mar 29 21:17:56 EDT 2022" docOffset="3435" starttimestamp="1648594670066" timestamp="8405993" />
  <Command __id="3345" _type="PauseCommand" date="Tue Mar 29 21:18:00 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8410118">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4125]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3344" _type="MoveCaretCommand" caretOffset="3273" date="Tue Mar 29 21:18:00 EDT 2022" docOffset="3273" starttimestamp="1648594670066" timestamp="8410118" />
  <Command __id="3346" _type="MoveCaretCommand" caretOffset="3273" date="Tue Mar 29 21:18:00 EDT 2022" docOffset="3273" starttimestamp="1648594670066" timestamp="8410118" />
  <Command __id="3341" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:17:55 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7344" docExpressionCount="754" docLength="7895" projectName="A5" starttimestamp="1648594670066" timestamp="8405879">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceRMI> clientListRMI = new ArrayList<ClientRemoteInterfaceRMI>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceRMI aClient) {¶		¶		clientList"), Diff(DELETE,"GIPC"), Diff(INSERT,"RMI"), Diff(EQUAL,".add(aClient);¶		System.out.println("Client registered "), Diff(DELETE,"GIPC"), Diff(INSERT,"RMI"), Diff(EQUAL,"");¶		System.out.println(aClient);¶		System.out.println(clientList"), Diff(DELETE,"GIPC"), Diff(INSERT,"RMI"), Diff(EQUAL,");¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceRMI> clientListRMI = new ArrayList<ClientRemoteInterfaceRMI>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceRMI aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		System.out.println("client list and size");
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="3348" _type="PauseCommand" date="Tue Mar 29 21:18:02 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8412454">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2336]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="3347" _type="Delete" date="Tue Mar 29 21:18:02 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7341" docExpressionCount="754" docLength="7892" endLine="81" length="3" offset="3270" repeat="3" startLine="81" starttimestamp="1648594670066" timestamp="8412454" timestamp2="8412964">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <Command __id="3349" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:02 EDT 2022" starttimestamp="1648594670066" timestamp="8412468" />
  <Command __id="3350" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:02 EDT 2022" starttimestamp="1648594670066" timestamp="8412468" />
  <Command __id="3352" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:02 EDT 2022" starttimestamp="1648594670066" timestamp="8412746" />
  <Command __id="3353" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:02 EDT 2022" starttimestamp="1648594670066" timestamp="8412746" />
  <Command __id="3355" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8412966" />
  <Command __id="3356" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8412967" />
  <Command __id="3358" _type="InsertStringCommand" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8413424" timestamp2="8413424">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3359" _type="InsertStringCommand" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8413424" timestamp2="8413424">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3361" _type="InsertStringCommand" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8413492" timestamp2="8413492">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3362" _type="InsertStringCommand" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8413492" timestamp2="8413492">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3364" _type="InsertStringCommand" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8413599" timestamp2="8413599">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3365" _type="InsertStringCommand" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8413599" timestamp2="8413599">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3367" _type="InsertStringCommand" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8413799" timestamp2="8413799">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3368" _type="InsertStringCommand" date="Tue Mar 29 21:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="8413799" timestamp2="8413799">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3370" _type="PauseCommand" date="Tue Mar 29 21:18:06 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8415957">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2158]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3369" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="8415957" />
  <Command __id="3371" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="8416045" />
  <Command __id="3372" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="8416105" />
  <Command __id="3374" _type="PauseCommand" date="Tue Mar 29 21:18:10 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8420270">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4165]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3373" _type="MoveCaretCommand" caretOffset="1812" date="Tue Mar 29 21:18:10 EDT 2022" docOffset="1812" starttimestamp="1648594670066" timestamp="8420270" />
  <Command __id="3375" _type="MoveCaretCommand" caretOffset="1812" date="Tue Mar 29 21:18:10 EDT 2022" docOffset="1812" starttimestamp="1648594670066" timestamp="8420270" />
  <Command __id="3377" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="8420563" />
  <Command __id="3378" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="8420563" />
  <Command __id="3380" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="8420716" />
  <Command __id="3381" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="8420716" />
  <Command __id="3383" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="8420861" />
  <Command __id="3384" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="8420861" />
  <Command __id="3386" _type="InsertStringCommand" date="Tue Mar 29 21:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="8421283" timestamp2="8421283">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3387" _type="InsertStringCommand" date="Tue Mar 29 21:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="8421283" timestamp2="8421283">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3389" _type="InsertStringCommand" date="Tue Mar 29 21:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="8421467" timestamp2="8421467">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3390" _type="InsertStringCommand" date="Tue Mar 29 21:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="8421473" timestamp2="8421473">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3392" _type="InsertStringCommand" date="Tue Mar 29 21:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="8421767" timestamp2="8421767">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3393" _type="InsertStringCommand" date="Tue Mar 29 21:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="8421767" timestamp2="8421767">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3395" _type="InsertStringCommand" date="Tue Mar 29 21:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="8421923" timestamp2="8421923">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3396" _type="InsertStringCommand" date="Tue Mar 29 21:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="8421923" timestamp2="8421923">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3398" _type="PauseCommand" date="Tue Mar 29 21:18:13 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8423716">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1793]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3397" _type="MoveCaretCommand" caretOffset="1756" date="Tue Mar 29 21:18:13 EDT 2022" docOffset="1756" starttimestamp="1648594670066" timestamp="8423716" />
  <Command __id="3399" _type="MoveCaretCommand" caretOffset="1756" date="Tue Mar 29 21:18:13 EDT 2022" docOffset="1756" starttimestamp="1648594670066" timestamp="8423716" />
  <Command __id="3401" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424039" />
  <Command __id="3402" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424039" />
  <Command __id="3404" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424218" />
  <Command __id="3405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424218" />
  <Command __id="3407" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424353" />
  <Command __id="3408" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424353" />
  <Command __id="3410" _type="InsertStringCommand" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424644" timestamp2="8424644">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3411" _type="InsertStringCommand" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424644" timestamp2="8424644">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3413" _type="InsertStringCommand" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424705" timestamp2="8424705">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3414" _type="InsertStringCommand" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424705" timestamp2="8424705">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3416" _type="InsertStringCommand" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424832" timestamp2="8424832">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3417" _type="InsertStringCommand" date="Tue Mar 29 21:18:14 EDT 2022" starttimestamp="1648594670066" timestamp="8424832" timestamp2="8424832">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3419" _type="InsertStringCommand" date="Tue Mar 29 21:18:15 EDT 2022" starttimestamp="1648594670066" timestamp="8424980" timestamp2="8424980">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3420" _type="InsertStringCommand" date="Tue Mar 29 21:18:15 EDT 2022" starttimestamp="1648594670066" timestamp="8424980" timestamp2="8424980">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3421" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:18:16 EDT 2022" starttimestamp="1648594670066" timestamp="8425960" />
  <Command __id="3422" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:18:16 EDT 2022" starttimestamp="1648594670066" timestamp="8426065" />
  <Command __id="3423" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:18:16 EDT 2022" starttimestamp="1648594670066" timestamp="8426119" />
  <DocumentChange __id="3357" _type="Insert" date="Tue Mar 29 21:18:03 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7345" docExpressionCount="754" docLength="7896" length="4" offset="3270" repeat="4" starttimestamp="1648594670066" timestamp="8413419" timestamp2="8413794">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3376" _type="Delete" date="Tue Mar 29 21:18:10 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7342" docExpressionCount="754" docLength="7893" endLine="40" length="3" offset="1809" repeat="3" startLine="40" starttimestamp="1648594670066" timestamp="8420555" timestamp2="8420859">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="3385" _type="Insert" date="Tue Mar 29 21:18:11 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7346" docExpressionCount="754" docLength="7897" length="4" offset="1809" repeat="4" starttimestamp="1648594670066" timestamp="8421279" timestamp2="8421919">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3400" _type="Delete" date="Tue Mar 29 21:18:14 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7343" docExpressionCount="754" docLength="7894" endLine="40" length="3" offset="1753" repeat="3" startLine="40" starttimestamp="1648594670066" timestamp="8424035" timestamp2="8424351">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="3409" _type="Insert" date="Tue Mar 29 21:18:14 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7347" docExpressionCount="754" docLength="7898" length="4" offset="1753" repeat="4" starttimestamp="1648594670066" timestamp="8424639" timestamp2="8424975">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <Command __id="3425" _type="PauseCommand" date="Tue Mar 29 21:18:19 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8429164">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3045]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3426" _type="MoveCaretCommand" caretOffset="1330" date="Tue Mar 29 21:18:19 EDT 2022" docOffset="1330" starttimestamp="1648594670066" timestamp="8429285" />
  <Command __id="3428" _type="PauseCommand" date="Tue Mar 29 21:18:21 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8431784">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2499]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3427" _type="MoveCaretCommand" caretOffset="1298" date="Tue Mar 29 21:18:21 EDT 2022" docOffset="1298" starttimestamp="1648594670066" timestamp="8431784" />
  <Command __id="3430" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:22 EDT 2022" starttimestamp="1648594670066" timestamp="8432029" />
  <Command __id="3432" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:22 EDT 2022" starttimestamp="1648594670066" timestamp="8432181" />
  <Command __id="3434" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:18:22 EDT 2022" starttimestamp="1648594670066" timestamp="8432316" />
  <Command __id="3436" _type="InsertStringCommand" date="Tue Mar 29 21:18:22 EDT 2022" starttimestamp="1648594670066" timestamp="8432557" timestamp2="8432557">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3438" _type="InsertStringCommand" date="Tue Mar 29 21:18:22 EDT 2022" starttimestamp="1648594670066" timestamp="8432632" timestamp2="8432632">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3440" _type="InsertStringCommand" date="Tue Mar 29 21:18:22 EDT 2022" starttimestamp="1648594670066" timestamp="8432728" timestamp2="8432728">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3442" _type="InsertStringCommand" date="Tue Mar 29 21:18:22 EDT 2022" starttimestamp="1648594670066" timestamp="8432871" timestamp2="8432871">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3443" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:18:23 EDT 2022" starttimestamp="1648594670066" timestamp="8433547" />
  <Command __id="3444" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:18:23 EDT 2022" starttimestamp="1648594670066" timestamp="8433697" />
  <Command __id="3445" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:18:23 EDT 2022" starttimestamp="1648594670066" timestamp="8433761" />
  <Command __id="3447" _type="MoveCaretCommand" caretOffset="1757" date="Tue Mar 29 21:18:24 EDT 2022" docOffset="1757" starttimestamp="1648594670066" timestamp="8434781" />
  <Command __id="3449" _type="PauseCommand" date="Tue Mar 29 21:18:48 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="8458753">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[23972]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3424" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:18:19 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1344" docExpressionCount="94" docLength="1344" projectName="A5" starttimestamp="1648594670066" timestamp="8429164">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3429" _type="Delete" date="Tue Mar 29 21:18:22 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1341" docExpressionCount="94" docLength="1341" endLine="29" length="3" offset="1295" repeat="3" startLine="29" starttimestamp="1648594670066" timestamp="8432021" timestamp2="8432312">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="3435" _type="Insert" date="Tue Mar 29 21:18:22 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" length="4" offset="1295" repeat="4" starttimestamp="1648594670066" timestamp="8432552" timestamp2="8432861">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <Command __id="3446" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:18:24 EDT 2022" docASTNodeCount="1034" docActiveCodeLength="7347" docExpressionCount="754" docLength="7898" projectName="A5" starttimestamp="1648594670066" timestamp="8434641">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterface"), Diff(DELETE,"RMI"), Diff(INSERT,"GIPC"), Diff(EQUAL,"> clientListRMI = new ArrayList<ClientRemoteInterface"), Diff(DELETE,"RMI"), Diff(INSERT,"GIPC"), Diff(EQUAL,">();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterface"), Diff(DELETE,"RMI"), Diff(INSERT,"GIPC"), Diff(EQUAL," aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		System.out.println("client list and size");
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="3448" _type="MoveCaretCommand" caretOffset="4090" date="Tue Mar 29 21:18:48 EDT 2022" docOffset="4090" starttimestamp="1648594670066" timestamp="8458753" />
  <Command __id="3450" _type="MoveCaretCommand" caretOffset="4090" date="Tue Mar 29 21:18:48 EDT 2022" docOffset="4090" starttimestamp="1648594670066" timestamp="8458753" />
  <Command __id="3452" _type="InsertStringCommand" date="Tue Mar 29 21:18:49 EDT 2022" starttimestamp="1648594670066" timestamp="8459269" timestamp2="8459269">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3453" _type="InsertStringCommand" date="Tue Mar 29 21:18:49 EDT 2022" starttimestamp="1648594670066" timestamp="8459269" timestamp2="8459269">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3456" _type="PauseCommand" date="Tue Mar 29 21:18:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8460349">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1080]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="3455" _type="InsertStringCommand" date="Tue Mar 29 21:18:50 EDT 2022" starttimestamp="1648594670066" timestamp="8460349" timestamp2="8460349">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3457" _type="InsertStringCommand" date="Tue Mar 29 21:18:50 EDT 2022" starttimestamp="1648594670066" timestamp="8460349" timestamp2="8460349">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3459" _type="InsertStringCommand" date="Tue Mar 29 21:18:50 EDT 2022" starttimestamp="1648594670066" timestamp="8460751" timestamp2="8460751">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3460" _type="InsertStringCommand" date="Tue Mar 29 21:18:50 EDT 2022" starttimestamp="1648594670066" timestamp="8460751" timestamp2="8460751">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="3462" _type="InsertStringCommand" date="Tue Mar 29 21:18:51 EDT 2022" starttimestamp="1648594670066" timestamp="8461608" timestamp2="8461608">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="3463" _type="InsertStringCommand" date="Tue Mar 29 21:18:51 EDT 2022" starttimestamp="1648594670066" timestamp="8461608" timestamp2="8461608">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="3464" _type="InsertStringCommand" date="Tue Mar 29 21:18:51 EDT 2022" starttimestamp="1648594670066" timestamp="8461664" timestamp2="8461664">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="3465" _type="InsertStringCommand" date="Tue Mar 29 21:18:51 EDT 2022" starttimestamp="1648594670066" timestamp="8461664" timestamp2="8461664">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="3466" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462087" />
  <Command __id="3467" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462087" />
  <Command __id="3469" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462438" timestamp2="8462438">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3470" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462438" timestamp2="8462438">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3472" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462564" timestamp2="8462564">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3473" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462564" timestamp2="8462564">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3475" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462698" timestamp2="8462698">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3476" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462698" timestamp2="8462698">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3478" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462800" timestamp2="8462800">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3479" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462800" timestamp2="8462800">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3481" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462932" timestamp2="8462932">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3482" _type="InsertStringCommand" date="Tue Mar 29 21:18:52 EDT 2022" starttimestamp="1648594670066" timestamp="8462932" timestamp2="8462932">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3484" _type="InsertStringCommand" date="Tue Mar 29 21:18:53 EDT 2022" starttimestamp="1648594670066" timestamp="8463086" timestamp2="8463086">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3485" _type="InsertStringCommand" date="Tue Mar 29 21:18:53 EDT 2022" starttimestamp="1648594670066" timestamp="8463086" timestamp2="8463086">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3487" _type="InsertStringCommand" date="Tue Mar 29 21:18:53 EDT 2022" starttimestamp="1648594670066" timestamp="8463745" timestamp2="8463745">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3488" _type="InsertStringCommand" date="Tue Mar 29 21:18:53 EDT 2022" starttimestamp="1648594670066" timestamp="8463745" timestamp2="8463745">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3490" _type="InsertStringCommand" date="Tue Mar 29 21:18:53 EDT 2022" starttimestamp="1648594670066" timestamp="8463923" timestamp2="8463923">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3491" _type="InsertStringCommand" date="Tue Mar 29 21:18:53 EDT 2022" starttimestamp="1648594670066" timestamp="8463923" timestamp2="8463923">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3493" _type="InsertStringCommand" date="Tue Mar 29 21:18:54 EDT 2022" starttimestamp="1648594670066" timestamp="8464022" timestamp2="8464022">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3494" _type="InsertStringCommand" date="Tue Mar 29 21:18:54 EDT 2022" starttimestamp="1648594670066" timestamp="8464022" timestamp2="8464022">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3496" _type="InsertStringCommand" date="Tue Mar 29 21:18:54 EDT 2022" starttimestamp="1648594670066" timestamp="8464204" timestamp2="8464204">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3497" _type="InsertStringCommand" date="Tue Mar 29 21:18:54 EDT 2022" starttimestamp="1648594670066" timestamp="8464204" timestamp2="8464204">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3499" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8464942" timestamp2="8464942">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3500" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8464942" timestamp2="8464942">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3502" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8465034" timestamp2="8465034">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3503" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8465034" timestamp2="8465034">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3505" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8465133" timestamp2="8465133">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3506" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8465133" timestamp2="8465133">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3508" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8465383" timestamp2="8465383">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3509" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8465383" timestamp2="8465383">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3511" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8465844" timestamp2="8465844">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3512" _type="InsertStringCommand" date="Tue Mar 29 21:18:55 EDT 2022" starttimestamp="1648594670066" timestamp="8465844" timestamp2="8465844">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="3513" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 21:18:55 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="8465848" />
  <Command __id="3517" _type="PauseCommand" date="Tue Mar 29 21:18:57 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8467383">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1535]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="3516" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 21:18:57 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="8467383" />
  <Command __id="3519" _type="InsertStringCommand" date="Tue Mar 29 21:18:57 EDT 2022" starttimestamp="1648594670066" timestamp="8467391" timestamp2="8467391">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3520" _type="InsertStringCommand" date="Tue Mar 29 21:18:57 EDT 2022" starttimestamp="1648594670066" timestamp="8467392" timestamp2="8467392">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3522" _type="PauseCommand" date="Tue Mar 29 21:19:05 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8475714">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[8322]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3521" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 21:19:05 EDT 2022" starttimestamp="1648594670066" timestamp="8475714" />
  <Command __id="3523" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 21:19:05 EDT 2022" starttimestamp="1648594670066" timestamp="8475715" />
  <Command __id="3525" _type="InsertStringCommand" date="Tue Mar 29 21:19:06 EDT 2022" starttimestamp="1648594670066" timestamp="8476237" timestamp2="8476237">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="3526" _type="InsertStringCommand" date="Tue Mar 29 21:19:06 EDT 2022" starttimestamp="1648594670066" timestamp="8476238" timestamp2="8476238">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="3528" _type="InsertStringCommand" date="Tue Mar 29 21:19:06 EDT 2022" starttimestamp="1648594670066" timestamp="8476291" timestamp2="8476291">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="3529" _type="InsertStringCommand" date="Tue Mar 29 21:19:06 EDT 2022" starttimestamp="1648594670066" timestamp="8476291" timestamp2="8476291">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="3530" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 21:19:06 EDT 2022" starttimestamp="1648594670066" timestamp="8476601" />
  <Command __id="3531" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 21:19:06 EDT 2022" starttimestamp="1648594670066" timestamp="8476601" />
  <Command __id="3533" _type="InsertStringCommand" date="Tue Mar 29 21:19:07 EDT 2022" starttimestamp="1648594670066" timestamp="8476951" timestamp2="8476951">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3534" _type="InsertStringCommand" date="Tue Mar 29 21:19:07 EDT 2022" starttimestamp="1648594670066" timestamp="8476951" timestamp2="8476951">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3536" _type="PauseCommand" date="Tue Mar 29 21:19:12 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8482875">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5924]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3535" _type="SelectTextCommand" caretOffset="1632" date="Tue Mar 29 21:19:12 EDT 2022" end="1678" start="1632" starttimestamp="1648594670066" timestamp="8482875" />
  <Command __id="3537" _type="SelectTextCommand" caretOffset="1632" date="Tue Mar 29 21:19:12 EDT 2022" end="1678" start="1632" starttimestamp="1648594670066" timestamp="8482876" />
  <Command __id="3538" _type="CopyCommand" date="Tue Mar 29 21:19:13 EDT 2022" starttimestamp="1648594670066" timestamp="8483019" />
  <Command __id="3540" _type="PauseCommand" date="Tue Mar 29 21:19:24 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="8494303">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[11284]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3539" _type="MoveCaretCommand" caretOffset="4129" date="Tue Mar 29 21:19:24 EDT 2022" docOffset="4129" starttimestamp="1648594670066" timestamp="8494303" />
  <Command __id="3541" _type="MoveCaretCommand" caretOffset="4129" date="Tue Mar 29 21:19:24 EDT 2022" docOffset="4129" starttimestamp="1648594670066" timestamp="8494303" />
  <Command __id="3543" _type="PasteCommand" date="Tue Mar 29 21:19:24 EDT 2022" starttimestamp="1648594670066" timestamp="8494653" />
  <DocumentChange __id="3451" _type="Insert" date="Tue Mar 29 21:18:49 EDT 2022" docASTNodeCount="1038" docActiveCodeLength="7372" docExpressionCount="757" docLength="7923" length="25" offset="4090" repeat="21" starttimestamp="1648594670066" timestamp="8459244" timestamp2="8466555">
    <text><![CDATA[
		if(clientListGIPC.em)]]></text>
  </DocumentChange>
  <DocumentChange __id="3518" _type="Replace" date="Tue Mar 29 21:18:57 EDT 2022" docASTNodeCount="1038" docActiveCodeLength="7379" docExpressionCount="757" docLength="7930" endLine="105" insertionLength="9" int_docASTNodeCount="1038" int_docActiveCodeLength="7370" int_docExpressionCount="756" int_docLength="7921" length="2" offset="4112" startLine="105" starttimestamp="1648594670066" timestamp="8467386">
    <deletedText><![CDATA[em]]></deletedText>
    <insertedText><![CDATA[isEmpty()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3524" _type="Insert" date="Tue Mar 29 21:19:06 EDT 2022" docASTNodeCount="1039" docActiveCodeLength="7391" docExpressionCount="757" docLength="7942" length="12" offset="4122" repeat="3" starttimestamp="1648594670066" timestamp="8476221" timestamp2="8476945">
    <text><![CDATA[ {
			
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="3542" _type="Replace" date="Tue Mar 29 21:19:24 EDT 2022" docASTNodeCount="1047" docActiveCodeLength="7437" docExpressionCount="760" docLength="7988" endLine="106" insertionLength="49" int_docASTNodeCount="1039" int_docActiveCodeLength="7388" int_docExpressionCount="757" int_docLength="7939" length="3" offset="4126" startLine="106" starttimestamp="1648594670066" timestamp="8494643">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			List<ClientRemoteInterfaceGIPC> clientListGIPC]]></insertedText>
  </DocumentChange>
  <Command __id="3545" _type="PauseCommand" date="Tue Mar 29 21:19:27 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8496995">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2342]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="3544" _type="Delete" date="Tue Mar 29 21:19:27 EDT 2022" docASTNodeCount="1047" docActiveCodeLength="7433" docExpressionCount="760" docLength="7984" endLine="106" length="4" offset="4171" repeat="4" startLine="106" starttimestamp="1648594670066" timestamp="8496995" timestamp2="8497428">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <Command __id="3546" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497001" />
  <Command __id="3547" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497001" />
  <Command __id="3549" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497151" />
  <Command __id="3550" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497151" />
  <Command __id="3552" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497290" />
  <Command __id="3553" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497290" />
  <Command __id="3555" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497431" />
  <Command __id="3556" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497431" />
  <Command __id="3558" _type="InsertStringCommand" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497772" timestamp2="8497772">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3559" _type="InsertStringCommand" date="Tue Mar 29 21:19:27 EDT 2022" starttimestamp="1648594670066" timestamp="8497772" timestamp2="8497772">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3561" _type="InsertStringCommand" date="Tue Mar 29 21:19:28 EDT 2022" starttimestamp="1648594670066" timestamp="8498036" timestamp2="8498036">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3562" _type="InsertStringCommand" date="Tue Mar 29 21:19:28 EDT 2022" starttimestamp="1648594670066" timestamp="8498036" timestamp2="8498036">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3564" _type="InsertStringCommand" date="Tue Mar 29 21:19:28 EDT 2022" starttimestamp="1648594670066" timestamp="8498178" timestamp2="8498178">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3565" _type="InsertStringCommand" date="Tue Mar 29 21:19:28 EDT 2022" starttimestamp="1648594670066" timestamp="8498178" timestamp2="8498178">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="3557" _type="Insert" date="Tue Mar 29 21:19:27 EDT 2022" docASTNodeCount="1047" docActiveCodeLength="7436" docExpressionCount="760" docLength="7987" length="3" offset="4171" repeat="3" starttimestamp="1648594670066" timestamp="8497766" timestamp2="8498173">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <Command __id="3567" _type="PauseCommand" date="Tue Mar 29 21:19:31 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8501046">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2868]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3568" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501053" timestamp2="8501053">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3569" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501053" timestamp2="8501053">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3571" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501168" timestamp2="8501168">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3572" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501168" timestamp2="8501168">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3574" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501253" timestamp2="8501253">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3575" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501253" timestamp2="8501253">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3577" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501344" timestamp2="8501344">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3578" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501344" timestamp2="8501344">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3580" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501465" timestamp2="8501465">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3581" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501465" timestamp2="8501465">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3583" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501569" timestamp2="8501569">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3584" _type="InsertStringCommand" date="Tue Mar 29 21:19:31 EDT 2022" starttimestamp="1648594670066" timestamp="8501569" timestamp2="8501569">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3586" _type="InsertStringCommand" date="Tue Mar 29 21:19:32 EDT 2022" starttimestamp="1648594670066" timestamp="8501940" timestamp2="8501940">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3587" _type="InsertStringCommand" date="Tue Mar 29 21:19:32 EDT 2022" starttimestamp="1648594670066" timestamp="8501940" timestamp2="8501940">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3589" _type="InsertStringCommand" date="Tue Mar 29 21:19:32 EDT 2022" starttimestamp="1648594670066" timestamp="8502144" timestamp2="8502144">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3590" _type="InsertStringCommand" date="Tue Mar 29 21:19:32 EDT 2022" starttimestamp="1648594670066" timestamp="8502144" timestamp2="8502144">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3592" _type="InsertStringCommand" date="Tue Mar 29 21:19:32 EDT 2022" starttimestamp="1648594670066" timestamp="8502200" timestamp2="8502200">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3593" _type="InsertStringCommand" date="Tue Mar 29 21:19:32 EDT 2022" starttimestamp="1648594670066" timestamp="8502200" timestamp2="8502200">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3595" _type="InsertStringCommand" date="Tue Mar 29 21:19:32 EDT 2022" starttimestamp="1648594670066" timestamp="8502404" timestamp2="8502404">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3596" _type="InsertStringCommand" date="Tue Mar 29 21:19:32 EDT 2022" starttimestamp="1648594670066" timestamp="8502404" timestamp2="8502404">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3598" _type="InsertStringCommand" date="Tue Mar 29 21:19:33 EDT 2022" starttimestamp="1648594670066" timestamp="8503170" timestamp2="8503170">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3599" _type="InsertStringCommand" date="Tue Mar 29 21:19:33 EDT 2022" starttimestamp="1648594670066" timestamp="8503170" timestamp2="8503170">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="3601" _type="InsertStringCommand" date="Tue Mar 29 21:19:33 EDT 2022" starttimestamp="1648594670066" timestamp="8503297" timestamp2="8503297">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3602" _type="InsertStringCommand" date="Tue Mar 29 21:19:33 EDT 2022" starttimestamp="1648594670066" timestamp="8503297" timestamp2="8503297">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="3604" _type="InsertStringCommand" date="Tue Mar 29 21:19:33 EDT 2022" starttimestamp="1648594670066" timestamp="8503419" timestamp2="8503419">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3605" _type="InsertStringCommand" date="Tue Mar 29 21:19:33 EDT 2022" starttimestamp="1648594670066" timestamp="8503419" timestamp2="8503419">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3607" _type="InsertStringCommand" date="Tue Mar 29 21:19:33 EDT 2022" starttimestamp="1648594670066" timestamp="8503640" timestamp2="8503640">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3608" _type="InsertStringCommand" date="Tue Mar 29 21:19:33 EDT 2022" starttimestamp="1648594670066" timestamp="8503640" timestamp2="8503640">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3610" _type="PauseCommand" date="Tue Mar 29 21:19:35 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8505085">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1445]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3609" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:19:35 EDT 2022" starttimestamp="1648594670066" timestamp="8505085" />
  <Command __id="3611" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:19:35 EDT 2022" starttimestamp="1648594670066" timestamp="8505180" />
  <Command __id="3612" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:19:35 EDT 2022" starttimestamp="1648594670066" timestamp="8505213" />
  <Command __id="3614" _type="PauseCommand" date="Tue Mar 29 21:19:39 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8509259">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4046]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3613" _type="SelectTextCommand" caretOffset="4129" date="Tue Mar 29 21:19:39 EDT 2022" end="4172" start="4129" starttimestamp="1648594670066" timestamp="8509259" />
  <Command __id="3615" _type="SelectTextCommand" caretOffset="4129" date="Tue Mar 29 21:19:39 EDT 2022" end="4172" start="4129" starttimestamp="1648594670066" timestamp="8509259" />
  <Command __id="3617" _type="CutCommand" date="Tue Mar 29 21:19:39 EDT 2022" starttimestamp="1648594670066" timestamp="8509733" />
  <Command __id="3619" _type="PauseCommand" date="Tue Mar 29 21:19:46 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8516539">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[6806]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3618" _type="MoveCaretCommand" caretOffset="3570" date="Tue Mar 29 21:19:46 EDT 2022" docOffset="3570" starttimestamp="1648594670066" timestamp="8516539" />
  <Command __id="3620" _type="MoveCaretCommand" caretOffset="3570" date="Tue Mar 29 21:19:46 EDT 2022" docOffset="3570" starttimestamp="1648594670066" timestamp="8516539" />
  <Command __id="3622" _type="InsertStringCommand" date="Tue Mar 29 21:19:46 EDT 2022" starttimestamp="1648594670066" timestamp="8516809" timestamp2="8516809">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3623" _type="InsertStringCommand" date="Tue Mar 29 21:19:46 EDT 2022" starttimestamp="1648594670066" timestamp="8516810" timestamp2="8516810">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3624" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Mar 29 21:19:47 EDT 2022" starttimestamp="1648594670066" timestamp="8517258" />
  <Command __id="3625" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Tue Mar 29 21:19:47 EDT 2022" starttimestamp="1648594670066" timestamp="8517258" />
  <Command __id="3627" _type="PasteCommand" date="Tue Mar 29 21:19:47 EDT 2022" starttimestamp="1648594670066" timestamp="8517730" />
  <Command __id="3629" _type="InsertStringCommand" date="Tue Mar 29 21:19:48 EDT 2022" starttimestamp="1648594670066" timestamp="8518501" timestamp2="8518501">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3630" _type="InsertStringCommand" date="Tue Mar 29 21:19:48 EDT 2022" starttimestamp="1648594670066" timestamp="8518501" timestamp2="8518501">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="3632" _type="PauseCommand" date="Tue Mar 29 21:19:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8520124">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1623]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3631" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:19:50 EDT 2022" starttimestamp="1648594670066" timestamp="8520124" />
  <Command __id="3633" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:19:50 EDT 2022" starttimestamp="1648594670066" timestamp="8520221" />
  <Command __id="3634" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:19:50 EDT 2022" starttimestamp="1648594670066" timestamp="8520253" />
  <Command __id="3636" _type="PauseCommand" date="Tue Mar 29 21:19:54 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8524465">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4212]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3635" _type="MoveCaretCommand" caretOffset="4177" date="Tue Mar 29 21:19:54 EDT 2022" docOffset="4177" starttimestamp="1648594670066" timestamp="8524465" />
  <Command __id="3637" _type="MoveCaretCommand" caretOffset="4177" date="Tue Mar 29 21:19:54 EDT 2022" docOffset="4177" starttimestamp="1648594670066" timestamp="8524466" />
  <Command __id="3639" _type="InsertStringCommand" date="Tue Mar 29 21:19:54 EDT 2022" starttimestamp="1648594670066" timestamp="8524717" timestamp2="8524717">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3640" _type="InsertStringCommand" date="Tue Mar 29 21:19:54 EDT 2022" starttimestamp="1648594670066" timestamp="8524717" timestamp2="8524717">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3642" _type="InsertStringCommand" date="Tue Mar 29 21:19:54 EDT 2022" starttimestamp="1648594670066" timestamp="8524828" timestamp2="8524828">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3643" _type="InsertStringCommand" date="Tue Mar 29 21:19:54 EDT 2022" starttimestamp="1648594670066" timestamp="8524828" timestamp2="8524828">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3645" _type="InsertStringCommand" date="Tue Mar 29 21:19:55 EDT 2022" starttimestamp="1648594670066" timestamp="8524936" timestamp2="8524936">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3646" _type="InsertStringCommand" date="Tue Mar 29 21:19:55 EDT 2022" starttimestamp="1648594670066" timestamp="8524936" timestamp2="8524936">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3648" _type="InsertStringCommand" date="Tue Mar 29 21:19:55 EDT 2022" starttimestamp="1648594670066" timestamp="8525018" timestamp2="8525018">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3649" _type="InsertStringCommand" date="Tue Mar 29 21:19:55 EDT 2022" starttimestamp="1648594670066" timestamp="8525018" timestamp2="8525018">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3651" _type="InsertStringCommand" date="Tue Mar 29 21:19:55 EDT 2022" starttimestamp="1648594670066" timestamp="8525155" timestamp2="8525155">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3652" _type="InsertStringCommand" date="Tue Mar 29 21:19:55 EDT 2022" starttimestamp="1648594670066" timestamp="8525155" timestamp2="8525155">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3654" _type="InsertStringCommand" date="Tue Mar 29 21:19:55 EDT 2022" starttimestamp="1648594670066" timestamp="8525548" timestamp2="8525548">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3655" _type="InsertStringCommand" date="Tue Mar 29 21:19:55 EDT 2022" starttimestamp="1648594670066" timestamp="8525548" timestamp2="8525548">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3657" _type="InsertStringCommand" date="Tue Mar 29 21:19:56 EDT 2022" starttimestamp="1648594670066" timestamp="8526373" timestamp2="8526373">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3658" _type="InsertStringCommand" date="Tue Mar 29 21:19:56 EDT 2022" starttimestamp="1648594670066" timestamp="8526373" timestamp2="8526373">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3660" _type="InsertStringCommand" date="Tue Mar 29 21:19:56 EDT 2022" starttimestamp="1648594670066" timestamp="8526598" timestamp2="8526598">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3661" _type="InsertStringCommand" date="Tue Mar 29 21:19:56 EDT 2022" starttimestamp="1648594670066" timestamp="8526598" timestamp2="8526598">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3663" _type="InsertStringCommand" date="Tue Mar 29 21:19:56 EDT 2022" starttimestamp="1648594670066" timestamp="8526677" timestamp2="8526677">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3664" _type="InsertStringCommand" date="Tue Mar 29 21:19:56 EDT 2022" starttimestamp="1648594670066" timestamp="8526677" timestamp2="8526677">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3666" _type="InsertStringCommand" date="Tue Mar 29 21:19:56 EDT 2022" starttimestamp="1648594670066" timestamp="8526875" timestamp2="8526875">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3667" _type="InsertStringCommand" date="Tue Mar 29 21:19:56 EDT 2022" starttimestamp="1648594670066" timestamp="8526875" timestamp2="8526875">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="3566" _type="Insert" date="Tue Mar 29 21:19:31 EDT 2022" docASTNodeCount="1048" docActiveCodeLength="7450" docExpressionCount="761" docLength="8001" length="14" offset="4174" repeat="14" starttimestamp="1648594670066" timestamp="8501046" timestamp2="8503635">
    <text><![CDATA[clientListRMI;]]></text>
  </DocumentChange>
  <DocumentChange __id="3616" _type="Delete" date="Tue Mar 29 21:19:39 EDT 2022" docASTNodeCount="961" docActiveCodeLength="7407" docExpressionCount="704" docLength="7958" endLine="106" length="43" offset="4129" startLine="106" starttimestamp="1648594670066" timestamp="8509718">
    <text><![CDATA[List<ClientRemoteInterfaceGIPC> clientList ]]></text>
  </DocumentChange>
  <DocumentChange __id="3621" _type="Insert" date="Tue Mar 29 21:19:46 EDT 2022" docASTNodeCount="961" docActiveCodeLength="7411" docExpressionCount="704" docLength="7962" length="4" offset="3570" starttimestamp="1648594670066" timestamp="8516799">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="3626" _type="Replace" date="Tue Mar 29 21:19:47 EDT 2022" docASTNodeCount="969" docActiveCodeLength="7454" docExpressionCount="707" docLength="8005" endLine="91" insertionLength="45" int_docASTNodeCount="961" int_docActiveCodeLength="7409" int_docExpressionCount="704" int_docLength="7960" length="2" offset="3568" startLine="91" starttimestamp="1648594670066" timestamp="8517724">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		List<ClientRemoteInterfaceGIPC> clientList ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3628" _type="Insert" date="Tue Mar 29 21:19:48 EDT 2022" docASTNodeCount="969" docActiveCodeLength="7455" docExpressionCount="707" docLength="8006" length="1" offset="3613" starttimestamp="1648594670066" timestamp="8518492">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="3638" _type="Insert" date="Tue Mar 29 21:19:54 EDT 2022" docASTNodeCount="1051" docActiveCodeLength="7465" docExpressionCount="763" docLength="8016" length="10" offset="4177" repeat="10" starttimestamp="1648594670066" timestamp="8524711" timestamp2="8526870">
    <text><![CDATA[clientList]]></text>
  </DocumentChange>
  <Command __id="3669" _type="PauseCommand" date="Tue Mar 29 21:19:59 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8529026">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2151]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3670" _type="InsertStringCommand" date="Tue Mar 29 21:19:59 EDT 2022" starttimestamp="1648594670066" timestamp="8529033" timestamp2="8529033">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3671" _type="InsertStringCommand" date="Tue Mar 29 21:19:59 EDT 2022" starttimestamp="1648594670066" timestamp="8529033" timestamp2="8529033">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3672" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:19:59 EDT 2022" starttimestamp="1648594670066" timestamp="8529541" />
  <Command __id="3673" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:19:59 EDT 2022" starttimestamp="1648594670066" timestamp="8529634" />
  <Command __id="3674" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:19:59 EDT 2022" starttimestamp="1648594670066" timestamp="8529667" />
  <Command __id="3676" _type="PauseCommand" date="Tue Mar 29 21:20:06 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8536439">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6772]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3675" _type="MoveCaretCommand" caretOffset="3613" date="Tue Mar 29 21:20:06 EDT 2022" docOffset="3613" starttimestamp="1648594670066" timestamp="8536439" />
  <Command __id="3677" _type="MoveCaretCommand" caretOffset="3613" date="Tue Mar 29 21:20:06 EDT 2022" docOffset="3613" starttimestamp="1648594670066" timestamp="8536439" />
  <Command __id="3679" _type="InsertStringCommand" date="Tue Mar 29 21:20:06 EDT 2022" starttimestamp="1648594670066" timestamp="8536904" timestamp2="8536904">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3680" _type="InsertStringCommand" date="Tue Mar 29 21:20:06 EDT 2022" starttimestamp="1648594670066" timestamp="8536904" timestamp2="8536904">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="3682" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537139" timestamp2="8537139">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3683" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537139" timestamp2="8537139">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3685" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537354" timestamp2="8537354">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3686" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537354" timestamp2="8537354">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="3688" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537463" timestamp2="8537463">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3689" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537463" timestamp2="8537463">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="3691" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537545" timestamp2="8537545">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3692" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537545" timestamp2="8537545">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3694" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537619" timestamp2="8537619">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3695" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537619" timestamp2="8537619">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3697" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537774" timestamp2="8537774">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3698" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537774" timestamp2="8537774">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3700" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537835" timestamp2="8537835">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3701" _type="InsertStringCommand" date="Tue Mar 29 21:20:07 EDT 2022" starttimestamp="1648594670066" timestamp="8537835" timestamp2="8537835">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3703" _type="InsertStringCommand" date="Tue Mar 29 21:20:08 EDT 2022" starttimestamp="1648594670066" timestamp="8538155" timestamp2="8538155">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3704" _type="InsertStringCommand" date="Tue Mar 29 21:20:08 EDT 2022" starttimestamp="1648594670066" timestamp="8538155" timestamp2="8538155">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="3706" _type="InsertStringCommand" date="Tue Mar 29 21:20:08 EDT 2022" starttimestamp="1648594670066" timestamp="8538366" timestamp2="8538366">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3707" _type="InsertStringCommand" date="Tue Mar 29 21:20:08 EDT 2022" starttimestamp="1648594670066" timestamp="8538366" timestamp2="8538366">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="3709" _type="InsertStringCommand" date="Tue Mar 29 21:20:08 EDT 2022" starttimestamp="1648594670066" timestamp="8538422" timestamp2="8538422">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3710" _type="InsertStringCommand" date="Tue Mar 29 21:20:08 EDT 2022" starttimestamp="1648594670066" timestamp="8538422" timestamp2="8538422">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="3712" _type="InsertStringCommand" date="Tue Mar 29 21:20:08 EDT 2022" starttimestamp="1648594670066" timestamp="8538627" timestamp2="8538627">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3713" _type="InsertStringCommand" date="Tue Mar 29 21:20:08 EDT 2022" starttimestamp="1648594670066" timestamp="8538627" timestamp2="8538627">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3715" _type="InsertStringCommand" date="Tue Mar 29 21:20:09 EDT 2022" starttimestamp="1648594670066" timestamp="8538990" timestamp2="8538990">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3716" _type="InsertStringCommand" date="Tue Mar 29 21:20:09 EDT 2022" starttimestamp="1648594670066" timestamp="8538990" timestamp2="8538990">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="3718" _type="InsertStringCommand" date="Tue Mar 29 21:20:09 EDT 2022" starttimestamp="1648594670066" timestamp="8539088" timestamp2="8539088">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3719" _type="InsertStringCommand" date="Tue Mar 29 21:20:09 EDT 2022" starttimestamp="1648594670066" timestamp="8539088" timestamp2="8539088">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="3721" _type="InsertStringCommand" date="Tue Mar 29 21:20:09 EDT 2022" starttimestamp="1648594670066" timestamp="8539199" timestamp2="8539199">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3722" _type="InsertStringCommand" date="Tue Mar 29 21:20:09 EDT 2022" starttimestamp="1648594670066" timestamp="8539199" timestamp2="8539199">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="3724" _type="InsertStringCommand" date="Tue Mar 29 21:20:09 EDT 2022" starttimestamp="1648594670066" timestamp="8539339" timestamp2="8539339">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3725" _type="InsertStringCommand" date="Tue Mar 29 21:20:09 EDT 2022" starttimestamp="1648594670066" timestamp="8539339" timestamp2="8539339">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="3727" _type="PauseCommand" date="Tue Mar 29 21:20:10 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8540536">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1197]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3726" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:20:10 EDT 2022" starttimestamp="1648594670066" timestamp="8540536" />
  <Command __id="3728" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:20:10 EDT 2022" starttimestamp="1648594670066" timestamp="8540635" />
  <Command __id="3729" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:20:10 EDT 2022" starttimestamp="1648594670066" timestamp="8540673" />
  <Command __id="3731" _type="PauseCommand" date="Tue Mar 29 21:20:13 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8543797">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3123]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3730" _type="MoveCaretCommand" caretOffset="4283" date="Tue Mar 29 21:20:13 EDT 2022" docOffset="4283" starttimestamp="1648594670066" timestamp="8543796" />
  <Command __id="3732" _type="MoveCaretCommand" caretOffset="4283" date="Tue Mar 29 21:20:13 EDT 2022" docOffset="4283" starttimestamp="1648594670066" timestamp="8543797" />
  <Command __id="3734" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:20:14 EDT 2022" starttimestamp="1648594670066" timestamp="8544258" />
  <Command __id="3735" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:20:14 EDT 2022" starttimestamp="1648594670066" timestamp="8544258" />
  <Command __id="3737" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:20:14 EDT 2022" starttimestamp="1648594670066" timestamp="8544384" />
  <Command __id="3738" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:20:14 EDT 2022" starttimestamp="1648594670066" timestamp="8544384" />
  <Command __id="3740" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:20:14 EDT 2022" starttimestamp="1648594670066" timestamp="8544544" />
  <Command __id="3741" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:20:14 EDT 2022" starttimestamp="1648594670066" timestamp="8544544" />
  <Command __id="3743" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:20:14 EDT 2022" starttimestamp="1648594670066" timestamp="8544667" />
  <Command __id="3744" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:20:14 EDT 2022" starttimestamp="1648594670066" timestamp="8544667" />
  <Command __id="3745" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:20:15 EDT 2022" starttimestamp="1648594670066" timestamp="8545150" />
  <Command __id="3746" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:20:15 EDT 2022" starttimestamp="1648594670066" timestamp="8545239" />
  <Command __id="3747" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:20:15 EDT 2022" starttimestamp="1648594670066" timestamp="8545272" />
  <DocumentChange __id="3668" _type="Insert" date="Tue Mar 29 21:19:59 EDT 2022" docASTNodeCount="1051" docActiveCodeLength="7466" docExpressionCount="763" docLength="8017" length="1" offset="4187" starttimestamp="1648594670066" timestamp="8529026">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="3678" _type="Insert" date="Tue Mar 29 21:20:06 EDT 2022" docASTNodeCount="1052" docActiveCodeLength="7482" docExpressionCount="764" docLength="8033" length="16" offset="3613" repeat="16" starttimestamp="1648594670066" timestamp="8536899" timestamp2="8539335">
    <text><![CDATA[= clientListGIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3733" _type="Delete" date="Tue Mar 29 21:20:14 EDT 2022" docASTNodeCount="1052" docActiveCodeLength="7478" docExpressionCount="764" docLength="8029" endLine="109" length="4" offset="4279" repeat="4" startLine="109" starttimestamp="1648594670066" timestamp="8544250" timestamp2="8544665">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <Command __id="3749" _type="PauseCommand" date="Tue Mar 29 21:20:20 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8550323">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5051]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3750" _type="MoveCaretCommand" caretOffset="6494" date="Tue Mar 29 21:20:20 EDT 2022" docOffset="6494" starttimestamp="1648594670066" timestamp="8550451" />
  <Command __id="3752" _type="PauseCommand" date="Tue Mar 29 21:20:28 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8558321">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7870]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3782" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 21:20:45 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="8575323" type="Run" />
  <Command __id="3784" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:45 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8575442" type="Run" />
  <Command __id="3785" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8575446" type="Run" />
  <Command __id="3786" _type="ConsoleOutput" date="Tue Mar 29 21:20:45 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8575724" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.6359843203897545
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.6359843203897545"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3788" _type="PauseCommand" date="Tue Mar 29 21:20:46 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8576770">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1046]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3791" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8581942" type="Run" />
  <Command __id="3793" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8582150" type="Run" />
  <Command __id="3794" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8582232" type="Run" />
  <Command __id="3795" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8582270" type="Run" />
  <Command __id="3796" _type="ConsoleOutput" date="Tue Mar 29 21:20:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8582320" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.6359843203897545 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@2b4e8201
[com.sun.proxy.$Proxy1@2b4e8201]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.6359843203897545"), Diff(INSERT,"Server0<-->Generic Client:0.6359843203897545 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@2b4e8201¶[com.sun.proxy.$Proxy1@2b4e8201]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3797" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8582337" type="Run" />
  <Command __id="3798" _type="ConsoleOutput" date="Tue Mar 29 21:20:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8582615" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.6359843203897545 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@2b4e8201¶[com.sun.proxy.$Proxy1@2b4e8201]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3799" _type="ConsoleOutput" date="Tue Mar 29 21:20:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8582660" type="ConsoleOutput">
    <outputString><![CDATA[Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3801" _type="PauseCommand" date="Tue Mar 29 21:20:54 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8584391">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1731]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3802" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8586285" type="Run" />
  <Command __id="3804" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:20:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8586285" type="Run" />
  <Command __id="3806" _type="PauseCommand" date="Tue Mar 29 21:21:00 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8590188">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3902]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="3809" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:21:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8597358" type="Run" />
  <Command __id="3748" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:20:20 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7804" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="8550323">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		//clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3755" _type="Insert" date="Tue Mar 29 21:20:29 EDT 2022" docASTNodeCount="1019" docActiveCodeLength="7733" docExpressionCount="723" docLength="9084" length="2" offset="6565" repeat="2" starttimestamp="1648594670066" timestamp="8559361" timestamp2="8559481">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3760" _type="Delete" date="Tue Mar 29 21:20:30 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7800" docExpressionCount="730" docLength="9082" endLine="181" length="2" offset="6492" repeat="2" startLine="181" starttimestamp="1648594670066" timestamp="8560301" timestamp2="8560428">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="3812" _type="PauseCommand" date="Tue Mar 29 21:21:13 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8603831">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6473]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3814" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:21:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8612270" type="Run" />
  <Command __id="3816" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:21:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8612299" type="Run" />
  <Command __id="3818" _type="PauseCommand" date="Tue Mar 29 21:21:32 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="8622764">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10465]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3817" _type="SelectTextCommand" caretOffset="4073" date="Tue Mar 29 21:21:32 EDT 2022" end="4154" start="4073" starttimestamp="1648594670066" timestamp="8622764" />
  <Command __id="3819" _type="SelectTextCommand" caretOffset="4073" date="Tue Mar 29 21:21:32 EDT 2022" end="4154" start="4073" starttimestamp="1648594670066" timestamp="8622764" />
  <Command __id="3811" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:21:13 EDT 2022" docASTNodeCount="1052" docActiveCodeLength="7478" docExpressionCount="764" docLength="8029" projectName="A5" starttimestamp="1648594670066" timestamp="8603831">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		"), Diff(INSERT,"List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		"), Diff(EQUAL,"System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		"), Diff(INSERT,"if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		}¶		"), Diff(EQUAL,"for (ClientRemoteInterfaceGIPC client : clientList"), Diff(DELETE,"GIPC"), Diff(EQUAL,") {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		System.out.println("client list and size");
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
		}
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="3821" _type="PauseCommand" date="Tue Mar 29 21:21:33 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8623785">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1021]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="3820" _type="Delete" date="Tue Mar 29 21:21:33 EDT 2022" docASTNodeCount="1036" docActiveCodeLength="7397" docExpressionCount="750" docLength="7948" endLine="105" length="81" offset="4073" startLine="104" starttimestamp="1648594670066" timestamp="8623785">
    <text><![CDATA[System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());]]></text>
  </DocumentChange>
  <Command __id="3822" _type="CutCommand" date="Tue Mar 29 21:21:33 EDT 2022" starttimestamp="1648594670066" timestamp="8623803" />
  <Command __id="3823" _type="MoveCaretCommand" caretOffset="4144" date="Tue Mar 29 21:21:34 EDT 2022" docOffset="4144" starttimestamp="1648594670066" timestamp="8624763" />
  <Command __id="3824" _type="MoveCaretCommand" caretOffset="4144" date="Tue Mar 29 21:21:34 EDT 2022" docOffset="4144" starttimestamp="1648594670066" timestamp="8624763" />
  <DocumentChange __id="3825" _type="Insert" date="Tue Mar 29 21:21:35 EDT 2022" docASTNodeCount="1036" docActiveCodeLength="7401" docExpressionCount="750" docLength="7952" length="4" offset="4144" starttimestamp="1648594670066" timestamp="8624998">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="3826" _type="InsertStringCommand" date="Tue Mar 29 21:21:35 EDT 2022" starttimestamp="1648594670066" timestamp="8625007" timestamp2="8625007">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3827" _type="InsertStringCommand" date="Tue Mar 29 21:21:35 EDT 2022" starttimestamp="1648594670066" timestamp="8625007" timestamp2="8625007">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="3829" _type="PasteCommand" date="Tue Mar 29 21:21:35 EDT 2022" starttimestamp="1648594670066" timestamp="8625254" />
  <Command __id="3831" _type="PauseCommand" date="Tue Mar 29 21:21:36 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8626655">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1401]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3830" _type="MoveCaretCommand" caretOffset="4181" date="Tue Mar 29 21:21:36 EDT 2022" docOffset="4181" starttimestamp="1648594670066" timestamp="8626655" />
  <Command __id="3832" _type="MoveCaretCommand" caretOffset="4181" date="Tue Mar 29 21:21:36 EDT 2022" docOffset="4181" starttimestamp="1648594670066" timestamp="8626655" />
  <Command __id="3834" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:37 EDT 2022" starttimestamp="1648594670066" timestamp="8626938" />
  <Command __id="3835" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:37 EDT 2022" starttimestamp="1648594670066" timestamp="8626938" />
  <Command __id="3837" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:37 EDT 2022" starttimestamp="1648594670066" timestamp="8627084" />
  <Command __id="3838" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:37 EDT 2022" starttimestamp="1648594670066" timestamp="8627084" />
  <Command __id="3840" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:37 EDT 2022" starttimestamp="1648594670066" timestamp="8627229" />
  <Command __id="3841" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:37 EDT 2022" starttimestamp="1648594670066" timestamp="8627229" />
  <Command __id="3843" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:37 EDT 2022" starttimestamp="1648594670066" timestamp="8627364" />
  <Command __id="3844" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:37 EDT 2022" starttimestamp="1648594670066" timestamp="8627364" />
  <Command __id="3846" _type="PauseCommand" date="Tue Mar 29 21:21:38 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8628437">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1073]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3845" _type="MoveCaretCommand" caretOffset="4216" date="Tue Mar 29 21:21:38 EDT 2022" docOffset="4216" starttimestamp="1648594670066" timestamp="8628437" />
  <Command __id="3847" _type="MoveCaretCommand" caretOffset="4216" date="Tue Mar 29 21:21:38 EDT 2022" docOffset="4216" starttimestamp="1648594670066" timestamp="8628437" />
  <Command __id="3849" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:38 EDT 2022" starttimestamp="1648594670066" timestamp="8628669" />
  <Command __id="3850" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:38 EDT 2022" starttimestamp="1648594670066" timestamp="8628669" />
  <Command __id="3852" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:38 EDT 2022" starttimestamp="1648594670066" timestamp="8628802" />
  <Command __id="3853" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:38 EDT 2022" starttimestamp="1648594670066" timestamp="8628802" />
  <Command __id="3855" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:39 EDT 2022" starttimestamp="1648594670066" timestamp="8628951" />
  <Command __id="3856" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:39 EDT 2022" starttimestamp="1648594670066" timestamp="8628951" />
  <Command __id="3858" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:39 EDT 2022" starttimestamp="1648594670066" timestamp="8629101" />
  <Command __id="3859" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:21:39 EDT 2022" starttimestamp="1648594670066" timestamp="8629101" />
  <Command __id="3860" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:21:39 EDT 2022" starttimestamp="1648594670066" timestamp="8629633" />
  <Command __id="3861" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:21:39 EDT 2022" starttimestamp="1648594670066" timestamp="8629732" />
  <Command __id="3862" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:21:39 EDT 2022" starttimestamp="1648594670066" timestamp="8629764" />
  <Command __id="3863" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:21:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8629833" type="Run" />
  <Command __id="3864" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:21:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8629833" type="Run" />
  <Command __id="3866" _type="PauseCommand" date="Tue Mar 29 21:21:44 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8634551">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4718]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <DocumentChange __id="3828" _type="Replace" date="Tue Mar 29 21:21:35 EDT 2022" docASTNodeCount="1052" docActiveCodeLength="7482" docExpressionCount="764" docLength="8033" endLine="108" insertionLength="83" int_docASTNodeCount="1036" int_docActiveCodeLength="7399" int_docExpressionCount="750" int_docLength="7950" length="2" offset="4146" startLine="108" starttimestamp="1648594670066" timestamp="8625246">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3833" _type="Delete" date="Tue Mar 29 21:21:37 EDT 2022" docASTNodeCount="1052" docActiveCodeLength="7478" docExpressionCount="764" docLength="8029" endLine="108" length="4" offset="4177" repeat="4" startLine="108" starttimestamp="1648594670066" timestamp="8626936" timestamp2="8627360">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="3848" _type="Delete" date="Tue Mar 29 21:21:38 EDT 2022" docASTNodeCount="1052" docActiveCodeLength="7474" docExpressionCount="764" docLength="8025" endLine="109" length="4" offset="4212" repeat="4" startLine="109" starttimestamp="1648594670066" timestamp="8628665" timestamp2="8629098">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <Command __id="3865" _type="SelectTextCommand" caretOffset="3633" date="Tue Mar 29 21:21:44 EDT 2022" end="3762" start="3633" starttimestamp="1648594670066" timestamp="8634551" />
  <Command __id="3867" _type="SelectTextCommand" caretOffset="3633" date="Tue Mar 29 21:21:44 EDT 2022" end="3762" start="3633" starttimestamp="1648594670066" timestamp="8634551" />
  <Command __id="3918" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8665327" type="Run" />
  <Command __id="3921" _type="PauseCommand" date="Tue Mar 29 21:22:16 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8666780">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1453]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3922" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8669465" type="Run" />
  <Command __id="3924" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:19 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8669793" type="Run" />
  <Command __id="3925" _type="ShellCommand" date="Tue Mar 29 21:22:19 EDT 2022" starttimestamp="1648594670066" timestamp="8669843" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3926" _type="ConsoleOutput" date="Tue Mar 29 21:22:20 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8670389" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.25026272725182364 (Opened)
Client registered GIPC
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:"), Diff(INSERT,"Server0<-->"), Diff(EQUAL,"Generic Client:0."), Diff(DELETE,"548417807315"), Diff(INSERT,"25026272"), Diff(EQUAL,"72"), Diff(INSERT,"5"), Diff(EQUAL,"18"), Diff(INSERT,"2364 (Opened)¶Client registered GIPC"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3927" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8670558" type="Run" />
  <Command __id="3928" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8670564" type="Run" />
  <Command __id="3929" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8670596" type="Run" />
  <Command __id="3930" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8670673" type="Run" />
  <Command __id="3931" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8670762" type="Run" />
  <Command __id="3932" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8670812" type="Run" />
  <Command __id="3933" _type="ConsoleOutput" date="Tue Mar 29 21:22:21 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8671096" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.25026272725182364 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3934" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8671103" type="Run" />
  <Command __id="3935" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8671138" type="Run" />
  <Command __id="3936" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8671188" type="Run" />
  <Command __id="3937" _type="ConsoleOutput" date="Tue Mar 29 21:22:21 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8671241" type="ConsoleOutput">
    <outputString><![CDATA[com.sun.proxy.$Proxy1@6dfd1341
[com.sun.proxy.$Proxy1@6dfd1341]
Client registered
Server0<-->Generic Client:0.5484178073157218 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@1bd10ef8
[com.sun.proxy.$Proxy1@6dfd1341, com.sun.proxy.$Proxy1@1bd10ef8]
Client registered
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"com.sun.proxy.$Proxy1@6dfd1341¶[com.sun.proxy.$Proxy1@6dfd1341]¶Client registered¶Server0<-->Generic Client:0.5484178073157218 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@1bd10ef8¶[com.sun.proxy.$Proxy1@6dfd1341, com.sun.proxy.$Proxy1@1bd10ef8]¶Client registered"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3938" _type="ConsoleOutput" date="Tue Mar 29 21:22:21 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8671667" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"com.sun.proxy.$Proxy1@6dfd1341¶[com.sun.proxy.$Proxy1@6dfd1341]¶Client registered¶Server0<-->Generic Client:0.5484178073157218 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@1bd10ef8¶[com.sun.proxy.$Proxy1@6dfd1341, com.sun.proxy.$Proxy1@1bd10ef8]¶Client registered"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3940" _type="PauseCommand" date="Tue Mar 29 21:22:28 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8678384">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6717]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3939" _type="ShellCommand" date="Tue Mar 29 21:22:28 EDT 2022" starttimestamp="1648594670066" timestamp="8678384" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3942" _type="PauseCommand" date="Tue Mar 29 21:22:32 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8682496">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4112]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="3948" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8700620" type="Run" />
  <Command __id="3950" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8700697" type="Run" />
  <Command __id="3951" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8701145" type="Run" />
  <Command __id="3952" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:22:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8701161" type="Run" />
  <DocumentChange __id="3868" _type="Delete" date="Tue Mar 29 21:21:44 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7342" docExpressionCount="744" docLength="7893" endLine="95" length="132" offset="3632" repeat="3" startLine="92" starttimestamp="1648594670066" timestamp="8634849" timestamp2="8636875">
    <text><![CDATA[		System.out.println("client list and size");
		System.out.println(clientListGIPC);
		System.out.println(clientListGIPC.size());
]]></text>
  </DocumentChange>
  <Command __id="3954" _type="PauseCommand" date="Tue Mar 29 21:24:14 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="8784441">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[83280]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3955" _type="MoveCaretCommand" caretOffset="6492" date="Tue Mar 29 21:24:14 EDT 2022" docOffset="6492" starttimestamp="1648594670066" timestamp="8784591" />
  <Command __id="3953" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:24:14 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7800" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="8784441">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		"), Diff(DELETE,"//"), Diff(EQUAL,"clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		"), Diff(INSERT,"//"), Diff(EQUAL,"clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		/***
		if(mechanism.equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}***/
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="3957" _type="PauseCommand" date="Tue Mar 29 21:24:17 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8787109">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2518]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3958" _type="MoveCaretCommand" caretOffset="3632" date="Tue Mar 29 21:24:17 EDT 2022" docOffset="3632" starttimestamp="1648594670066" timestamp="8787210" />
  <Command __id="3960" _type="PauseCommand" date="Tue Mar 29 21:24:27 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="8797491">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10281]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3959" _type="SelectTextCommand" caretOffset="3234" date="Tue Mar 29 21:24:27 EDT 2022" end="3250" start="3234" starttimestamp="1648594670066" timestamp="8797491" />
  <Command __id="3961" _type="SelectTextCommand" caretOffset="3234" date="Tue Mar 29 21:24:27 EDT 2022" end="3250" start="3234" starttimestamp="1648594670066" timestamp="8797491" />
  <Command __id="3962" _type="CopyCommand" date="Tue Mar 29 21:24:28 EDT 2022" starttimestamp="1648594670066" timestamp="8798187" />
  <Command __id="3956" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:24:17 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7342" docExpressionCount="744" docLength="7893" projectName="A5" starttimestamp="1648594670066" timestamp="8787109">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		"), Diff(DELETE,"System.out.println("client list and size");¶		System.out.println(clientListGIPC);¶		System.out.println(clientListGIPC.size());¶		"), Diff(EQUAL,"¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		"), Diff(DELETE,"System.out.println("), Diff(INSERT,"¶		if(clientListGIPC.isEmpty()) {¶			clientList = "), Diff(EQUAL,"clientList"), Diff(DELETE,"GIPC);"), Diff(INSERT,"RMI;¶		}"), Diff(EQUAL,"¶		System.out.println(clientList"), Diff(DELETE,"GIPC.size());¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		}"), Diff(INSERT,");¶		System.out.println(clientList.size());"), Diff(EQUAL,"¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					this.quit(0);
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="3964" _type="PauseCommand" date="Tue Mar 29 21:24:30 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8800136">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1949]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3965" _type="MoveCaretCommand" caretOffset="6492" date="Tue Mar 29 21:24:30 EDT 2022" docOffset="6492" starttimestamp="1648594670066" timestamp="8800268" />
  <Command __id="3967" _type="PauseCommand" date="Tue Mar 29 21:24:32 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8802844">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2576]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4037" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:25:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8833938" type="Run" />
  <Command __id="4039" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:25:04 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8833939" type="Run" />
  <Command __id="4040" _type="ShellCommand" date="Tue Mar 29 21:25:04 EDT 2022" starttimestamp="1648594670066" timestamp="8834213" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4042" _type="PauseCommand" date="Tue Mar 29 21:25:09 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8839773">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5560]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4043" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:25:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8847226" type="Run" />
  <Command __id="4045" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:25:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8847566" type="Run" />
  <Command __id="4047" _type="PauseCommand" date="Tue Mar 29 21:25:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8848684">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1118]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4056" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:25:33 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8863763" type="Run" />
  <Command __id="3963" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:24:30 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7800" docExpressionCount="730" docLength="9082" projectName="A5" starttimestamp="1648594670066" timestamp="8800136">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3968" _type="Insert" date="Tue Mar 29 21:24:33 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7803" docExpressionCount="730" docLength="9085" length="3" offset="6410" repeat="3" starttimestamp="1648594670066" timestamp="8803302" timestamp2="8803493">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <Command __id="4059" _type="PauseCommand" date="Tue Mar 29 21:25:34 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8864812">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1049]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4058" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:25:34 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7342" docExpressionCount="744" docLength="7893" projectName="A5" starttimestamp="1648594670066" timestamp="8864812">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4060" _type="SelectTextCommand" caretOffset="3234" date="Tue Mar 29 21:25:34 EDT 2022" end="3250" start="3234" starttimestamp="1648594670066" timestamp="8864908" />
  <Command __id="4062" _type="MoveCaretCommand" caretOffset="6413" date="Tue Mar 29 21:25:35 EDT 2022" docOffset="6413" starttimestamp="1648594670066" timestamp="8865927" />
  <Command __id="4064" _type="PauseCommand" date="Tue Mar 29 21:25:39 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8869482">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3555]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4063" _type="MoveCaretCommand" caretOffset="7671" date="Tue Mar 29 21:25:39 EDT 2022" docOffset="7671" starttimestamp="1648594670066" timestamp="8869482" />
  <Command __id="4066" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:25:39 EDT 2022" starttimestamp="1648594670066" timestamp="8869814" />
  <Command __id="4068" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:25:40 EDT 2022" starttimestamp="1648594670066" timestamp="8869961" />
  <Command __id="4070" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:25:40 EDT 2022" starttimestamp="1648594670066" timestamp="8870118" />
  <Command __id="4072" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:25:40 EDT 2022" starttimestamp="1648594670066" timestamp="8870264" />
  <Command __id="4074" _type="PauseCommand" date="Tue Mar 29 21:25:43 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8873365">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3101]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4088" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:25:47 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8877512" type="Run" />
  <Command __id="4091" _type="PauseCommand" date="Tue Mar 29 21:25:53 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8883749">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6237]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4090" _type="ConsoleInput" date="Tue Mar 29 21:25:53 EDT 2022" starttimestamp="1648594670066" timestamp="8883749" type="Exception">
    <outputString><![CDATA[i RMI
]]></outputString>
  </Command>
  <Command __id="4092" _type="ConsoleOutput" date="Tue Mar 29 21:25:53 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8883832" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcased command: move 50 -50¶PROPERTY CHANGE¶executed"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]¶Enter (prefixes of) print, quit or a method and its parameters separated by"), Diff(EQUAL," comma"), Diff(DELETE,"nd"), Diff(INSERT,"s:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4094" _type="PauseCommand" date="Tue Mar 29 21:26:00 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8890601">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6769]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4132" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Tue Mar 29 21:26:38 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="8928116" type="Run" />
  <Command __id="4134" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Tue Mar 29 21:26:38 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="8928116" type="Run" />
  <Command __id="4135" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:26:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8928221" type="Run" />
  <Command __id="4136" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:26:38 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8928232" type="Run" />
  <Command __id="4137" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:26:38 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8928236" type="Run" />
  <Command __id="4139" _type="PauseCommand" date="Tue Mar 29 21:26:40 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8930736">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2500]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4140" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:26:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="8934359" type="Run" />
  <Command __id="4142" _type="ConsoleOutput" date="Tue Mar 29 21:26:44 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8934456" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Tue Mar 29 21:26:44 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:54636 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"Building symbol table and running first pass checks:Tue Mar 29 21:26:44 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4144" _type="PauseCommand" date="Tue Mar 29 21:26:47 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8936993">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2537]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4143" _type="ConsoleOutput" date="Tue Mar 29 21:26:47 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8936993" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:79
Running second pass checks Tue Mar 29 21:26:47 EDT 2022
Start O(n2) inter- and intra class method calls:Tue Mar 29 21:26:47 EDT 2022
End O(n2) inter- and intra class method calls:Tue Mar 29 21:26:47 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:79¶Running second pass checks Tue Mar 29 21:26:47 EDT 2022¶Start O(n2) inter- and intra class method calls:Tue Mar 29 21:26:47 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Tue Mar 29 21:26:4"), Diff(DELETE,"4"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="4146" _type="PauseCommand" date="Tue Mar 29 21:26:48 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8938373">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1380]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4145" _type="ConsoleOutput" date="Tue Mar 29 21:26:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8938373" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Tue Mar 29 21:26:48 EDT 2022
Generating checks:Tue Mar 29 21:26:48 EDT 2022
Finished Generating checks:Tue Mar 29 21:26:48 EDT 2022
Generating externals:Tue Mar 29 21:26:48 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:79¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Tue Mar 29 21:26:4"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Tue Mar 29 21:26:48 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Tue Mar 29 21:26:4"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Tue Mar 29 21:26:4"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="4147" _type="ConsoleOutput" date="Tue Mar 29 21:26:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8938682" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Tue Mar 29 21:26:48 EDT 2022
Test execution time (ms):4253
Test execution time (ms):24
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Tue Mar 29 21:26:48 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Tue Mar 29 21:26:48 EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Tue Mar 29 21:26:48 EDT 2022¶Generating externals:Tue Mar 29 21:26:48 EDT 2022"), Diff(INSERT,"Test execution time (ms):4253¶Test execution time (ms):24"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4148" _type="ConsoleOutput" date="Tue Mar 29 21:26:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8938745" type="ConsoleOutput">
    <outputString><![CDATA[A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):15
Test execution time (ms):10
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):9
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Tue Mar 29 21:26:48 EDT 2022¶Test execution time (ms):4253"), Diff(INSERT,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):15¶Test execution time (ms):10¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"24"), Diff(INSERT,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4149" _type="ConsoleOutput" date="Tue Mar 29 21:26:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8938817" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (28)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (261)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (246)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):15¶Test execution time (ms):10¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):9"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (28)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (261)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (246)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4151" _type="PauseCommand" date="Tue Mar 29 21:26:51 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8941523">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2706]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4150" _type="ConsoleOutput" date="Tue Mar 29 21:26:51 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8941523" type="ConsoleOutput">
    <outputString><![CDATA[A5NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):5
Test execution time (ms):9
Test execution time (ms):6
Test execution time (ms):6
A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.9971014492753624

Test execution time (ms):8
Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶Th"), Diff(INSERT,"A5NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, se"), Diff(EQUAL,"e "), Diff(DELETE,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"ucture of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (28)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (261)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (246)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(INSERT,"aced console output%0.0¶¶Test execution time (ms):5¶Test execution time (ms):9¶Test execution time (ms):6¶Test execution time (ms):6¶A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.9971014492753624¶¶Test execution time (ms):8¶Test execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4153" _type="PauseCommand" date="Tue Mar 29 21:26:54 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8944602">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3079]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4152" _type="ConsoleOutput" date="Tue Mar 29 21:26:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="8944602" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5MnemonicNames@22389ad6 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):5¶Test execution time (ms):9¶Test execution time (ms):6¶Test execution time (ms):6¶A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.9971014492753624¶¶Test execution time (ms):8¶Test execution time (ms):5"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5MnemonicNames@22389ad6 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4155" _type="PauseCommand" date="Tue Mar 29 21:27:03 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="8953487">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8885]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4154" _type="ShellCommand" date="Tue Mar 29 21:27:03 EDT 2022" starttimestamp="1648594670066" timestamp="8953487" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4157" _type="PauseCommand" date="Tue Mar 29 21:27:07 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="8957565">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4078]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4156" _type="ShellCommand" date="Tue Mar 29 21:27:07 EDT 2022" starttimestamp="1648594670066" timestamp="8957565" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4159" _type="PauseCommand" date="Tue Mar 29 21:27:09 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="8959531">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1966]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4186" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:27:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9001949" type="Run" />
  <Command __id="4188" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:27:52 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9001950" type="Run" />
  <Command __id="4190" _type="PauseCommand" date="Tue Mar 29 21:28:49 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="9059027">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[57077]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4189" _type="ConsoleOutput" date="Tue Mar 29 21:28:49 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9059027" type="ConsoleOutput">
    <outputString><![CDATA[
GIPCRMIOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via GIPC, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*%0.5
Test execution time (ms):58564
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶GIPCRMIOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via GIPC, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*%0.5¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"13577"), Diff(INSERT,"58564"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4192" _type="PauseCommand" date="Tue Mar 29 21:29:03 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="9073220">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[14193]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4191" _type="ConsoleOutput" date="Tue Mar 29 21:29:03 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9073220" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIOneClientReadWriteNonAtomic@492409a6 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶GIPCRMIOneClientReadWriteNonAtomic did not pass completely:In Client writing to server via GIPC, no line found matching regex: .*?\{main\}.*?SocketChannelWriteRequested.*%0.5¶Test execution time (ms):58564"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIOneClientReadWriteNonAtomic@492409a6 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4194" _type="PauseCommand" date="Tue Mar 29 21:29:13 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="9083578">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[10358]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4243" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:32:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9295145" type="Run" />
  <Command __id="4245" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:32:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9295148" type="Run" />
  <Command __id="4247" _type="PauseCommand" date="Tue Mar 29 21:32:47 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="9297340">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2192]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4271" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:35:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9430338" type="Run" />
  <Command __id="4273" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:35:00 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9430340" type="Run" />
  <Command __id="4275" _type="PauseCommand" date="Tue Mar 29 21:35:47 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="9477466">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[47126]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4274" _type="ShellCommand" date="Tue Mar 29 21:35:47 EDT 2022" starttimestamp="1648594670066" timestamp="9477466" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4277" _type="PauseCommand" date="Tue Mar 29 21:35:49 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="9479884">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2418]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="4276" _type="CopyCommand" date="Tue Mar 29 21:35:49 EDT 2022" starttimestamp="1648594670066" timestamp="9479884" />
  <Command __id="4279" _type="PauseCommand" date="Tue Mar 29 21:35:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="9480910">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1026]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4278" _type="ShellCommand" date="Tue Mar 29 21:35:50 EDT 2022" starttimestamp="1648594670066" timestamp="9480910" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4281" _type="PauseCommand" date="Tue Mar 29 21:36:17 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="9507039">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26129]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4280" _type="ShellCommand" date="Tue Mar 29 21:36:17 EDT 2022" starttimestamp="1648594670066" timestamp="9507039" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4283" _type="PauseCommand" date="Tue Mar 29 21:36:45 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="9535502">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[28463]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4282" _type="ConsoleOutput" date="Tue Mar 29 21:36:45 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9535502" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112594
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMIServerMetaState"), Diff(DELETE,"No"), Diff(EQUAL,"Broadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):112"), Diff(DELETE,"616"), Diff(INSERT,"594"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4285" _type="PauseCommand" date="Tue Mar 29 21:36:56 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="9546537">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11035]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4284" _type="ShellCommand" date="Tue Mar 29 21:36:56 EDT 2022" starttimestamp="1648594670066" timestamp="9546537" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4287" _type="PauseCommand" date="Tue Mar 29 21:37:25 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="9575024">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[28487]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4286" _type="ConsoleOutput" date="Tue Mar 29 21:37:25 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9575024" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@70f45414 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):112594"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@70f45414 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4289" _type="PauseCommand" date="Tue Mar 29 21:37:41 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="9591838">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[16814]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4288" _type="ConsoleOutput" date="Tue Mar 29 21:37:41 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9591838" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateBroadcast@3c4f5a1d . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMI"), Diff(DELETE,"TwoClientReadWriteNonAtomic@70f45414"), Diff(INSERT,"ServerMetaStateBroadcast@3c4f5a1d"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="4291" _type="PauseCommand" date="Tue Mar 29 21:37:46 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="9596477">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4639]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4290" _type="ConsoleOutput" date="Tue Mar 29 21:37:46 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9596477" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@1e5f11aa . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaState"), Diff(INSERT,"No"), Diff(EQUAL,"Broadcast@"), Diff(DELETE,"3c4f5a1d"), Diff(INSERT,"1e5f11aa"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="4293" _type="PauseCommand" date="Tue Mar 29 21:38:15 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="9625769">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[29292]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4292" _type="ConsoleOutput" date="Tue Mar 29 21:38:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9625769" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@70f45414 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMI"), Diff(DELETE,"ServerMetaStateNoBroadcast@1e5f11aa"), Diff(INSERT,"TwoClientReadWriteNonAtomic@70f45414"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="4295" _type="PauseCommand" date="Tue Mar 29 21:38:53 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="9663474">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[37705]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4294" _type="ConsoleOutput" date="Tue Mar 29 21:38:53 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9663474" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@70f45414 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@70f45414 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="4297" _type="PauseCommand" date="Tue Mar 29 21:40:30 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="9760932">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[97458]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4296" _type="ShellCommand" date="Tue Mar 29 21:40:30 EDT 2022" starttimestamp="1648594670066" timestamp="9760932" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4298" _type="MoveCaretCommand" caretOffset="8170" date="Tue Mar 29 21:40:31 EDT 2022" docOffset="8170" starttimestamp="1648594670066" timestamp="9761041" />
  <Command __id="4061" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:25:35 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7803" docExpressionCount="730" docLength="9085" projectName="A5" starttimestamp="1648594670066" timestamp="8865827">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClient"), Diff(INSERT,"RMI"), Diff(EQUAL,"(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		/***¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}***/¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		/***
		if(mechanism.equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}***/
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="4065" _type="Delete" date="Tue Mar 29 21:25:39 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8310" docExpressionCount="768" docLength="9081" endLine="213" length="4" offset="7667" repeat="4" startLine="213" starttimestamp="1648594670066" timestamp="8869809" timestamp2="8870261">
    <text><![CDATA[/***]]></text>
  </DocumentChange>
  <DocumentChange __id="4075" _type="Delete" date="Tue Mar 29 21:25:43 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8306" docExpressionCount="768" docLength="9077" endLine="224" length="4" offset="8170" repeat="4" startLine="224" starttimestamp="1648594670066" timestamp="8873719" timestamp2="8874186">
    <text><![CDATA[***/]]></text>
  </DocumentChange>
  <Command __id="4300" _type="PauseCommand" date="Tue Mar 29 21:40:33 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="9763060">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2019]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4322" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:41:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9804817" type="Run" />
  <Command __id="4324" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:41:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9804818" type="Run" />
  <Command __id="4325" _type="ShellCommand" date="Tue Mar 29 21:41:15 EDT 2022" starttimestamp="1648594670066" timestamp="9805097" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4327" _type="PauseCommand" date="Tue Mar 29 21:44:02 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="9972410">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[167313]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4336" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:44:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9980490" type="Run" />
  <Command __id="4338" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:44:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9980684" type="Run" />
  <Command __id="4339" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:44:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9980759" type="Run" />
  <Command __id="4340" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:44:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9980795" type="Run" />
  <Command __id="4341" _type="ConsoleOutput" date="Tue Mar 29 21:44:10 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9980850" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.9303600858187302 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@449a15cb
[com.sun.proxy.$Proxy1@449a15cb]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9303600858187302"), Diff(INSERT,"Server0<-->Generic Client:0.9303600858187302 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@449a15cb¶[com.sun.proxy.$Proxy1@449a15cb]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4342" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:44:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="9980855" type="Run" />
  <Command __id="4343" _type="ConsoleOutput" date="Tue Mar 29 21:44:11 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9981129" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58595](remote),objID:[-cbf3033:17fd87e9cd7:-7ffe, 8885389403713190873]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58595](remote),objID:[-cbf3033:17fd87e9cd7:-7ffe, 8885389403713190873]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.9303600858187302 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@449a15cb¶[com.sun.proxy.$Proxy1@449a15cb"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58595](remote),objID:[-cbf3033:17fd87e9cd7:-7ffe, 8885389403713190873]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58595](remote),objID:[-cbf3033:17fd87e9cd7:-7ffe, 8885389403713190873]]]]]"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="4344" _type="ConsoleOutput" date="Tue Mar 29 21:44:11 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="9981134" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58595](remote),objID:[-cbf3033:17fd87e9cd7:-7ffe, 8885389403713190873]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58595](remote),objID:[-cbf3033:17fd87e9cd7:-7ffe, 8885389403713190873]]]]]]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4346" _type="PauseCommand" date="Tue Mar 29 21:44:12 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="9982427">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1293]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4354" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:46:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10104788" type="Run" />
  <Command __id="4357" _type="PauseCommand" date="Tue Mar 29 21:46:15 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10105918">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1130]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4356" _type="ShellCommand" date="Tue Mar 29 21:46:15 EDT 2022" starttimestamp="1648594670066" timestamp="10105918" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4359" _type="PauseCommand" date="Tue Mar 29 21:46:22 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="10112824">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6906]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4358" _type="ShellCommand" date="Tue Mar 29 21:46:22 EDT 2022" starttimestamp="1648594670066" timestamp="10112824" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4361" _type="PauseCommand" date="Tue Mar 29 21:48:11 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="10220938">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[108114]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4360" _type="ShellCommand" date="Tue Mar 29 21:48:11 EDT 2022" starttimestamp="1648594670066" timestamp="10220938" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4363" _type="PauseCommand" date="Tue Mar 29 21:48:13 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="10223729">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2791]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4362" _type="ShellCommand" date="Tue Mar 29 21:48:13 EDT 2022" starttimestamp="1648594670066" timestamp="10223729" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4365" _type="PauseCommand" date="Tue Mar 29 21:48:19 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="10229048">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5319]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4364" _type="ConsoleInput" date="Tue Mar 29 21:48:19 EDT 2022" starttimestamp="1648594670066" timestamp="10229048" type="Exception">
    <outputString><![CDATA[i gipc
]]></outputString>
  </Command>
  <Command __id="4366" _type="ConsoleOutput" date="Tue Mar 29 21:48:19 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10229121" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="4368" _type="PauseCommand" date="Tue Mar 29 21:48:30 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="10240486">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11365]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4378" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:49:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10295817" type="Run" />
  <Command __id="4380" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:49:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10295864" type="Run" />
  <Command __id="4299" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:40:33 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7342" docExpressionCount="744" docLength="7893" projectName="A5" starttimestamp="1648594670066" timestamp="9763060">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4382" _type="PauseCommand" date="Tue Mar 29 21:50:32 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="10362083">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[66219]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4386" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:51:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10404807" type="Run" />
  <Command __id="4389" _type="PauseCommand" date="Tue Mar 29 21:51:38 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="10428826">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[24019]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4388" _type="MoveCaretCommand" caretOffset="7920" date="Tue Mar 29 21:51:38 EDT 2022" docOffset="7920" starttimestamp="1648594670066" timestamp="10428826" />
  <Command __id="4391" _type="InsertStringCommand" date="Tue Mar 29 21:51:39 EDT 2022" starttimestamp="1648594670066" timestamp="10429080" timestamp2="10429080">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4393" _type="InsertStringCommand" date="Tue Mar 29 21:51:39 EDT 2022" starttimestamp="1648594670066" timestamp="10429447" timestamp2="10429447">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="4395" _type="InsertStringCommand" date="Tue Mar 29 21:51:39 EDT 2022" starttimestamp="1648594670066" timestamp="10429686" timestamp2="10429686">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="4397" _type="InsertStringCommand" date="Tue Mar 29 21:51:39 EDT 2022" starttimestamp="1648594670066" timestamp="10429806" timestamp2="10429806">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4399" _type="InsertStringCommand" date="Tue Mar 29 21:51:40 EDT 2022" starttimestamp="1648594670066" timestamp="10429967" timestamp2="10429967">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="4401" _type="InsertStringCommand" date="Tue Mar 29 21:51:40 EDT 2022" starttimestamp="1648594670066" timestamp="10430121" timestamp2="10430121">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="4403" _type="InsertStringCommand" date="Tue Mar 29 21:51:40 EDT 2022" starttimestamp="1648594670066" timestamp="10430273" timestamp2="10430273">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="4405" _type="InsertStringCommand" date="Tue Mar 29 21:51:40 EDT 2022" starttimestamp="1648594670066" timestamp="10430587" timestamp2="10430587">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4406" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 21:51:40 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="10430591" />
  <Command __id="4410" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 21:51:41 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="10431369" />
  <Command __id="4412" _type="InsertStringCommand" date="Tue Mar 29 21:51:41 EDT 2022" starttimestamp="1648594670066" timestamp="10431381" timestamp2="10431381">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4413" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 21:51:41 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="10431410" />
  <Command __id="4424" _type="PauseCommand" date="Tue Mar 29 21:51:44 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="10434013">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[2232]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="4423" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 21:51:44 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="10434013" />
  <Command __id="4426" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:51:44 EDT 2022" starttimestamp="1648594670066" timestamp="10434690" />
  <Command __id="4428" _type="InsertStringCommand" date="Tue Mar 29 21:51:45 EDT 2022" starttimestamp="1648594670066" timestamp="10435356" timestamp2="10435356">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="4430" _type="InsertStringCommand" date="Tue Mar 29 21:51:45 EDT 2022" starttimestamp="1648594670066" timestamp="10435801" timestamp2="10435801">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="4432" _type="InsertStringCommand" date="Tue Mar 29 21:51:45 EDT 2022" starttimestamp="1648594670066" timestamp="10435929" timestamp2="10435929">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="4434" _type="InsertStringCommand" date="Tue Mar 29 21:51:46 EDT 2022" starttimestamp="1648594670066" timestamp="10436018" timestamp2="10436018">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="4436" _type="InsertStringCommand" date="Tue Mar 29 21:51:46 EDT 2022" starttimestamp="1648594670066" timestamp="10436102" timestamp2="10436102">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="4438" _type="InsertStringCommand" date="Tue Mar 29 21:51:46 EDT 2022" starttimestamp="1648594670066" timestamp="10436229" timestamp2="10436229">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4440" _type="InsertStringCommand" date="Tue Mar 29 21:51:46 EDT 2022" starttimestamp="1648594670066" timestamp="10436362" timestamp2="10436362">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4442" _type="InsertStringCommand" date="Tue Mar 29 21:51:46 EDT 2022" starttimestamp="1648594670066" timestamp="10436697" timestamp2="10436697">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="4381" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:50:32 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8306" docExpressionCount="768" docLength="9077" projectName="A5" starttimestamp="1648594670066" timestamp="10362083">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		"), Diff(DELETE,"/***"), Diff(EQUAL,"¶		if(mechanism.equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}¶		if(mechanism.equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		}"), Diff(DELETE,"***/"), Diff(EQUAL,"¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		if(mechanism.equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="4390" _type="Insert" date="Tue Mar 29 21:51:39 EDT 2022" docASTNodeCount="1082" docActiveCodeLength="8321" docExpressionCount="771" docLength="9092" length="15" offset="7920" repeat="11" starttimestamp="1648594670066" timestamp="10429070" timestamp2="10431208">
    <text><![CDATA[
			System.out]]></text>
  </DocumentChange>
  <DocumentChange __id="4411" _type="Replace" date="Tue Mar 29 21:51:41 EDT 2022" docASTNodeCount="1078" docActiveCodeLength="8322" docExpressionCount="768" docLength="9093" endLine="219" insertionLength="4" int_docASTNodeCount="1078" int_docActiveCodeLength="8318" int_docExpressionCount="768" int_docLength="9089" length="3" offset="7932" startLine="219" starttimestamp="1648594670066" timestamp="10431372">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4414" _type="Insert" date="Tue Mar 29 21:51:41 EDT 2022" docASTNodeCount="1048" docActiveCodeLength="8332" docExpressionCount="746" docLength="9103" length="10" offset="7936" repeat="9" starttimestamp="1648594670066" timestamp="10431781" timestamp2="10433971">
    <text><![CDATA[println(:)]]></text>
  </DocumentChange>
  <DocumentChange __id="4425" _type="Delete" date="Tue Mar 29 21:51:44 EDT 2022" docASTNodeCount="1084" docActiveCodeLength="8331" docExpressionCount="773" docLength="9102" endLine="219" length="1" offset="7944" startLine="219" starttimestamp="1648594670066" timestamp="10434681">
    <text><![CDATA[:]]></text>
  </DocumentChange>
  <Command __id="4484" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:51:53 EDT 2022" starttimestamp="1648594670066" timestamp="10443871" />
  <Command __id="4485" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:51:53 EDT 2022" starttimestamp="1648594670066" timestamp="10443876" />
  <Command __id="4487" _type="PauseCommand" date="Tue Mar 29 21:51:55 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10445403">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1527]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="4486" _type="SelectTextCommand" caretOffset="7925" date="Tue Mar 29 21:51:55 EDT 2022" end="7971" start="7925" starttimestamp="1648594670066" timestamp="10445403" />
  <Command __id="4488" _type="CopyCommand" date="Tue Mar 29 21:51:56 EDT 2022" starttimestamp="1648594670066" timestamp="10445948" />
  <Command __id="4490" _type="PauseCommand" date="Tue Mar 29 21:51:57 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10447674">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1726]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4489" _type="MoveCaretCommand" caretOffset="8216" date="Tue Mar 29 21:51:57 EDT 2022" docOffset="8216" starttimestamp="1648594670066" timestamp="10447674" />
  <Command __id="4492" _type="InsertStringCommand" date="Tue Mar 29 21:51:57 EDT 2022" starttimestamp="1648594670066" timestamp="10447892" timestamp2="10447892">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4494" _type="PasteCommand" date="Tue Mar 29 21:51:58 EDT 2022" starttimestamp="1648594670066" timestamp="10448153" />
  <Command __id="4496" _type="PauseCommand" date="Tue Mar 29 21:51:59 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10449496">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1343]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4543" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 21:52:16 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="10466279" type="Run" />
  <Command __id="4545" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:52:16 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10466406" type="Run" />
  <Command __id="4546" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:52:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10466409" type="Run" />
  <Command __id="4547" _type="ConsoleOutput" date="Tue Mar 29 21:52:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10466687" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.9860079188635636
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9860079188635636"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4549" _type="PauseCommand" date="Tue Mar 29 21:52:17 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10467711">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1024]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4582" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:52:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10494368" type="Run" />
  <Command __id="4585" _type="PauseCommand" date="Tue Mar 29 21:52:52 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="10502397">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8029]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4590" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:52:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10509279" type="Run" />
  <Command __id="4592" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:52:59 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10509310" type="Run" />
  <Command __id="4594" _type="PauseCommand" date="Tue Mar 29 21:53:05 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="10515373">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6063]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4601" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:53:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10530461" type="Run" />
  <Command __id="4603" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:53:20 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10530462" type="Run" />
  <Command __id="4605" _type="PauseCommand" date="Tue Mar 29 21:53:51 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="10561756">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[31294]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4604" _type="MoveCaretCommand" caretOffset="7663" date="Tue Mar 29 21:53:51 EDT 2022" docOffset="7663" starttimestamp="1648594670066" timestamp="10561756" />
  <Command __id="4607" _type="PauseCommand" date="Tue Mar 29 21:53:55 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="10565262">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3506]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4606" _type="ShellCommand" date="Tue Mar 29 21:53:55 EDT 2022" starttimestamp="1648594670066" timestamp="10565262" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4609" _type="PauseCommand" date="Tue Mar 29 21:54:30 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="10600876">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35614]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4608" _type="ShellCommand" date="Tue Mar 29 21:54:30 EDT 2022" starttimestamp="1648594670066" timestamp="10600876" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4610" _type="MoveCaretCommand" caretOffset="7657" date="Tue Mar 29 21:54:31 EDT 2022" docOffset="7657" starttimestamp="1648594670066" timestamp="10600957" />
  <Command __id="4612" _type="InsertStringCommand" date="Tue Mar 29 21:54:31 EDT 2022" starttimestamp="1648594670066" timestamp="10601622" timestamp2="10601622">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4613" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 21:54:31 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="10601632" />
  <Command __id="4617" _type="PauseCommand" date="Tue Mar 29 21:54:34 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="10604618">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[2986]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="4616" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 21:54:34 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="10604618" />
  <Command __id="4618" _type="MoveCaretCommand" caretOffset="7686" date="Tue Mar 29 21:54:34 EDT 2022" docOffset="7686" starttimestamp="1648594670066" timestamp="10604713" />
  <Command __id="4620" _type="InsertStringCommand" date="Tue Mar 29 21:54:35 EDT 2022" starttimestamp="1648594670066" timestamp="10605330" timestamp2="10605330">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4621" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 21:54:35 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="10605334" />
  <Command __id="4624" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 21:54:36 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="10606296" />
  <Command __id="4626" _type="InsertStringCommand" date="Tue Mar 29 21:54:36 EDT 2022" starttimestamp="1648594670066" timestamp="10606313" timestamp2="10606313">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4627" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:54:37 EDT 2022" starttimestamp="1648594670066" timestamp="10606961" />
  <Command __id="4628" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:54:37 EDT 2022" starttimestamp="1648594670066" timestamp="10607058" />
  <Command __id="4629" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:54:37 EDT 2022" starttimestamp="1648594670066" timestamp="10607092" />
  <Command __id="4630" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:54:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10607204" type="Run" />
  <Command __id="4631" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:54:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10607204" type="Run" />
  <Command __id="4633" _type="PauseCommand" date="Tue Mar 29 21:54:39 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="10609678">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2474]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4632" _type="MoveCaretCommand" caretOffset="7660" date="Tue Mar 29 21:54:39 EDT 2022" docOffset="7660" starttimestamp="1648594670066" timestamp="10609678" />
  <Command __id="4635" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:54:40 EDT 2022" starttimestamp="1648594670066" timestamp="10610090" />
  <Command __id="4637" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:54:40 EDT 2022" starttimestamp="1648594670066" timestamp="10610214" />
  <Command __id="4639" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 21:54:40 EDT 2022" starttimestamp="1648594670066" timestamp="10610610" />
  <Command __id="4640" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 21:54:41 EDT 2022" starttimestamp="1648594670066" timestamp="10611205" />
  <Command __id="4641" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:54:41 EDT 2022" starttimestamp="1648594670066" timestamp="10611306" />
  <Command __id="4642" _type="EclipseCommand" commandID="" date="Tue Mar 29 21:54:41 EDT 2022" starttimestamp="1648594670066" timestamp="10611334" />
  <Command __id="4643" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:54:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10611434" type="Run" />
  <Command __id="4644" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:54:41 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10611434" type="Run" />
  <Command __id="4646" _type="PauseCommand" date="Tue Mar 29 21:54:49 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="10619315">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7881]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4674" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 21:55:08 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="10638131" type="Run" />
  <Command __id="4676" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 21:55:08 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="10638131" type="Run" />
  <Command __id="4677" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:55:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10638346" type="Run" />
  <Command __id="4678" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:55:08 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10638358" type="Run" />
  <Command __id="4679" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:55:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10638361" type="Run" />
  <Command __id="4680" _type="ConsoleOutput" date="Tue Mar 29 21:55:08 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10638655" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.9337051030559278
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A"), Diff(EQUAL,"Re"), Diff(DELETE,"adCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:10000 remote=/127.0.0.1:65344]:An existing connection was forcibly closed by the remote host¶Server0<-->Generic Client:0.4979986990815889 (Closed)¶Explanation: An existing connection was forcibly closed by the remote host"), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9337051030559278"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4682" _type="PauseCommand" date="Tue Mar 29 21:55:09 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10639675">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1020]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4687" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:55:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10644614" type="Run" />
  <Command __id="4689" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:55:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10644880" type="Run" />
  <Command __id="4690" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:55:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10644915" type="Run" />
  <Command __id="4691" _type="ConsoleOutput" date="Tue Mar 29 21:55:14 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10644926" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.9337051030559278 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@77541299
[com.sun.proxy.$Proxy1@4d1efd03, com.sun.proxy.$Proxy1@5a39b8e5, com.sun.proxy.$Proxy1@77541299]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9337051030559278"), Diff(INSERT,"Server0<-->Generic Client:0.9337051030559278 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@77541299¶[com.sun.proxy.$Proxy1@4d1efd03, com.sun.proxy.$Proxy1@5a39b8e5, com.sun.proxy.$Proxy1@77541299]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4692" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:55:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10644965" type="Run" />
  <Command __id="4693" _type="ConsoleOutput" date="Tue Mar 29 21:55:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10645206" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.9337051030559278 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@77541299¶[com.sun.proxy.$Proxy1@4d1efd03, com.sun.proxy.$Proxy1@5a39b8e5, com.sun.proxy.$Proxy1@77541299]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4694" _type="ConsoleOutput" date="Tue Mar 29 21:55:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10645287" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65386](remote),objID:[-914274d:17fd888bf17:-7ffe, 2707807452112731163]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65340](remote),objID:[186f20a0:17fd8862c4c:-7ffe, 782379304929639266]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65347](remote),objID:[1ec68f10:17fd886380c:-7ffe, -2751120716974353514]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65386](remote),objID:[-914274d:17fd888bf17:-7ffe, 2707807452112731163]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener o"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRe"), Diff(EQUAL,"f "), Diff(DELETE,"c"), Diff(INSERT,"["), Diff(EQUAL,"li"), Diff(DELETE,"ent¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"veRef: [endpoint:[192.168.1.118:65386](remote),objID:[-914274d:17fd888bf17:-7ffe, 2707807452112731163]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65340](remote),objID:[186f20a0:17fd8862c4c:-7ffe, 782379304929639266]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65347](remote),objID:[1ec68f10:17fd886380c:-7ffe, -2751120716974353514]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65386](remote),objID:[-914274d:17fd888bf17:-7ffe, 2707807452112731163]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4696" _type="PauseCommand" date="Tue Mar 29 21:55:16 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10646750">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1463]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4695" _type="ShellCommand" date="Tue Mar 29 21:55:16 EDT 2022" starttimestamp="1648594670066" timestamp="10646750" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4698" _type="PauseCommand" date="Tue Mar 29 21:55:25 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="10655127">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8377]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4700" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:55:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10659976" type="Run" />
  <Command __id="4703" _type="PauseCommand" date="Tue Mar 29 21:55:35 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="10665500">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5524]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4715" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 21:57:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10780143" type="Run" />
  <Command __id="4718" _type="PauseCommand" date="Tue Mar 29 21:57:31 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10781812">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1669]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="4717" _type="CopyCommand" date="Tue Mar 29 21:57:31 EDT 2022" starttimestamp="1648594670066" timestamp="10781812" />
  <Command __id="4720" _type="PauseCommand" date="Tue Mar 29 21:57:50 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="10800283">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[18471]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="4719" _type="BalloonCommand" date="Tue Mar 29 21:57:50 EDT 2022" message="*******************************************
Worked 32 minutes(fixed)/41 minutes(context based) from
Tue Mar 29 20:57:50 EDT 2022 to Tue Mar 29 21:57:31 EDT 2022
Edited 1 Projects: 
	A5
Edited 3 Files: 
	C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java
	C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java
	C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java
Number of insert: 442
Number of delete: 476
" starttimestamp="1648594670066" timestamp="10800283">
    <fineGrainedWorkTime><![CDATA[41]]></fineGrainedWorkTime>
    <insert><![CDATA[442]]></insert>
    <startTime><![CDATA[1648601870338]]></startTime>
    <endTime><![CDATA[1648605451878]]></endTime>
    <workTime><![CDATA[32]]></workTime>
    <delete><![CDATA[476]]></delete>
  </Command>
  <DocumentChange __id="4427" _type="Insert" date="Tue Mar 29 21:51:45 EDT 2022" docASTNodeCount="1085" docActiveCodeLength="8356" docExpressionCount="774" docLength="9127" length="25" offset="7944" repeat="24" starttimestamp="1648594670066" timestamp="10435352" timestamp2="10441337">
    <text><![CDATA["using gipc proxy server"]]></text>
  </DocumentChange>
  <DocumentChange __id="4478" _type="Insert" date="Tue Mar 29 21:51:52 EDT 2022" docASTNodeCount="1085" docActiveCodeLength="8357" docExpressionCount="774" docLength="9128" length="1" offset="7970" starttimestamp="1648594670066" timestamp="10442414">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="4491" _type="Insert" date="Tue Mar 29 21:51:57 EDT 2022" docASTNodeCount="1085" docActiveCodeLength="8362" docExpressionCount="774" docLength="9133" length="5" offset="8216" starttimestamp="1648594670066" timestamp="10447885">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="4493" _type="Replace" date="Tue Mar 29 21:51:58 EDT 2022" docASTNodeCount="1092" docActiveCodeLength="8408" docExpressionCount="780" docLength="9179" endLine="225" insertionLength="49" int_docASTNodeCount="1085" int_docActiveCodeLength="8359" int_docExpressionCount="774" int_docLength="9130" length="3" offset="8218" startLine="225" starttimestamp="1648594670066" timestamp="10448146">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			System.out.println("using gipc proxy server");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4497" _type="Delete" date="Tue Mar 29 21:51:59 EDT 2022" docASTNodeCount="1092" docActiveCodeLength="8404" docExpressionCount="780" docLength="9175" endLine="225" length="4" offset="8247" repeat="4" startLine="225" starttimestamp="1648594670066" timestamp="10449757" timestamp2="10450183">
    <text><![CDATA[gipc]]></text>
  </DocumentChange>
  <DocumentChange __id="4505" _type="Insert" date="Tue Mar 29 21:52:00 EDT 2022" docASTNodeCount="1092" docActiveCodeLength="8406" docExpressionCount="780" docLength="9177" length="2" offset="8247" repeat="2" starttimestamp="1648594670066" timestamp="10450428" timestamp2="10450636">
    <text><![CDATA[RI]]></text>
  </DocumentChange>
  <DocumentChange __id="4509" _type="Delete" date="Tue Mar 29 21:52:01 EDT 2022" docASTNodeCount="1092" docActiveCodeLength="8405" docExpressionCount="780" docLength="9176" endLine="225" length="1" offset="8248" startLine="225" starttimestamp="1648594670066" timestamp="10451017">
    <text><![CDATA[I]]></text>
  </DocumentChange>
  <DocumentChange __id="4511" _type="Insert" date="Tue Mar 29 21:52:01 EDT 2022" docASTNodeCount="1092" docActiveCodeLength="8407" docExpressionCount="780" docLength="9178" length="2" offset="8248" repeat="2" starttimestamp="1648594670066" timestamp="10451245" timestamp2="10451348">
    <text><![CDATA[MI]]></text>
  </DocumentChange>
  <DocumentChange __id="4611" _type="Insert" date="Tue Mar 29 21:54:31 EDT 2022" docASTNodeCount="1094" docActiveCodeLength="8410" docExpressionCount="782" docLength="9181" length="3" offset="7657" repeat="3" starttimestamp="1648594670066" timestamp="10601614" timestamp2="10602148">
    <text><![CDATA[.to]]></text>
  </DocumentChange>
  <DocumentChange __id="4619" _type="Insert" date="Tue Mar 29 21:54:35 EDT 2022" docASTNodeCount="1096" docActiveCodeLength="8413" docExpressionCount="784" docLength="9184" length="3" offset="7686" repeat="3" starttimestamp="1648594670066" timestamp="10605323" timestamp2="10605702">
    <text><![CDATA[.to]]></text>
  </DocumentChange>
  <DocumentChange __id="4625" _type="Replace" date="Tue Mar 29 21:54:36 EDT 2022" docASTNodeCount="1096" docActiveCodeLength="8421" docExpressionCount="784" docLength="9192" endLine="214" insertionLength="10" int_docASTNodeCount="1094" int_docActiveCodeLength="8411" int_docExpressionCount="782" int_docLength="9182" length="2" offset="7687" startLine="214" starttimestamp="1648594670066" timestamp="10606301">
    <deletedText><![CDATA[to]]></deletedText>
    <insertedText><![CDATA[toString()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4634" _type="Delete" date="Tue Mar 29 21:54:40 EDT 2022" docASTNodeCount="1094" docActiveCodeLength="8418" docExpressionCount="782" docLength="9189" endLine="211" length="3" offset="7657" repeat="3" startLine="211" starttimestamp="1648594670066" timestamp="10610084" timestamp2="10610606">
    <text><![CDATA[.to]]></text>
  </DocumentChange>
  <DocumentChange __id="4647" _type="Insert" date="Tue Mar 29 21:54:50 EDT 2022" docASTNodeCount="1096" docActiveCodeLength="8421" docExpressionCount="784" docLength="9192" length="3" offset="8003" repeat="3" starttimestamp="1648594670066" timestamp="10619962" timestamp2="10620369">
    <text><![CDATA[.to]]></text>
  </DocumentChange>
  <DocumentChange __id="4653" _type="Replace" date="Tue Mar 29 21:54:51 EDT 2022" docASTNodeCount="1096" docActiveCodeLength="8429" docExpressionCount="784" docLength="9200" endLine="221" insertionLength="10" int_docASTNodeCount="1094" int_docActiveCodeLength="8419" int_docExpressionCount="782" int_docLength="9190" length="2" offset="8004" startLine="221" starttimestamp="1648594670066" timestamp="10620934">
    <deletedText><![CDATA[to]]></deletedText>
    <insertedText><![CDATA[toString()]]></insertedText>
  </DocumentChange>
  <Command __id="4722" _type="PauseCommand" date="Tue Mar 29 21:58:05 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="10815521">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[15238]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4760" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:01:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10996673" type="Run" />
  <Command __id="4762" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:01:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10996890" type="Run" />
  <Command __id="4763" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:01:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10996968" type="Run" />
  <Command __id="4764" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:01:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10997004" type="Run" />
  <Command __id="4765" _type="ConsoleOutput" date="Tue Mar 29 22:01:07 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10997041" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.8766196904365393 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@7f295c6c
[com.sun.proxy.$Proxy1@7f295c6c]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.8766196904365393"), Diff(INSERT,"Server0<-->Generic Client:0.8766196904365393 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@7f295c6c¶[com.sun.proxy.$Proxy1@7f295c6c]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4766" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:01:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="10997073" type="Run" />
  <Command __id="4767" _type="ConsoleOutput" date="Tue Mar 29 22:01:07 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10997238" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65374](remote),objID:[54a2af34:17fd88e1e6b:-7ffe, 357098288289537869]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65374](remote),objID:[54a2af34:17fd88e1e6b:-7ffe, 357098288289537869]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.8766196904365393 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@7f295c6c¶[com.sun.proxy.$Proxy1@7f295c6c"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65374](remote),objID:[54a2af34:17fd88e1e6b:-7ffe, 357098288289537869]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65374](remote),objID:[54a2af34:17fd88e1e6b:-7ffe, 357098288289537869]]]]]"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="4768" _type="ConsoleOutput" date="Tue Mar 29 22:01:07 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="10997241" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65374](remote),objID:[54a2af34:17fd88e1e6b:-7ffe, 357098288289537869]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:65374](remote),objID:[54a2af34:17fd88e1e6b:-7ffe, 357098288289537869]]]]]]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4770" _type="PauseCommand" date="Tue Mar 29 22:01:08 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="10998469">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1228]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4769" _type="ShellCommand" date="Tue Mar 29 22:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="10998469" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4772" _type="PauseCommand" date="Tue Mar 29 22:01:11 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11001157">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2688]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4771" _type="ConsoleInput" date="Tue Mar 29 22:01:11 EDT 2022" starttimestamp="1648594670066" timestamp="11001157" type="Exception">
    <outputString><![CDATA[i gipc
]]></outputString>
  </Command>
  <Command __id="4773" _type="ConsoleOutput" date="Tue Mar 29 22:01:11 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11001237" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="4774" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:01:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11001524" type="Run" />
  <Command __id="4775" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:01:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11001525" type="Run" />
  <Command __id="4777" _type="PauseCommand" date="Tue Mar 29 22:01:16 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11006284">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4759]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4801" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Tue Mar 29 22:01:37 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="11027379" type="Run" />
  <Command __id="4803" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Tue Mar 29 22:01:37 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="11027379" type="Run" />
  <Command __id="4805" _type="PauseCommand" date="Tue Mar 29 22:01:39 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11029777">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2398]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4804" _type="ShellCommand" date="Tue Mar 29 22:01:39 EDT 2022" starttimestamp="1648594670066" timestamp="11029777" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4807" _type="PauseCommand" date="Tue Mar 29 22:01:42 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11032181">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2404]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4806" _type="ConsoleOutput" date="Tue Mar 29 22:01:42 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11032181" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Tue Mar 29 22:01:42 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:65371 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"Building symbol table and running first pass checks:Tue Mar 29 22:01:42 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4809" _type="PauseCommand" date="Tue Mar 29 22:01:44 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11034261">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2079]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4808" _type="ConsoleOutput" date="Tue Mar 29 22:01:44 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11034260" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:79
Running second pass checks Tue Mar 29 22:01:44 EDT 2022
Start O(n2) inter- and intra class method calls:Tue Mar 29 22:01:44 EDT 2022
End O(n2) inter- and intra class method calls:Tue Mar 29 22:01:44 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:79¶Running second pass checks Tue Mar 29 22:01:44 EDT 2022¶Start O(n2) inter- and intra class method calls:Tue Mar 29 22:01:44 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Tue Mar 29 22:01:4"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="4810" _type="ConsoleOutput" date="Tue Mar 29 22:01:45 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11035175" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Tue Mar 29 22:01:45 EDT 2022
Generating checks:Tue Mar 29 22:01:45 EDT 2022
Finished Generating checks:Tue Mar 29 22:01:45 EDT 2022
Generating externals:Tue Mar 29 22:01:45 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:79¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Tue Mar 29 22:01:4"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Tue Mar 29 22:01:45 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Tue Mar 29 22:01:4"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Tue Mar 29 22:01:4"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="4811" _type="ConsoleOutput" date="Tue Mar 29 22:01:45 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11035502" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Tue Mar 29 22:01:45 EDT 2022
Test execution time (ms):3334
Test execution time (ms):20
A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):9
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Tue Mar 29 22:01:45 EDT 2022¶"), Diff(DELETE,"Generating checks:Tue Mar 29 22:01:45 EDT 2022¶Finished Generating checks:Tue Mar 29 22:01:45 EDT 2022¶Generating externals:Tue Mar 29 22:01:45 EDT 2022"), Diff(INSERT,"Test execution time (ms):3334¶Test execution time (ms):20¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4812" _type="ConsoleOutput" date="Tue Mar 29 22:01:45 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11035564" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6

A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365
Test execution time (ms):5

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (28)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (263)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (246)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Tue Mar 29 22:01:45 EDT 2022¶Test execution time (ms):3334¶Test execution time (ms):"), Diff(INSERT,"Test execution time (ms):6¶¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶Test execution time (ms):5¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src ("), Diff(EQUAL,"20"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):9"), Diff(INSERT," |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (28)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (263)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (246)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4813" _type="ConsoleOutput" date="Tue Mar 29 22:01:45 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11035627" type="ConsoleOutput">
    <outputString><![CDATA[A5ProjectOrganization did not pass completely:View console for more information%0.0

Test execution time (ms):30
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):6¶¶A5ExpectedSignatures"), Diff(INSERT,"A5ProjectOrganization"), Diff(EQUAL," did not pass completely:"), Diff(DELETE,"See"), Diff(INSERT,"View"), Diff(EQUAL," console "), Diff(DELETE,"trace about lines failing  this check%0.36363636363636365¶Test execution time (ms):5¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (28)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (263)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (246)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)"), Diff(INSERT,"for more information%0.0¶¶Test execution time (ms):30"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4815" _type="PauseCommand" date="Tue Mar 29 22:01:48 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11038167">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2540]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4814" _type="ConsoleOutput" date="Tue Mar 29 22:01:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11038167" type="ConsoleOutput">
    <outputString><![CDATA[A5NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):4
Test execution time (ms):9
Test execution time (ms):6
Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"A5"), Diff(DELETE,"ProjectOrganization"), Diff(INSERT,"NoCheckstyleWarnings"), Diff(EQUAL," did not pass completely:"), Diff(DELETE,"View console for more information%0.0¶"), Diff(INSERT,"Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):4¶Test execution time (ms):9¶Test execution time (ms):6"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"30"), Diff(INSERT,"6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4816" _type="ConsoleOutput" date="Tue Mar 29 22:01:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11038221" type="ConsoleOutput">
    <outputString><![CDATA[A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.9971014492753624

Test execution time (ms):10
Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"A5"), Diff(DELETE,"NoCheckstyleWarning"), Diff(INSERT,"MnemonicName"), Diff(EQUAL,"s did not pass completely:"), Diff(DELETE,"Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):4¶Test execution time (ms):9"), Diff(INSERT,"See console trace about lines failing  this check%0.9971014492753624¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"6"), Diff(INSERT,"10"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"6"), Diff(INSERT,"5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4818" _type="PauseCommand" date="Tue Mar 29 22:02:10 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="11060451">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22230]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4817" _type="ConsoleOutput" date="Tue Mar 29 22:02:10 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11060451" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):18616
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.9971014492753624¶¶Test execution time (ms):10¶Test execution time (ms):5"), Diff(INSERT,"Test execution time (ms):18616"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4820" _type="PauseCommand" date="Tue Mar 29 22:02:24 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="11074045">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13594]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4819" _type="ConsoleOutput" date="Tue Mar 29 22:02:24 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11074045" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13543
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1"), Diff(DELETE,"8616"), Diff(INSERT,"3543"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4822" _type="PauseCommand" date="Tue Mar 29 22:02:37 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="11087553">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13508]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4821" _type="ConsoleOutput" date="Tue Mar 29 22:02:37 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11087553" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13548
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1354"), Diff(DELETE,"3"), Diff(INSERT,"8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4824" _type="PauseCommand" date="Tue Mar 29 22:03:48 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="11158876">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[71323]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4823" _type="ConsoleOutput" date="Tue Mar 29 22:03:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11158876" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):67603
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"13548"), Diff(INSERT,"67603"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4826" _type="PauseCommand" date="Tue Mar 29 22:04:12 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="11182536">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[23660]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4825" _type="ShellCommand" date="Tue Mar 29 22:04:12 EDT 2022" starttimestamp="1648594670066" timestamp="11182536" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4828" _type="PauseCommand" date="Tue Mar 29 22:05:41 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="11271482">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[88946]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4827" _type="ConsoleOutput" date="Tue Mar 29 22:05:41 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11271482" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):112600
GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"67603"), Diff(INSERT,"112600¶GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4830" _type="PauseCommand" date="Tue Mar 29 22:05:54 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="11284853">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13371]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4829" _type="ShellCommand" date="Tue Mar 29 22:05:54 EDT 2022" starttimestamp="1648594670066" timestamp="11284853" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4832" _type="PauseCommand" date="Tue Mar 29 22:06:04 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="11294071">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[9218]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4831" _type="ConsoleOutput" date="Tue Mar 29 22:06:04 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11294071" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22581
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"112600¶GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875"), Diff(INSERT,"22581"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4834" _type="PauseCommand" date="Tue Mar 29 22:06:13 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="11303424">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9353]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4833" _type="ConsoleOutput" date="Tue Mar 29 22:06:13 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11303424" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):22581"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4836" _type="PauseCommand" date="Tue Mar 29 22:06:26 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="11316576">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13152]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4835" _type="ConsoleOutput" date="Tue Mar 29 22:06:26 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11316576" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22557
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):22557"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4838" _type="PauseCommand" date="Tue Mar 29 22:08:19 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="11429173">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[112597]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4837" _type="ConsoleOutput" date="Tue Mar 29 22:08:19 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11429173" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateNoBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112594
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMIServerMetaStateNoBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"22557"), Diff(INSERT,"112594"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4840" _type="PauseCommand" date="Tue Mar 29 22:10:11 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="11541804">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[112631]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4839" _type="ConsoleOutput" date="Tue Mar 29 22:10:11 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11541804" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112570
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMIServerMetaState"), Diff(DELETE,"No"), Diff(EQUAL,"Broadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):1125"), Diff(DELETE,"94"), Diff(INSERT,"70"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4842" _type="PauseCommand" date="Tue Mar 29 22:10:31 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="11561835">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[20031]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="4841" _type="ConsoleOutput" date="Tue Mar 29 22:10:31 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11561835" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@51129fb6 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):112570"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@51129fb6 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4844" _type="PauseCommand" date="Tue Mar 29 22:12:42 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="11692013">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[130178]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4886" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11726091" type="Run" />
  <Command __id="4888" _type="ConsoleOutput" date="Tue Mar 29 22:13:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11726413" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.6646797384234684 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5683518135547421"), Diff(INSERT,"Server0<-->Generic Client:0.6646797384234684 (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4889" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11726504" type="Run" />
  <Command __id="4890" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11726527" type="Run" />
  <Command __id="4891" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11726686" type="Run" />
  <Command __id="4892" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11726774" type="Run" />
  <Command __id="4893" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11726836" type="Run" />
  <Command __id="4894" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11726927" type="Run" />
  <Command __id="4895" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11726941" type="Run" />
  <Command __id="4896" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11727007" type="Run" />
  <Command __id="4897" _type="ConsoleOutput" date="Tue Mar 29 22:13:17 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11727053" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.6646797384234684 (Opened)"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4898" _type="ConsoleOutput" date="Tue Mar 29 22:13:17 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11727059" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@23204bc4
[com.sun.proxy.$Proxy1@23204bc4]
Server0<-->Generic Client:0.5683518135547421 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@3e6d583f
[com.sun.proxy.$Proxy1@23204bc4, com.sun.proxy.$Proxy1@3e6d583f]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]]]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58915](remote),objID:[-240e031c:17fd8994165:-7ffe, -90338676768058968]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58915](remote),objID:[-240e031c:17fd8994165:-7ffe, -90338676768058968]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@23204bc4¶[com.sun.proxy.$Proxy1@23204bc4]¶Server0<-->Generic Client:0.5683518135547421 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@3e6d583f¶[com.sun.proxy.$Proxy1@23204bc4, com.sun.proxy.$Proxy1@3e6d583f]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]]]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58915](remote),objID:[-240e031c:17fd8994165:-7ffe, -90338676768058968]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58915](remote),objID:[-240e031c:17fd8994165:-7ffe, -90338676768058968]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4899" _type="ConsoleOutput" date="Tue Mar 29 22:13:17 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="11727419" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC¶com.sun.proxy.$Proxy1@23204bc4¶[com.sun.proxy.$Proxy1@23204bc4]¶Server0<-->Generic Client:0.5683518135547421 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@3e6d583f¶[com.sun.proxy.$Proxy1@23204bc4, com.sun.proxy.$Proxy1@3e6d583f]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]]]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58915](remote),objID:[-240e031c:17fd8994165:-7ffe, -90338676768058968]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58912](remote),objID:[2914a85:17fd8994067:-7ffe, 4021764776600354747]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:58915](remote),objID:[-240e031c:17fd8994165:-7ffe, -90338676768058968]]]]]]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="4901" _type="PauseCommand" date="Tue Mar 29 22:13:19 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="11729328">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1909]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4900" _type="ShellCommand" date="Tue Mar 29 22:13:19 EDT 2022" starttimestamp="1648594670066" timestamp="11729328" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4903" _type="PauseCommand" date="Tue Mar 29 22:13:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11733031">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3703]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4905" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11741962" type="Run" />
  <Command __id="4907" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:13:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="11742026" type="Run" />
  <Command __id="4909" _type="PauseCommand" date="Tue Mar 29 22:13:36 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11746339">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4313]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4919" _type="ShellCommand" date="Tue Mar 29 22:14:06 EDT 2022" starttimestamp="1648594670066" timestamp="11776268" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4922" _type="PauseCommand" date="Tue Mar 29 22:14:19 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="11789821">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13553]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4921" _type="ShellCommand" date="Tue Mar 29 22:14:19 EDT 2022" starttimestamp="1648594670066" timestamp="11789821" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4924" _type="PauseCommand" date="Tue Mar 29 22:14:46 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="11816128">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26307]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="4923" _type="ConsoleInput" date="Tue Mar 29 22:14:46 EDT 2022" starttimestamp="1648594670066" timestamp="11816128" type="Exception">
    <outputString><![CDATA[i gipc
]]></outputString>
  </Command>
  <Command __id="4926" _type="PauseCommand" date="Tue Mar 29 22:15:58 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="11887991">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ConsoleInput]]></prev>
    <pause><![CDATA[71863]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4925" _type="ShellCommand" date="Tue Mar 29 22:15:58 EDT 2022" starttimestamp="1648594670066" timestamp="11887991" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4928" _type="PauseCommand" date="Tue Mar 29 22:16:01 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11891233">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3242]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4927" _type="ShellCommand" date="Tue Mar 29 22:16:01 EDT 2022" starttimestamp="1648594670066" timestamp="11891233" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4930" _type="PauseCommand" date="Tue Mar 29 22:17:11 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="11961829">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[70596]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4929" _type="ShellCommand" date="Tue Mar 29 22:17:11 EDT 2022" starttimestamp="1648594670066" timestamp="11961829" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4932" _type="PauseCommand" date="Tue Mar 29 22:17:19 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="11969135">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7305]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4931" _type="ShellCommand" date="Tue Mar 29 22:17:19 EDT 2022" starttimestamp="1648594670066" timestamp="11969134" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4934" _type="PauseCommand" date="Tue Mar 29 22:17:25 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="11975680">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6546]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4933" _type="ShellCommand" date="Tue Mar 29 22:17:25 EDT 2022" starttimestamp="1648594670066" timestamp="11975680" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4936" _type="PauseCommand" date="Tue Mar 29 22:17:31 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="11981142">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5462]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4935" _type="ShellCommand" date="Tue Mar 29 22:17:31 EDT 2022" starttimestamp="1648594670066" timestamp="11981142" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4938" _type="PauseCommand" date="Tue Mar 29 22:17:34 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="11984835">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3693]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4937" _type="ShellCommand" date="Tue Mar 29 22:17:34 EDT 2022" starttimestamp="1648594670066" timestamp="11984835" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4940" _type="PauseCommand" date="Tue Mar 29 22:17:42 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="11992305">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7469]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="4943" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:18:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12022626" type="Run" />
  <Command __id="4946" _type="PauseCommand" date="Tue Mar 29 22:18:16 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12026380">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3754]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4953" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:18:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12041793" type="Run" />
  <Command __id="4955" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:18:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12041917" type="Run" />
  <Command __id="4956" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:18:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12041917" type="Run" />
  <Command __id="4957" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:18:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12042010" type="Run" />
  <Command __id="4959" _type="PauseCommand" date="Tue Mar 29 22:19:00 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="12070658">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[28648]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4958" _type="ShellCommand" date="Tue Mar 29 22:19:00 EDT 2022" starttimestamp="1648594670066" timestamp="12070658" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4961" _type="PauseCommand" date="Tue Mar 29 22:19:36 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="12106513">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35855]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4960" _type="ShellCommand" date="Tue Mar 29 22:19:36 EDT 2022" starttimestamp="1648594670066" timestamp="12106513" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4963" _type="PauseCommand" date="Tue Mar 29 22:20:32 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="12162591">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[56078]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4962" _type="ShellCommand" date="Tue Mar 29 22:20:32 EDT 2022" starttimestamp="1648594670066" timestamp="12162591" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4965" _type="PauseCommand" date="Tue Mar 29 22:22:47 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="12297707">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[135116]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4964" _type="MoveCaretCommand" caretOffset="4372" date="Tue Mar 29 22:22:47 EDT 2022" docOffset="4372" starttimestamp="1648594670066" timestamp="12297707" />
  <Command __id="4966" _type="MoveCaretCommand" caretOffset="4372" date="Tue Mar 29 22:22:47 EDT 2022" docOffset="4372" starttimestamp="1648594670066" timestamp="12297707" />
  <Command __id="4968" _type="PauseCommand" date="Tue Mar 29 22:22:56 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12306524">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8817]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="4970" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:22:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12307617" type="Run" />
  <Command __id="4973" _type="PauseCommand" date="Tue Mar 29 22:23:04 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12314893">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[7276]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="4972" _type="MoveCaretCommand" caretOffset="4282" date="Tue Mar 29 22:23:04 EDT 2022" docOffset="4282" starttimestamp="1648594670066" timestamp="12314893" />
  <Command __id="4974" _type="MoveCaretCommand" caretOffset="4282" date="Tue Mar 29 22:23:04 EDT 2022" docOffset="4282" starttimestamp="1648594670066" timestamp="12314894" />
  <Command __id="4976" _type="PauseCommand" date="Tue Mar 29 22:23:06 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12316112">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1218]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4984" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:23:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12341805" type="Run" />
  <Command __id="4986" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:23:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12341928" type="Run" />
  <Command __id="4987" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:23:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12341928" type="Run" />
  <Command __id="4988" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:23:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12342022" type="Run" />
  <Command __id="4990" _type="PauseCommand" date="Tue Mar 29 22:26:59 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="12548961">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[206939]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="4989" _type="ShellCommand" date="Tue Mar 29 22:26:59 EDT 2022" starttimestamp="1648594670066" timestamp="12548961" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4992" _type="MoveCaretCommand" caretOffset="8014" date="Tue Mar 29 22:26:59 EDT 2022" docOffset="8014" starttimestamp="1648594670066" timestamp="12549163" />
  <Command __id="4994" _type="PauseCommand" date="Tue Mar 29 22:27:07 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12557044">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7881]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="4993" _type="SelectTextCommand" caretOffset="8297" date="Tue Mar 29 22:27:07 EDT 2022" end="8339" start="8297" starttimestamp="1648594670066" timestamp="12557044" />
  <Command __id="4995" _type="CopyCommand" date="Tue Mar 29 22:27:07 EDT 2022" starttimestamp="1648594670066" timestamp="12557296" />
  <Command __id="4996" _type="MoveCaretCommand" caretOffset="8438" date="Tue Mar 29 22:27:08 EDT 2022" docOffset="8438" starttimestamp="1648594670066" timestamp="12558182" />
  <Command __id="4998" _type="InsertStringCommand" date="Tue Mar 29 22:27:08 EDT 2022" starttimestamp="1648594670066" timestamp="12558487" timestamp2="12558487">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5000" _type="PasteCommand" date="Tue Mar 29 22:27:08 EDT 2022" starttimestamp="1648594670066" timestamp="12558749" />
  <Command __id="5001" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:27:09 EDT 2022" starttimestamp="1648594670066" timestamp="12559636" />
  <Command __id="5002" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:27:09 EDT 2022" starttimestamp="1648594670066" timestamp="12559853" />
  <Command __id="5004" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:10 EDT 2022" starttimestamp="1648594670066" timestamp="12560465" />
  <Command __id="5006" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:10 EDT 2022" starttimestamp="1648594670066" timestamp="12560662" />
  <Command __id="5008" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:10 EDT 2022" starttimestamp="1648594670066" timestamp="12560845" />
  <Command __id="5010" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:11 EDT 2022" starttimestamp="1648594670066" timestamp="12561021" />
  <Command __id="5012" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:11 EDT 2022" starttimestamp="1648594670066" timestamp="12561179" />
  <Command __id="5014" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:11 EDT 2022" starttimestamp="1648594670066" timestamp="12561347" />
  <Command __id="5016" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:11 EDT 2022" starttimestamp="1648594670066" timestamp="12561513" />
  <Command __id="5018" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:12 EDT 2022" starttimestamp="1648594670066" timestamp="12561953" />
  <Command __id="5020" _type="InsertStringCommand" date="Tue Mar 29 22:27:12 EDT 2022" starttimestamp="1648594670066" timestamp="12562548" timestamp2="12562548">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="5022" _type="InsertStringCommand" date="Tue Mar 29 22:27:13 EDT 2022" starttimestamp="1648594670066" timestamp="12563358" timestamp2="12563358">
    <data><![CDATA[q]]></data>
  </Command>
  <Command __id="5024" _type="InsertStringCommand" date="Tue Mar 29 22:27:13 EDT 2022" starttimestamp="1648594670066" timestamp="12563621" timestamp2="12563621">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5026" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:14 EDT 2022" starttimestamp="1648594670066" timestamp="12564053" />
  <Command __id="5028" _type="InsertStringCommand" date="Tue Mar 29 22:27:14 EDT 2022" starttimestamp="1648594670066" timestamp="12564206" timestamp2="12564206">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="5030" _type="InsertStringCommand" date="Tue Mar 29 22:27:14 EDT 2022" starttimestamp="1648594670066" timestamp="12564328" timestamp2="12564328">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5032" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:27:14 EDT 2022" starttimestamp="1648594670066" timestamp="12564762" />
  <Command __id="5034" _type="InsertStringCommand" date="Tue Mar 29 22:27:14 EDT 2022" starttimestamp="1648594670066" timestamp="12564907" timestamp2="12564907">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5036" _type="InsertStringCommand" date="Tue Mar 29 22:27:15 EDT 2022" starttimestamp="1648594670066" timestamp="12565026" timestamp2="12565026">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5037" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:27:15 EDT 2022" starttimestamp="1648594670066" timestamp="12565654" />
  <Command __id="5038" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:27:15 EDT 2022" starttimestamp="1648594670066" timestamp="12565753" />
  <Command __id="5039" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:27:15 EDT 2022" starttimestamp="1648594670066" timestamp="12565805" />
  <Command __id="5040" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:27:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12565935" type="Run" />
  <Command __id="5041" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:27:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12565935" type="Run" />
  <Command __id="4721" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 21:58:05 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7342" docExpressionCount="744" docLength="7893" projectName="A5" starttimestamp="1648594670066" timestamp="10815521">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="4991" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 22:26:59 EDT 2022" docASTNodeCount="1096" docActiveCodeLength="8429" docExpressionCount="784" docLength="9200" projectName="A5" starttimestamp="1648594670066" timestamp="12549041">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism."), Diff(INSERT,"toString()."), Diff(EQUAL,"equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		"), Diff(INSERT,"	System.out.println("using gipc proxy server");¶		"), Diff(EQUAL,"}¶		if(mechanism."), Diff(INSERT,"toString()."), Diff(EQUAL,"equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		"), Diff(INSERT,"	System.out.println("using RMI proxy server");¶		"), Diff(EQUAL,"}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="4997" _type="Insert" date="Tue Mar 29 22:27:08 EDT 2022" docASTNodeCount="1096" docActiveCodeLength="8433" docExpressionCount="784" docLength="9204" length="4" offset="8438" starttimestamp="1648594670066" timestamp="12558477">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="4999" _type="Replace" date="Tue Mar 29 22:27:08 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8475" docExpressionCount="788" docLength="9246" endLine="232" insertionLength="44" int_docASTNodeCount="1096" int_docActiveCodeLength="8431" int_docExpressionCount="784" int_docLength="9202" length="2" offset="8440" startLine="232" starttimestamp="1648594670066" timestamp="12558743">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		commandProcessor.setInputString(aCommand);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5003" _type="Delete" date="Tue Mar 29 22:27:10 EDT 2022" docASTNodeCount="1100" docActiveCodeLength="8467" docExpressionCount="787" docLength="9238" endLine="232" length="8" offset="8474" repeat="8" startLine="232" starttimestamp="1648594670066" timestamp="12560458" timestamp2="12561945">
    <text><![CDATA[aCommand]]></text>
  </DocumentChange>
  <DocumentChange __id="5019" _type="Insert" date="Tue Mar 29 22:27:12 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8471" docExpressionCount="788" docLength="9242" length="4" offset="8474" repeat="3" starttimestamp="1648594670066" timestamp="12562544" timestamp2="12563617">
    <text><![CDATA["qi"]]></text>
  </DocumentChange>
  <DocumentChange __id="5025" _type="Delete" date="Tue Mar 29 22:27:14 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8470" docExpressionCount="788" docLength="9241" endLine="232" length="1" offset="8476" startLine="232" starttimestamp="1648594670066" timestamp="12564048">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="5027" _type="Insert" date="Tue Mar 29 22:27:14 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8472" docExpressionCount="788" docLength="9243" length="2" offset="8476" repeat="2" starttimestamp="1648594670066" timestamp="12564203" timestamp2="12564326">
    <text><![CDATA[ut]]></text>
  </DocumentChange>
  <DocumentChange __id="5031" _type="Delete" date="Tue Mar 29 22:27:14 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8471" docExpressionCount="788" docLength="9242" endLine="232" length="1" offset="8477" startLine="232" starttimestamp="1648594670066" timestamp="12564758">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="5033" _type="Insert" date="Tue Mar 29 22:27:14 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8473" docExpressionCount="788" docLength="9244" length="2" offset="8477" repeat="2" starttimestamp="1648594670066" timestamp="12564903" timestamp2="12565023">
    <text><![CDATA[it]]></text>
  </DocumentChange>
  <Command __id="5043" _type="PauseCommand" date="Tue Mar 29 22:27:17 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12567850">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1915]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5044" _type="MoveCaretCommand" caretOffset="1299" date="Tue Mar 29 22:27:18 EDT 2022" docOffset="1299" starttimestamp="1648594670066" timestamp="12567972" />
  <Command __id="5042" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 22:27:17 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648594670066" timestamp="12567850">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterface"), Diff(DELETE,"RMI"), Diff(INSERT,"GIPC"), Diff(EQUAL," aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="5046" _type="PauseCommand" date="Tue Mar 29 22:27:19 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12569586">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1614]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5047" _type="MoveCaretCommand" caretOffset="4282" date="Tue Mar 29 22:27:19 EDT 2022" docOffset="4282" starttimestamp="1648594670066" timestamp="12569695" />
  <Command __id="5049" _type="PauseCommand" date="Tue Mar 29 22:27:28 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12578465">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8770]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5048" _type="SelectTextCommand" caretOffset="4289" date="Tue Mar 29 22:27:28 EDT 2022" end="4293" start="4289" starttimestamp="1648594670066" timestamp="12578465" />
  <Command __id="5050" _type="SelectTextCommand" caretOffset="4289" date="Tue Mar 29 22:27:28 EDT 2022" end="4293" start="4289" starttimestamp="1648594670066" timestamp="12578466" />
  <Command __id="5052" _type="PauseCommand" date="Tue Mar 29 22:27:45 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="12595042">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[16576]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5082" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:27:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12607628" type="Run" />
  <Command __id="5085" _type="PauseCommand" date="Tue Mar 29 22:28:05 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12615790">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8162]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5084" _type="SelectTextCommand" caretOffset="4608" date="Tue Mar 29 22:28:05 EDT 2022" end="4689" start="4608" starttimestamp="1648594670066" timestamp="12615790" />
  <Command __id="5086" _type="SelectTextCommand" caretOffset="4608" date="Tue Mar 29 22:28:05 EDT 2022" end="4689" start="4608" starttimestamp="1648594670066" timestamp="12615790" />
  <Command __id="5088" _type="CutCommand" date="Tue Mar 29 22:28:06 EDT 2022" starttimestamp="1648594670066" timestamp="12616734" />
  <Command __id="5089" _type="MoveCaretCommand" caretOffset="4336" date="Tue Mar 29 22:28:07 EDT 2022" docOffset="4336" starttimestamp="1648594670066" timestamp="12617575" />
  <Command __id="5090" _type="MoveCaretCommand" caretOffset="4336" date="Tue Mar 29 22:28:07 EDT 2022" docOffset="4336" starttimestamp="1648594670066" timestamp="12617575" />
  <Command __id="5092" _type="InsertStringCommand" date="Tue Mar 29 22:28:07 EDT 2022" starttimestamp="1648594670066" timestamp="12617859" timestamp2="12617859">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5093" _type="InsertStringCommand" date="Tue Mar 29 22:28:07 EDT 2022" starttimestamp="1648594670066" timestamp="12617859" timestamp2="12617859">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5095" _type="PasteCommand" date="Tue Mar 29 22:28:08 EDT 2022" starttimestamp="1648594670066" timestamp="12618118" />
  <Command __id="5097" _type="PauseCommand" date="Tue Mar 29 22:28:12 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12621940">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3822]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5096" _type="SelectTextCommand" caretOffset="4403" date="Tue Mar 29 22:28:12 EDT 2022" end="4407" start="4403" starttimestamp="1648594670066" timestamp="12621940" />
  <Command __id="5098" _type="SelectTextCommand" caretOffset="4403" date="Tue Mar 29 22:28:12 EDT 2022" end="4407" start="4403" starttimestamp="1648594670066" timestamp="12621940" />
  <Command __id="5099" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:12 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12622639" type="Run" />
  <Command __id="5045" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 22:27:19 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7342" docExpressionCount="744" docLength="7893" projectName="A5" starttimestamp="1648594670066" timestamp="12569586">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="5054" _type="Insert" date="Tue Mar 29 22:27:45 EDT 2022" docASTNodeCount="1023" docActiveCodeLength="7307" docExpressionCount="738" docLength="7895" length="2" offset="4225" repeat="2" starttimestamp="1648594670066" timestamp="12595542" timestamp2="12595651">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5066" _type="Insert" date="Tue Mar 29 22:27:47 EDT 2022" docASTNodeCount="1018" docActiveCodeLength="7293" docExpressionCount="734" docLength="7897" length="2" offset="4290" repeat="2" starttimestamp="1648594670066" timestamp="12597930" timestamp2="12598057">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5076" _type="Insert" date="Tue Mar 29 22:27:49 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7292" docExpressionCount="734" docLength="7899" length="2" offset="4312" repeat="2" starttimestamp="1648594670066" timestamp="12598958" timestamp2="12599085">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5087" _type="Delete" date="Tue Mar 29 22:28:06 EDT 2022" docASTNodeCount="1003" docActiveCodeLength="7226" docExpressionCount="724" docLength="7818" endLine="128" length="81" offset="4608" startLine="125" starttimestamp="1648594670066" timestamp="12616723">
    <text><![CDATA[if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}]]></text>
  </DocumentChange>
  <DocumentChange __id="5091" _type="Insert" date="Tue Mar 29 22:28:07 EDT 2022" docASTNodeCount="1003" docActiveCodeLength="7231" docExpressionCount="724" docLength="7823" length="5" offset="4336" starttimestamp="1648594670066" timestamp="12617851">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="5094" _type="Replace" date="Tue Mar 29 22:28:08 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7297" docExpressionCount="734" docLength="7904" endLine="116" insertionLength="84" int_docASTNodeCount="1003" int_docActiveCodeLength="7228" int_docExpressionCount="724" int_docLength="7820" length="3" offset="4338" startLine="116" starttimestamp="1648594670066" timestamp="12618110">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}]]></insertedText>
  </DocumentChange>
  <Command __id="5101" _type="PauseCommand" date="Tue Mar 29 22:28:15 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12624947">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2308]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="5100" _type="Replace" date="Tue Mar 29 22:28:15 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7294" docExpressionCount="734" docLength="7901" endLine="118" insertionLength="1" int_docASTNodeCount="1015" int_docActiveCodeLength="7293" int_docExpressionCount="733" int_docLength="7900" length="4" offset="4403" startLine="118" starttimestamp="1648594670066" timestamp="12624947">
    <deletedText><![CDATA[this]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <Command __id="5102" _type="InsertStringCommand" date="Tue Mar 29 22:28:15 EDT 2022" starttimestamp="1648594670066" timestamp="12624954" timestamp2="12624954">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5103" _type="InsertStringCommand" date="Tue Mar 29 22:28:15 EDT 2022" starttimestamp="1648594670066" timestamp="12624954" timestamp2="12624954">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5119" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12626807" type="Run" />
  <Command __id="5121" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12626932" type="Run" />
  <Command __id="5122" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12626932" type="Run" />
  <Command __id="5123" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12627025" type="Run" />
  <Command __id="5125" _type="PauseCommand" date="Tue Mar 29 22:28:22 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12632241">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5216]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5124" _type="MoveCaretCommand" caretOffset="4416" date="Tue Mar 29 22:28:22 EDT 2022" docOffset="4416" starttimestamp="1648594670066" timestamp="12632241" />
  <Command __id="5126" _type="MoveCaretCommand" caretOffset="4416" date="Tue Mar 29 22:28:22 EDT 2022" docOffset="4416" starttimestamp="1648594670066" timestamp="12632241" />
  <Command __id="5128" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:28:22 EDT 2022" starttimestamp="1648594670066" timestamp="12632526" />
  <Command __id="5129" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:28:22 EDT 2022" starttimestamp="1648594670066" timestamp="12632526" />
  <Command __id="5131" _type="PauseCommand" date="Tue Mar 29 22:28:24 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12633937">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1411]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5130" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:28:24 EDT 2022" starttimestamp="1648594670066" timestamp="12633937" />
  <Command __id="5132" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:28:24 EDT 2022" starttimestamp="1648594670066" timestamp="12634038" />
  <Command __id="5133" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:28:24 EDT 2022" starttimestamp="1648594670066" timestamp="12634080" />
  <Command __id="5134" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12634198" type="Run" />
  <Command __id="5135" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12634198" type="Run" />
  <Command __id="5136" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12634198" type="Run" />
  <DocumentChange __id="5104" _type="Insert" date="Tue Mar 29 22:28:15 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7299" docExpressionCount="734" docLength="7906" length="5" offset="4404" repeat="5" starttimestamp="1648594670066" timestamp="12625233" timestamp2="12625716">
    <text><![CDATA[lient]]></text>
  </DocumentChange>
  <DocumentChange __id="5127" _type="Delete" date="Tue Mar 29 22:28:22 EDT 2022" docASTNodeCount="1015" docActiveCodeLength="7298" docExpressionCount="733" docLength="7905" endLine="118" length="1" offset="4415" startLine="118" starttimestamp="1648594670066" timestamp="12632512">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="5138" _type="PauseCommand" date="Tue Mar 29 22:28:25 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12635691">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1493]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5140" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12641820" type="Run" />
  <Command __id="5142" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12641944" type="Run" />
  <Command __id="5143" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12641944" type="Run" />
  <Command __id="5144" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12642037" type="Run" />
  <Command __id="5137" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 22:28:25 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8473" docExpressionCount="788" docLength="9244" projectName="A5" starttimestamp="1648594670066" timestamp="12635691">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		"), Diff(INSERT,"commandProcessor.setInputString("quit");¶		"), Diff(EQUAL,"System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		commandProcessor.setInputString("quit");
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="5146" _type="PauseCommand" date="Tue Mar 29 22:28:36 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12646827">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4790]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="5147" _type="MoveCaretCommand" caretOffset="4415" date="Tue Mar 29 22:28:37 EDT 2022" docOffset="4415" starttimestamp="1648594670066" timestamp="12646939" />
  <Command __id="5145" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 22:28:36 EDT 2022" docASTNodeCount="1015" docActiveCodeLength="7298" docExpressionCount="733" docLength="7905" projectName="A5" starttimestamp="1648594670066" timestamp="12646827">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				"), Diff(INSERT,"//"), Diff(EQUAL,"if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				"), Diff(INSERT,"//"), Diff(EQUAL,"	this.quit(0);¶				"), Diff(INSERT,"//"), Diff(EQUAL,"}¶				continue;¶			}"), Diff(INSERT,"¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				client.quit();¶			}"), Diff(EQUAL,"¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			"), Diff(DELETE,"if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}"), Diff(EQUAL,"¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				//if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
				//	this.quit(0);
				//}
				continue;
			}
			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				client.quit();
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="5149" _type="PauseCommand" date="Tue Mar 29 22:28:38 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12648312">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1373]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="5150" _type="InsertStringCommand" date="Tue Mar 29 22:28:38 EDT 2022" starttimestamp="1648594670066" timestamp="12648321" timestamp2="12648321">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="5151" _type="InsertStringCommand" date="Tue Mar 29 22:28:38 EDT 2022" starttimestamp="1648594670066" timestamp="12648321" timestamp2="12648321">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="5152" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:28:39 EDT 2022" starttimestamp="1648594670066" timestamp="12649284" />
  <Command __id="5153" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:28:39 EDT 2022" starttimestamp="1648594670066" timestamp="12649376" />
  <Command __id="5154" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:28:39 EDT 2022" starttimestamp="1648594670066" timestamp="12649423" />
  <Command __id="5155" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12649540" type="Run" />
  <Command __id="5156" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12649540" type="Run" />
  <Command __id="5157" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:28:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12649540" type="Run" />
  <Command __id="5159" _type="PauseCommand" date="Tue Mar 29 22:28:48 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12658532">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8992]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5158" _type="ShellCommand" date="Tue Mar 29 22:28:48 EDT 2022" starttimestamp="1648594670066" timestamp="12658532" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5160" _type="ShellCommand" date="Tue Mar 29 22:28:48 EDT 2022" starttimestamp="1648594670066" timestamp="12658695" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5171" _type="SelectTextCommand" caretOffset="679" date="Tue Mar 29 22:28:49 EDT 2022" end="679" start="675" starttimestamp="1648594670066" timestamp="12659023" />
  <Command __id="5173" _type="PauseCommand" date="Tue Mar 29 22:28:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12660422">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1399]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5172" _type="MoveCaretCommand" caretOffset="691" date="Tue Mar 29 22:28:50 EDT 2022" docOffset="900" starttimestamp="1648594670066" timestamp="12660422" />
  <Command __id="5175" _type="InsertStringCommand" date="Tue Mar 29 22:28:51 EDT 2022" starttimestamp="1648594670066" timestamp="12661391" timestamp2="12661391">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5177" _type="InsertStringCommand" date="Tue Mar 29 22:28:51 EDT 2022" starttimestamp="1648594670066" timestamp="12661558" timestamp2="12661558">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5179" _type="InsertStringCommand" date="Tue Mar 29 22:28:51 EDT 2022" starttimestamp="1648594670066" timestamp="12661627" timestamp2="12661627">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="5181" _type="InsertStringCommand" date="Tue Mar 29 22:28:51 EDT 2022" starttimestamp="1648594670066" timestamp="12661764" timestamp2="12661764">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5183" _type="InsertStringCommand" date="Tue Mar 29 22:28:51 EDT 2022" starttimestamp="1648594670066" timestamp="12661844" timestamp2="12661844">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5185" _type="InsertStringCommand" date="Tue Mar 29 22:28:51 EDT 2022" starttimestamp="1648594670066" timestamp="12661931" timestamp2="12661931">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="5187" _type="InsertStringCommand" date="Tue Mar 29 22:28:52 EDT 2022" starttimestamp="1648594670066" timestamp="12662145" timestamp2="12662145">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5189" _type="InsertStringCommand" date="Tue Mar 29 22:28:52 EDT 2022" starttimestamp="1648594670066" timestamp="12662278" timestamp2="12662278">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="5191" _type="InsertStringCommand" date="Tue Mar 29 22:28:52 EDT 2022" starttimestamp="1648594670066" timestamp="12662625" timestamp2="12662625">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="5193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:28:53 EDT 2022" starttimestamp="1648594670066" timestamp="12662939" />
  <Command __id="5195" _type="InsertStringCommand" date="Tue Mar 29 22:28:53 EDT 2022" starttimestamp="1648594670066" timestamp="12663031" timestamp2="12663031">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="5197" _type="InsertStringCommand" date="Tue Mar 29 22:28:53 EDT 2022" starttimestamp="1648594670066" timestamp="12663197" timestamp2="12663197">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5199" _type="InsertStringCommand" date="Tue Mar 29 22:28:53 EDT 2022" starttimestamp="1648594670066" timestamp="12663408" timestamp2="12663408">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="5201" _type="InsertStringCommand" date="Tue Mar 29 22:28:53 EDT 2022" starttimestamp="1648594670066" timestamp="12663496" timestamp2="12663496">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="5203" _type="InsertStringCommand" date="Tue Mar 29 22:28:53 EDT 2022" starttimestamp="1648594670066" timestamp="12663593" timestamp2="12663593">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5205" _type="InsertStringCommand" date="Tue Mar 29 22:28:53 EDT 2022" starttimestamp="1648594670066" timestamp="12663745" timestamp2="12663745">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5207" _type="InsertStringCommand" date="Tue Mar 29 22:28:54 EDT 2022" starttimestamp="1648594670066" timestamp="12664086" timestamp2="12664086">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="5209" _type="InsertStringCommand" date="Tue Mar 29 22:28:54 EDT 2022" starttimestamp="1648594670066" timestamp="12664350" timestamp2="12664350">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="5211" _type="InsertStringCommand" date="Tue Mar 29 22:28:54 EDT 2022" starttimestamp="1648594670066" timestamp="12664521" timestamp2="12664521">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="5213" _type="InsertStringCommand" date="Tue Mar 29 22:28:54 EDT 2022" starttimestamp="1648594670066" timestamp="12664734" timestamp2="12664734">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="5215" _type="InsertStringCommand" date="Tue Mar 29 22:28:54 EDT 2022" starttimestamp="1648594670066" timestamp="12664855" timestamp2="12664855">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="5217" _type="InsertStringCommand" date="Tue Mar 29 22:28:55 EDT 2022" starttimestamp="1648594670066" timestamp="12664995" timestamp2="12664995">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5219" _type="InsertStringCommand" date="Tue Mar 29 22:28:55 EDT 2022" starttimestamp="1648594670066" timestamp="12665075" timestamp2="12665075">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5252" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 22:29:07 EDT 2022" starttimestamp="1648594670066" timestamp="12677142" />
  <Command __id="5254" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:29:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12677157" type="Debug" />
  <Command __id="5255" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 22:29:07 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12677157" type="Run" />
  <Command __id="5256" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:29:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12677157" type="Debug" />
  <Command __id="5257" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 22:29:07 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12677157" type="Run" />
  <Command __id="5259" _type="MoveCaretCommand" caretOffset="4416" date="Tue Mar 29 22:29:08 EDT 2022" docOffset="4416" starttimestamp="1648594670066" timestamp="12678057" />
  <Command __id="5261" _type="PauseCommand" date="Tue Mar 29 22:29:12 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12681937">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3880]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5260" _type="ShellCommand" date="Tue Mar 29 22:29:12 EDT 2022" starttimestamp="1648594670066" timestamp="12681937" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5262" _type="ShellCommand" date="Tue Mar 29 22:29:12 EDT 2022" starttimestamp="1648594670066" timestamp="12682040" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5273" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:29:12 EDT 2022" starttimestamp="1648594670066" timestamp="12682857" />
  <Command __id="5274" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:29:13 EDT 2022" starttimestamp="1648594670066" timestamp="12682947" />
  <Command __id="5275" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:29:13 EDT 2022" starttimestamp="1648594670066" timestamp="12682973" />
  <Command __id="5277" _type="PauseCommand" date="Tue Mar 29 22:29:14 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12684042">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1069]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5276" _type="MoveCaretCommand" caretOffset="4397" date="Tue Mar 29 22:29:14 EDT 2022" docOffset="4397" starttimestamp="1648594670066" timestamp="12684042" />
  <Command __id="5278" _type="MoveCaretCommand" caretOffset="4397" date="Tue Mar 29 22:29:14 EDT 2022" docOffset="4397" starttimestamp="1648594670066" timestamp="12684042" />
  <Command __id="5280" _type="PauseCommand" date="Tue Mar 29 22:29:28 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="12698505">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14463]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5279" _type="MoveCaretCommand" caretOffset="4094" date="Tue Mar 29 22:29:28 EDT 2022" docOffset="4094" starttimestamp="1648594670066" timestamp="12698505" />
  <Command __id="5281" _type="MoveCaretCommand" caretOffset="4094" date="Tue Mar 29 22:29:28 EDT 2022" docOffset="4094" starttimestamp="1648594670066" timestamp="12698505" />
  <Command __id="5283" _type="PauseCommand" date="Tue Mar 29 22:29:31 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12701641">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3136]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5282" _type="MoveCaretCommand" caretOffset="4540" date="Tue Mar 29 22:29:31 EDT 2022" docOffset="4540" starttimestamp="1648594670066" timestamp="12701641" />
  <Command __id="5284" _type="MoveCaretCommand" caretOffset="4540" date="Tue Mar 29 22:29:31 EDT 2022" docOffset="4540" starttimestamp="1648594670066" timestamp="12701641" />
  <Command __id="5286" _type="PauseCommand" date="Tue Mar 29 22:29:32 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12702929">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1288]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5285" _type="MoveCaretCommand" caretOffset="4548" date="Tue Mar 29 22:29:32 EDT 2022" docOffset="4548" starttimestamp="1648594670066" timestamp="12702929" />
  <Command __id="5287" _type="MoveCaretCommand" caretOffset="4548" date="Tue Mar 29 22:29:32 EDT 2022" docOffset="4548" starttimestamp="1648594670066" timestamp="12702929" />
  <Command __id="5289" _type="PauseCommand" date="Tue Mar 29 22:29:36 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12706176">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3247]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5288" _type="SelectTextCommand" caretOffset="4341" date="Tue Mar 29 22:29:36 EDT 2022" end="4546" start="4341" starttimestamp="1648594670066" timestamp="12706176" />
  <Command __id="5290" _type="SelectTextCommand" caretOffset="4341" date="Tue Mar 29 22:29:36 EDT 2022" end="4546" start="4341" starttimestamp="1648594670066" timestamp="12706176" />
  <Command __id="5291" _type="CopyCommand" date="Tue Mar 29 22:29:36 EDT 2022" starttimestamp="1648594670066" timestamp="12706456" />
  <Command __id="5293" _type="PauseCommand" date="Tue Mar 29 22:29:39 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12709746">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3290]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="5292" _type="MoveCaretCommand" caretOffset="4823" date="Tue Mar 29 22:29:39 EDT 2022" docOffset="4823" starttimestamp="1648594670066" timestamp="12709746" />
  <Command __id="5294" _type="MoveCaretCommand" caretOffset="4823" date="Tue Mar 29 22:29:39 EDT 2022" docOffset="4823" starttimestamp="1648594670066" timestamp="12709746" />
  <DocumentChange __id="5148" _type="Insert" date="Tue Mar 29 22:28:38 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7299" docExpressionCount="734" docLength="7906" length="1" offset="4415" starttimestamp="1648594670066" timestamp="12648312">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="5161" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 22:28:48 EDT 2022" docASTNodeCount="107" docActiveCodeLength="852" docExpressionCount="66" docLength="886" projectName="A5" starttimestamp="1648594670066" timestamp="12658868">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.rmi.Remote;
import java.rmi.RemoteException;

import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.CLIENT_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ClientRemoteInterfaceGIPC  extends Remote{

	//void processArgs(String[] args);
	
	void inCoupler(String aNewCommand, int aProposalNumber) throws RemoteException;

	void start(String[] args) throws RemoteException;

	void processArgs(String[] args) throws RemoteException;

	HalloweenCommandProcessor createSimulation(String aPrefix) throws RemoteException;

	void broadcastMetaState(boolean broadcast) throws RemoteException;

	void changeIPCMechanism(IPCMechanism mechanism, int aProposalNumber) throws RemoteException;

}
]]></snapshot>
  </Command>
  <DocumentChange __id="5162" _type="Insert" date="Tue Mar 29 22:28:48 EDT 2022" docASTNodeCount="113" docActiveCodeLength="874" docExpressionCount="68" docLength="908" length="22" offset="879" repeat="9" starttimestamp="1648594670066" timestamp="12658885" timestamp2="12658890">
    <text><![CDATA[

	void quit(int i);]]></text>
  </DocumentChange>
  <DocumentChange __id="5174" _type="Insert" date="Tue Mar 29 22:28:51 EDT 2022" docASTNodeCount="114" docActiveCodeLength="883" docExpressionCount="69" docLength="917" length="9" offset="900" repeat="9" starttimestamp="1648594670066" timestamp="12661381" timestamp2="12662620">
    <text><![CDATA[ throws r]]></text>
  </DocumentChange>
  <DocumentChange __id="5192" _type="Delete" date="Tue Mar 29 22:28:53 EDT 2022" docASTNodeCount="114" docActiveCodeLength="882" docExpressionCount="68" docLength="916" endLine="27" length="1" offset="908" startLine="27" starttimestamp="1648594670066" timestamp="12662936">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="5194" _type="Insert" date="Tue Mar 29 22:28:53 EDT 2022" docASTNodeCount="114" docActiveCodeLength="897" docExpressionCount="69" docLength="931" length="15" offset="908" repeat="15" starttimestamp="1648594670066" timestamp="12663026" timestamp2="12665220">
    <text><![CDATA[RemoteException]]></text>
  </DocumentChange>
  <Command __id="5258" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 22:29:07 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7299" docExpressionCount="734" docLength="7906" projectName="A5" starttimestamp="1648594670066" timestamp="12677920">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				client.quit("), Diff(INSERT,"0"), Diff(EQUAL,");¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				//if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
				//	this.quit(0);
				//}
				continue;
			}
			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				client.quit(0);
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {

		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientListGIPC) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="5263" _type="Delete" date="Tue Mar 29 22:29:12 EDT 2022" docASTNodeCount="1011" docActiveCodeLength="7284" docExpressionCount="730" docLength="7891" endLine="118" length="15" offset="4403" startLine="118" starttimestamp="1648594670066" timestamp="12682059">
    <text><![CDATA[client.quit(0);]]></text>
  </DocumentChange>
  <DocumentChange __id="5264" _type="Insert" date="Tue Mar 29 22:29:12 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7387" docExpressionCount="739" docLength="8028" length="137" offset="4403" repeat="9" starttimestamp="1648594670066" timestamp="12682064" timestamp2="12682085">
    <text><![CDATA[try {
					client.quit(0);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}]]></text>
  </DocumentChange>
  <Command __id="5296" _type="PauseCommand" date="Tue Mar 29 22:29:42 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12712714">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2968]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="5295" _type="Insert" date="Tue Mar 29 22:29:42 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7391" docExpressionCount="739" docLength="8032" length="4" offset="4823" starttimestamp="1648594670066" timestamp="12712714">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="5297" _type="InsertStringCommand" date="Tue Mar 29 22:29:42 EDT 2022" starttimestamp="1648594670066" timestamp="12712727" timestamp2="12712727">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5298" _type="InsertStringCommand" date="Tue Mar 29 22:29:42 EDT 2022" starttimestamp="1648594670066" timestamp="12712727" timestamp2="12712727">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5300" _type="PasteCommand" date="Tue Mar 29 22:29:43 EDT 2022" starttimestamp="1648594670066" timestamp="12713063" />
  <Command __id="5302" _type="PauseCommand" date="Tue Mar 29 22:29:45 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12715764">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2701]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="5301" _type="SelectTextCommand" caretOffset="4898" date="Tue Mar 29 22:29:45 EDT 2022" end="4904" start="4898" starttimestamp="1648594670066" timestamp="12715764" />
  <Command __id="5303" _type="SelectTextCommand" caretOffset="4898" date="Tue Mar 29 22:29:45 EDT 2022" end="4904" start="4898" starttimestamp="1648594670066" timestamp="12715764" />
  <Command __id="5305" _type="InsertStringCommand" date="Tue Mar 29 22:29:46 EDT 2022" starttimestamp="1648594670066" timestamp="12716082" timestamp2="12716082">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5306" _type="InsertStringCommand" date="Tue Mar 29 22:29:46 EDT 2022" starttimestamp="1648594670066" timestamp="12716082" timestamp2="12716082">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="5308" _type="InsertStringCommand" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717031" timestamp2="12717031">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="5309" _type="InsertStringCommand" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717031" timestamp2="12717031">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="5311" _type="InsertStringCommand" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717046" timestamp2="12717046">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5312" _type="InsertStringCommand" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717046" timestamp2="12717046">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="5314" _type="InsertStringCommand" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717055" timestamp2="12717055">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5315" _type="InsertStringCommand" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717055" timestamp2="12717055">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5317" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717077" />
  <Command __id="5318" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717077" />
  <Command __id="5320" _type="InsertStringCommand" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717918" timestamp2="12717918">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5321" _type="InsertStringCommand" date="Tue Mar 29 22:29:47 EDT 2022" starttimestamp="1648594670066" timestamp="12717918" timestamp2="12717918">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5323" _type="PauseCommand" date="Tue Mar 29 22:29:49 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12719438">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1520]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5322" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:29:49 EDT 2022" starttimestamp="1648594670066" timestamp="12719438" />
  <Command __id="5324" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:29:49 EDT 2022" starttimestamp="1648594670066" timestamp="12719521" />
  <Command __id="5325" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:29:49 EDT 2022" starttimestamp="1648594670066" timestamp="12719563" />
  <Command __id="5327" _type="PauseCommand" date="Tue Mar 29 22:29:53 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12723813">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4250]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5326" _type="ShellCommand" date="Tue Mar 29 22:29:53 EDT 2022" starttimestamp="1648594670066" timestamp="12723813" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5328" _type="ShellCommand" date="Tue Mar 29 22:29:54 EDT 2022" starttimestamp="1648594670066" timestamp="12723981" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5332" _type="PauseCommand" date="Tue Mar 29 22:29:55 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12725295">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1291]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="5331" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:29:55 EDT 2022" starttimestamp="1648594670066" timestamp="12725295" />
  <Command __id="5333" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:29:55 EDT 2022" starttimestamp="1648594670066" timestamp="12725388" />
  <Command __id="5334" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:29:55 EDT 2022" starttimestamp="1648594670066" timestamp="12725425" />
  <Command __id="5335" _type="MoveCaretCommand" caretOffset="4880" date="Tue Mar 29 22:29:56 EDT 2022" docOffset="4880" starttimestamp="1648594670066" timestamp="12726039" />
  <Command __id="5336" _type="MoveCaretCommand" caretOffset="4880" date="Tue Mar 29 22:29:56 EDT 2022" docOffset="4880" starttimestamp="1648594670066" timestamp="12726039" />
  <Command __id="5338" _type="PauseCommand" date="Tue Mar 29 22:29:58 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12728265">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2226]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5370" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12754169" type="Run" />
  <Command __id="5372" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12754528" type="Run" />
  <Command __id="5373" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12754561" type="Run" />
  <Command __id="5374" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12754907" type="Run" />
  <Command __id="5375" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:24 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12754932" type="Run" />
  <Command __id="5376" _type="ConsoleOutput" date="Tue Mar 29 22:30:25 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12754955" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.9546033702145381 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@76f621a
[com.sun.proxy.$Proxy1@76f621a]
Server0<-->Generic Client:0.09121399889474213 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@3ddac08b
[com.sun.proxy.$Proxy1@76f621a, com.sun.proxy.$Proxy1@3ddac08b]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.09121399889474213"), Diff(INSERT,"Server0<-->Generic Client:0.9546033702145381 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@76f621a¶[com.sun.proxy.$Proxy1@76f621a]¶Server0<-->Generic Client:0.09121399889474213 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@3ddac08b¶[com.sun.proxy.$Proxy1@76f621a, com.sun.proxy.$Proxy1@3ddac08b]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5377" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12754960" type="Run" />
  <Command __id="5378" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12754980" type="Run" />
  <Command __id="5379" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12755084" type="Run" />
  <Command __id="5380" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12755112" type="Run" />
  <Command __id="5381" _type="ConsoleOutput" date="Tue Mar 29 22:30:25 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12755382" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.9546033702145381 (Opened)¶Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@76f621a¶[com.sun.proxy.$Proxy1@76f621a]¶Server0<-->Generic Client:0.09121399889474213 (O"), Diff(INSERT,"mand processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC¶com.sun.proxy.$Proxy1@3ddac08b¶[com.sun.proxy.$Proxy1@76f621a, com.sun.proxy.$Proxy1@3ddac08b]"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5382" _type="ConsoleOutput" date="Tue Mar 29 22:30:25 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12755393" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="5383" _type="ConsoleOutput" date="Tue Mar 29 22:30:25 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12755410" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49224](remote),objID:[-4a6193bd:17fd8a8f11a:-7ffe, 4689604480070386969]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49224](remote),objID:[-4a6193bd:17fd8a8f11a:-7ffe, 4689604480070386969]]]]]]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49226](remote),objID:[4e4d1422:17fd8a8f00d:-7ffe, -7069880879798741811]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49224](remote),objID:[-4a6193bd:17fd8a8f11a:-7ffe, 4689604480070386969]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49226](remote),objID:[4e4d1422:17fd8a8f00d:-7ffe, -7069880879798741811]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener o"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRe"), Diff(EQUAL,"f "), Diff(DELETE,"c"), Diff(INSERT,"["), Diff(EQUAL,"li"), Diff(DELETE,"ent¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"veRef: [endpoint:[192.168.1.118:49224](remote),objID:[-4a6193bd:17fd8a8f11a:-7ffe, 4689604480070386969]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49224](remote),objID:[-4a6193bd:17fd8a8f11a:-7ffe, 4689604480070386969]]]]]]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49226](remote),objID:[4e4d1422:17fd8a8f00d:-7ffe, -7069880879798741811]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49224](remote),objID:[-4a6193bd:17fd8a8f11a:-7ffe, 4689604480070386969]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:49226](remote),objID:[4e4d1422:17fd8a8f00d:-7ffe, -7069880879798741811]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="5384" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12755582" type="Run" />
  <Command __id="5385" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:25 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12755582" type="Run" />
  <Command __id="5387" _type="PauseCommand" date="Tue Mar 29 22:30:27 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12757062">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1480]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="5386" _type="ShellCommand" date="Tue Mar 29 22:30:27 EDT 2022" starttimestamp="1648594670066" timestamp="12757062" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5389" _type="PauseCommand" date="Tue Mar 29 22:30:30 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="12760389">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3327]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="5413" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760698" type="Run" />
  <Command __id="5414" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760710" type="Run" />
  <Command __id="5415" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760732" type="Run" />
  <Command __id="5416" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760748" type="Run" />
  <Command __id="5417" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760769" type="Run" />
  <Command __id="5418" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760779" type="Run" />
  <Command __id="5419" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760790" type="Run" />
  <Command __id="5420" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760821" type="Run" />
  <Command __id="5421" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760841" type="Run" />
  <Command __id="5422" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760847" type="Run" />
  <Command __id="5423" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760860" type="Run" />
  <Command __id="5424" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760869" type="Run" />
  <Command __id="5425" _type="ConsoleOutput" date="Tue Mar 29 22:30:30 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12760874" type="ConsoleOutput">
    <outputString><![CDATA[ >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
 >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
 >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
 >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
 >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
 >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
 >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
 >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
 >>>> No valid commands entered.
PROPERTY CHANGE
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL," >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶"), Diff(INSERT,"PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶")]]]></diff>
  </Command>
  <Command __id="5427" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760891" type="Run" />
  <Command __id="5428" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760896" type="Run" />
  <Command __id="5429" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760909" type="Run" />
  <Command __id="5430" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760918" type="Run" />
  <Command __id="5431" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760931" type="Run" />
  <Command __id="5432" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760938" type="Run" />
  <Command __id="5433" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760979" type="Run" />
  <Command __id="5434" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12760986" type="Run" />
  <Command __id="5435" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12761014" type="Run" />
  <Command __id="5436" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12761024" type="Run" />
  <Command __id="5437" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:31 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12761035" type="Run" />
  <Command __id="5798" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764394" type="Run" />
  <Command __id="5799" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764424" type="Run" />
  <Command __id="5800" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764436" type="Run" />
  <Command __id="5801" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764441" type="Run" />
  <Command __id="5802" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764445" type="Run" />
  <Command __id="5803" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764459" type="Run" />
  <Command __id="5804" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764468" type="Run" />
  <Command __id="5805" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764477" type="Run" />
  <Command __id="5806" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764482" type="Run" />
  <Command __id="5807" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764494" type="Run" />
  <Command __id="5808" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764498" type="Run" />
  <Command __id="5809" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764508" type="Run" />
  <Command __id="5810" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764511" type="Run" />
  <Command __id="5811" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764519" type="Run" />
  <Command __id="5812" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764524" type="Run" />
  <Command __id="5813" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764529" type="Run" />
  <Command __id="5814" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764533" type="Run" />
  <Command __id="5815" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764542" type="Run" />
  <Command __id="5816" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764546" type="Run" />
  <Command __id="5817" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764555" type="Run" />
  <Command __id="5818" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764558" type="Run" />
  <Command __id="5819" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764565" type="Run" />
  <Command __id="5820" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764570" type="Run" />
  <Command __id="5821" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:30:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12764579" type="Run" />
  <Command __id="7675" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804033" type="Run" />
  <Command __id="7676" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804034" type="Run" />
  <Command __id="7677" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804034" type="Run" />
  <Command __id="7678" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804034" type="Run" />
  <Command __id="7679" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804034" type="Run" />
  <Command __id="7680" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804034" type="Run" />
  <Command __id="7681" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804035" type="Run" />
  <Command __id="7682" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804035" type="Run" />
  <Command __id="7683" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804035" type="Run" />
  <Command __id="7684" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804035" type="Run" />
  <Command __id="7685" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804035" type="Run" />
  <Command __id="7686" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804035" type="Run" />
  <Command __id="7687" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804035" type="Run" />
  <Command __id="7688" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804036" type="Run" />
  <Command __id="7689" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804036" type="Run" />
  <Command __id="7690" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804036" type="Run" />
  <Command __id="7691" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804036" type="Run" />
  <Command __id="7692" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804037" type="Run" />
  <Command __id="7693" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804037" type="Run" />
  <Command __id="7694" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804037" type="Run" />
  <Command __id="7695" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804037" type="Run" />
  <Command __id="7696" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12804037" type="Run" />
  <Command __id="7698" _type="PauseCommand" date="Tue Mar 29 22:31:22 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12812103">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8066]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7697" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 22:31:22 EDT 2022" starttimestamp="1648594670066" timestamp="12812103" />
  <Command __id="7699" _type="ExceptionCommand" date="Tue Mar 29 22:31:22 EDT 2022" starttimestamp="1648594670066" timestamp="12812550" type="Exception">
    <exceptionString><![CDATA[java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.net.SocketException: Connection reset
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:186)
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:140)
	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
	at java.base/java.io.DataInputStream.readByte(DataInputStream.java:270)
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:240)
	... 25 more
AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:49219 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
util.trace.TooManyTracesException: Printed > 2001 messages. Suspect infinite loop or recursion.
	at util.trace.Tracer.incNumTraces(Tracer.java:642)
	at util.trace.Tracer.printInfo(Tracer.java:349)
	at util.trace.Tracer.info(Tracer.java:336)
	at util.trace.TraceableInfo.maybePrintMessage(TraceableInfo.java:60)
	at util.trace.Traceable.announce(Traceable.java:121)
	at util.trace.port.nio.SelectCalled.newCase(SelectCalled.java:17)
	at inputport.nio.manager.ASelectionManager.run(ASelectionManager.java:106)
	at java.base/java.lang.Thread.run(Thread.java:834)
Process select operation exception:Printed > 2001 messages. Suspect infinite loop or recursion.
java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="7700" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12812787" type="Debug" />
  <Command __id="7701" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 22:31:22 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12812787" type="Run" />
  <Command __id="7702" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12812787" type="Debug" />
  <Command __id="7703" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 22:31:22 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12812787" type="Run" />
  <Command __id="7704" _type="ExceptionCommand" date="Tue Mar 29 22:31:23 EDT 2022" starttimestamp="1648594670066" timestamp="12812987" type="Exception">
    <exceptionString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:49216 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at assignments.util.inputParameters.ASimulationParametersController.callMethod(ASimulationParametersController.java:33)
	at util.interactiveMethodInvocation.ACommandToMethodCallTranslator.processCommands(ACommandToMethodCallTranslator.java:194)
	at assignments.util.inputParameters.ASimulationParametersController.processCommands(ASimulationParametersController.java:43)
	at coupledsims.AStandAloneTwoCoupledHalloweenSimulations.start(AStandAloneTwoCoupledHalloweenSimulations.java:99)
	at client.Client.main(Client.java:14)
Caused by: java.net.SocketException: Connection reset
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:186)
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:140)
	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
	at java.base/java.io.DataInputStream.readByte(DataInputStream.java:270)
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:240)
	... 17 more
java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="7705" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12813003" type="Debug" />
  <Command __id="7706" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:31:23 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12813003" type="Run" />
  <Command __id="7707" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12813003" type="Debug" />
  <Command __id="7708" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:31:23 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12813004" type="Run" />
  <Command __id="7709" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12813133" type="Debug" />
  <Command __id="7710" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:31:23 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12813133" type="Run" />
  <Command __id="7711" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:31:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12813133" type="Debug" />
  <Command __id="7712" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:31:23 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12813133" type="Run" />
  <Command __id="7714" _type="PauseCommand" date="Tue Mar 29 22:31:43 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="12833588">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[20455]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7713" _type="MoveCaretCommand" caretOffset="4227" date="Tue Mar 29 22:31:43 EDT 2022" docOffset="4227" starttimestamp="1648594670066" timestamp="12833588" />
  <Command __id="7715" _type="MoveCaretCommand" caretOffset="4227" date="Tue Mar 29 22:31:43 EDT 2022" docOffset="4227" starttimestamp="1648594670066" timestamp="12833594" />
  <Command __id="7717" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:31:44 EDT 2022" starttimestamp="1648594670066" timestamp="12834153" />
  <Command __id="7718" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:31:44 EDT 2022" starttimestamp="1648594670066" timestamp="12834153" />
  <Command __id="7720" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:31:44 EDT 2022" starttimestamp="1648594670066" timestamp="12834291" />
  <Command __id="7721" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:31:44 EDT 2022" starttimestamp="1648594670066" timestamp="12834291" />
  <Command __id="7722" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:31:44 EDT 2022" starttimestamp="1648594670066" timestamp="12834807" />
  <Command __id="7723" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:31:44 EDT 2022" starttimestamp="1648594670066" timestamp="12834807" />
  <Command __id="7724" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:31:45 EDT 2022" starttimestamp="1648594670066" timestamp="12835194" />
  <Command __id="7725" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:31:45 EDT 2022" starttimestamp="1648594670066" timestamp="12835194" />
  <Command __id="7727" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 22:31:46 EDT 2022" starttimestamp="1648594670066" timestamp="12835954" />
  <Command __id="7729" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 22:31:46 EDT 2022" starttimestamp="1648594670066" timestamp="12836146" />
  <Command __id="7730" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:31:46 EDT 2022" starttimestamp="1648594670066" timestamp="12836789" />
  <Command __id="7731" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:31:46 EDT 2022" starttimestamp="1648594670066" timestamp="12836790" />
  <Command __id="7733" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 22:31:47 EDT 2022" starttimestamp="1648594670066" timestamp="12837170" />
  <Command __id="7735" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 22:31:47 EDT 2022" starttimestamp="1648594670066" timestamp="12837363" />
  <DocumentChange __id="5299" _type="Replace" date="Tue Mar 29 22:29:43 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7539" docExpressionCount="754" docLength="8229" endLine="136" insertionLength="199" int_docASTNodeCount="1028" int_docActiveCodeLength="7389" int_docExpressionCount="739" int_docLength="8030" length="2" offset="4825" startLine="136" starttimestamp="1648594670066" timestamp="12713049">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			try {
				client.quit(0);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5304" _type="Replace" date="Tue Mar 29 22:29:46 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7534" docExpressionCount="754" docLength="8224" endLine="139" insertionLength="1" int_docASTNodeCount="1052" int_docActiveCodeLength="7533" int_docExpressionCount="753" int_docLength="8223" length="6" offset="4898" startLine="139" starttimestamp="1648594670066" timestamp="12716070">
    <deletedText><![CDATA[client]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5307" _type="Insert" date="Tue Mar 29 22:29:47 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7537" docExpressionCount="754" docLength="8227" length="3" offset="4899" repeat="3" starttimestamp="1648594670066" timestamp="12717025" timestamp2="12717050">
    <text><![CDATA[his]]></text>
  </DocumentChange>
  <DocumentChange __id="5316" _type="Delete" date="Tue Mar 29 22:29:47 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7536" docExpressionCount="754" docLength="8226" endLine="139" length="1" offset="4901" startLine="139" starttimestamp="1648594670066" timestamp="12717072">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="5319" _type="Insert" date="Tue Mar 29 22:29:47 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7537" docExpressionCount="754" docLength="8227" length="1" offset="4901" starttimestamp="1648594670066" timestamp="12717910">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="5329" _type="Delete" date="Tue Mar 29 22:29:54 EDT 2022" docASTNodeCount="1036" docActiveCodeLength="7436" docExpressionCount="745" docLength="8077" endLine="143" length="150" offset="4867" startLine="137" starttimestamp="1648594670066" timestamp="12723998">
    <text><![CDATA[// Need to quit
			try {
				this.quit(0);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}]]></text>
  </DocumentChange>
  <DocumentChange __id="5330" _type="Insert" date="Tue Mar 29 22:29:54 EDT 2022" docASTNodeCount="1041" docActiveCodeLength="7449" docExpressionCount="749" docLength="8090" length="13" offset="4867" starttimestamp="1648594670066" timestamp="12724004">
    <text><![CDATA[this.quit(0);]]></text>
  </DocumentChange>
  <DocumentChange __id="7716" _type="Delete" date="Tue Mar 29 22:31:44 EDT 2022" docASTNodeCount="1050" docActiveCodeLength="7484" docExpressionCount="755" docLength="8088" endLine="110" length="2" offset="4225" repeat="2" startLine="110" starttimestamp="1648594670066" timestamp="12834147" timestamp2="12834287">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7726" _type="Delete" date="Tue Mar 29 22:31:46 EDT 2022" docASTNodeCount="1055" docActiveCodeLength="7498" docExpressionCount="759" docLength="8086" endLine="112" length="2" offset="4288" repeat="2" startLine="112" starttimestamp="1648594670066" timestamp="12835949" timestamp2="12836143">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7732" _type="Delete" date="Tue Mar 29 22:31:47 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7499" docExpressionCount="759" docLength="8084" endLine="113" length="2" offset="4308" repeat="2" startLine="113" starttimestamp="1648594670066" timestamp="12837162" timestamp2="12837359">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7737" _type="PauseCommand" date="Tue Mar 29 22:31:52 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="12842618">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5255]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="7736" _type="Insert" date="Tue Mar 29 22:31:52 EDT 2022" docASTNodeCount="1055" docActiveCodeLength="7498" docExpressionCount="759" docLength="8086" length="2" offset="4308" starttimestamp="1648594670066" timestamp="12842618">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7738" _type="UndoCommand" date="Tue Mar 29 22:31:52 EDT 2022" starttimestamp="1648594670066" timestamp="12842626" />
  <DocumentChange __id="7739" _type="Insert" date="Tue Mar 29 22:31:53 EDT 2022" docASTNodeCount="1050" docActiveCodeLength="7484" docExpressionCount="755" docLength="8088" length="2" offset="4288" starttimestamp="1648594670066" timestamp="12842961">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7740" _type="UndoCommand" date="Tue Mar 29 22:31:53 EDT 2022" starttimestamp="1648594670066" timestamp="12842967" />
  <DocumentChange __id="7741" _type="Insert" date="Tue Mar 29 22:31:53 EDT 2022" docASTNodeCount="1041" docActiveCodeLength="7449" docExpressionCount="749" docLength="8090" length="2" offset="4225" starttimestamp="1648594670066" timestamp="12843347">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7742" _type="UndoCommand" date="Tue Mar 29 22:31:53 EDT 2022" starttimestamp="1648594670066" timestamp="12843353" />
  <DocumentChange __id="7743" _type="Delete" date="Tue Mar 29 22:31:53 EDT 2022" docASTNodeCount="1036" docActiveCodeLength="7436" docExpressionCount="745" docLength="8077" endLine="137" length="13" offset="4867" startLine="137" starttimestamp="1648594670066" timestamp="12843746">
    <text><![CDATA[this.quit(0);]]></text>
  </DocumentChange>
  <DocumentChange __id="7744" _type="Insert" date="Tue Mar 29 22:31:53 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7537" docExpressionCount="754" docLength="8227" length="150" offset="4867" starttimestamp="1648594670066" timestamp="12843754">
    <text><![CDATA[// Need to quit
			try {
				this.quit(0);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}]]></text>
  </DocumentChange>
  <Command __id="7745" _type="UndoCommand" date="Tue Mar 29 22:31:53 EDT 2022" starttimestamp="1648594670066" timestamp="12843762" />
  <DocumentChange __id="7746" _type="Delete" date="Tue Mar 29 22:31:54 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7536" docExpressionCount="754" docLength="8226" endLine="139" length="1" offset="4901" startLine="139" starttimestamp="1648594670066" timestamp="12844113">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="7747" _type="UndoCommand" date="Tue Mar 29 22:31:54 EDT 2022" starttimestamp="1648594670066" timestamp="12844124" />
  <DocumentChange __id="7748" _type="Insert" date="Tue Mar 29 22:31:54 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7537" docExpressionCount="754" docLength="8227" length="1" offset="4901" starttimestamp="1648594670066" timestamp="12844602">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="7749" _type="UndoCommand" date="Tue Mar 29 22:31:54 EDT 2022" starttimestamp="1648594670066" timestamp="12844607" />
  <DocumentChange __id="7750" _type="Delete" date="Tue Mar 29 22:31:55 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7534" docExpressionCount="754" docLength="8224" endLine="139" length="3" offset="4899" startLine="139" starttimestamp="1648594670066" timestamp="12844975">
    <text><![CDATA[his]]></text>
  </DocumentChange>
  <Command __id="7751" _type="UndoCommand" date="Tue Mar 29 22:31:55 EDT 2022" starttimestamp="1648594670066" timestamp="12844989" />
  <DocumentChange __id="7752" _type="Replace" date="Tue Mar 29 22:31:55 EDT 2022" docASTNodeCount="1053" docActiveCodeLength="7539" docExpressionCount="754" docLength="8229" endLine="139" insertionLength="6" int_docASTNodeCount="1052" int_docActiveCodeLength="7533" int_docExpressionCount="753" int_docLength="8223" length="1" offset="4898" startLine="139" starttimestamp="1648594670066" timestamp="12845316">
    <deletedText><![CDATA[t]]></deletedText>
    <insertedText><![CDATA[client]]></insertedText>
  </DocumentChange>
  <Command __id="7753" _type="UndoCommand" date="Tue Mar 29 22:31:55 EDT 2022" starttimestamp="1648594670066" timestamp="12845325" />
  <DocumentChange __id="7754" _type="Replace" date="Tue Mar 29 22:31:55 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7391" docExpressionCount="739" docLength="8032" endLine="144" insertionLength="2" int_docASTNodeCount="1028" int_docActiveCodeLength="7389" int_docExpressionCount="739" int_docLength="8030" length="199" offset="4825" startLine="136" starttimestamp="1648594670066" timestamp="12845685">
    <deletedText><![CDATA[		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			try {
				client.quit(0);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}]]></deletedText>
    <insertedText><![CDATA[		]]></insertedText>
  </DocumentChange>
  <Command __id="7755" _type="UndoCommand" date="Tue Mar 29 22:31:55 EDT 2022" starttimestamp="1648594670066" timestamp="12845702" />
  <DocumentChange __id="7756" _type="Delete" date="Tue Mar 29 22:31:56 EDT 2022" docASTNodeCount="1028" docActiveCodeLength="7387" docExpressionCount="739" docLength="8028" endLine="136" length="4" offset="4823" startLine="135" starttimestamp="1648594670066" timestamp="12846349">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="7757" _type="UndoCommand" date="Tue Mar 29 22:31:56 EDT 2022" starttimestamp="1648594670066" timestamp="12846363" />
  <DocumentChange __id="7758" _type="Delete" date="Tue Mar 29 22:31:56 EDT 2022" docASTNodeCount="1011" docActiveCodeLength="7284" docExpressionCount="730" docLength="7891" endLine="123" length="137" offset="4403" repeat="9" startLine="118" starttimestamp="1648594670066" timestamp="12846884" timestamp2="12846927">
    <text><![CDATA[try {
					client.quit(0);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}]]></text>
  </DocumentChange>
  <DocumentChange __id="7767" _type="Insert" date="Tue Mar 29 22:31:57 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7299" docExpressionCount="734" docLength="7906" length="15" offset="4403" starttimestamp="1648594670066" timestamp="12846936">
    <text><![CDATA[client.quit(0);]]></text>
  </DocumentChange>
  <Command __id="7768" _type="UndoCommand" date="Tue Mar 29 22:31:57 EDT 2022" starttimestamp="1648594670066" timestamp="12846945" />
  <Command __id="7770" _type="UndoCommand" date="Tue Mar 29 22:31:57 EDT 2022" starttimestamp="1648594670066" timestamp="12847467" />
  <DocumentChange __id="7769" _type="Delete" date="Tue Mar 29 22:31:57 EDT 2022" docASTNodeCount="1015" docActiveCodeLength="7298" docExpressionCount="733" docLength="7905" endLine="118" length="1" offset="4415" startLine="118" starttimestamp="1648594670066" timestamp="12847452">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="7772" _type="PauseCommand" date="Tue Mar 29 22:31:58 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12848708">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1241]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="7771" _type="Insert" date="Tue Mar 29 22:31:58 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7299" docExpressionCount="734" docLength="7906" length="1" offset="4415" starttimestamp="1648594670066" timestamp="12848708">
    <text><![CDATA[0]]></text>
  </DocumentChange>
  <Command __id="7773" _type="UndoCommand" date="Tue Mar 29 22:31:58 EDT 2022" starttimestamp="1648594670066" timestamp="12848716" />
  <DocumentChange __id="7774" _type="Delete" date="Tue Mar 29 22:31:59 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7294" docExpressionCount="734" docLength="7901" endLine="118" length="5" offset="4404" startLine="118" starttimestamp="1648594670066" timestamp="12849512">
    <text><![CDATA[lient]]></text>
  </DocumentChange>
  <Command __id="7775" _type="UndoCommand" date="Tue Mar 29 22:31:59 EDT 2022" starttimestamp="1648594670066" timestamp="12849523" />
  <DocumentChange __id="7776" _type="Replace" date="Tue Mar 29 22:31:59 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7297" docExpressionCount="734" docLength="7904" endLine="118" insertionLength="4" int_docASTNodeCount="1015" int_docActiveCodeLength="7293" int_docExpressionCount="733" int_docLength="7900" length="1" offset="4403" startLine="118" starttimestamp="1648594670066" timestamp="12849921">
    <deletedText><![CDATA[c]]></deletedText>
    <insertedText><![CDATA[this]]></insertedText>
  </DocumentChange>
  <Command __id="7777" _type="UndoCommand" date="Tue Mar 29 22:31:59 EDT 2022" starttimestamp="1648594670066" timestamp="12849928" />
  <DocumentChange __id="7778" _type="Replace" date="Tue Mar 29 22:32:00 EDT 2022" docASTNodeCount="1003" docActiveCodeLength="7231" docExpressionCount="724" docLength="7823" endLine="119" insertionLength="3" int_docASTNodeCount="1003" int_docActiveCodeLength="7228" int_docExpressionCount="724" int_docLength="7820" length="84" offset="4338" startLine="116" starttimestamp="1648594670066" timestamp="12850880">
    <deletedText><![CDATA[			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}]]></deletedText>
    <insertedText><![CDATA[			]]></insertedText>
  </DocumentChange>
  <Command __id="7779" _type="UndoCommand" date="Tue Mar 29 22:32:00 EDT 2022" starttimestamp="1648594670066" timestamp="12850889" />
  <DocumentChange __id="7780" _type="Delete" date="Tue Mar 29 22:32:01 EDT 2022" docASTNodeCount="1003" docActiveCodeLength="7226" docExpressionCount="724" docLength="7818" endLine="116" length="5" offset="4336" startLine="115" starttimestamp="1648594670066" timestamp="12851426">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="7781" _type="UndoCommand" date="Tue Mar 29 22:32:01 EDT 2022" starttimestamp="1648594670066" timestamp="12851436" />
  <DocumentChange __id="7782" _type="Insert" date="Tue Mar 29 22:32:01 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7292" docExpressionCount="734" docLength="7899" length="81" offset="4608" starttimestamp="1648594670066" timestamp="12851889">
    <text><![CDATA[if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}]]></text>
  </DocumentChange>
  <Command __id="7783" _type="UndoCommand" date="Tue Mar 29 22:32:01 EDT 2022" starttimestamp="1648594670066" timestamp="12851897" />
  <DocumentChange __id="7784" _type="Delete" date="Tue Mar 29 22:32:02 EDT 2022" docASTNodeCount="1018" docActiveCodeLength="7293" docExpressionCount="734" docLength="7897" endLine="113" length="2" offset="4312" startLine="113" starttimestamp="1648594670066" timestamp="12852770">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7785" _type="UndoCommand" date="Tue Mar 29 22:32:02 EDT 2022" starttimestamp="1648594670066" timestamp="12852781" />
  <DocumentChange __id="7786" _type="Delete" date="Tue Mar 29 22:32:03 EDT 2022" docASTNodeCount="1023" docActiveCodeLength="7307" docExpressionCount="738" docLength="7895" endLine="112" length="2" offset="4290" startLine="112" starttimestamp="1648594670066" timestamp="12853380">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7787" _type="UndoCommand" date="Tue Mar 29 22:32:03 EDT 2022" starttimestamp="1648594670066" timestamp="12853390" />
  <Command __id="7789" _type="UndoCommand" date="Tue Mar 29 22:32:03 EDT 2022" starttimestamp="1648594670066" timestamp="12853873" />
  <DocumentChange __id="7788" _type="Delete" date="Tue Mar 29 22:32:03 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7342" docExpressionCount="744" docLength="7893" endLine="110" length="2" offset="4225" startLine="110" starttimestamp="1648594670066" timestamp="12853862">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7791" _type="PauseCommand" date="Tue Mar 29 22:32:05 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12855091">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1218]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="7792" _type="UndoCommand" date="Tue Mar 29 22:32:05 EDT 2022" starttimestamp="1648594670066" timestamp="12855101" />
  <Command __id="7794" _type="PauseCommand" date="Tue Mar 29 22:32:16 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="12866407">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[11306]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7793" _type="ShellCommand" date="Tue Mar 29 22:32:16 EDT 2022" starttimestamp="1648594670066" timestamp="12866407" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7796" _type="PauseCommand" date="Tue Mar 29 22:32:31 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="12881024">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14617]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7795" _type="ShellCommand" date="Tue Mar 29 22:32:31 EDT 2022" starttimestamp="1648594670066" timestamp="12881024" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7797" _type="MoveCaretCommand" caretOffset="3793" date="Tue Mar 29 22:32:31 EDT 2022" docOffset="3793" starttimestamp="1648594670066" timestamp="12881102" />
  <Command __id="7798" _type="MoveCaretCommand" caretOffset="3793" date="Tue Mar 29 22:32:31 EDT 2022" docOffset="3793" starttimestamp="1648594670066" timestamp="12881102" />
  <DocumentChange __id="7790" _type="Insert" date="Tue Mar 29 22:32:05 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7344" docExpressionCount="744" docLength="7895" length="2" offset="3632" starttimestamp="1648594670066" timestamp="12855091">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <Command __id="7800" _type="PauseCommand" date="Tue Mar 29 22:32:32 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12882556">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1454]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="7801" _type="RedoCommand" date="Tue Mar 29 22:32:32 EDT 2022" starttimestamp="1648594670066" timestamp="12882567" />
  <Command __id="7803" _type="PauseCommand" date="Tue Mar 29 22:32:34 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12884225">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[RedoCommand]]></prev>
    <pause><![CDATA[1658]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7808" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:32:49 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12899851" type="Run" />
  <Command __id="7810" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 22:32:49 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12899852" type="Run" />
  <Command __id="7811" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:32:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12900070" type="Run" />
  <Command __id="7812" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:32:50 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12900085" type="Run" />
  <Command __id="7813" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:32:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12900088" type="Run" />
  <Command __id="7814" _type="ConsoleOutput" date="Tue Mar 29 22:32:50 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12900441" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.5933727609336956
]]></outputString>
    <diff><![CDATA[[Diff(DELETE," >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5933727609336956"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7816" _type="PauseCommand" date="Tue Mar 29 22:32:51 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12901651">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1210]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7835" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 22:33:02 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12912519" type="Run" />
  <Command __id="7837" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:02 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12912750" type="Run" />
  <Command __id="7838" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:02 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12912755" type="Run" />
  <Command __id="7839" _type="ConsoleOutput" date="Tue Mar 29 22:33:03 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12913060" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.007295717515551692
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.007295717515551692"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7841" _type="PauseCommand" date="Tue Mar 29 22:33:04 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12914123">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1063]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7840" _type="ShellCommand" date="Tue Mar 29 22:33:04 EDT 2022" starttimestamp="1648594670066" timestamp="12914123" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7842" _type="ShellCommand" date="Tue Mar 29 22:33:04 EDT 2022" starttimestamp="1648594670066" timestamp="12914590" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7843" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 22:33:04 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12914781" type="Run" />
  <Command __id="7844" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:05 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12915019" type="Run" />
  <Command __id="7845" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12915028" type="Run" />
  <Command __id="7846" _type="ConsoleOutput" date="Tue Mar 29 22:33:05 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12915621" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.7561697285775996
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"007295717515551692"), Diff(INSERT,"7561697285775996"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7848" _type="PauseCommand" date="Tue Mar 29 22:33:07 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12917389">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1768]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7852" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12924208" type="Run" />
  <Command __id="7854" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12924912" type="Run" />
  <Command __id="7855" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12924912" type="Run" />
  <Command __id="7856" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12924930" type="Run" />
  <Command __id="7857" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12925091" type="Run" />
  <Command __id="7858" _type="ConsoleOutput" date="Tue Mar 29 22:33:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12925141" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.7561697285775996"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7859" _type="ConsoleOutput" date="Tue Mar 29 22:33:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12925234" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.007295717515551692 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@d2fa0d5
[com.sun.proxy.$Proxy1@d2fa0d5]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client"), Diff(INSERT,"Server0<-->Generic Client:0.007295717515551692 (Opened)¶Client registered GIPC"), Diff(EQUAL,"¶"), Diff(DELETE,"C"), Diff(INSERT,"c"), Diff(EQUAL,"om"), Diff(DELETE,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,".sun.proxy.$Proxy1@d2fa0d5¶[com.sun.proxy.$Proxy1@d2fa0d5]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7860" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12925333" type="Run" />
  <Command __id="7861" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12925351" type="Run" />
  <Command __id="7862" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12925411" type="Run" />
  <Command __id="7863" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12925685" type="Run" />
  <Command __id="7864" _type="ConsoleOutput" date="Tue Mar 29 22:33:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12925719" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.7561697285775996 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@3a1ffc46
[com.sun.proxy.$Proxy1@d2fa0d5, com.sun.proxy.$Proxy1@3a1ffc46]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Server0<-->Generic Client:0."), Diff(DELETE,"007295717515551692"), Diff(INSERT,"7561697285775996"), Diff(EQUAL," (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@"), Diff(DELETE,"d2fa0d5"), Diff(INSERT,"3a1ffc46"), Diff(EQUAL,"¶[com.sun.proxy.$Proxy1@d2fa0d5"), Diff(DELETE,"]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]"), Diff(INSERT,", com.sun.proxy.$Proxy1@3a1ffc46"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="7865" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12925721" type="Run" />
  <Command __id="7866" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12925775" type="Run" />
  <Command __id="7867" _type="ConsoleOutput" date="Tue Mar 29 22:33:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12926058" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.7561697285775996 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@3a1ffc46¶[com.sun.proxy.$Proxy1@d2fa0d5, com.sun.proxy.$Proxy1@3a1ffc46]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7868" _type="ConsoleOutput" date="Tue Mar 29 22:33:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12926065" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7870" _type="PauseCommand" date="Tue Mar 29 22:33:17 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="12927413">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1348]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7869" _type="ShellCommand" date="Tue Mar 29 22:33:17 EDT 2022" starttimestamp="1648594670066" timestamp="12927413" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7872" _type="PauseCommand" date="Tue Mar 29 22:33:29 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="12939010">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11597]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="7871" _type="ConsoleInput" date="Tue Mar 29 22:33:29 EDT 2022" starttimestamp="1648594670066" timestamp="12939010" type="Exception">
    <outputString><![CDATA[q 0
]]></outputString>
  </Command>
  <Command __id="7873" _type="ConsoleOutput" date="Tue Mar 29 22:33:29 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12939078" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.quit(int)[0]
 >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]]"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.quit(int)[0]¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7874" _type="ConsoleOutput" date="Tue Mar 29 22:33:29 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12939121" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: quit
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]]
2
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.quit(int)[0]¶ >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit"), Diff(INSERT,"Command recieved for broadcast: quit¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7875" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12939559" type="Run" />
  <Command __id="7876" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12939559" type="Run" />
  <Command __id="7877" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12939574" type="Debug" />
  <Command __id="7878" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 22:33:29 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12939574" type="Run" />
  <Command __id="7879" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12939574" type="Debug" />
  <Command __id="7880" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 22:33:29 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12939574" type="Run" />
  <Command __id="7881" _type="ExceptionCommand" date="Tue Mar 29 22:33:29 EDT 2022" starttimestamp="1648594670066" timestamp="12939627" type="Exception">
    <exceptionString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:64869 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at assignments.util.inputParameters.ASimulationParametersController.callMethod(ASimulationParametersController.java:33)
	at util.interactiveMethodInvocation.ACommandToMethodCallTranslator.processCommands(ACommandToMethodCallTranslator.java:194)
	at assignments.util.inputParameters.ASimulationParametersController.processCommands(ASimulationParametersController.java:43)
	at coupledsims.AStandAloneTwoCoupledHalloweenSimulations.start(AStandAloneTwoCoupledHalloweenSimulations.java:99)
	at client.Client.main(Client.java:14)
Caused by: java.net.SocketException: Connection reset
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:186)
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:140)
	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
	at java.base/java.io.DataInputStream.readByte(DataInputStream.java:270)
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:240)
	... 17 more
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="7882" _type="ConsoleOutput" date="Tue Mar 29 22:33:29 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="12939849" type="ConsoleOutput">
    <outputString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:64876 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"ARead"), Diff(EQUAL,"Command "), Diff(DELETE,"recieved for broadcast: quit¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64879](remote),objID:[347818f0:17fd8ab8c78:-7ffe, -80305945267028036]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64872](remote),objID:[7e24d323:17fd8ab87e6:-7ffe, -1702342349051037624]]]]]"), Diff(INSERT,"for java.nio.channels.SocketChannel[connected local=/127.0.0.1:64876 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="7883" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12940276" type="Debug" />
  <Command __id="7884" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:33:30 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12940276" type="Run" />
  <Command __id="7885" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:33:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="12940276" type="Debug" />
  <Command __id="7886" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:33:30 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="12940276" type="Run" />
  <Command __id="7888" _type="PauseCommand" date="Tue Mar 29 22:34:11 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="12981190">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[40914]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7887" _type="MoveCaretCommand" caretOffset="4225" date="Tue Mar 29 22:34:11 EDT 2022" docOffset="4225" starttimestamp="1648594670066" timestamp="12981190" />
  <Command __id="7889" _type="MoveCaretCommand" caretOffset="4225" date="Tue Mar 29 22:34:11 EDT 2022" docOffset="4225" starttimestamp="1648594670066" timestamp="12981190" />
  <Command __id="7891" _type="InsertStringCommand" date="Tue Mar 29 22:34:11 EDT 2022" starttimestamp="1648594670066" timestamp="12981734" timestamp2="12981734">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7892" _type="InsertStringCommand" date="Tue Mar 29 22:34:11 EDT 2022" starttimestamp="1648594670066" timestamp="12981734" timestamp2="12981734">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7894" _type="InsertStringCommand" date="Tue Mar 29 22:34:11 EDT 2022" starttimestamp="1648594670066" timestamp="12981857" timestamp2="12981857">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7895" _type="InsertStringCommand" date="Tue Mar 29 22:34:11 EDT 2022" starttimestamp="1648594670066" timestamp="12981857" timestamp2="12981857">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7896" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:12 EDT 2022" starttimestamp="1648594670066" timestamp="12982256" />
  <Command __id="7897" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:12 EDT 2022" starttimestamp="1648594670066" timestamp="12982256" />
  <Command __id="7898" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:13 EDT 2022" starttimestamp="1648594670066" timestamp="12982976" />
  <Command __id="7899" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:13 EDT 2022" starttimestamp="1648594670066" timestamp="12982976" />
  <Command __id="7900" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:13 EDT 2022" starttimestamp="1648594670066" timestamp="12983650" />
  <Command __id="7901" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:13 EDT 2022" starttimestamp="1648594670066" timestamp="12983650" />
  <Command __id="7902" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:14 EDT 2022" starttimestamp="1648594670066" timestamp="12984096" />
  <Command __id="7903" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:14 EDT 2022" starttimestamp="1648594670066" timestamp="12984097" />
  <Command __id="7904" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 22:34:14 EDT 2022" starttimestamp="1648594670066" timestamp="12984532" />
  <Command __id="7905" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 22:34:14 EDT 2022" starttimestamp="1648594670066" timestamp="12984532" />
  <Command __id="7907" _type="InsertStringCommand" date="Tue Mar 29 22:34:15 EDT 2022" starttimestamp="1648594670066" timestamp="12985378" timestamp2="12985378">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7908" _type="InsertStringCommand" date="Tue Mar 29 22:34:15 EDT 2022" starttimestamp="1648594670066" timestamp="12985379" timestamp2="12985379">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7910" _type="InsertStringCommand" date="Tue Mar 29 22:34:15 EDT 2022" starttimestamp="1648594670066" timestamp="12985509" timestamp2="12985509">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7911" _type="InsertStringCommand" date="Tue Mar 29 22:34:15 EDT 2022" starttimestamp="1648594670066" timestamp="12985509" timestamp2="12985509">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7912" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:15 EDT 2022" starttimestamp="1648594670066" timestamp="12985845" />
  <Command __id="7913" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:15 EDT 2022" starttimestamp="1648594670066" timestamp="12985845" />
  <Command __id="7914" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:16 EDT 2022" starttimestamp="1648594670066" timestamp="12986238" />
  <Command __id="7915" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:16 EDT 2022" starttimestamp="1648594670066" timestamp="12986238" />
  <Command __id="7917" _type="InsertStringCommand" date="Tue Mar 29 22:34:16 EDT 2022" starttimestamp="1648594670066" timestamp="12986766" timestamp2="12986766">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7918" _type="InsertStringCommand" date="Tue Mar 29 22:34:16 EDT 2022" starttimestamp="1648594670066" timestamp="12986767" timestamp2="12986767">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7920" _type="InsertStringCommand" date="Tue Mar 29 22:34:16 EDT 2022" starttimestamp="1648594670066" timestamp="12986900" timestamp2="12986900">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7921" _type="InsertStringCommand" date="Tue Mar 29 22:34:16 EDT 2022" starttimestamp="1648594670066" timestamp="12986900" timestamp2="12986900">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7922" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:34:17 EDT 2022" starttimestamp="1648594670066" timestamp="12987507" />
  <Command __id="7923" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:34:17 EDT 2022" starttimestamp="1648594670066" timestamp="12987601" />
  <Command __id="7924" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:34:17 EDT 2022" starttimestamp="1648594670066" timestamp="12987641" />
  <Command __id="7926" _type="PauseCommand" date="Tue Mar 29 22:34:28 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="12998382">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10741]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <DocumentChange __id="7799" _type="Delete" date="Tue Mar 29 22:32:32 EDT 2022" docASTNodeCount="1029" docActiveCodeLength="7342" docExpressionCount="744" docLength="7893" endLine="93" length="2" offset="3632" startLine="92" starttimestamp="1648594670066" timestamp="12882556">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="7890" _type="Insert" date="Tue Mar 29 22:34:11 EDT 2022" docASTNodeCount="1023" docActiveCodeLength="7307" docExpressionCount="738" docLength="7895" length="2" offset="4225" repeat="2" starttimestamp="1648594670066" timestamp="12981729" timestamp2="12981853">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7906" _type="Insert" date="Tue Mar 29 22:34:15 EDT 2022" docASTNodeCount="1018" docActiveCodeLength="7293" docExpressionCount="734" docLength="7897" length="2" offset="4290" repeat="2" starttimestamp="1648594670066" timestamp="12985373" timestamp2="12985498">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="7916" _type="Insert" date="Tue Mar 29 22:34:16 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7292" docExpressionCount="734" docLength="7899" length="2" offset="4312" repeat="2" starttimestamp="1648594670066" timestamp="12986759" timestamp2="12986891">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="7925" _type="MoveCaretCommand" caretOffset="4336" date="Tue Mar 29 22:34:28 EDT 2022" docOffset="4336" starttimestamp="1648594670066" timestamp="12998382" />
  <Command __id="7927" _type="MoveCaretCommand" caretOffset="4336" date="Tue Mar 29 22:34:28 EDT 2022" docOffset="4336" starttimestamp="1648594670066" timestamp="12998382" />
  <DocumentChange __id="7928" _type="Insert" date="Tue Mar 29 22:34:28 EDT 2022" docASTNodeCount="1020" docActiveCodeLength="7310" docExpressionCount="737" docLength="7917" length="18" offset="4336" repeat="10" starttimestamp="1648594670066" timestamp="12998664" timestamp2="13003272">
    <text><![CDATA[
			
			client.q]]></text>
  </DocumentChange>
  <Command __id="7929" _type="InsertStringCommand" date="Tue Mar 29 22:34:28 EDT 2022" starttimestamp="1648594670066" timestamp="12998672" timestamp2="12998672">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7930" _type="InsertStringCommand" date="Tue Mar 29 22:34:28 EDT 2022" starttimestamp="1648594670066" timestamp="12998673" timestamp2="12998673">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7932" _type="InsertStringCommand" date="Tue Mar 29 22:34:29 EDT 2022" starttimestamp="1648594670066" timestamp="12999413" timestamp2="12999413">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7933" _type="InsertStringCommand" date="Tue Mar 29 22:34:29 EDT 2022" starttimestamp="1648594670066" timestamp="12999413" timestamp2="12999413">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7935" _type="InsertStringCommand" date="Tue Mar 29 22:34:30 EDT 2022" starttimestamp="1648594670066" timestamp="13000173" timestamp2="13000173">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="7936" _type="InsertStringCommand" date="Tue Mar 29 22:34:30 EDT 2022" starttimestamp="1648594670066" timestamp="13000173" timestamp2="13000173">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="7939" _type="PauseCommand" date="Tue Mar 29 22:34:31 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13001921">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1748]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="7938" _type="InsertStringCommand" date="Tue Mar 29 22:34:31 EDT 2022" starttimestamp="1648594670066" timestamp="13001921" timestamp2="13001921">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7940" _type="InsertStringCommand" date="Tue Mar 29 22:34:31 EDT 2022" starttimestamp="1648594670066" timestamp="13001921" timestamp2="13001921">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="7942" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002042" timestamp2="13002042">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7943" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002042" timestamp2="13002042">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="7945" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002178" timestamp2="13002178">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7946" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002178" timestamp2="13002178">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="7948" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002299" timestamp2="13002299">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7949" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002300" timestamp2="13002300">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="7951" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002400" timestamp2="13002400">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7952" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002400" timestamp2="13002400">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="7954" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002559" timestamp2="13002559">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7955" _type="InsertStringCommand" date="Tue Mar 29 22:34:32 EDT 2022" starttimestamp="1648594670066" timestamp="13002559" timestamp2="13002559">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="7956" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 22:34:32 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="13002564" />
  <Command __id="7959" _type="PauseCommand" date="Tue Mar 29 22:34:34 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13004072">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1508]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="7958" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 22:34:34 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="13004072" />
  <DocumentChange __id="7960" _type="Replace" date="Tue Mar 29 22:34:34 EDT 2022" docASTNodeCount="1021" docActiveCodeLength="7317" docExpressionCount="738" docLength="7924" endLine="117" insertionLength="8" int_docASTNodeCount="1018" int_docActiveCodeLength="7309" int_docExpressionCount="735" int_docLength="7916" length="1" offset="4353" startLine="117" starttimestamp="1648594670066" timestamp="13004076">
    <deletedText><![CDATA[q]]></deletedText>
    <insertedText><![CDATA[quit(i);]]></insertedText>
  </DocumentChange>
  <Command __id="7961" _type="InsertStringCommand" date="Tue Mar 29 22:34:34 EDT 2022" starttimestamp="1648594670066" timestamp="13004165" timestamp2="13004165">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7962" _type="InsertStringCommand" date="Tue Mar 29 22:34:34 EDT 2022" starttimestamp="1648594670066" timestamp="13004165" timestamp2="13004165">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7964" _type="InsertStringCommand" date="Tue Mar 29 22:34:35 EDT 2022" starttimestamp="1648594670066" timestamp="13005067" timestamp2="13005067">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="7965" _type="InsertStringCommand" date="Tue Mar 29 22:34:35 EDT 2022" starttimestamp="1648594670066" timestamp="13005067" timestamp2="13005067">
    <data><![CDATA[0]]></data>
  </Command>
  <Command __id="7966" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:34:36 EDT 2022" starttimestamp="1648594670066" timestamp="13006045" />
  <Command __id="7967" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 22:34:36 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="13006121" />
  <Command __id="7968" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:34:36 EDT 2022" starttimestamp="1648594670066" timestamp="13006139" />
  <Command __id="7969" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:34:36 EDT 2022" starttimestamp="1648594670066" timestamp="13006167" />
  <Command __id="7971" _type="PauseCommand" date="Tue Mar 29 22:34:39 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13009752">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3585]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7970" _type="ShellCommand" date="Tue Mar 29 22:34:39 EDT 2022" starttimestamp="1648594670066" timestamp="13009752" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7972" _type="ShellCommand" date="Tue Mar 29 22:34:39 EDT 2022" starttimestamp="1648594670066" timestamp="13009908" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7984" _type="PauseCommand" date="Tue Mar 29 22:34:41 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13011123">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1186]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="7983" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:34:41 EDT 2022" starttimestamp="1648594670066" timestamp="13011123" />
  <Command __id="7985" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:34:41 EDT 2022" starttimestamp="1648594670066" timestamp="13011224" />
  <Command __id="7986" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:34:41 EDT 2022" starttimestamp="1648594670066" timestamp="13011263" />
  <Command __id="7988" _type="PauseCommand" date="Tue Mar 29 22:34:43 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13013315">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2052]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="7987" _type="MoveCaretCommand" caretOffset="4752" date="Tue Mar 29 22:34:43 EDT 2022" docOffset="4752" starttimestamp="1648594670066" timestamp="13013315" />
  <Command __id="7989" _type="MoveCaretCommand" caretOffset="4752" date="Tue Mar 29 22:34:43 EDT 2022" docOffset="4752" starttimestamp="1648594670066" timestamp="13013315" />
  <Command __id="7991" _type="InsertStringCommand" date="Tue Mar 29 22:34:44 EDT 2022" starttimestamp="1648594670066" timestamp="13014006" timestamp2="13014006">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7992" _type="InsertStringCommand" date="Tue Mar 29 22:34:44 EDT 2022" starttimestamp="1648594670066" timestamp="13014007" timestamp2="13014007">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7994" _type="InsertStringCommand" date="Tue Mar 29 22:34:44 EDT 2022" starttimestamp="1648594670066" timestamp="13014136" timestamp2="13014136">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7995" _type="InsertStringCommand" date="Tue Mar 29 22:34:44 EDT 2022" starttimestamp="1648594670066" timestamp="13014136" timestamp2="13014136">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="7996" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:44 EDT 2022" starttimestamp="1648594670066" timestamp="13014407" />
  <Command __id="7997" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:44 EDT 2022" starttimestamp="1648594670066" timestamp="13014407" />
  <Command __id="7998" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:44 EDT 2022" starttimestamp="1648594670066" timestamp="13014808" />
  <Command __id="7999" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:44 EDT 2022" starttimestamp="1648594670066" timestamp="13014808" />
  <Command __id="8000" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:45 EDT 2022" starttimestamp="1648594670066" timestamp="13015294" />
  <Command __id="8001" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:45 EDT 2022" starttimestamp="1648594670066" timestamp="13015294" />
  <Command __id="8003" _type="InsertStringCommand" date="Tue Mar 29 22:34:46 EDT 2022" starttimestamp="1648594670066" timestamp="13015953" timestamp2="13015953">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8004" _type="InsertStringCommand" date="Tue Mar 29 22:34:46 EDT 2022" starttimestamp="1648594670066" timestamp="13015953" timestamp2="13015953">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8006" _type="InsertStringCommand" date="Tue Mar 29 22:34:46 EDT 2022" starttimestamp="1648594670066" timestamp="13016082" timestamp2="13016082">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8007" _type="InsertStringCommand" date="Tue Mar 29 22:34:46 EDT 2022" starttimestamp="1648594670066" timestamp="13016082" timestamp2="13016082">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8008" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:46 EDT 2022" starttimestamp="1648594670066" timestamp="13016408" />
  <Command __id="8009" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 22:34:46 EDT 2022" starttimestamp="1648594670066" timestamp="13016408" />
  <Command __id="8010" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:46 EDT 2022" starttimestamp="1648594670066" timestamp="13016780" />
  <Command __id="8011" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:34:46 EDT 2022" starttimestamp="1648594670066" timestamp="13016780" />
  <Command __id="8013" _type="InsertStringCommand" date="Tue Mar 29 22:34:47 EDT 2022" starttimestamp="1648594670066" timestamp="13017176" timestamp2="13017176">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8014" _type="InsertStringCommand" date="Tue Mar 29 22:34:47 EDT 2022" starttimestamp="1648594670066" timestamp="13017176" timestamp2="13017176">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8016" _type="InsertStringCommand" date="Tue Mar 29 22:34:47 EDT 2022" starttimestamp="1648594670066" timestamp="13017335" timestamp2="13017335">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="8017" _type="InsertStringCommand" date="Tue Mar 29 22:34:47 EDT 2022" starttimestamp="1648594670066" timestamp="13017335" timestamp2="13017335">
    <data><![CDATA[/]]></data>
  </Command>
  <DocumentChange __id="7963" _type="Replace" date="Tue Mar 29 22:34:35 EDT 2022" docASTNodeCount="1021" docActiveCodeLength="7317" docExpressionCount="738" docLength="7924" endLine="117" insertionLength="1" int_docASTNodeCount="1020" int_docActiveCodeLength="7316" int_docExpressionCount="737" int_docLength="7923" length="1" offset="4358" startLine="117" starttimestamp="1648594670066" timestamp="13005046">
    <deletedText><![CDATA[i]]></deletedText>
    <insertedText><![CDATA[0]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7973" _type="Delete" date="Tue Mar 29 22:34:39 EDT 2022" docASTNodeCount="1016" docActiveCodeLength="7302" docExpressionCount="734" docLength="7909" endLine="117" length="15" offset="4346" startLine="117" starttimestamp="1648594670066" timestamp="13009932">
    <text><![CDATA[client.quit(0);]]></text>
  </DocumentChange>
  <DocumentChange __id="7974" _type="Insert" date="Tue Mar 29 22:34:40 EDT 2022" docASTNodeCount="1033" docActiveCodeLength="7402" docExpressionCount="743" docLength="8043" length="134" offset="4346" repeat="9" starttimestamp="1648594670066" timestamp="13009937" timestamp2="13009955">
    <text><![CDATA[try {
				client.quit(0);
			} catch (RemoteException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}]]></text>
  </DocumentChange>
  <DocumentChange __id="7990" _type="Insert" date="Tue Mar 29 22:34:44 EDT 2022" docASTNodeCount="1027" docActiveCodeLength="7367" docExpressionCount="737" docLength="8045" length="2" offset="4752" repeat="2" starttimestamp="1648594670066" timestamp="13013999" timestamp2="13014129">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8002" _type="Insert" date="Tue Mar 29 22:34:46 EDT 2022" docASTNodeCount="1022" docActiveCodeLength="7353" docExpressionCount="733" docLength="8047" length="2" offset="4815" repeat="2" starttimestamp="1648594670066" timestamp="13015950" timestamp2="13016075">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8012" _type="Insert" date="Tue Mar 29 22:34:47 EDT 2022" docASTNodeCount="1020" docActiveCodeLength="7352" docExpressionCount="733" docLength="8049" length="2" offset="4836" repeat="2" starttimestamp="1648594670066" timestamp="13017168" timestamp2="13017324">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8019" _type="PauseCommand" date="Tue Mar 29 22:34:48 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13018556">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1221]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="8018" _type="Delete" date="Tue Mar 29 22:34:48 EDT 2022" docASTNodeCount="1022" docActiveCodeLength="7353" docExpressionCount="733" docLength="8047" endLine="135" length="2" offset="4836" startLine="135" starttimestamp="1648594670066" timestamp="13018556">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8020" _type="UndoCommand" date="Tue Mar 29 22:34:48 EDT 2022" starttimestamp="1648594670066" timestamp="13018568" />
  <DocumentChange __id="8021" _type="Delete" date="Tue Mar 29 22:34:49 EDT 2022" docASTNodeCount="1027" docActiveCodeLength="7367" docExpressionCount="737" docLength="8045" endLine="134" length="2" offset="4815" startLine="134" starttimestamp="1648594670066" timestamp="13018993">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8022" _type="UndoCommand" date="Tue Mar 29 22:34:49 EDT 2022" starttimestamp="1648594670066" timestamp="13019004" />
  <Command __id="8024" _type="UndoCommand" date="Tue Mar 29 22:34:49 EDT 2022" starttimestamp="1648594670066" timestamp="13019421" />
  <Command __id="8026" _type="PauseCommand" date="Tue Mar 29 22:34:51 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13021701">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[2280]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8025" _type="SelectTextCommand" caretOffset="4752" date="Tue Mar 29 22:34:51 EDT 2022" end="4833" start="4752" starttimestamp="1648594670066" timestamp="13021701" />
  <Command __id="8027" _type="SelectTextCommand" caretOffset="4752" date="Tue Mar 29 22:34:51 EDT 2022" end="4833" start="4752" starttimestamp="1648594670066" timestamp="13021701" />
  <Command __id="8028" _type="CopyCommand" date="Tue Mar 29 22:34:52 EDT 2022" starttimestamp="1648594670066" timestamp="13022090" />
  <Command __id="8030" _type="PauseCommand" date="Tue Mar 29 22:34:54 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13024865">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2775]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8029" _type="MoveCaretCommand" caretOffset="4838" date="Tue Mar 29 22:34:54 EDT 2022" docOffset="4838" starttimestamp="1648594670066" timestamp="13024865" />
  <Command __id="8031" _type="MoveCaretCommand" caretOffset="4838" date="Tue Mar 29 22:34:54 EDT 2022" docOffset="4838" starttimestamp="1648594670066" timestamp="13024865" />
  <DocumentChange __id="8023" _type="Delete" date="Tue Mar 29 22:34:49 EDT 2022" docASTNodeCount="1033" docActiveCodeLength="7402" docExpressionCount="743" docLength="8043" endLine="132" length="2" offset="4752" startLine="132" starttimestamp="1648594670066" timestamp="13019408">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8033" _type="PauseCommand" date="Tue Mar 29 22:34:56 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13026213">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1348]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="8032" _type="Insert" date="Tue Mar 29 22:34:56 EDT 2022" docASTNodeCount="1033" docActiveCodeLength="7406" docExpressionCount="743" docLength="8047" length="4" offset="4838" starttimestamp="1648594670066" timestamp="13026213">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="8034" _type="InsertStringCommand" date="Tue Mar 29 22:34:56 EDT 2022" starttimestamp="1648594670066" timestamp="13026225" timestamp2="13026225">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8035" _type="InsertStringCommand" date="Tue Mar 29 22:34:56 EDT 2022" starttimestamp="1648594670066" timestamp="13026225" timestamp2="13026225">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8037" _type="PasteCommand" date="Tue Mar 29 22:34:56 EDT 2022" starttimestamp="1648594670066" timestamp="13026480" />
  <Command __id="8038" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:34:57 EDT 2022" starttimestamp="1648594670066" timestamp="13026970" />
  <Command __id="8039" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:34:57 EDT 2022" starttimestamp="1648594670066" timestamp="13027060" />
  <Command __id="8040" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:34:57 EDT 2022" starttimestamp="1648594670066" timestamp="13027097" />
  <Command __id="8042" _type="PauseCommand" date="Tue Mar 29 22:34:58 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13028760">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1663]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="8068" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:16 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13046101" type="Run" />
  <Command __id="8071" _type="PauseCommand" date="Tue Mar 29 22:35:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13047955">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1854]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8073" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13051551" type="Run" />
  <Command __id="8075" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13051551" type="Run" />
  <Command __id="8076" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13051562" type="Run" />
  <Command __id="8077" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13051785" type="Run" />
  <Command __id="8078" _type="ConsoleOutput" date="Tue Mar 29 22:35:21 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13051907" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.9101771737177484 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@cefe798
[com.sun.proxy.$Proxy1@cefe798]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5538802005076159"), Diff(INSERT,"Server0<-->Generic Client:0.9101771737177484 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@cefe798¶[com.sun.proxy.$Proxy1@cefe798]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8079" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13052021" type="Run" />
  <Command __id="8080" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13052071" type="Run" />
  <Command __id="8081" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13052148" type="Run" />
  <Command __id="8082" _type="ConsoleOutput" date="Tue Mar 29 22:35:22 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13052325" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.9101771737177484 (O"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner o"), Diff(EQUAL,"pened"), Diff(DELETE,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Client registered GIPC¶com.sun.proxy.$Proxy1@cefe798¶[com.sun.proxy.$Proxy1@cefe798]"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8083" _type="ConsoleOutput" date="Tue Mar 29 22:35:22 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13052621" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8084" _type="ShellCommand" date="Tue Mar 29 22:35:22 EDT 2022" starttimestamp="1648594670066" timestamp="13052857" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8085" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13053465" type="Run" />
  <Command __id="8086" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13053743" type="Run" />
  <Command __id="8087" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13053778" type="Run" />
  <Command __id="8088" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:23 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13053829" type="Run" />
  <Command __id="8089" _type="ConsoleOutput" date="Tue Mar 29 22:35:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13053878" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.5538802005076159 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@7a101140
[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64922](remote),objID:[3fc372b:17fd8ad80b2:-7ffe, -1484781615463229338]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64922](remote),objID:[3fc372b:17fd8ad80b2:-7ffe, -1484781615463229338]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Server0<-->Generic Client:0.5538802005076159 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@7a101140¶[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]¶"), Diff(EQUAL,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:649"), Diff(DELETE,"14"), Diff(INSERT,"22"), Diff(EQUAL,"](remote),objID:["), Diff(DELETE,"29c0625c"), Diff(INSERT,"3fc372b"), Diff(EQUAL,":17fd8ad"), Diff(DELETE,"7955"), Diff(INSERT,"80b2"), Diff(EQUAL,":-7ffe, -"), Diff(DELETE,"3"), Diff(EQUAL,"14"), Diff(DELETE,"0526293641721330"), Diff(INSERT,"84781615463229338"), Diff(EQUAL,"]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]]"), Diff(INSERT,", Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64922](remote),objID:[3fc372b:17fd8ad80b2:-7ffe, -1484781615463229338]]]]]"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="8090" _type="ConsoleOutput" date="Tue Mar 29 22:35:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13053891" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.5538802005076159 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@7a101140¶[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64922](remote),objID:[3fc372b:17fd8ad80b2:-7ffe, -1484781615463229338]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64922](remote),objID:[3fc372b:17fd8ad80b2:-7ffe, -1484781615463229338]]]]]]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8092" _type="PauseCommand" date="Tue Mar 29 22:35:26 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13056082">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2191]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8091" _type="ShellCommand" date="Tue Mar 29 22:35:26 EDT 2022" starttimestamp="1648594670066" timestamp="13056082" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8094" _type="PauseCommand" date="Tue Mar 29 22:35:33 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="13063069">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6987]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8103" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13083781" type="Run" />
  <Command __id="8105" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:35:53 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13083810" type="Run" />
  <Command __id="8107" _type="PauseCommand" date="Tue Mar 29 22:36:39 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="13129162">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[45352]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8106" _type="ConsoleInput" date="Tue Mar 29 22:36:39 EDT 2022" starttimestamp="1648594670066" timestamp="13129162" type="Exception">
    <outputString><![CDATA[s "move 50 -50"
]]></outputString>
  </Command>
  <Command __id="8108" _type="ConsoleOutput" date="Tue Mar 29 22:36:39 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13129223" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[move 50 -50]
IPC Mechanism
GIPC
using gipc proxy server
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:move 50 -50
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener."), Diff(DELETE,"ipcMechanism(util.interactiveMethodInvocation."), Diff(INSERT,"simulationCommand(java.lang.String)[move 50 -50]¶"), Diff(EQUAL,"IPC"), Diff(INSERT," "), Diff(EQUAL,"Mechanism"), Diff(DELETE,")["), Diff(INSERT,"¶"), Diff(EQUAL,"GIPC"), Diff(DELETE,"]"), Diff(INSERT,"¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="8109" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13129269" type="Run" />
  <Command __id="8110" _type="ConsoleOutput" date="Tue Mar 29 22:36:39 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13129284" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: move 50 -50
[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]
2
com.sun.proxy.$Proxy1@cefe798
com.sun.proxy.$Proxy1@7a101140
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)["), Diff(INSERT,"Command recieved for broadcast: "), Diff(EQUAL,"move 50 -50"), Diff(DELETE,"]"), Diff(EQUAL,"¶"), Diff(DELETE,"IPC Mechanism¶GIPC¶using gipc proxy server¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:move 50 -50¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]¶2¶com.sun.proxy.$Proxy1@cefe798¶com.sun.proxy.$Proxy1@7a101140"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8111" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13129321" type="Run" />
  <Command __id="8112" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:39 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13129330" type="Run" />
  <Command __id="8113" _type="ConsoleOutput" date="Tue Mar 29 22:36:39 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13129725" type="ConsoleOutput">
    <outputString><![CDATA[ >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Command recieved for broadcast: move 50 -50¶[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]¶2"), Diff(INSERT," >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@cefe798¶com.sun.proxy.$Proxy1@7a101140"), Diff(INSERT,"mand being sent from coupler:quit"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8114" _type="ConsoleOutput" date="Tue Mar 29 22:36:39 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13129823" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: quit
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64922](remote),objID:[3fc372b:17fd8ad80b2:-7ffe, -1484781615463229338]]]]]]
2
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]]
Command recieved for broadcast: quit
[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]
2
com.sun.proxy.$Proxy1@cefe798
com.sun.proxy.$Proxy1@7a101140
]]></outputString>
    <diff><![CDATA[[Diff(DELETE," >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit"), Diff(INSERT,"Command recieved for broadcast: quit¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64922](remote),objID:[3fc372b:17fd8ad80b2:-7ffe, -1484781615463229338]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]]¶Command recieved for broadcast: quit¶[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]¶2¶com.sun.proxy.$Proxy1@cefe798¶com.sun.proxy.$Proxy1@7a101140"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8115" _type="ConsoleOutput" date="Tue Mar 29 22:36:39 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13129826" type="ConsoleOutput">
    <outputString><![CDATA[ >>>> No valid commands entered.
PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:quit
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Command recieved for broadcast: quit¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64922](remote),objID:[3fc372b:17fd8ad80b2:-7ffe, -1484781615463229338]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64914](remote),objID:[29c0625c:17fd8ad7955:-7ffe, -3140526293641721330]]]]]¶Command recieved for broadcast: quit¶[com.sun.proxy.$Proxy1@cefe798, com.sun.proxy.$Proxy1@7a101140]¶2¶com.sun.proxy.$Proxy1@cefe798¶com.sun.proxy.$Proxy1@7a101140"), Diff(INSERT," >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8116" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13129947" type="Debug" />
  <Command __id="8117" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13129947" type="Run" />
  <Command __id="8118" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13129947" type="Debug" />
  <Command __id="8119" _type="ProgramExecutionEvent" className="/A5/src/server/Server.java" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13129947" type="Run" />
  <Command __id="8120" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13130135" type="Debug" />
  <Command __id="8121" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13130135" type="Run" />
  <Command __id="8122" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13130135" type="Debug" />
  <Command __id="8123" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13130135" type="Run" />
  <Command __id="8124" _type="ExceptionCommand" date="Tue Mar 29 22:36:40 EDT 2022" starttimestamp="1648594670066" timestamp="13130293" type="Exception">
    <exceptionString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:64919 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at inputport.rpc.AnAbstractReceivedCallInvoker.invokeMethod(AnAbstractReceivedCallInvoker.java:36)
	at inputport.rpc.duplex.ADuplexReceivedCallInvoker.invokeMethod(ADuplexReceivedCallInvoker.java:34)
	at inputport.rpc.AnAbstractReceivedCallInvoker.messageReceived(AnAbstractReceivedCallInvoker.java:53)
	at inputport.rpc.duplex.AnAsynchronousSingleThreadDuplexReceivedCallInvoker.run(AnAsynchronousSingleThreadDuplexReceivedCallInvoker.java:97)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.net.SocketException: Connection reset
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:186)
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:140)
	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
	at java.base/java.io.DataInputStream.readByte(DataInputStream.java:270)
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:240)
	... 17 more
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8125" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13130647" type="Debug" />
  <Command __id="8126" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13130647" type="Run" />
  <Command __id="8127" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13130647" type="Debug" />
  <Command __id="8128" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:36:40 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13130647" type="Run" />
  <Command __id="8130" _type="PauseCommand" date="Tue Mar 29 22:37:00 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="13150771">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[20124]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8129" _type="MoveCaretCommand" caretOffset="4336" date="Tue Mar 29 22:37:00 EDT 2022" docOffset="4336" starttimestamp="1648594670066" timestamp="13150771" />
  <Command __id="8131" _type="MoveCaretCommand" caretOffset="4336" date="Tue Mar 29 22:37:00 EDT 2022" docOffset="4336" starttimestamp="1648594670066" timestamp="13150771" />
  <DocumentChange __id="8036" _type="Replace" date="Tue Mar 29 22:34:56 EDT 2022" docASTNodeCount="1046" docActiveCodeLength="7469" docExpressionCount="753" docLength="8125" endLine="137" insertionLength="80" int_docASTNodeCount="1033" int_docActiveCodeLength="7404" int_docExpressionCount="743" int_docLength="8045" length="2" offset="4840" startLine="137" starttimestamp="1648594670066" timestamp="13026472">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}]]></insertedText>
  </DocumentChange>
  <Command __id="8133" _type="PauseCommand" date="Tue Mar 29 22:37:11 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="13161323">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10552]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="8134" _type="InsertStringCommand" date="Tue Mar 29 22:37:11 EDT 2022" starttimestamp="1648594670066" timestamp="13161340" timestamp2="13161340">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8135" _type="InsertStringCommand" date="Tue Mar 29 22:37:11 EDT 2022" starttimestamp="1648594670066" timestamp="13161340" timestamp2="13161340">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8137" _type="PauseCommand" date="Tue Mar 29 22:37:14 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13164660">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3320]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8136" _type="SelectTextCommand" caretOffset="4847" date="Tue Mar 29 22:37:14 EDT 2022" end="4882" start="4847" starttimestamp="1648594670066" timestamp="13164660" />
  <Command __id="8138" _type="SelectTextCommand" caretOffset="4847" date="Tue Mar 29 22:37:14 EDT 2022" end="4882" start="4847" starttimestamp="1648594670066" timestamp="13164660" />
  <Command __id="8139" _type="CopyCommand" date="Tue Mar 29 22:37:14 EDT 2022" starttimestamp="1648594670066" timestamp="13164906" />
  <Command __id="8141" _type="PauseCommand" date="Tue Mar 29 22:37:16 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13166861">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1955]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8140" _type="MoveCaretCommand" caretOffset="4341" date="Tue Mar 29 22:37:16 EDT 2022" docOffset="4341" starttimestamp="1648594670066" timestamp="13166861" />
  <Command __id="8142" _type="MoveCaretCommand" caretOffset="4341" date="Tue Mar 29 22:37:16 EDT 2022" docOffset="4341" starttimestamp="1648594670066" timestamp="13166861" />
  <DocumentChange __id="8132" _type="Insert" date="Tue Mar 29 22:37:11 EDT 2022" docASTNodeCount="1046" docActiveCodeLength="7474" docExpressionCount="753" docLength="8130" length="5" offset="4336" starttimestamp="1648594670066" timestamp="13161323">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="8144" _type="PauseCommand" date="Tue Mar 29 22:37:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13167943">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1082]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="8143" _type="Insert" date="Tue Mar 29 22:37:18 EDT 2022" docASTNodeCount="1046" docActiveCodeLength="7479" docExpressionCount="753" docLength="8135" length="5" offset="4341" starttimestamp="1648594670066" timestamp="13167943">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="8145" _type="InsertStringCommand" date="Tue Mar 29 22:37:18 EDT 2022" starttimestamp="1648594670066" timestamp="13167968" timestamp2="13167968">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8146" _type="InsertStringCommand" date="Tue Mar 29 22:37:18 EDT 2022" starttimestamp="1648594670066" timestamp="13167968" timestamp2="13167968">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8148" _type="PasteCommand" date="Tue Mar 29 22:37:18 EDT 2022" starttimestamp="1648594670066" timestamp="13168420" />
  <Command __id="8150" _type="PauseCommand" date="Tue Mar 29 22:37:22 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13172208">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3788]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8149" _type="MoveCaretCommand" caretOffset="4525" date="Tue Mar 29 22:37:22 EDT 2022" docOffset="4525" starttimestamp="1648594670066" timestamp="13172208" />
  <Command __id="8151" _type="MoveCaretCommand" caretOffset="4525" date="Tue Mar 29 22:37:22 EDT 2022" docOffset="4525" starttimestamp="1648594670066" timestamp="13172208" />
  <Command __id="8153" _type="InsertStringCommand" date="Tue Mar 29 22:37:22 EDT 2022" starttimestamp="1648594670066" timestamp="13172557" timestamp2="13172557">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8154" _type="InsertStringCommand" date="Tue Mar 29 22:37:22 EDT 2022" starttimestamp="1648594670066" timestamp="13172557" timestamp2="13172557">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8147" _type="Replace" date="Tue Mar 29 22:37:18 EDT 2022" docASTNodeCount="1055" docActiveCodeLength="7514" docExpressionCount="759" docLength="8170" endLine="117" insertionLength="38" int_docASTNodeCount="1046" int_docActiveCodeLength="7476" int_docExpressionCount="753" int_docLength="8132" length="3" offset="4343" startLine="117" starttimestamp="1648594670066" timestamp="13168408">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			if (aNewCommand.charAt(0) == 'q') {]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8152" _type="Insert" date="Tue Mar 29 22:37:22 EDT 2022" docASTNodeCount="1055" docActiveCodeLength="7519" docExpressionCount="759" docLength="8175" length="5" offset="4525" starttimestamp="1648594670066" timestamp="13172545">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="8156" _type="PauseCommand" date="Tue Mar 29 22:37:23 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13173591">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1034]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="8157" _type="InsertStringCommand" date="Tue Mar 29 22:37:23 EDT 2022" starttimestamp="1648594670066" timestamp="13173613" timestamp2="13173613">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="8158" _type="InsertStringCommand" date="Tue Mar 29 22:37:23 EDT 2022" starttimestamp="1648594670066" timestamp="13173613" timestamp2="13173613">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="8160" _type="PauseCommand" date="Tue Mar 29 22:37:25 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13175845">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2232]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8184" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 22:37:42 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13191988" type="Run" />
  <Command __id="8186" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:37:42 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13192240" type="Run" />
  <Command __id="8187" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:37:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13192243" type="Run" />
  <Command __id="8188" _type="ConsoleOutput" date="Tue Mar 29 22:37:42 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13192563" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.6945403311024885
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.6945403311024885"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8189" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 22:37:43 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13193222" type="Run" />
  <Command __id="8190" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:37:43 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13193460" type="Run" />
  <Command __id="8191" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:37:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13193465" type="Run" />
  <Command __id="8192" _type="ShellCommand" date="Tue Mar 29 22:37:44 EDT 2022" starttimestamp="1648594670066" timestamp="13194059" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8193" _type="ConsoleOutput" date="Tue Mar 29 22:37:44 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13194092" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.15330606896524712
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"6945403311024885"), Diff(INSERT,"15330606896524712"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8195" _type="PauseCommand" date="Tue Mar 29 22:37:46 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13196800">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2708]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8210" _type="ShellCommand" date="Tue Mar 29 22:37:54 EDT 2022" starttimestamp="1648594670066" timestamp="13204932" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8212" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:37:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13205716" type="Run" />
  <Command __id="8213" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:37:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13205977" type="Run" />
  <Command __id="8214" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:37:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13206011" type="Run" />
  <Command __id="8215" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:37:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13206060" type="Run" />
  <Command __id="8216" _type="ConsoleOutput" date="Tue Mar 29 22:37:56 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13206094" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.15330606896524712 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@7ecc21f0
[com.sun.proxy.$Proxy1@6a153d5, com.sun.proxy.$Proxy1@7ecc21f0]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52917](remote),objID:[79fa7f61:17fd8afd363:-7ffe, -8060254201031092672]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52910](remote),objID:[-72a19953:17fd8afc887:-7ffe, -1646717050041382317]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52917](remote),objID:[79fa7f61:17fd8afd363:-7ffe, -8060254201031092672]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client"), Diff(INSERT,"Server0<-->Generic Client:0.15330606896524712 (Opened)¶Client registered GIPC"), Diff(EQUAL,"¶"), Diff(DELETE,"C"), Diff(INSERT,"c"), Diff(EQUAL,"om"), Diff(DELETE,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,".sun.proxy.$Proxy1@7ecc21f0¶[com.sun.proxy.$Proxy1@6a153d5, com.sun.proxy.$Proxy1@7ecc21f0]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52917](remote),objID:[79fa7f61:17fd8afd363:-7ffe, -8060254201031092672]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52910](remote),objID:[-72a19953:17fd8afc887:-7ffe, -1646717050041382317]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52917](remote),objID:[79fa7f61:17fd8afd363:-7ffe, -8060254201031092672]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8217" _type="ConsoleOutput" date="Tue Mar 29 22:37:56 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13206106" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.15330606896524712 (Opened)¶Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@7ecc21f0¶[com.sun.proxy.$Proxy1@6a153d5, com.sun.proxy.$Proxy1@7ecc21f0]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52917](remote),objID:[79fa7f61:17fd8afd363:-7ffe, -8060254201031092672]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52910](remote),objID:[-72a19953:17fd8afc887:-7ffe, -1646717050041382317]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:52917](remote),objID:[79fa7f61:17fd8afd363:-7ffe, -8060254201031092672]]]]]]"), Diff(INSERT,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8219" _type="PauseCommand" date="Tue Mar 29 22:38:00 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13210191">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4085]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8218" _type="ShellCommand" date="Tue Mar 29 22:38:00 EDT 2022" starttimestamp="1648594670066" timestamp="13210191" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8220" _type="MoveCaretCommand" caretOffset="4528" date="Tue Mar 29 22:38:00 EDT 2022" docOffset="4528" starttimestamp="1648594670066" timestamp="13210274" />
  <Command __id="8221" _type="MoveCaretCommand" caretOffset="4528" date="Tue Mar 29 22:38:00 EDT 2022" docOffset="4528" starttimestamp="1648594670066" timestamp="13210274" />
  <DocumentChange __id="8155" _type="Replace" date="Tue Mar 29 22:37:23 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7520" docExpressionCount="759" docLength="8176" endLine="125" insertionLength="4" int_docASTNodeCount="1055" int_docActiveCodeLength="7516" int_docExpressionCount="759" int_docLength="8172" length="3" offset="4527" startLine="125" starttimestamp="1648594670066" timestamp="13173591">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8162" _type="Replace" date="Tue Mar 29 22:37:26 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7521" docExpressionCount="759" docLength="8177" endLine="124" insertionLength="6" int_docASTNodeCount="1054" int_docActiveCodeLength="7515" int_docExpressionCount="759" int_docLength="8171" length="5" offset="4519" startLine="123" starttimestamp="1648594670066" timestamp="13176790">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8163" _type="Replace" date="Tue Mar 29 22:37:26 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7522" docExpressionCount="759" docLength="8178" endLine="123" insertionLength="7" int_docASTNodeCount="1050" int_docActiveCodeLength="7494" int_docExpressionCount="756" int_docLength="8171" length="6" offset="4492" startLine="122" starttimestamp="1648594670066" timestamp="13176793">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8164" _type="Replace" date="Tue Mar 29 22:37:26 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7523" docExpressionCount="759" docLength="8179" endLine="122" insertionLength="7" int_docASTNodeCount="1054" int_docActiveCodeLength="7516" int_docExpressionCount="759" int_docLength="8172" length="6" offset="4452" startLine="121" starttimestamp="1648594670066" timestamp="13176796">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8165" _type="Replace" date="Tue Mar 29 22:37:26 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7524" docExpressionCount="759" docLength="8180" endLine="121" insertionLength="6" int_docASTNodeCount="1054" int_docActiveCodeLength="7518" int_docExpressionCount="759" int_docLength="8174" length="5" offset="4417" startLine="120" starttimestamp="1648594670066" timestamp="13176799">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8166" _type="Replace" date="Tue Mar 29 22:37:26 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7525" docExpressionCount="759" docLength="8181" endLine="120" insertionLength="7" int_docASTNodeCount="1054" int_docActiveCodeLength="7518" int_docExpressionCount="759" int_docLength="8174" length="6" offset="4396" startLine="119" starttimestamp="1648594670066" timestamp="13176801">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8167" _type="Replace" date="Tue Mar 29 22:37:26 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7523" docExpressionCount="759" docLength="8179" endLine="119" insertionLength="8" int_docASTNodeCount="1054" int_docActiveCodeLength="7515" int_docExpressionCount="759" int_docLength="8171" length="10" offset="4381" startLine="117" starttimestamp="1648594670066" timestamp="13176804">
    <deletedText><![CDATA[
			
			]]></deletedText>
    <insertedText><![CDATA[

				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8168" _type="Replace" date="Tue Mar 29 22:37:26 EDT 2022" docASTNodeCount="1054" docActiveCodeLength="7523" docExpressionCount="759" docLength="8179" endLine="117" insertionLength="3" int_docASTNodeCount="1054" int_docActiveCodeLength="7520" int_docExpressionCount="759" int_docLength="8176" length="3" offset="4343" startLine="117" starttimestamp="1648594670066" timestamp="13176806">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			]]></insertedText>
  </DocumentChange>
  <Command __id="8223" _type="PauseCommand" date="Tue Mar 29 22:38:02 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13212737">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2463]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="8307" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13244507" type="Run" />
  <Command __id="8309" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13244956" type="Run" />
  <Command __id="8310" _type="ConsoleOutput" date="Tue Mar 29 22:38:35 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13244970" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.011363342906352547 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:"), Diff(INSERT,"Server0<-->"), Diff(EQUAL,"Generic Client:0.011363342906352547"), Diff(INSERT," (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8311" _type="ConsoleOutput" date="Tue Mar 29 22:38:35 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13245046" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@74367d51
[com.sun.proxy.$Proxy1@74367d51]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.011363342906352547 (Opened)"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@74367d51¶[com.sun.proxy.$Proxy1@74367d51]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8312" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13245095" type="Run" />
  <Command __id="8313" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13245165" type="Run" />
  <Command __id="8314" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:35 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13245259" type="Run" />
  <Command __id="8315" _type="ConsoleOutput" date="Tue Mar 29 22:38:35 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13245465" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@74367d51¶[com.sun.proxy.$Proxy1@74367d51]"), Diff(INSERT,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8316" _type="ConsoleOutput" date="Tue Mar 29 22:38:36 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13246073" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8317" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13246234" type="Run" />
  <Command __id="8318" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13246548" type="Run" />
  <Command __id="8319" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13246588" type="Run" />
  <Command __id="8321" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13246642" type="Run" />
  <Command __id="8320" _type="ConsoleOutput" date="Tue Mar 29 22:38:36 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13246643" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.21088645290435326 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@71c68b2e
[com.sun.proxy.$Proxy1@74367d51, com.sun.proxy.$Proxy1@71c68b2e]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]"), Diff(INSERT,"Server0<-->Generic Client:0.21088645290435326 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@71c68b2e¶[com.sun.proxy.$Proxy1@74367d51, com.sun.proxy.$Proxy1@71c68b2e"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="8322" _type="ConsoleOutput" date="Tue Mar 29 22:38:37 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13246938" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.21088645290435326 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@71c68b2e¶[com.sun.proxy.$Proxy1@74367d51, com.sun.proxy.$Proxy1@71c68b2e"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="8323" _type="ConsoleOutput" date="Tue Mar 29 22:38:37 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13246948" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRe"), Diff(INSERT,"added server as a property change listener o"), Diff(EQUAL,"f "), Diff(DELETE,"["), Diff(INSERT,"c"), Diff(EQUAL,"li"), Diff(DELETE,"veRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]]"), Diff(INSERT,"ent¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8324" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13247627" type="Run" />
  <Command __id="8325" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13247628" type="Run" />
  <Command __id="8327" _type="PauseCommand" date="Tue Mar 29 22:38:49 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="13259641">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12013]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8329" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:38:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13261667" type="Run" />
  <Command __id="8332" _type="PauseCommand" date="Tue Mar 29 22:38:54 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13264770">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3103]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8331" _type="ConsoleInput" date="Tue Mar 29 22:38:54 EDT 2022" starttimestamp="1648594670066" timestamp="13264770" type="Exception">
    <outputString><![CDATA[i gipc
]]></outputString>
  </Command>
  <Command __id="8333" _type="ConsoleOutput" date="Tue Mar 29 22:38:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13264825" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="8335" _type="PauseCommand" date="Tue Mar 29 22:39:00 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="13270047">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5222]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8343" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:39:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13276602" type="Run" />
  <Command __id="8345" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:39:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13276616" type="Run" />
  <Command __id="8347" _type="PauseCommand" date="Tue Mar 29 22:39:09 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13279544">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2928]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8346" _type="ConsoleInput" date="Tue Mar 29 22:39:09 EDT 2022" starttimestamp="1648594670066" timestamp="13279544" type="Exception">
    <outputString><![CDATA[s "take 3"
]]></outputString>
  </Command>
  <Command __id="8348" _type="ConsoleOutput" date="Tue Mar 29 22:39:09 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13279627" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[take 3]
IPC Mechanism
NIO
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcased command: move 50 -50¶PROPERTY CHANGE¶executed command"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[take 3]¶IPC Mechanism¶NIO"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8349" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:39:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13279719" type="Run" />
  <Command __id="8350" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:39:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13279722" type="Run" />
  <Command __id="8351" _type="ConsoleOutput" date="Tue Mar 29 22:39:09 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13279759" type="ConsoleOutput">
    <outputString><![CDATA[PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:take 3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[take 3]¶IPC Mechanism¶NIO"), Diff(INSERT,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:take 3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8352" _type="ConsoleOutput" date="Tue Mar 29 22:39:09 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13279776" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: take 3
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]]
2
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:take 3"), Diff(INSERT,"Command recieved for broadcast: take 3¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8353" _type="ConsoleOutput" date="Tue Mar 29 22:39:09 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13279780" type="ConsoleOutput">
    <outputString><![CDATA[recieved broadcased command: take 3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Command "), Diff(EQUAL,"recieved "), Diff(DELETE,"for "), Diff(EQUAL,"broadcas"), Diff(DELETE,"t: take 3¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]"), Diff(INSERT,"ed command: take 3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8354" _type="ConsoleOutput" date="Tue Mar 29 22:39:10 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13280065" type="ConsoleOutput">
    <outputString><![CDATA[PROPERTY CHANGE
executed command
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcas"), Diff(INSERT,"PROPERTY CHANGE¶execut"), Diff(EQUAL,"ed command"), Diff(DELETE,": take 3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8355" _type="ConsoleOutput" date="Tue Mar 29 22:39:10 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13280071" type="ConsoleOutput">
    <outputString><![CDATA[Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"PROPERTY CHANGE¶executed"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by"), Diff(EQUAL," comma"), Diff(DELETE,"nd"), Diff(INSERT,"s:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8357" _type="PauseCommand" date="Tue Mar 29 22:39:17 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="13286978">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6907]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8356" _type="ConsoleInput" date="Tue Mar 29 22:39:17 EDT 2022" starttimestamp="1648594670066" timestamp="13286978" type="Exception">
    <outputString><![CDATA[i rmi
]]></outputString>
  </Command>
  <Command __id="8358" _type="ConsoleOutput" date="Tue Mar 29 22:39:17 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13287029" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[RMI]¶"), Diff(EQUAL,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="8360" _type="PauseCommand" date="Tue Mar 29 22:39:23 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="13293143">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6114]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8359" _type="ConsoleInput" date="Tue Mar 29 22:39:23 EDT 2022" starttimestamp="1648594670066" timestamp="13293143" type="Exception">
    <outputString><![CDATA[s "undo"
]]></outputString>
  </Command>
  <Command __id="8361" _type="ConsoleOutput" date="Tue Mar 29 22:39:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13293196" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]
IPC Mechanism
RMI
using RMI proxy server
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"public default void assignments.util.inputParameters.SimulationParametersListener."), Diff(DELETE,"ipcMechanism(util.interactiveMethodInvocation."), Diff(INSERT,"simulationCommand(java.lang.String)[undo]¶"), Diff(EQUAL,"IPC"), Diff(INSERT," "), Diff(EQUAL,"Mechanism"), Diff(DELETE,")["), Diff(INSERT,"¶"), Diff(EQUAL,"RMI"), Diff(DELETE,"]"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"using RMI proxy server"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8362" _type="ConsoleOutput" date="Tue Mar 29 22:39:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13293353" type="ConsoleOutput">
    <outputString><![CDATA[PROPERTY CHANGE
PROPERTY CHANGE
Command being sent from coupler:undo
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.simulationCommand(java.lang.String)[undo]¶IPC Mechanism¶RMI¶using RMI proxy server"), Diff(INSERT,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:undo"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8363" _type="ConsoleOutput" date="Tue Mar 29 22:39:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13293362" type="ConsoleOutput">
    <outputString><![CDATA[Command recieved for broadcast: undo
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]]
2
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:undo"), Diff(INSERT,"Command recieved for broadcast: undo¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8364" _type="ConsoleOutput" date="Tue Mar 29 22:39:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13293363" type="ConsoleOutput">
    <outputString><![CDATA[recieved broadcased command: undo
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Command "), Diff(EQUAL,"recieved "), Diff(DELETE,"for "), Diff(EQUAL,"broadcas"), Diff(DELETE,"t: undo¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64531](remote),objID:[-5cf8395f:17fd8b06b58:-7ffe, -5116641627763036415]]]]]¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[3a52a193:17fd8b071cb:-7ffe, -577315001710905574]]]]]"), Diff(INSERT,"ed command: undo"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8365" _type="ConsoleOutput" date="Tue Mar 29 22:39:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13293724" type="ConsoleOutput">
    <outputString><![CDATA[PROPERTY CHANGE
executed command
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"recieved broadcas"), Diff(INSERT,"PROPERTY CHANGE¶execut"), Diff(EQUAL,"ed command"), Diff(DELETE,": undo"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8366" _type="ConsoleOutput" date="Tue Mar 29 22:39:23 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13293736" type="ConsoleOutput">
    <outputString><![CDATA[Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"PROPERTY CHANGE¶executed"), Diff(INSERT,"Enter (prefixes of) print, quit or a method and its parameters separated by"), Diff(EQUAL," comma"), Diff(DELETE,"nd"), Diff(INSERT,"s:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8368" _type="PauseCommand" date="Tue Mar 29 22:39:32 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="13302622">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8886]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8392" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Tue Mar 29 22:39:50 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13320233" type="Run" />
  <Command __id="8394" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Tue Mar 29 22:39:50 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="13320233" type="Run" />
  <Command __id="8395" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:39:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13320449" type="Run" />
  <Command __id="8396" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:39:50 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13320467" type="Run" />
  <Command __id="8397" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:39:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13320470" type="Run" />
  <Command __id="8399" _type="PauseCommand" date="Tue Mar 29 22:39:53 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13323074">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2604]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8400" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:39:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13326764" type="Run" />
  <Command __id="8402" _type="ConsoleOutput" date="Tue Mar 29 22:39:56 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13326876" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Tue Mar 29 22:39:56 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE," >>>> No valid commands entered.¶PROPERTY CHANGE¶PROPERTY CHANGE¶Command being sent from coupler:quit"), Diff(INSERT,"Building symbol table and running first pass checks:Tue Mar 29 22:39:56 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8404" _type="PauseCommand" date="Tue Mar 29 22:39:59 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13329420">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2544]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8403" _type="ConsoleOutput" date="Tue Mar 29 22:39:59 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13329420" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:79
Running second pass checks Tue Mar 29 22:39:59 EDT 2022
Start O(n2) inter- and intra class method calls:Tue Mar 29 22:39:59 EDT 2022
End O(n2) inter- and intra class method calls:Tue Mar 29 22:39:59 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:79¶Running second pass checks Tue Mar 29 22:39:59 EDT 2022¶Start O(n2) inter- and intra class method calls:Tue Mar 29 22:39:59 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Tue Mar 29 22:39:5"), Diff(DELETE,"6"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="8406" _type="PauseCommand" date="Tue Mar 29 22:40:00 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13330844">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1424]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8405" _type="ConsoleOutput" date="Tue Mar 29 22:40:00 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13330844" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Tue Mar 29 22:40:00 EDT 2022
Generating checks:Tue Mar 29 22:40:00 EDT 2022
Finished Generating checks:Tue Mar 29 22:40:00 EDT 2022
Generating externals:Tue Mar 29 22:40:00 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:79¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Tue Mar 29 22:"), Diff(DELETE,"39:59"), Diff(INSERT,"40:00"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Tue Mar 29 22:40:00 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Tue Mar 29 22:"), Diff(DELETE,"39:59"), Diff(INSERT,"40:00"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Tue Mar 29 22:"), Diff(DELETE,"39:59"), Diff(INSERT,"40:00"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="8407" _type="ConsoleOutput" date="Tue Mar 29 22:40:01 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13331137" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Tue Mar 29 22:40:01 EDT 2022
Test execution time (ms):4301
Test execution time (ms):14
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Tue Mar 29 22:40:00 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Tue Mar 29 22:40:0"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Tue Mar 29 22:40:00 EDT 2022¶Generating externals:Tue Mar 29 22:40:00 EDT 2022"), Diff(INSERT,"Test execution time (ms):4301¶Test execution time (ms):14"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8408" _type="ConsoleOutput" date="Tue Mar 29 22:40:01 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13331199" type="ConsoleOutput">
    <outputString><![CDATA[A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):13
Test execution time (ms):7
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Tue Mar 29 22:40:01 EDT 2022¶Test execution time (ms):4301"), Diff(INSERT,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):13¶Test execution time (ms):7¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"14"), Diff(INSERT,"7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8409" _type="ConsoleOutput" date="Tue Mar 29 22:40:01 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13331271" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (264)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (261)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):13¶Test execution time (ms):7¶A5ExpectedSignatures did not pass completely:See consol"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (264)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (261)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to th"), Diff(EQUAL,"e "), Diff(INSERT,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"ace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):7"), Diff(INSERT,"ucture:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8411" _type="PauseCommand" date="Tue Mar 29 22:40:04 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13334479">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3208]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8439" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:40:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13372435" type="Run" />
  <Command __id="8441" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:40:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13372436" type="Run" />
  <Command __id="8443" _type="PauseCommand" date="Tue Mar 29 22:40:54 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="13384646">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12210]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8453" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:41:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13401038" type="Run" />
  <Command __id="8455" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:41:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13401040" type="Run" />
  <Command __id="8457" _type="PauseCommand" date="Tue Mar 29 22:41:13 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="13402965">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1925]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="8468" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:43:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13513634" type="Run" />
  <Command __id="8470" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:43:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13513636" type="Run" />
  <Command __id="8472" _type="PauseCommand" date="Tue Mar 29 22:44:01 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="13571685">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[58049]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8471" _type="ShellCommand" date="Tue Mar 29 22:44:01 EDT 2022" starttimestamp="1648594670066" timestamp="13571685" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8474" _type="PauseCommand" date="Tue Mar 29 22:44:19 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="13589785">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18100]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8485" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:44:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13626266" type="Run" />
  <Command __id="8487" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:44:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13626267" type="Run" />
  <Command __id="8489" _type="PauseCommand" date="Tue Mar 29 22:45:01 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13630947">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4680]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8488" _type="ConsoleOutput" date="Tue Mar 29 22:45:01 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13630947" type="ConsoleOutput">
    <outputString><![CDATA[E***Num output lines exceeded 4000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875¶¶Test execution time (ms):112606"), Diff(INSERT,"E***Num output lines exceeded 4000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8491" _type="PauseCommand" date="Tue Mar 29 22:45:27 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="13657660">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[26713]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8490" _type="ConsoleOutput" date="Tue Mar 29 22:45:27 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13657660" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"E***Num output lines exceeded 4000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8492" _type="ConsoleOutput" date="Tue Mar 29 22:45:28 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13658395" type="ConsoleOutput">
    <outputString><![CDATA[t$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"t$ConnectionHandler.lambda$run$0(TCPTransport.java:677)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8493" _type="ConsoleOutput" date="Tue Mar 29 22:45:28 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13658662" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"t$ConnectionHandler.lambda$run$0(TCPTransport.java:677)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8495" _type="PauseCommand" date="Tue Mar 29 22:46:07 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="13697368">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[38706]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8494" _type="ShellCommand" date="Tue Mar 29 22:46:07 EDT 2022" starttimestamp="1648594670066" timestamp="13697368" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8497" _type="PauseCommand" date="Tue Mar 29 22:46:35 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="13725171">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[27803]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8508" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:46:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13738901" type="Run" />
  <Command __id="8510" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:46:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13738903" type="Run" />
  <Command __id="8512" _type="PauseCommand" date="Tue Mar 29 22:46:52 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="13742075">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3172]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8511" _type="ConsoleOutput" date="Tue Mar 29 22:46:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13742075" type="ConsoleOutput">
    <outputString><![CDATA[E***Num output lines exceeded 4000
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"T"), Diff(INSERT,"E***Num output lin"), Diff(EQUAL,"es"), Diff(DELETE,"t"), Diff(EQUAL," ex"), Diff(DELETE,"ecution time (ms):11263"), Diff(INSERT,"ceeded 400"), Diff(EQUAL,"0¶")]]]></diff>
  </Command>
  <Command __id="8514" _type="PauseCommand" date="Tue Mar 29 22:47:09 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="13759536">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[17461]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8513" _type="ConsoleOutput" date="Tue Mar 29 22:47:09 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13759536" type="ConsoleOutput">
    <outputString><![CDATA[port$ConnectionHandler.run0(TCPTransport.java:796)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"E***Num output lines exceeded 4000"), Diff(INSERT,"port$ConnectionHandler.run0(TCPTransport.java:796)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8515" _type="ConsoleOutput" date="Tue Mar 29 22:47:10 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="13760010" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"port$ConnectionHandler.run0(TCPTransport.java:796)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8517" _type="PauseCommand" date="Tue Mar 29 22:47:15 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="13765621">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5611]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8541" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:50:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13964109" type="Run" />
  <Command __id="8543" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:50:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="13964109" type="Run" />
  <Command __id="8545" _type="PauseCommand" date="Tue Mar 29 22:52:19 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="14069188">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[105079]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8544" _type="ConsoleOutput" date="Tue Mar 29 22:52:19 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14069188" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112585
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶"), Diff(EQUAL,"GIPCRMIServerMetaState"), Diff(DELETE,"No"), Diff(EQUAL,"Broadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶"), Diff(INSERT,"¶"), Diff(EQUAL,"Test execution time (ms):112"), Diff(DELETE,"609"), Diff(INSERT,"585"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8547" _type="PauseCommand" date="Tue Mar 29 22:52:24 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="14074670">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5482]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="8546" _type="ConsoleOutput" date="Tue Mar 29 22:52:24 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14074670" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@311e7684 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):112585"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@311e7684 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8549" _type="PauseCommand" date="Tue Mar 29 22:52:56 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="14106163">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[31493]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8548" _type="ShellCommand" date="Tue Mar 29 22:52:56 EDT 2022" starttimestamp="1648594670066" timestamp="14106163" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8550" _type="MoveCaretCommand" caretOffset="4521" date="Tue Mar 29 22:52:56 EDT 2022" docOffset="4521" starttimestamp="1648594670066" timestamp="14106365" />
  <Command __id="8551" _type="MoveCaretCommand" caretOffset="4521" date="Tue Mar 29 22:52:56 EDT 2022" docOffset="4521" starttimestamp="1648594670066" timestamp="14106365" />
  <Command __id="8553" _type="PauseCommand" date="Tue Mar 29 22:53:15 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="14125352">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[18987]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8552" _type="MoveCaretCommand" caretOffset="4012" date="Tue Mar 29 22:53:15 EDT 2022" docOffset="4012" starttimestamp="1648594670066" timestamp="14125352" />
  <Command __id="8554" _type="MoveCaretCommand" caretOffset="4012" date="Tue Mar 29 22:53:15 EDT 2022" docOffset="4012" starttimestamp="1648594670066" timestamp="14125352" />
  <Command __id="8556" _type="InsertStringCommand" date="Tue Mar 29 22:53:15 EDT 2022" starttimestamp="1648594670066" timestamp="14125726" timestamp2="14125726">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8557" _type="InsertStringCommand" date="Tue Mar 29 22:53:15 EDT 2022" starttimestamp="1648594670066" timestamp="14125726" timestamp2="14125726">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8559" _type="InsertStringCommand" date="Tue Mar 29 22:53:16 EDT 2022" starttimestamp="1648594670066" timestamp="14126151" timestamp2="14126151">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8560" _type="InsertStringCommand" date="Tue Mar 29 22:53:16 EDT 2022" starttimestamp="1648594670066" timestamp="14126151" timestamp2="14126151">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8562" _type="InsertStringCommand" date="Tue Mar 29 22:53:16 EDT 2022" starttimestamp="1648594670066" timestamp="14126330" timestamp2="14126330">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="8563" _type="InsertStringCommand" date="Tue Mar 29 22:53:16 EDT 2022" starttimestamp="1648594670066" timestamp="14126330" timestamp2="14126330">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="8565" _type="InsertStringCommand" date="Tue Mar 29 22:53:16 EDT 2022" starttimestamp="1648594670066" timestamp="14126507" timestamp2="14126507">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8566" _type="InsertStringCommand" date="Tue Mar 29 22:53:16 EDT 2022" starttimestamp="1648594670066" timestamp="14126507" timestamp2="14126507">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8568" _type="InsertStringCommand" date="Tue Mar 29 22:53:16 EDT 2022" starttimestamp="1648594670066" timestamp="14126744" timestamp2="14126744">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8569" _type="InsertStringCommand" date="Tue Mar 29 22:53:16 EDT 2022" starttimestamp="1648594670066" timestamp="14126744" timestamp2="14126744">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="8222" _type="Insert" date="Tue Mar 29 22:38:02 EDT 2022" docASTNodeCount="1055" docActiveCodeLength="7538" docExpressionCount="759" docLength="8194" length="15" offset="4528" repeat="10" starttimestamp="1648594670066" timestamp="13212737" timestamp2="13215188">
    <text><![CDATA[
				continue;]]></text>
  </DocumentChange>
  <DocumentChange __id="8555" _type="Insert" date="Tue Mar 29 22:53:15 EDT 2022" docASTNodeCount="1055" docActiveCodeLength="7545" docExpressionCount="759" docLength="8201" length="7" offset="4012" repeat="4" starttimestamp="1648594670066" timestamp="14125718" timestamp2="14126501">
    <text><![CDATA[
		els]]></text>
  </DocumentChange>
  <DocumentChange __id="8567" _type="Replace" date="Tue Mar 29 22:53:16 EDT 2022" docASTNodeCount="1055" docActiveCodeLength="7546" docExpressionCount="759" docLength="8202" endLine="105" insertionLength="6" int_docASTNodeCount="1055" int_docActiveCodeLength="7540" int_docExpressionCount="759" int_docLength="8196" length="5" offset="4014" startLine="105" starttimestamp="1648594670066" timestamp="14126738">
    <deletedText><![CDATA[		els]]></deletedText>
    <insertedText><![CDATA[		else]]></insertedText>
  </DocumentChange>
  <Command __id="8571" _type="PauseCommand" date="Tue Mar 29 22:53:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14128203">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1459]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="8572" _type="InsertStringCommand" date="Tue Mar 29 22:53:18 EDT 2022" starttimestamp="1648594670066" timestamp="14128210" timestamp2="14128210">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="8573" _type="InsertStringCommand" date="Tue Mar 29 22:53:18 EDT 2022" starttimestamp="1648594670066" timestamp="14128210" timestamp2="14128210">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="8575" _type="InsertStringCommand" date="Tue Mar 29 22:53:18 EDT 2022" starttimestamp="1648594670066" timestamp="14128251" timestamp2="14128251">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="8576" _type="InsertStringCommand" date="Tue Mar 29 22:53:18 EDT 2022" starttimestamp="1648594670066" timestamp="14128251" timestamp2="14128251">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="8577" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:53:18 EDT 2022" starttimestamp="1648594670066" timestamp="14128560" />
  <Command __id="8578" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:53:18 EDT 2022" starttimestamp="1648594670066" timestamp="14128561" />
  <Command __id="8580" _type="InsertStringCommand" date="Tue Mar 29 22:53:18 EDT 2022" starttimestamp="1648594670066" timestamp="14128771" timestamp2="14128771">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8581" _type="InsertStringCommand" date="Tue Mar 29 22:53:18 EDT 2022" starttimestamp="1648594670066" timestamp="14128771" timestamp2="14128771">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8583" _type="PauseCommand" date="Tue Mar 29 22:53:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="14133180">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4409]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8582" _type="SelectTextCommand" caretOffset="3602" date="Tue Mar 29 22:53:23 EDT 2022" end="3630" start="3602" starttimestamp="1648594670066" timestamp="14133180" />
  <Command __id="8584" _type="SelectTextCommand" caretOffset="3602" date="Tue Mar 29 22:53:23 EDT 2022" end="3630" start="3602" starttimestamp="1648594670066" timestamp="14133180" />
  <Command __id="8585" _type="CopyCommand" date="Tue Mar 29 22:53:23 EDT 2022" starttimestamp="1648594670066" timestamp="14133447" />
  <Command __id="8586" _type="MoveCaretCommand" caretOffset="4027" date="Tue Mar 29 22:53:24 EDT 2022" docOffset="4027" starttimestamp="1648594670066" timestamp="14134339" />
  <Command __id="8587" _type="MoveCaretCommand" caretOffset="4027" date="Tue Mar 29 22:53:24 EDT 2022" docOffset="4027" starttimestamp="1648594670066" timestamp="14134340" />
  <Command __id="8589" _type="PasteCommand" date="Tue Mar 29 22:53:24 EDT 2022" starttimestamp="1648594670066" timestamp="14134545" />
  <Command __id="8591" _type="PauseCommand" date="Tue Mar 29 22:53:26 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14135993">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1448]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <DocumentChange __id="8570" _type="Insert" date="Tue Mar 29 22:53:18 EDT 2022" docASTNodeCount="1056" docActiveCodeLength="7558" docExpressionCount="759" docLength="8214" length="12" offset="4020" repeat="3" starttimestamp="1648594670066" timestamp="14128203" timestamp2="14128766">
    <text><![CDATA[ {
			
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="8588" _type="Replace" date="Tue Mar 29 22:53:24 EDT 2022" docASTNodeCount="1060" docActiveCodeLength="7586" docExpressionCount="762" docLength="8242" endLine="106" insertionLength="31" int_docASTNodeCount="1056" int_docActiveCodeLength="7555" int_docExpressionCount="759" int_docLength="8211" length="3" offset="4024" startLine="106" starttimestamp="1648594670066" timestamp="14134540">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			clientList = clientListGIPC;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8593" _type="Insert" date="Tue Mar 29 22:53:26 EDT 2022" docASTNodeCount="1064" docActiveCodeLength="7601" docExpressionCount="765" docLength="8257" length="15" offset="4007" repeat="11" starttimestamp="1648594670066" timestamp="14136297" timestamp2="14138160">
    <text><![CDATA[
			System.out]]></text>
  </DocumentChange>
  <DocumentChange __id="8622" _type="Replace" date="Tue Mar 29 22:53:28 EDT 2022" docASTNodeCount="1060" docActiveCodeLength="7602" docExpressionCount="762" docLength="8258" endLine="104" insertionLength="4" int_docASTNodeCount="1060" int_docActiveCodeLength="7598" int_docExpressionCount="762" int_docLength="8254" length="3" offset="4019" startLine="104" starttimestamp="1648594670066" timestamp="14138602">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <Command __id="8590" _type="MoveCaretCommand" caretOffset="4007" date="Tue Mar 29 22:53:26 EDT 2022" docOffset="4007" starttimestamp="1648594670066" timestamp="14135993" />
  <Command __id="8592" _type="MoveCaretCommand" caretOffset="4007" date="Tue Mar 29 22:53:26 EDT 2022" docOffset="4007" starttimestamp="1648594670066" timestamp="14135993" />
  <Command __id="8594" _type="InsertStringCommand" date="Tue Mar 29 22:53:26 EDT 2022" starttimestamp="1648594670066" timestamp="14136304" timestamp2="14136304">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8595" _type="InsertStringCommand" date="Tue Mar 29 22:53:26 EDT 2022" starttimestamp="1648594670066" timestamp="14136305" timestamp2="14136305">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8597" _type="InsertStringCommand" date="Tue Mar 29 22:53:26 EDT 2022" starttimestamp="1648594670066" timestamp="14136821" timestamp2="14136821">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8598" _type="InsertStringCommand" date="Tue Mar 29 22:53:26 EDT 2022" starttimestamp="1648594670066" timestamp="14136821" timestamp2="14136821">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8600" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14136993" timestamp2="14136993">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="8601" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14136993" timestamp2="14136993">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="8603" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137071" timestamp2="14137071">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8604" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137071" timestamp2="14137071">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="8606" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137246" timestamp2="14137246">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8607" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137246" timestamp2="14137246">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="8609" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137382" timestamp2="14137382">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8610" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137382" timestamp2="14137382">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="8612" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137485" timestamp2="14137485">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8613" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137485" timestamp2="14137485">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="8615" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137672" timestamp2="14137672">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8616" _type="InsertStringCommand" date="Tue Mar 29 22:53:27 EDT 2022" starttimestamp="1648594670066" timestamp="14137672" timestamp2="14137672">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8617" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 22:53:27 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="14137681" />
  <Command __id="8621" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 22:53:28 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="14138598" />
  <Command __id="8623" _type="InsertStringCommand" date="Tue Mar 29 22:53:28 EDT 2022" starttimestamp="1648594670066" timestamp="14138608" timestamp2="14138608">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8624" _type="InsertStringCommand" date="Tue Mar 29 22:53:28 EDT 2022" starttimestamp="1648594670066" timestamp="14138608" timestamp2="14138608">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="8625" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Tue Mar 29 22:53:28 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="14138617" />
  <Command __id="8636" _type="PauseCommand" date="Tue Mar 29 22:53:32 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="14142765">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[3521]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="8635" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Tue Mar 29 22:53:32 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="14142765" />
  <Command __id="8637" _type="InsertStringCommand" date="Tue Mar 29 22:53:32 EDT 2022" starttimestamp="1648594670066" timestamp="14142868" timestamp2="14142868">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8638" _type="InsertStringCommand" date="Tue Mar 29 22:53:32 EDT 2022" starttimestamp="1648594670066" timestamp="14142868" timestamp2="14142868">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="8639" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:53:33 EDT 2022" starttimestamp="1648594670066" timestamp="14143581" />
  <Command __id="8640" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 22:53:33 EDT 2022" starttimestamp="1648594670066" timestamp="14143581" />
  <Command __id="8642" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144042" timestamp2="14144042">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="8643" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144042" timestamp2="14144042">
    <data><![CDATA[U]]></data>
  </Command>
  <Command __id="8645" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144149" timestamp2="14144149">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8646" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144149" timestamp2="14144149">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8648" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144258" timestamp2="14144258">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8649" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144258" timestamp2="14144258">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8651" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144367" timestamp2="14144367">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="8652" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144367" timestamp2="14144367">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="8654" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144460" timestamp2="14144460">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="8655" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144460" timestamp2="14144460">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="8657" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144616" timestamp2="14144616">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8658" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144616" timestamp2="14144616">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8660" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144849" timestamp2="14144849">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="8661" _type="InsertStringCommand" date="Tue Mar 29 22:53:34 EDT 2022" starttimestamp="1648594670066" timestamp="14144849" timestamp2="14144849">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="8663" _type="InsertStringCommand" date="Tue Mar 29 22:53:35 EDT 2022" starttimestamp="1648594670066" timestamp="14144959" timestamp2="14144959">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="8664" _type="InsertStringCommand" date="Tue Mar 29 22:53:35 EDT 2022" starttimestamp="1648594670066" timestamp="14144960" timestamp2="14144960">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="8666" _type="InsertStringCommand" date="Tue Mar 29 22:53:35 EDT 2022" starttimestamp="1648594670066" timestamp="14145042" timestamp2="14145042">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8667" _type="InsertStringCommand" date="Tue Mar 29 22:53:35 EDT 2022" starttimestamp="1648594670066" timestamp="14145042" timestamp2="14145042">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8669" _type="InsertStringCommand" date="Tue Mar 29 22:53:35 EDT 2022" starttimestamp="1648594670066" timestamp="14145274" timestamp2="14145274">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8670" _type="InsertStringCommand" date="Tue Mar 29 22:53:35 EDT 2022" starttimestamp="1648594670066" timestamp="14145275" timestamp2="14145275">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8672" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146071" timestamp2="14146071">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8673" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146071" timestamp2="14146071">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8675" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146158" timestamp2="14146158">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="8676" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146158" timestamp2="14146158">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="8678" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146281" timestamp2="14146281">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8679" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146281" timestamp2="14146281">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="8681" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146524" timestamp2="14146524">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8682" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146524" timestamp2="14146524">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="8684" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146626" timestamp2="14146626">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="8685" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146626" timestamp2="14146626">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="8687" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146739" timestamp2="14146739">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="8688" _type="InsertStringCommand" date="Tue Mar 29 22:53:36 EDT 2022" starttimestamp="1648594670066" timestamp="14146739" timestamp2="14146739">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="8690" _type="InsertStringCommand" date="Tue Mar 29 22:53:37 EDT 2022" starttimestamp="1648594670066" timestamp="14147012" timestamp2="14147012">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="8691" _type="InsertStringCommand" date="Tue Mar 29 22:53:37 EDT 2022" starttimestamp="1648594670066" timestamp="14147012" timestamp2="14147012">
    <data><![CDATA[V]]></data>
  </Command>
  <Command __id="8693" _type="InsertStringCommand" date="Tue Mar 29 22:53:37 EDT 2022" starttimestamp="1648594670066" timestamp="14147171" timestamp2="14147171">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="8694" _type="InsertStringCommand" date="Tue Mar 29 22:53:37 EDT 2022" starttimestamp="1648594670066" timestamp="14147171" timestamp2="14147171">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="8696" _type="InsertStringCommand" date="Tue Mar 29 22:53:37 EDT 2022" starttimestamp="1648594670066" timestamp="14147276" timestamp2="14147276">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="8697" _type="InsertStringCommand" date="Tue Mar 29 22:53:37 EDT 2022" starttimestamp="1648594670066" timestamp="14147276" timestamp2="14147276">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="8699" _type="PauseCommand" date="Tue Mar 29 22:53:38 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14148743">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1467]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="8698" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 22:53:38 EDT 2022" starttimestamp="1648594670066" timestamp="14148743" />
  <Command __id="8700" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 22:53:38 EDT 2022" starttimestamp="1648594670066" timestamp="14148744" />
  <Command __id="8702" _type="InsertStringCommand" date="Tue Mar 29 22:53:39 EDT 2022" starttimestamp="1648594670066" timestamp="14149016" timestamp2="14149016">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="8703" _type="InsertStringCommand" date="Tue Mar 29 22:53:39 EDT 2022" starttimestamp="1648594670066" timestamp="14149016" timestamp2="14149016">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="8626" _type="Insert" date="Tue Mar 29 22:53:29 EDT 2022" docASTNodeCount="943" docActiveCodeLength="7633" docExpressionCount="683" docLength="8289" length="31" offset="4023" repeat="29" starttimestamp="1648594670066" timestamp="14139244" timestamp2="14149013">
    <text><![CDATA[println("USING RMI IN SERVER";)]]></text>
  </DocumentChange>
  <Command __id="8705" _type="PauseCommand" date="Tue Mar 29 22:53:40 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14150042">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1026]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="8704" _type="Delete" date="Tue Mar 29 22:53:40 EDT 2022" docASTNodeCount="1067" docActiveCodeLength="7632" docExpressionCount="768" docLength="8288" endLine="104" length="1" offset="4052" startLine="104" starttimestamp="1648594670066" timestamp="14150042">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="8706" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:53:40 EDT 2022" starttimestamp="1648594670066" timestamp="14150049" />
  <Command __id="8707" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:53:40 EDT 2022" starttimestamp="1648594670066" timestamp="14150049" />
  <Command __id="8708" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 22:53:40 EDT 2022" starttimestamp="1648594670066" timestamp="14150415" />
  <Command __id="8709" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 22:53:40 EDT 2022" starttimestamp="1648594670066" timestamp="14150415" />
  <Command __id="8716" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:53:42 EDT 2022" starttimestamp="1648594670066" timestamp="14152521" />
  <Command __id="8718" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:53:42 EDT 2022" starttimestamp="1648594670066" timestamp="14152534" />
  <Command __id="8720" _type="PauseCommand" date="Tue Mar 29 22:53:44 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14154034">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1500]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8719" _type="SelectTextCommand" caretOffset="4012" date="Tue Mar 29 22:53:44 EDT 2022" end="4054" start="4012" starttimestamp="1648594670066" timestamp="14154034" />
  <Command __id="8721" _type="SelectTextCommand" caretOffset="4012" date="Tue Mar 29 22:53:44 EDT 2022" end="4054" start="4012" starttimestamp="1648594670066" timestamp="14154034" />
  <Command __id="8722" _type="CopyCommand" date="Tue Mar 29 22:53:44 EDT 2022" starttimestamp="1648594670066" timestamp="14154412" />
  <Command __id="8724" _type="PauseCommand" date="Tue Mar 29 22:53:45 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14155425">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1013]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8723" _type="MoveCaretCommand" caretOffset="4102" date="Tue Mar 29 22:53:45 EDT 2022" docOffset="4102" starttimestamp="1648594670066" timestamp="14155425" />
  <Command __id="8725" _type="MoveCaretCommand" caretOffset="4102" date="Tue Mar 29 22:53:45 EDT 2022" docOffset="4102" starttimestamp="1648594670066" timestamp="14155425" />
  <Command __id="8727" _type="InsertStringCommand" date="Tue Mar 29 22:53:45 EDT 2022" starttimestamp="1648594670066" timestamp="14155671" timestamp2="14155671">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8728" _type="InsertStringCommand" date="Tue Mar 29 22:53:45 EDT 2022" starttimestamp="1648594670066" timestamp="14155672" timestamp2="14155672">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8730" _type="PasteCommand" date="Tue Mar 29 22:53:45 EDT 2022" starttimestamp="1648594670066" timestamp="14155918" />
  <Command __id="8731" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:53:46 EDT 2022" starttimestamp="1648594670066" timestamp="14156272" />
  <Command __id="8732" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:53:46 EDT 2022" starttimestamp="1648594670066" timestamp="14156362" />
  <Command __id="8733" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:53:46 EDT 2022" starttimestamp="1648594670066" timestamp="14156393" />
  <Command __id="8734" _type="MoveCaretCommand" caretOffset="4136" date="Tue Mar 29 22:53:47 EDT 2022" docOffset="4136" starttimestamp="1648594670066" timestamp="14157149" />
  <Command __id="8735" _type="MoveCaretCommand" caretOffset="4136" date="Tue Mar 29 22:53:47 EDT 2022" docOffset="4136" starttimestamp="1648594670066" timestamp="14157149" />
  <Command __id="8737" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:53:47 EDT 2022" starttimestamp="1648594670066" timestamp="14157420" />
  <Command __id="8738" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:53:47 EDT 2022" starttimestamp="1648594670066" timestamp="14157420" />
  <Command __id="8740" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:53:47 EDT 2022" starttimestamp="1648594670066" timestamp="14157544" />
  <Command __id="8741" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:53:47 EDT 2022" starttimestamp="1648594670066" timestamp="14157544" />
  <Command __id="8743" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:53:47 EDT 2022" starttimestamp="1648594670066" timestamp="14157698" />
  <Command __id="8744" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 22:53:47 EDT 2022" starttimestamp="1648594670066" timestamp="14157698" />
  <Command __id="8746" _type="InsertStringCommand" date="Tue Mar 29 22:53:47 EDT 2022" starttimestamp="1648594670066" timestamp="14157860" timestamp2="14157860">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="8747" _type="InsertStringCommand" date="Tue Mar 29 22:53:47 EDT 2022" starttimestamp="1648594670066" timestamp="14157860" timestamp2="14157860">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="8749" _type="InsertStringCommand" date="Tue Mar 29 22:53:48 EDT 2022" starttimestamp="1648594670066" timestamp="14158006" timestamp2="14158006">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8750" _type="InsertStringCommand" date="Tue Mar 29 22:53:48 EDT 2022" starttimestamp="1648594670066" timestamp="14158006" timestamp2="14158006">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8752" _type="InsertStringCommand" date="Tue Mar 29 22:53:48 EDT 2022" starttimestamp="1648594670066" timestamp="14158102" timestamp2="14158102">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="8753" _type="InsertStringCommand" date="Tue Mar 29 22:53:48 EDT 2022" starttimestamp="1648594670066" timestamp="14158102" timestamp2="14158102">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="8755" _type="InsertStringCommand" date="Tue Mar 29 22:53:48 EDT 2022" starttimestamp="1648594670066" timestamp="14158894" timestamp2="14158894">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="8756" _type="InsertStringCommand" date="Tue Mar 29 22:53:48 EDT 2022" starttimestamp="1648594670066" timestamp="14158894" timestamp2="14158894">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="8757" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 22:53:49 EDT 2022" starttimestamp="1648594670066" timestamp="14159344" />
  <Command __id="8758" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:53:49 EDT 2022" starttimestamp="1648594670066" timestamp="14159428" />
  <Command __id="8759" _type="EclipseCommand" commandID="" date="Tue Mar 29 22:53:49 EDT 2022" starttimestamp="1648594670066" timestamp="14159488" />
  <Command __id="8761" _type="PauseCommand" date="Tue Mar 29 22:53:53 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="14163151">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3663]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8760" _type="ShellCommand" date="Tue Mar 29 22:53:53 EDT 2022" starttimestamp="1648594670066" timestamp="14163151" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8763" _type="PauseCommand" date="Tue Mar 29 22:54:01 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="14171514">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8363]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8784" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 22:54:27 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="14197780" type="Run" />
  <Command __id="8786" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:28 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14198019" type="Run" />
  <Command __id="8787" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14198022" type="Run" />
  <Command __id="8788" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 22:54:28 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="14198079" type="Run" />
  <Command __id="8789" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:28 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14198315" type="Run" />
  <Command __id="8790" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:28 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14198323" type="Run" />
  <Command __id="8791" _type="ConsoleOutput" date="Tue Mar 29 22:54:28 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14198470" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.5146054540583304
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.5146054540583304"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8792" _type="ConsoleOutput" date="Tue Mar 29 22:54:28 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14198727" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.6613725420988245
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"5146054540583304"), Diff(INSERT,"6613725420988245"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8793" _type="RunCommand" className="/A5/src/client/Client.java" date="Tue Mar 29 22:54:29 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="14199476" type="Run" />
  <Command __id="8794" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:29 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14199715" type="Run" />
  <Command __id="8795" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:29 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14199720" type="Run" />
  <Command __id="8796" _type="ConsoleOutput" date="Tue Mar 29 22:54:30 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14200082" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.2183311983445977
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"6613725420988245"), Diff(INSERT,"2183311983445977"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8797" _type="ShellCommand" date="Tue Mar 29 22:54:30 EDT 2022" starttimestamp="1648594670066" timestamp="14200651" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8799" _type="PauseCommand" date="Tue Mar 29 22:54:34 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="14204698">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4047]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8817" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14215923" type="Run" />
  <Command __id="8819" _type="ConsoleOutput" date="Tue Mar 29 22:54:46 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14216251" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.5146054540583304 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[423ea49d:17fd8bf328f:-7ffe, 4416877310828181005]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[423ea49d:17fd8bf328f:-7ffe, 4416877310828181005]]]]]]"), Diff(INSERT,"Server0<-->Generic Client:0.5146054540583304 (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8820" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14216536" type="Run" />
  <Command __id="8821" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14216600" type="Run" />
  <Command __id="8822" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14216689" type="Run" />
  <Command __id="8823" _type="ConsoleOutput" date="Tue Mar 29 22:54:46 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14216782" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@3b84b827
[com.sun.proxy.$Proxy1@89e023, com.sun.proxy.$Proxy1@3b84b827]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[423ea49d:17fd8bf328f:-7ffe, 4416877310828181005]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.5146054540583304 (Opened)"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@3b84b827¶[com.sun.proxy.$Proxy1@89e023, com.sun.proxy.$Proxy1@3b84b827]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[423ea49d:17fd8bf328f:-7ffe, 4416877310828181005]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8824" _type="ConsoleOutput" date="Tue Mar 29 22:54:46 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14216795" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC¶com.sun.proxy.$Proxy1@3b84b827¶[com.sun.proxy.$Proxy1@89e023, com.sun.proxy.$Proxy1@3b84b827]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[423ea49d:17fd8bf328f:-7ffe, 4416877310828181005]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]]]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8825" _type="ShellCommand" date="Tue Mar 29 22:54:47 EDT 2022" starttimestamp="1648594670066" timestamp="14217273" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8826" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14217948" type="Run" />
  <Command __id="8827" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14218257" type="Run" />
  <Command __id="8828" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14218296" type="Run" />
  <Command __id="8829" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:54:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14218347" type="Run" />
  <Command __id="8830" _type="ConsoleOutput" date="Tue Mar 29 22:54:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14218412" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.2183311983445977 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@615930ce
[com.sun.proxy.$Proxy1@89e023, com.sun.proxy.$Proxy1@3b84b827, com.sun.proxy.$Proxy1@615930ce]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64553](remote),objID:[51a21450:17fd8bf457f:-7ffe, 7685293213099372419]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[423ea49d:17fd8bf328f:-7ffe, 4416877310828181005]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64553](remote),objID:[51a21450:17fd8bf457f:-7ffe, 7685293213099372419]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Server0<-->Generic Client:0.2183311983445977 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@615930ce¶[com.sun.proxy.$Proxy1@89e023, com.sun.proxy.$Proxy1@3b84b827, com.sun.proxy.$Proxy1@615930ce]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64553](remote),objID:[51a21450:17fd8bf457f:-7ffe, 7685293213099372419]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[423ea49d:17fd8bf328f:-7ffe, 4416877310828181005]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64553](remote),objID:[51a21450:17fd8bf457f:-7ffe, 7685293213099372419]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8831" _type="ConsoleOutput" date="Tue Mar 29 22:54:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="14218466" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.2183311983445977 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@615930ce¶[com.sun.proxy.$Proxy1@89e023, com.sun.proxy.$Proxy1@3b84b827, com.sun.proxy.$Proxy1@615930ce]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64553](remote),objID:[51a21450:17fd8bf457f:-7ffe, 7685293213099372419]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64538](remote),objID:[423ea49d:17fd8bf328f:-7ffe, 4416877310828181005]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64545](remote),objID:[13c04738:17fd8bf3ea0:-7ffe, -1486974981146975820]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64553](remote),objID:[51a21450:17fd8bf457f:-7ffe, 7685293213099372419]]]]]]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="8833" _type="PauseCommand" date="Tue Mar 29 22:54:53 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="14223317">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4851]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8853" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:55:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14248288" type="Run" />
  <Command __id="8855" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:55:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14248319" type="Run" />
  <Command __id="8856" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:55:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14248847" type="Run" />
  <Command __id="8857" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:55:18 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14248895" type="Run" />
  <Command __id="8859" _type="PauseCommand" date="Tue Mar 29 22:55:22 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="14252761">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3866]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8872" _type="ShellCommand" date="Tue Mar 29 22:56:12 EDT 2022" starttimestamp="1648594670066" timestamp="14302081" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8875" _type="PauseCommand" date="Tue Mar 29 22:56:15 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="14305364">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3283]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8874" _type="ShellCommand" date="Tue Mar 29 22:56:15 EDT 2022" starttimestamp="1648594670066" timestamp="14305364" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8877" _type="PauseCommand" date="Tue Mar 29 22:56:38 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="14328427">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[23063]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8878" _type="ShellCommand" date="Tue Mar 29 22:56:46 EDT 2022" starttimestamp="1648594670066" timestamp="14336530" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8881" _type="PauseCommand" date="Tue Mar 29 22:56:53 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="14343310">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6780]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8894" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:57:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14358784" type="Run" />
  <Command __id="8896" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:57:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14359202" type="Run" />
  <Command __id="8897" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:57:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14359202" type="Run" />
  <Command __id="8899" _type="PauseCommand" date="Tue Mar 29 22:57:40 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="14390681">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[31479]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="8923" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:57:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14392261" type="Debug" />
  <Command __id="8924" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 22:57:42 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14392262" type="Debug" />
  <Command __id="8925" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 22:57:42 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="14392262" type="Run" />
  <Command __id="8926" _type="ExceptionCommand" date="Tue Mar 29 22:57:42 EDT 2022" starttimestamp="1648594670066" timestamp="14392417" type="Exception">
    <exceptionString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:64535 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at inputport.rpc.AnAbstractReceivedCallInvoker.invokeMethod(AnAbstractReceivedCallInvoker.java:36)
	at inputport.rpc.duplex.ADuplexReceivedCallInvoker.invokeMethod(ADuplexReceivedCallInvoker.java:34)
	at inputport.rpc.AnAbstractReceivedCallInvoker.messageReceived(AnAbstractReceivedCallInvoker.java:53)
	at inputport.rpc.duplex.AnAsynchronousSingleThreadDuplexReceivedCallInvoker.run(AnAsynchronousSingleThreadDuplexReceivedCallInvoker.java:97)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.net.SocketException: Connection reset
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:186)
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:140)
	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
	at java.base/java.io.DataInputStream.readByte(DataInputStream.java:270)
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:240)
	... 17 more
java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8927" _type="ExceptionCommand" date="Tue Mar 29 22:57:42 EDT 2022" starttimestamp="1648594670066" timestamp="14392421" type="Exception">
    <exceptionString><![CDATA[AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:64549 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host
java.rmi.ConnectIOException: error during JRMP connection establishment; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:300)
	at java.rmi/sun.rmi.transport.tcp.TCPChannel.newConnection(TCPChannel.java:196)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:132)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at inputport.rpc.AnAbstractReceivedCallInvoker.invokeMethod(AnAbstractReceivedCallInvoker.java:36)
	at inputport.rpc.duplex.ADuplexReceivedCallInvoker.invokeMethod(ADuplexReceivedCallInvoker.java:34)
	at inputport.rpc.AnAbstractReceivedCallInvoker.messageReceived(AnAbstractReceivedCallInvoker.java:53)
	at inputport.rpc.duplex.AnAsynchronousSingleThreadDuplexReceivedCallInvoker.run(AnAsynchronousSingleThreadDuplexReceivedCallInvoker.java:97)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.net.SocketException: Connection reset
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:186)
	at java.base/java.net.SocketInputStream.read(SocketInputStream.java:140)
	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:252)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:271)
	at java.base/java.io.DataInputStream.readByte(DataInputStream.java:270)
	at java.rmi/sun.rmi.transport.tcp.TCPChannel.createConnection(TCPChannel.java:239)
	... 18 more
java.rmi.UnmarshalException: Error unmarshaling return header; nested exception is: 
	java.net.SocketException: Connection reset
	at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:254)
	at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:164)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:217)
	at java.rmi/java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:162)
	at com.sun.proxy.$Proxy15.broadcast(Unknown Source)
	at client.ClientOutCoupler.propertyChange(ClientOutCoupler.java:43)
	at stringProcessors.AHalloweenCommandProcessor.notifyAllListeners(AHalloweenCommandProcessor.java:456)
	at stringProcessors.AHalloweenCommandProcessor.setInputString(AHalloweenCommandProcessor.java:523)
	at client.ClientRemoteObject.quit(ClientRemoteObject.java:233)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at assignments.util.inputParameters.ASimulationParametersController.callMethod(ASimulationParametersController.java:33)
	at util.interactiveMethodInvocation.ACommandToMethodCallTranslator.processCommands(ACommandToMethodCallTranslator.java:194)
	at assignments.util.inputParameters.ASimulationParametersController.processCommands(ASimulationParametersController.java:43)
	at coupledsims.AStandAloneTwoCoupledHalloweenSimulations.start(AStandAloneTwoCoupledHalloweenSimulations.java:99)
	at client.Client.main(Client.java:14)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="8929" _type="PauseCommand" date="Tue Mar 29 22:57:50 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="14400288">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[7867]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="8928" _type="BalloonCommand" date="Tue Mar 29 22:57:50 EDT 2022" message="*******************************************
Worked 11 minutes(fixed)/51 minutes(context based) from
Tue Mar 29 21:57:50 EDT 2022 to Tue Mar 29 22:57:42 EDT 2022
Edited 1 Projects: 
	A5
Edited 3 Files: 
	C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java
	C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteInterfaceGIPC.java
	C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java
Number of insert: 762
Number of delete: 467
" starttimestamp="1648594670066" timestamp="14400288">
    <fineGrainedWorkTime><![CDATA[51]]></fineGrainedWorkTime>
    <insert><![CDATA[762]]></insert>
    <startTime><![CDATA[1648605470349]]></startTime>
    <endTime><![CDATA[1648609062487]]></endTime>
    <workTime><![CDATA[11]]></workTime>
    <delete><![CDATA[467]]></delete>
  </Command>
  <Command __id="8931" _type="PauseCommand" date="Tue Mar 29 22:58:12 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="14422306">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[22018]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8930" _type="MoveCaretCommand" caretOffset="4370" date="Tue Mar 29 22:58:12 EDT 2022" docOffset="4370" starttimestamp="1648594670066" timestamp="14422306" />
  <Command __id="8932" _type="MoveCaretCommand" caretOffset="4370" date="Tue Mar 29 22:58:12 EDT 2022" docOffset="4370" starttimestamp="1648594670066" timestamp="14422306" />
  <Command __id="8934" _type="PauseCommand" date="Tue Mar 29 22:59:03 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="14473080">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[50774]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8933" _type="ShellCommand" date="Tue Mar 29 22:59:03 EDT 2022" starttimestamp="1648594670066" timestamp="14473080" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8936" _type="PauseCommand" date="Tue Mar 29 23:00:47 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="14577821">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[104741]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8935" _type="ShellCommand" date="Tue Mar 29 23:00:47 EDT 2022" starttimestamp="1648594670066" timestamp="14577821" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8938" _type="PauseCommand" date="Tue Mar 29 23:00:49 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14579497">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1676]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8937" _type="SelectTextCommand" caretOffset="3945" date="Tue Mar 29 23:00:49 EDT 2022" end="4155" start="3945" starttimestamp="1648594670066" timestamp="14579497" />
  <Command __id="8939" _type="SelectTextCommand" caretOffset="3945" date="Tue Mar 29 23:00:49 EDT 2022" end="4155" start="3945" starttimestamp="1648594670066" timestamp="14579497" />
  <Command __id="8940" _type="CopyCommand" date="Tue Mar 29 23:00:50 EDT 2022" starttimestamp="1648594670066" timestamp="14580297" />
  <Command __id="8942" _type="PauseCommand" date="Tue Mar 29 23:01:00 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="14590631">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[10334]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8941" _type="MoveCaretCommand" caretOffset="4479" date="Tue Mar 29 23:01:00 EDT 2022" docOffset="4479" starttimestamp="1648594670066" timestamp="14590631" />
  <Command __id="8943" _type="MoveCaretCommand" caretOffset="4479" date="Tue Mar 29 23:01:00 EDT 2022" docOffset="4479" starttimestamp="1648594670066" timestamp="14590631" />
  <Command __id="8945" _type="PauseCommand" date="Tue Mar 29 23:01:07 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="14597517">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6886]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8944" _type="MoveCaretCommand" caretOffset="5785" date="Tue Mar 29 23:01:07 EDT 2022" docOffset="5785" starttimestamp="1648594670066" timestamp="14597517" />
  <Command __id="8946" _type="MoveCaretCommand" caretOffset="5785" date="Tue Mar 29 23:01:07 EDT 2022" docOffset="5785" starttimestamp="1648594670066" timestamp="14597517" />
  <Command __id="8948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="14598169" />
  <Command __id="8949" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="14598169" />
  <Command __id="8951" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="14598335" />
  <Command __id="8952" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="14598335" />
  <Command __id="8954" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="14598548" />
  <Command __id="8955" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="14598548" />
  <Command __id="8957" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="14598875" />
  <Command __id="8958" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:01:08 EDT 2022" starttimestamp="1648594670066" timestamp="14598875" />
  <Command __id="8960" _type="InsertStringCommand" date="Tue Mar 29 23:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="14599123" timestamp2="14599123">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="8961" _type="InsertStringCommand" date="Tue Mar 29 23:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="14599123" timestamp2="14599123">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="8963" _type="InsertStringCommand" date="Tue Mar 29 23:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="14599335" timestamp2="14599335">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="8964" _type="InsertStringCommand" date="Tue Mar 29 23:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="14599335" timestamp2="14599335">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="8966" _type="InsertStringCommand" date="Tue Mar 29 23:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="14599474" timestamp2="14599474">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8967" _type="InsertStringCommand" date="Tue Mar 29 23:01:09 EDT 2022" starttimestamp="1648594670066" timestamp="14599474" timestamp2="14599474">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="8968" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:01:10 EDT 2022" starttimestamp="1648594670066" timestamp="14599977" />
  <Command __id="8969" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:01:10 EDT 2022" starttimestamp="1648594670066" timestamp="14600069" />
  <Command __id="8970" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:01:10 EDT 2022" starttimestamp="1648594670066" timestamp="14600109" />
  <Command __id="8972" _type="PauseCommand" date="Tue Mar 29 23:01:33 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="14623394">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[23285]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8971" _type="ShellCommand" date="Tue Mar 29 23:01:33 EDT 2022" starttimestamp="1648594670066" timestamp="14623394" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8974" _type="PauseCommand" date="Tue Mar 29 23:02:41 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="14691313">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[67919]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8973" _type="ShellCommand" date="Tue Mar 29 23:02:41 EDT 2022" starttimestamp="1648594670066" timestamp="14691313" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8976" _type="PauseCommand" date="Tue Mar 29 23:02:42 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14692424">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1111]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8975" _type="SelectTextCommand" caretOffset="3945" date="Tue Mar 29 23:02:42 EDT 2022" end="4155" start="3945" starttimestamp="1648594670066" timestamp="14692424" />
  <Command __id="8977" _type="SelectTextCommand" caretOffset="3945" date="Tue Mar 29 23:02:42 EDT 2022" end="4155" start="3945" starttimestamp="1648594670066" timestamp="14692424" />
  <Command __id="8978" _type="CopyCommand" date="Tue Mar 29 23:02:43 EDT 2022" starttimestamp="1648594670066" timestamp="14693385" />
  <Command __id="8980" _type="PauseCommand" date="Tue Mar 29 23:02:54 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="14704262">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[10877]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8979" _type="MoveCaretCommand" caretOffset="5704" date="Tue Mar 29 23:02:54 EDT 2022" docOffset="5704" starttimestamp="1648594670066" timestamp="14704262" />
  <Command __id="8981" _type="MoveCaretCommand" caretOffset="5704" date="Tue Mar 29 23:02:54 EDT 2022" docOffset="5704" starttimestamp="1648594670066" timestamp="14704262" />
  <Command __id="8983" _type="InsertStringCommand" date="Tue Mar 29 23:02:54 EDT 2022" starttimestamp="1648594670066" timestamp="14704874" timestamp2="14704874">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8984" _type="InsertStringCommand" date="Tue Mar 29 23:02:54 EDT 2022" starttimestamp="1648594670066" timestamp="14704874" timestamp2="14704874">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="8710" _type="Insert" date="Tue Mar 29 22:53:41 EDT 2022" docASTNodeCount="1067" docActiveCodeLength="7633" docExpressionCount="768" docLength="8289" length="1" offset="4053" starttimestamp="1648594670066" timestamp="14150942">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="8726" _type="Insert" date="Tue Mar 29 22:53:45 EDT 2022" docASTNodeCount="1067" docActiveCodeLength="7638" docExpressionCount="768" docLength="8294" length="5" offset="4102" starttimestamp="1648594670066" timestamp="14155661">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="8729" _type="Replace" date="Tue Mar 29 22:53:45 EDT 2022" docASTNodeCount="1074" docActiveCodeLength="7680" docExpressionCount="774" docLength="8336" endLine="108" insertionLength="45" int_docASTNodeCount="1067" int_docActiveCodeLength="7635" int_docExpressionCount="768" int_docLength="8291" length="3" offset="4104" startLine="108" starttimestamp="1648594670066" timestamp="14155913">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			System.out.println("USING RMI IN SERVER");]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8736" _type="Delete" date="Tue Mar 29 22:53:47 EDT 2022" docASTNodeCount="1074" docActiveCodeLength="7677" docExpressionCount="774" docLength="8333" endLine="108" length="3" offset="4133" repeat="3" startLine="108" starttimestamp="1648594670066" timestamp="14157415" timestamp2="14157696">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="8745" _type="Insert" date="Tue Mar 29 22:53:47 EDT 2022" docASTNodeCount="1074" docActiveCodeLength="7681" docExpressionCount="774" docLength="8337" length="4" offset="4133" repeat="4" starttimestamp="1648594670066" timestamp="14157854" timestamp2="14158888">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="8947" _type="Delete" date="Tue Mar 29 23:01:08 EDT 2022" docASTNodeCount="1074" docActiveCodeLength="7677" docExpressionCount="774" docLength="8333" endLine="171" length="4" offset="5781" repeat="4" startLine="171" starttimestamp="1648594670066" timestamp="14598160" timestamp2="14598873">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="8959" _type="Insert" date="Tue Mar 29 23:01:09 EDT 2022" docASTNodeCount="1074" docActiveCodeLength="7680" docExpressionCount="774" docLength="8336" length="3" offset="5781" repeat="3" starttimestamp="1648594670066" timestamp="14599116" timestamp2="14599469">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="8982" _type="Insert" date="Tue Mar 29 23:02:54 EDT 2022" docASTNodeCount="1074" docActiveCodeLength="7684" docExpressionCount="774" docLength="8340" length="4" offset="5704" starttimestamp="1648594670066" timestamp="14704863">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="8986" _type="PauseCommand" date="Tue Mar 29 23:02:56 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="14706748">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1874]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="8985" _type="Replace" date="Tue Mar 29 23:02:56 EDT 2022" docASTNodeCount="1102" docActiveCodeLength="7894" docExpressionCount="795" docLength="8550" endLine="169" insertionLength="212" int_docASTNodeCount="1074" int_docActiveCodeLength="7682" int_docExpressionCount="774" int_docLength="8338" length="2" offset="5706" startLine="169" starttimestamp="1648594670066" timestamp="14706748">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}]]></insertedText>
  </DocumentChange>
  <Command __id="8987" _type="PasteCommand" date="Tue Mar 29 23:02:56 EDT 2022" starttimestamp="1648594670066" timestamp="14706761" />
  <Command __id="8989" _type="InsertStringCommand" date="Tue Mar 29 23:02:57 EDT 2022" starttimestamp="1648594670066" timestamp="14707704" timestamp2="14707704">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8990" _type="InsertStringCommand" date="Tue Mar 29 23:02:57 EDT 2022" starttimestamp="1648594670066" timestamp="14707704" timestamp2="14707704">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8991" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:02:58 EDT 2022" starttimestamp="1648594670066" timestamp="14708530" />
  <Command __id="8992" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:02:58 EDT 2022" starttimestamp="1648594670066" timestamp="14708634" />
  <Command __id="8993" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:02:58 EDT 2022" starttimestamp="1648594670066" timestamp="14708663" />
  <Command __id="8995" _type="PauseCommand" date="Tue Mar 29 23:03:09 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="14719440">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[10777]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="8994" _type="SelectTextCommand" caretOffset="3570" date="Tue Mar 29 23:03:09 EDT 2022" end="3630" start="3570" starttimestamp="1648594670066" timestamp="14719440" />
  <Command __id="8996" _type="SelectTextCommand" caretOffset="3570" date="Tue Mar 29 23:03:09 EDT 2022" end="3630" start="3570" starttimestamp="1648594670066" timestamp="14719441" />
  <Command __id="8997" _type="CopyCommand" date="Tue Mar 29 23:03:10 EDT 2022" starttimestamp="1648594670066" timestamp="14719961" />
  <Command __id="8999" _type="PauseCommand" date="Tue Mar 29 23:03:15 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="14725703">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[5742]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="8998" _type="MoveCaretCommand" caretOffset="5325" date="Tue Mar 29 23:03:15 EDT 2022" docOffset="5325" starttimestamp="1648594670066" timestamp="14725703" />
  <Command __id="9000" _type="MoveCaretCommand" caretOffset="5325" date="Tue Mar 29 23:03:15 EDT 2022" docOffset="5325" starttimestamp="1648594670066" timestamp="14725703" />
  <Command __id="9002" _type="InsertStringCommand" date="Tue Mar 29 23:03:16 EDT 2022" starttimestamp="1648594670066" timestamp="14726571" timestamp2="14726571">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="9003" _type="InsertStringCommand" date="Tue Mar 29 23:03:16 EDT 2022" starttimestamp="1648594670066" timestamp="14726571" timestamp2="14726571">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="9005" _type="PasteCommand" date="Tue Mar 29 23:03:17 EDT 2022" starttimestamp="1648594670066" timestamp="14727340" />
  <Command __id="9007" _type="InsertStringCommand" date="Tue Mar 29 23:03:17 EDT 2022" starttimestamp="1648594670066" timestamp="14727736" timestamp2="14727736">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9008" _type="InsertStringCommand" date="Tue Mar 29 23:03:17 EDT 2022" starttimestamp="1648594670066" timestamp="14727736" timestamp2="14727736">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9009" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:03:18 EDT 2022" starttimestamp="1648594670066" timestamp="14728582" />
  <Command __id="9010" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:03:18 EDT 2022" starttimestamp="1648594670066" timestamp="14728673" />
  <Command __id="9011" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:03:18 EDT 2022" starttimestamp="1648594670066" timestamp="14728712" />
  <Command __id="9013" _type="PauseCommand" date="Tue Mar 29 23:03:38 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="14748062">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[19350]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9012" _type="SelectTextCommand" caretOffset="5369" date="Tue Mar 29 23:03:38 EDT 2022" end="5386" start="5369" starttimestamp="1648594670066" timestamp="14748062" />
  <Command __id="9014" _type="SelectTextCommand" caretOffset="5369" date="Tue Mar 29 23:03:38 EDT 2022" end="5386" start="5369" starttimestamp="1648594670066" timestamp="14748063" />
  <Command __id="9016" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:03:38 EDT 2022" starttimestamp="1648594670066" timestamp="14748429" />
  <Command __id="9017" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:03:38 EDT 2022" starttimestamp="1648594670066" timestamp="14748429" />
  <Command __id="9018" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:03:39 EDT 2022" starttimestamp="1648594670066" timestamp="14749310" />
  <Command __id="9019" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:03:39 EDT 2022" starttimestamp="1648594670066" timestamp="14749398" />
  <Command __id="9020" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:03:39 EDT 2022" starttimestamp="1648594670066" timestamp="14749440" />
  <Command __id="9022" _type="PauseCommand" date="Tue Mar 29 23:04:03 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="14772944">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[23504]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9021" _type="MoveCaretCommand" caretOffset="6051" date="Tue Mar 29 23:04:03 EDT 2022" docOffset="6051" starttimestamp="1648594670066" timestamp="14772944" />
  <Command __id="9023" _type="MoveCaretCommand" caretOffset="6051" date="Tue Mar 29 23:04:03 EDT 2022" docOffset="6051" starttimestamp="1648594670066" timestamp="14772944" />
  <Command __id="9025" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:04:03 EDT 2022" starttimestamp="1648594670066" timestamp="14773496" />
  <Command __id="9026" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:04:03 EDT 2022" starttimestamp="1648594670066" timestamp="14773496" />
  <Command __id="9028" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:04:03 EDT 2022" starttimestamp="1648594670066" timestamp="14773637" />
  <Command __id="9029" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:04:03 EDT 2022" starttimestamp="1648594670066" timestamp="14773637" />
  <Command __id="9031" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:04:03 EDT 2022" starttimestamp="1648594670066" timestamp="14773800" />
  <Command __id="9032" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:04:03 EDT 2022" starttimestamp="1648594670066" timestamp="14773800" />
  <Command __id="9033" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:04:04 EDT 2022" starttimestamp="1648594670066" timestamp="14774795" />
  <Command __id="9034" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:04:04 EDT 2022" starttimestamp="1648594670066" timestamp="14774887" />
  <Command __id="9035" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:04:05 EDT 2022" starttimestamp="1648594670066" timestamp="14774935" />
  <Command __id="9037" _type="PauseCommand" date="Tue Mar 29 23:04:39 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="14809124">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[34189]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9036" _type="ShellCommand" date="Tue Mar 29 23:04:39 EDT 2022" starttimestamp="1648594670066" timestamp="14809124" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9039" _type="PauseCommand" date="Tue Mar 29 23:06:57 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="14947402">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[138278]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9042" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 23:07:03 EDT 2022" starttimestamp="1648594670066" timestamp="14953569" />
  <Command __id="9044" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:07:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14953590" type="Debug" />
  <Command __id="9045" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:07:03 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="14953590" type="Debug" />
  <Command __id="9046" _type="ProgramExecutionEvent" className="/A5/src/registry/TrickOrTreatRegistry.java" date="Tue Mar 29 23:07:03 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="14953590" type="Run" />
  <DocumentChange __id="8988" _type="Insert" date="Tue Mar 29 23:02:57 EDT 2022" docASTNodeCount="1102" docActiveCodeLength="7898" docExpressionCount="795" docLength="8554" length="4" offset="5918" starttimestamp="1648594670066" timestamp="14707683">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="9001" _type="Insert" date="Tue Mar 29 23:03:16 EDT 2022" docASTNodeCount="1102" docActiveCodeLength="7900" docExpressionCount="795" docLength="8556" length="2" offset="5325" starttimestamp="1648594670066" timestamp="14726566">
    <text><![CDATA[		]]></text>
  </DocumentChange>
  <DocumentChange __id="9004" _type="Replace" date="Tue Mar 29 23:03:17 EDT 2022" docASTNodeCount="1111" docActiveCodeLength="7960" docExpressionCount="799" docLength="8616" endLine="156" insertionLength="62" int_docASTNodeCount="1102" int_docActiveCodeLength="7898" int_docExpressionCount="795" int_docLength="8554" length="2" offset="5325" startLine="156" starttimestamp="1648594670066" timestamp="14727334">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9006" _type="Insert" date="Tue Mar 29 23:03:17 EDT 2022" docASTNodeCount="1111" docActiveCodeLength="7964" docExpressionCount="799" docLength="8620" length="4" offset="5387" starttimestamp="1648594670066" timestamp="14727728">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="9015" _type="Delete" date="Tue Mar 29 23:03:38 EDT 2022" docASTNodeCount="1110" docActiveCodeLength="7947" docExpressionCount="798" docLength="8603" endLine="156" length="17" offset="5369" startLine="156" starttimestamp="1648594670066" timestamp="14748417">
    <text><![CDATA[ = clientListGIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="9024" _type="Delete" date="Tue Mar 29 23:04:03 EDT 2022" docASTNodeCount="1110" docActiveCodeLength="7944" docExpressionCount="798" docLength="8600" endLine="181" length="3" offset="6048" repeat="3" startLine="181" starttimestamp="1648594670066" timestamp="14773484" timestamp2="14773798">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <Command __id="9040" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:06:58 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8473" docExpressionCount="788" docLength="9244" projectName="A5" starttimestamp="1648594670066" timestamp="14948216">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9048" _type="PauseCommand" date="Tue Mar 29 23:07:12 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="14961955">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8365]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9049" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 29 23:07:12 EDT 2022" docOffset="0" starttimestamp="1648594670066" timestamp="14962167" />
  <Command __id="9051" _type="PauseCommand" date="Tue Mar 29 23:08:22 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="15032408">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[70241]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9050" _type="ShellCommand" date="Tue Mar 29 23:08:22 EDT 2022" starttimestamp="1648594670066" timestamp="15032408" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9053" _type="PauseCommand" date="Tue Mar 29 23:10:12 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="15142847">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[110439]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9052" _type="ShellCommand" date="Tue Mar 29 23:10:12 EDT 2022" starttimestamp="1648594670066" timestamp="15142847" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9055" _type="MoveCaretCommand" caretOffset="8479" date="Tue Mar 29 23:10:13 EDT 2022" docOffset="8479" starttimestamp="1648594670066" timestamp="15143048" />
  <Command __id="9047" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:07:12 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="14961955">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9054" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:10:13 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8473" docExpressionCount="788" docLength="9244" projectName="A5" starttimestamp="1648594670066" timestamp="15142940">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9057" _type="PauseCommand" date="Tue Mar 29 23:10:28 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15158691">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15643]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9058" _type="MoveCaretCommand" caretOffset="1299" date="Tue Mar 29 23:10:28 EDT 2022" docOffset="1299" starttimestamp="1648594670066" timestamp="15158818" />
  <Command __id="9056" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:10:28 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648594670066" timestamp="15158691">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9060" _type="PauseCommand" date="Tue Mar 29 23:10:30 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15160587">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1769]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9061" _type="MoveCaretCommand" caretOffset="0" date="Tue Mar 29 23:10:30 EDT 2022" docOffset="0" starttimestamp="1648594670066" timestamp="15160685" />
  <Command __id="9063" _type="PauseCommand" date="Tue Mar 29 23:10:34 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15164575">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3890]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9062" _type="SelectTextCommand" caretOffset="1160" date="Tue Mar 29 23:10:34 EDT 2022" end="1258" start="1160" starttimestamp="1648594670066" timestamp="15164575" />
  <Command __id="9064" _type="CopyCommand" date="Tue Mar 29 23:10:34 EDT 2022" starttimestamp="1648594670066" timestamp="15164766" />
  <Command __id="9059" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:10:30 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="15160587">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9066" _type="PauseCommand" date="Tue Mar 29 23:10:35 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15165796">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1030]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9067" _type="MoveCaretCommand" caretOffset="8479" date="Tue Mar 29 23:10:35 EDT 2022" docOffset="8479" starttimestamp="1648594670066" timestamp="15165895" />
  <Command __id="9069" _type="PauseCommand" date="Tue Mar 29 23:10:37 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15167515">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1620]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9068" _type="MoveCaretCommand" caretOffset="9231" date="Tue Mar 29 23:10:37 EDT 2022" docOffset="9231" starttimestamp="1648594670066" timestamp="15167515" />
  <Command __id="9070" _type="MoveCaretCommand" caretOffset="9227" date="Tue Mar 29 23:10:38 EDT 2022" docOffset="9227" starttimestamp="1648594670066" timestamp="15168458" />
  <Command __id="9072" _type="InsertStringCommand" date="Tue Mar 29 23:10:38 EDT 2022" starttimestamp="1648594670066" timestamp="15168715" timestamp2="15168715">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9074" _type="PasteCommand" date="Tue Mar 29 23:10:39 EDT 2022" starttimestamp="1648594670066" timestamp="15169005" />
  <Command __id="9076" _type="PauseCommand" date="Tue Mar 29 23:10:41 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15171734">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2729]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9075" _type="SelectTextCommand" caretOffset="9232" date="Tue Mar 29 23:10:41 EDT 2022" end="9243" start="9232" starttimestamp="1648594670066" timestamp="15171734" />
  <Command __id="9078" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:10:42 EDT 2022" starttimestamp="1648594670066" timestamp="15172111" />
  <Command __id="9080" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:10:42 EDT 2022" starttimestamp="1648594670066" timestamp="15172459" />
  <Command __id="9082" _type="InsertStringCommand" date="Tue Mar 29 23:10:42 EDT 2022" starttimestamp="1648594670066" timestamp="15172697" timestamp2="15172697">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9084" _type="PauseCommand" date="Tue Mar 29 23:10:52 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15182204">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[9507]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9083" _type="SelectTextCommand" caretOffset="9260" date="Tue Mar 29 23:10:52 EDT 2022" end="9272" start="9260" starttimestamp="1648594670066" timestamp="15182204" />
  <Command __id="9065" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:10:35 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8473" docExpressionCount="788" docLength="9244" projectName="A5" starttimestamp="1648594670066" timestamp="15165796">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="9071" _type="Insert" date="Tue Mar 29 23:10:38 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8477" docExpressionCount="788" docLength="9248" length="4" offset="9227" starttimestamp="1648594670066" timestamp="15168707">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="9073" _type="Replace" date="Tue Mar 29 23:10:39 EDT 2022" docASTNodeCount="1101" docActiveCodeLength="8477" docExpressionCount="788" docLength="9346" endLine="259" insertionLength="100" int_docASTNodeCount="1101" int_docActiveCodeLength="8475" int_docExpressionCount="788" int_docLength="9246" length="2" offset="9229" startLine="259" starttimestamp="1648594670066" timestamp="15169000">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9077" _type="Delete" date="Tue Mar 29 23:10:42 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="8563" docExpressionCount="795" docLength="9334" endLine="259" length="12" offset="9231" repeat="2" startLine="259" starttimestamp="1648594670066" timestamp="15172103" timestamp2="15172455">
    <text><![CDATA[//ObservingS]]></text>
  </DocumentChange>
  <DocumentChange __id="9081" _type="Insert" date="Tue Mar 29 23:10:42 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="8564" docExpressionCount="795" docLength="9335" length="1" offset="9231" starttimestamp="1648594670066" timestamp="15172688">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="9086" _type="PauseCommand" date="Tue Mar 29 23:10:53 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15183373">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1169]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="9085" _type="Replace" date="Tue Mar 29 23:10:53 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="8553" docExpressionCount="795" docLength="9324" endLine="259" insertionLength="1" int_docASTNodeCount="1108" int_docActiveCodeLength="8552" int_docExpressionCount="794" int_docLength="9323" length="12" offset="9260" startLine="259" starttimestamp="1648594670066" timestamp="15183373">
    <deletedText><![CDATA[IPCMechanism]]></deletedText>
    <insertedText><![CDATA[m]]></insertedText>
  </DocumentChange>
  <Command __id="9087" _type="InsertStringCommand" date="Tue Mar 29 23:10:53 EDT 2022" starttimestamp="1648594670066" timestamp="15183398" timestamp2="15183398">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9089" _type="InsertStringCommand" date="Tue Mar 29 23:10:53 EDT 2022" starttimestamp="1648594670066" timestamp="15183670" timestamp2="15183670">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9091" _type="InsertStringCommand" date="Tue Mar 29 23:10:53 EDT 2022" starttimestamp="1648594670066" timestamp="15183907" timestamp2="15183907">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="9093" _type="InsertStringCommand" date="Tue Mar 29 23:10:54 EDT 2022" starttimestamp="1648594670066" timestamp="15184009" timestamp2="15184009">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9095" _type="InsertStringCommand" date="Tue Mar 29 23:10:54 EDT 2022" starttimestamp="1648594670066" timestamp="15184160" timestamp2="15184160">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9097" _type="InsertStringCommand" date="Tue Mar 29 23:10:54 EDT 2022" starttimestamp="1648594670066" timestamp="15184272" timestamp2="15184272">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9099" _type="InsertStringCommand" date="Tue Mar 29 23:10:54 EDT 2022" starttimestamp="1648594670066" timestamp="15184392" timestamp2="15184392">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9101" _type="InsertStringCommand" date="Tue Mar 29 23:10:54 EDT 2022" starttimestamp="1648594670066" timestamp="15184483" timestamp2="15184483">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9103" _type="InsertStringCommand" date="Tue Mar 29 23:10:54 EDT 2022" starttimestamp="1648594670066" timestamp="15184613" timestamp2="15184613">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9105" _type="PauseCommand" date="Tue Mar 29 23:10:58 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15188714">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4101]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9104" _type="SelectTextCommand" caretOffset="9271" date="Tue Mar 29 23:10:58 EDT 2022" end="9285" start="9271" starttimestamp="1648594670066" timestamp="15188714" />
  <Command __id="9107" _type="InsertStringCommand" date="Tue Mar 29 23:10:59 EDT 2022" starttimestamp="1648594670066" timestamp="15189173" timestamp2="15189173">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9109" _type="InsertStringCommand" date="Tue Mar 29 23:10:59 EDT 2022" starttimestamp="1648594670066" timestamp="15189272" timestamp2="15189272">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9111" _type="InsertStringCommand" date="Tue Mar 29 23:10:59 EDT 2022" starttimestamp="1648594670066" timestamp="15189353" timestamp2="15189353">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9113" _type="InsertStringCommand" date="Tue Mar 29 23:10:59 EDT 2022" starttimestamp="1648594670066" timestamp="15189465" timestamp2="15189465">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9115" _type="PauseCommand" date="Tue Mar 29 23:11:18 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15208164">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[18699]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9114" _type="SelectTextCommand" caretOffset="8891" date="Tue Mar 29 23:11:18 EDT 2022" end="8912" start="8891" starttimestamp="1648594670066" timestamp="15208164" />
  <Command __id="9116" _type="CopyCommand" date="Tue Mar 29 23:11:18 EDT 2022" starttimestamp="1648594670066" timestamp="15208519" />
  <Command __id="9118" _type="PauseCommand" date="Tue Mar 29 23:11:20 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15210291">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1772]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9117" _type="SelectTextCommand" caretOffset="9295" date="Tue Mar 29 23:11:20 EDT 2022" end="9303" start="9295" starttimestamp="1648594670066" timestamp="15210291" />
  <Command __id="9119" _type="MoveCaretCommand" caretOffset="9295" date="Tue Mar 29 23:11:20 EDT 2022" docOffset="9295" starttimestamp="1648594670066" timestamp="15210848" />
  <Command __id="9121" _type="PauseCommand" date="Tue Mar 29 23:11:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15213100">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2252]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9120" _type="SelectTextCommand" caretOffset="9294" date="Tue Mar 29 23:11:23 EDT 2022" end="9303" start="9294" starttimestamp="1648594670066" timestamp="15213100" />
  <Command __id="9123" _type="PasteCommand" date="Tue Mar 29 23:11:23 EDT 2022" starttimestamp="1648594670066" timestamp="15213488" />
  <Command __id="9124" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:11:24 EDT 2022" starttimestamp="1648594670066" timestamp="15213940" />
  <Command __id="9125" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:11:24 EDT 2022" starttimestamp="1648594670066" timestamp="15214038" />
  <Command __id="9126" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:11:24 EDT 2022" starttimestamp="1648594670066" timestamp="15214061" />
  <Command __id="9128" _type="PauseCommand" date="Tue Mar 29 23:11:35 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15225204">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[11143]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9127" _type="SelectTextCommand" caretOffset="9277" date="Tue Mar 29 23:11:35 EDT 2022" end="9292" start="9277" starttimestamp="1648594670066" timestamp="15225204" />
  <Command __id="9129" _type="CopyCommand" date="Tue Mar 29 23:11:35 EDT 2022" starttimestamp="1648594670066" timestamp="15225581" />
  <Command __id="9131" _type="PauseCommand" date="Tue Mar 29 23:11:36 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15226603">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1022]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9130" _type="MoveCaretCommand" caretOffset="9317" date="Tue Mar 29 23:11:36 EDT 2022" docOffset="9317" starttimestamp="1648594670066" timestamp="15226603" />
  <Command __id="9133" _type="InsertStringCommand" date="Tue Mar 29 23:11:36 EDT 2022" starttimestamp="1648594670066" timestamp="15226916" timestamp2="15226916">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9135" _type="PasteCommand" date="Tue Mar 29 23:11:37 EDT 2022" starttimestamp="1648594670066" timestamp="15227156" />
  <Command __id="9137" _type="InsertStringCommand" date="Tue Mar 29 23:11:38 EDT 2022" starttimestamp="1648594670066" timestamp="15228000" timestamp2="15228000">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="9139" _type="InsertStringCommand" date="Tue Mar 29 23:11:38 EDT 2022" starttimestamp="1648594670066" timestamp="15228098" timestamp2="15228098">
    <data><![CDATA[+]]></data>
  </Command>
  <Command __id="9141" _type="InsertStringCommand" date="Tue Mar 29 23:11:38 EDT 2022" starttimestamp="1648594670066" timestamp="15228352" timestamp2="15228352">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9143" _type="PauseCommand" date="Tue Mar 29 23:11:49 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15239622">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[11270]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9142" _type="MoveCaretCommand" caretOffset="2614" date="Tue Mar 29 23:11:49 EDT 2022" docOffset="2614" starttimestamp="1648594670066" timestamp="15239622" />
  <Command __id="9145" _type="InsertStringCommand" date="Tue Mar 29 23:11:49 EDT 2022" starttimestamp="1648594670066" timestamp="15239870" timestamp2="15239870">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9147" _type="InsertStringCommand" date="Tue Mar 29 23:11:50 EDT 2022" starttimestamp="1648594670066" timestamp="15240572" timestamp2="15240572">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="9149" _type="InsertStringCommand" date="Tue Mar 29 23:11:50 EDT 2022" starttimestamp="1648594670066" timestamp="15240715" timestamp2="15240715">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9151" _type="InsertStringCommand" date="Tue Mar 29 23:11:50 EDT 2022" starttimestamp="1648594670066" timestamp="15240810" timestamp2="15240810">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9153" _type="InsertStringCommand" date="Tue Mar 29 23:11:51 EDT 2022" starttimestamp="1648594670066" timestamp="15241441" timestamp2="15241441">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="9155" _type="InsertStringCommand" date="Tue Mar 29 23:11:51 EDT 2022" starttimestamp="1648594670066" timestamp="15241519" timestamp2="15241519">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9157" _type="InsertStringCommand" date="Tue Mar 29 23:11:51 EDT 2022" starttimestamp="1648594670066" timestamp="15241681" timestamp2="15241681">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9159" _type="InsertStringCommand" date="Tue Mar 29 23:11:51 EDT 2022" starttimestamp="1648594670066" timestamp="15241795" timestamp2="15241795">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9161" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15241948" timestamp2="15241948">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9163" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15241996" timestamp2="15241996">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9165" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15242142" timestamp2="15242142">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9167" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15242215" timestamp2="15242215">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9169" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15242340" timestamp2="15242340">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9171" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15242442" timestamp2="15242442">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9173" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15242571" timestamp2="15242571">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="9175" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15242727" timestamp2="15242727">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9177" _type="InsertStringCommand" date="Tue Mar 29 23:11:52 EDT 2022" starttimestamp="1648594670066" timestamp="15242847" timestamp2="15242847">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9179" _type="InsertStringCommand" date="Tue Mar 29 23:11:53 EDT 2022" starttimestamp="1648594670066" timestamp="15242934" timestamp2="15242934">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9181" _type="InsertStringCommand" date="Tue Mar 29 23:11:53 EDT 2022" starttimestamp="1648594670066" timestamp="15243064" timestamp2="15243064">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9183" _type="InsertStringCommand" date="Tue Mar 29 23:11:53 EDT 2022" starttimestamp="1648594670066" timestamp="15243208" timestamp2="15243208">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9185" _type="PasteCommand" date="Tue Mar 29 23:11:53 EDT 2022" starttimestamp="1648594670066" timestamp="15243548" />
  <Command __id="9187" _type="InsertStringCommand" date="Tue Mar 29 23:11:53 EDT 2022" starttimestamp="1648594670066" timestamp="15243817" timestamp2="15243817">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9189" _type="PauseCommand" date="Tue Mar 29 23:11:55 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15245101">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1284]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9188" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:11:55 EDT 2022" starttimestamp="1648594670066" timestamp="15245101" />
  <Command __id="9190" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:11:55 EDT 2022" starttimestamp="1648594670066" timestamp="15245193" />
  <Command __id="9191" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:11:55 EDT 2022" starttimestamp="1648594670066" timestamp="15245262" />
  <Command __id="9193" _type="PauseCommand" date="Tue Mar 29 23:12:17 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="15267362">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[22100]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9192" _type="ShellCommand" date="Tue Mar 29 23:12:17 EDT 2022" starttimestamp="1648594670066" timestamp="15267362" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9194" _type="ShellCommand" date="Tue Mar 29 23:12:17 EDT 2022" starttimestamp="1648594670066" timestamp="15267471" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9206" _type="PauseCommand" date="Tue Mar 29 23:12:19 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15269281">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1791]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9205" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:12:19 EDT 2022" starttimestamp="1648594670066" timestamp="15269281" />
  <Command __id="9207" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:12:19 EDT 2022" starttimestamp="1648594670066" timestamp="15269379" />
  <Command __id="9208" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:12:19 EDT 2022" starttimestamp="1648594670066" timestamp="15269415" />
  <Command __id="9211" _type="PauseCommand" date="Tue Mar 29 23:12:20 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15270456">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1041]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9210" _type="ShellCommand" date="Tue Mar 29 23:12:20 EDT 2022" starttimestamp="1648594670066" timestamp="15270456" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9213" _type="PauseCommand" date="Tue Mar 29 23:12:25 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15274955">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4499]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9212" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 23:12:25 EDT 2022" forward="false" matchWord="false" offset="2652" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="15274955" wrapSearch="false">
    <searchString><![CDATA[changeIPC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9215" _type="PauseCommand" date="Tue Mar 29 23:12:27 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15277729">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2774]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9214" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 23:12:27 EDT 2022" forward="true" matchWord="false" offset="2652" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="15277729" wrapSearch="false">
    <searchString><![CDATA[changeIPC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9216" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 23:12:28 EDT 2022" forward="true" matchWord="false" offset="9010" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="15278456" wrapSearch="false">
    <searchString><![CDATA[changeIPC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9217" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 23:12:29 EDT 2022" forward="true" matchWord="false" offset="9010" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="15279007" wrapSearch="false">
    <searchString><![CDATA[changeIPC]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9219" _type="PauseCommand" date="Tue Mar 29 23:12:31 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15281110">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2103]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9218" _type="ShellCommand" date="Tue Mar 29 23:12:31 EDT 2022" starttimestamp="1648594670066" timestamp="15281110" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="9088" _type="Insert" date="Tue Mar 29 23:10:53 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="8561" docExpressionCount="795" docLength="9332" length="8" offset="9261" repeat="8" starttimestamp="1648594670066" timestamp="15183664" timestamp2="15184608">
    <text><![CDATA[echanism]]></text>
  </DocumentChange>
  <DocumentChange __id="9106" _type="Replace" date="Tue Mar 29 23:10:59 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="8548" docExpressionCount="795" docLength="9319" endLine="259" insertionLength="1" int_docASTNodeCount="1108" int_docActiveCodeLength="8547" int_docExpressionCount="794" int_docLength="9318" length="14" offset="9271" startLine="259" starttimestamp="1648594670066" timestamp="15189165">
    <deletedText><![CDATA[originalClient]]></deletedText>
    <insertedText><![CDATA[t]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9108" _type="Insert" date="Tue Mar 29 23:10:59 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="8551" docExpressionCount="795" docLength="9322" length="3" offset="9272" repeat="3" starttimestamp="1648594670066" timestamp="15189266" timestamp2="15189459">
    <text><![CDATA[his]]></text>
  </DocumentChange>
  <DocumentChange __id="9122" _type="Replace" date="Tue Mar 29 23:11:23 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="8563" docExpressionCount="795" docLength="9334" endLine="259" insertionLength="21" int_docASTNodeCount="1109" int_docActiveCodeLength="8542" int_docExpressionCount="795" int_docLength="9313" length="9" offset="9294" startLine="259" starttimestamp="1648594670066" timestamp="15213473">
    <deletedText><![CDATA[broadcast]]></deletedText>
    <insertedText><![CDATA[broadcastIPCMechanism]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9132" _type="Insert" date="Tue Mar 29 23:11:36 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="8567" docExpressionCount="795" docLength="9338" length="4" offset="9317" starttimestamp="1648594670066" timestamp="15226896">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="9134" _type="Replace" date="Tue Mar 29 23:11:37 EDT 2022" docASTNodeCount="1111" docActiveCodeLength="8582" docExpressionCount="796" docLength="9353" endLine="260" insertionLength="17" int_docASTNodeCount="1109" int_docActiveCodeLength="8565" int_docExpressionCount="795" int_docLength="9336" length="2" offset="9319" startLine="260" starttimestamp="1648594670066" timestamp="15227151">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		aProposalNumber]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9136" _type="Insert" date="Tue Mar 29 23:11:38 EDT 2022" docASTNodeCount="1112" docActiveCodeLength="8585" docExpressionCount="797" docLength="9356" length="3" offset="9336" repeat="3" starttimestamp="1648594670066" timestamp="15227993" timestamp2="15228347">
    <text><![CDATA[++;]]></text>
  </DocumentChange>
  <DocumentChange __id="9144" _type="Insert" date="Tue Mar 29 23:11:49 EDT 2022" docASTNodeCount="1118" docActiveCodeLength="8623" docExpressionCount="798" docLength="9394" length="38" offset="2614" repeat="22" starttimestamp="1648594670066" timestamp="15239863" timestamp2="15243812">
    <text><![CDATA[
	private static int aProposalNumber;]]></text>
  </DocumentChange>
  <DocumentChange __id="9195" _type="Delete" date="Tue Mar 29 23:12:17 EDT 2022" docASTNodeCount="1110" docActiveCodeLength="8537" docExpressionCount="791" docLength="9308" endLine="260" length="86" offset="9269" startLine="260" starttimestamp="1648594670066" timestamp="15267484">
    <text><![CDATA[server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);]]></text>
  </DocumentChange>
  <DocumentChange __id="9196" _type="Insert" date="Tue Mar 29 23:12:17 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8701" docExpressionCount="803" docLength="9506" length="198" offset="9269" repeat="9" starttimestamp="1648594670066" timestamp="15267490" timestamp2="15267502">
    <text><![CDATA[try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <Command __id="9221" _type="PauseCommand" date="Tue Mar 29 23:12:43 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15293634">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12524]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9222" _type="MoveCaretCommand" caretOffset="714" date="Tue Mar 29 23:12:43 EDT 2022" docOffset="923" starttimestamp="1648594670066" timestamp="15293764" />
  <Command __id="9220" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:12:43 EDT 2022" docASTNodeCount="114" docActiveCodeLength="897" docExpressionCount="69" docLength="931" projectName="A5" starttimestamp="1648594670066" timestamp="15293634">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.CLIENT_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ClientRemoteInterfaceGIPC  extends Remote{¶¶	//void processArgs(String[] args);¶	¶	void inCoupler(String aNewCommand, int aProposalNumber) throws RemoteException;¶¶	void start(String[] args) throws RemoteException;¶¶	void processArgs(String[] args) throws RemoteException;¶¶	HalloweenCommandProcessor createSimulation(String aPrefix) throws RemoteException;¶¶	void broadcastMetaState(boolean broadcast) throws RemoteException;¶¶	void changeIPCMechanism(IPCMechanism mechanism, int aProposalNumber) throws RemoteException;¶¶"), Diff(INSERT,"	void quit(int i) throws RemoteException;¶¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import java.rmi.Remote;
import java.rmi.RemoteException;

import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.CLIENT_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ClientRemoteInterfaceGIPC  extends Remote{

	//void processArgs(String[] args);
	
	void inCoupler(String aNewCommand, int aProposalNumber) throws RemoteException;

	void start(String[] args) throws RemoteException;

	void processArgs(String[] args) throws RemoteException;

	HalloweenCommandProcessor createSimulation(String aPrefix) throws RemoteException;

	void broadcastMetaState(boolean broadcast) throws RemoteException;

	void changeIPCMechanism(IPCMechanism mechanism, int aProposalNumber) throws RemoteException;

	void quit(int i) throws RemoteException;

}
]]></snapshot>
  </Command>
  <Command __id="9224" _type="PauseCommand" date="Tue Mar 29 23:12:47 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15297492">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3728]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9225" _type="SelectTextCommand" caretOffset="9010" date="Tue Mar 29 23:12:47 EDT 2022" end="9010" start="9001" starttimestamp="1648594670066" timestamp="15297600" />
  <Command __id="9227" _type="PauseCommand" date="Tue Mar 29 23:13:39 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="15349097">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[51497]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9226" _type="SelectTextCommand" caretOffset="9042" date="Tue Mar 29 23:13:39 EDT 2022" end="9062" start="9042" starttimestamp="1648594670066" timestamp="15349097" />
  <Command __id="9223" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:12:47 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8701" docExpressionCount="803" docLength="9506" projectName="A5" starttimestamp="1648594670066" timestamp="15297492">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	"), Diff(INSERT,"private static int aProposalNumber;¶	"), Diff(EQUAL,"¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		"), Diff(INSERT,"try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶		"), Diff(EQUAL,"¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		commandProcessor.setInputString("quit");
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism, int proposalNumber) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		aProposalNumber++;
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="9229" _type="PauseCommand" date="Tue Mar 29 23:13:40 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15350656">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1559]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="9230" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:13:40 EDT 2022" starttimestamp="1648594670066" timestamp="15350674" />
  <Command __id="9232" _type="PauseCommand" date="Tue Mar 29 23:13:42 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15352010">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1336]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9231" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:13:42 EDT 2022" starttimestamp="1648594670066" timestamp="15352010" />
  <Command __id="9233" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:13:42 EDT 2022" starttimestamp="1648594670066" timestamp="15352100" />
  <Command __id="9234" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:13:42 EDT 2022" starttimestamp="1648594670066" timestamp="15352157" />
  <DocumentChange __id="9228" _type="Delete" date="Tue Mar 29 23:13:40 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8681" docExpressionCount="802" docLength="9486" endLine="256" length="20" offset="9042" startLine="256" starttimestamp="1648594670066" timestamp="15350656">
    <text><![CDATA[, int proposalNumber]]></text>
  </DocumentChange>
  <Command __id="9236" _type="PauseCommand" date="Tue Mar 29 23:13:43 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15353389">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1232]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9237" _type="SelectTextCommand" caretOffset="1160" date="Tue Mar 29 23:13:43 EDT 2022" end="1258" start="1160" starttimestamp="1648594670066" timestamp="15353522" />
  <Command __id="9235" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:13:43 EDT 2022" docASTNodeCount="211" docActiveCodeLength="1635" docExpressionCount="148" docLength="1800" projectName="A5" starttimestamp="1648594670066" timestamp="15353389">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientOutCoupler.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶import util.trace.port.consensus.RemoteProposeRequestSent;¶import util.trace.trickOrTreat.LocalCommandObserved;¶¶import java.beans.PropertyChangeEvent;¶import java.beans.PropertyChangeListener;¶import java.rmi.RemoteException;¶¶import server.remote.ServerRemoteInterfaceGIPC;¶import server.remote.ServerRemoteInterfaceRMI;¶¶@Tags({DistributedTags.CLIENT_OUT_COUPLER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ClientOutCoupler implements PropertyChangeListener{¶	ServerRemoteInterfaceGIPC ObservingServer;¶	ClientRemoteInterfaceGIPC originalClient;¶	String ORIGINAL_CLIENT_NAME;¶	¶	int aProposalNumber = 0;¶	¶	public ClientOutCoupler (ServerRemoteInterfaceGIPC anObservingServer, ClientRemoteInterfaceGIPC aClient, String aClientName) {¶		ObservingServer = anObservingServer;¶		originalClient = aClient;¶		ORIGINAL_CLIENT_NAME = aClientName;¶		¶		¶	}¶	¶	@Override¶	public void propertyChange(PropertyChangeEvent anEvent) {¶		System.out.println("PROPERTY CHANGE");¶		if (!anEvent.getPropertyName().equals("InputString")) return;¶		String newCommand = (String) anEvent.getNewValue();¶		LocalCommandObserved.newCase(this, newCommand);¶		¶		System.out.println("Command being sent from coupler:" + newCommand);¶		RemoteProposeRequestSent.newCase(originalClient, ORIGINAL_CLIENT_NAME, aProposalNumber, newCommand);¶		try {¶			//TODO need the client type to be that of a simulationParameterBean¶			//ObservingServer.broadcastIPCMechanism(IPCMechanism, originalClient, aProposalNumber, broadcast);¶			ObservingServer.broadcast(newCommand, originalClient, aProposalNumber);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶	¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9239" _type="PauseCommand" date="Tue Mar 29 23:13:45 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15355638">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2116]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9240" _type="MoveCaretCommand" caretOffset="714" date="Tue Mar 29 23:13:45 EDT 2022" docOffset="923" starttimestamp="1648594670066" timestamp="15355746" />
  <Command __id="9242" _type="PauseCommand" date="Tue Mar 29 23:13:50 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15360379">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4633]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9241" _type="SelectTextCommand" caretOffset="624" date="Tue Mar 29 23:13:50 EDT 2022" end="645" start="624" starttimestamp="1648594670066" timestamp="15360379" />
  <Command __id="9244" _type="InsertStringCommand" date="Tue Mar 29 23:13:50 EDT 2022" starttimestamp="1648594670066" timestamp="15360698" timestamp2="15360698">
    <data><![CDATA[\]]></data>
  </Command>
  <Command __id="9246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:13:51 EDT 2022" starttimestamp="1648594670066" timestamp="15361161" />
  <Command __id="9247" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:13:51 EDT 2022" starttimestamp="1648594670066" timestamp="15361656" />
  <Command __id="9248" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:13:51 EDT 2022" starttimestamp="1648594670066" timestamp="15361746" />
  <Command __id="9249" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:13:51 EDT 2022" starttimestamp="1648594670066" timestamp="15361802" />
  <Command __id="9238" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:13:45 EDT 2022" docASTNodeCount="114" docActiveCodeLength="897" docExpressionCount="69" docLength="931" projectName="A5" starttimestamp="1648594670066" timestamp="15355638">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import stringProcessors.HalloweenCommandProcessor;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.CLIENT_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ClientRemoteInterfaceGIPC  extends Remote{¶¶	//void processArgs(String[] args);¶	¶	void inCoupler(String aNewCommand, int aProposalNumber) throws RemoteException;¶¶	void start(String[] args) throws RemoteException;¶¶	void processArgs(String[] args) throws RemoteException;¶¶	HalloweenCommandProcessor createSimulation(String aPrefix) throws RemoteException;¶¶	void broadcastMetaState(boolean broadcast) throws RemoteException;¶¶	void changeIPCMechanism(IPCMechanism mechanism, int aProposalNumber) throws RemoteException;¶¶	void quit(int i) throws RemoteException;¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="9243" _type="Replace" date="Tue Mar 29 23:13:50 EDT 2022" docASTNodeCount="111" docActiveCodeLength="877" docExpressionCount="67" docLength="911" endLine="25" insertionLength="1" int_docASTNodeCount="111" int_docActiveCodeLength="876" int_docExpressionCount="68" int_docLength="910" length="21" offset="833" startLine="25" starttimestamp="1648594670066" timestamp="15360682">
    <deletedText><![CDATA[, int aProposalNumber]]></deletedText>
    <insertedText><![CDATA[\]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9245" _type="Delete" date="Tue Mar 29 23:13:51 EDT 2022" docASTNodeCount="111" docActiveCodeLength="876" docExpressionCount="68" docLength="910" endLine="25" length="1" offset="833" startLine="25" starttimestamp="1648594670066" timestamp="15361154">
    <text><![CDATA[\]]></text>
  </DocumentChange>
  <Command __id="9251" _type="PauseCommand" date="Tue Mar 29 23:13:53 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15363536">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1734]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9252" _type="MoveCaretCommand" caretOffset="9042" date="Tue Mar 29 23:13:53 EDT 2022" docOffset="9042" starttimestamp="1648594670066" timestamp="15363694" />
  <Command __id="9254" _type="PauseCommand" date="Tue Mar 29 23:14:06 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15376587">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12893]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9253" _type="MoveCaretCommand" caretOffset="9218" date="Tue Mar 29 23:14:06 EDT 2022" docOffset="9218" starttimestamp="1648594670066" timestamp="15376587" />
  <Command __id="9256" _type="InsertStringCommand" date="Tue Mar 29 23:14:07 EDT 2022" starttimestamp="1648594670066" timestamp="15377185" timestamp2="15377185">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9258" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 23:14:07 EDT 2022" starttimestamp="1648594670066" timestamp="15377556" />
  <Command __id="9260" _type="InsertStringCommand" date="Tue Mar 29 23:14:08 EDT 2022" starttimestamp="1648594670066" timestamp="15378128" timestamp2="15378128">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9262" _type="PauseCommand" date="Tue Mar 29 23:14:09 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15379248">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1120]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9261" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:14:09 EDT 2022" starttimestamp="1648594670066" timestamp="15379248" />
  <Command __id="9263" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:14:09 EDT 2022" starttimestamp="1648594670066" timestamp="15379350" />
  <Command __id="9264" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:14:09 EDT 2022" starttimestamp="1648594670066" timestamp="15379391" />
  <Command __id="9266" _type="PauseCommand" date="Tue Mar 29 23:14:11 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15381904">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2513]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9265" _type="MoveCaretCommand" caretOffset="9113" date="Tue Mar 29 23:14:11 EDT 2022" docOffset="9113" starttimestamp="1648594670066" timestamp="15381904" />
  <Command __id="9268" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:12 EDT 2022" starttimestamp="1648594670066" timestamp="15382163" />
  <Command __id="9250" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:13:53 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8681" docExpressionCount="802" docLength="9486" projectName="A5" starttimestamp="1648594670066" timestamp="15363536">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism"), Diff(DELETE,", int proposalNumber"), Diff(EQUAL,") {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		commandProcessor.setInputString("quit");
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		aProposalNumber++;
		
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="9255" _type="Insert" date="Tue Mar 29 23:14:07 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8682" docExpressionCount="802" docLength="9487" length="1" offset="9218" starttimestamp="1648594670066" timestamp="15377171">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="9257" _type="Delete" date="Tue Mar 29 23:14:07 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8681" docExpressionCount="802" docLength="9486" endLine="259" length="1" offset="9219" startLine="259" starttimestamp="1648594670066" timestamp="15377553">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="9259" _type="Insert" date="Tue Mar 29 23:14:08 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8682" docExpressionCount="802" docLength="9487" length="1" offset="9219" starttimestamp="1648594670066" timestamp="15378120">
    <text><![CDATA[P]]></text>
  </DocumentChange>
  <DocumentChange __id="9267" _type="Delete" date="Tue Mar 29 23:14:12 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8681" docExpressionCount="802" docLength="9486" endLine="257" length="1" offset="9112" startLine="257" starttimestamp="1648594670066" timestamp="15382158">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <Command __id="9270" _type="PauseCommand" date="Tue Mar 29 23:14:13 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15383201">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1038]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="9271" _type="InsertStringCommand" date="Tue Mar 29 23:14:13 EDT 2022" starttimestamp="1648594670066" timestamp="15383208" timestamp2="15383208">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9273" _type="InsertStringCommand" date="Tue Mar 29 23:14:13 EDT 2022" starttimestamp="1648594670066" timestamp="15383255" timestamp2="15383255">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9274" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:14:14 EDT 2022" starttimestamp="1648594670066" timestamp="15384122" />
  <Command __id="9275" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:14:14 EDT 2022" starttimestamp="1648594670066" timestamp="15384221" />
  <Command __id="9276" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:14:14 EDT 2022" starttimestamp="1648594670066" timestamp="15384250" />
  <DocumentChange __id="9269" _type="Insert" date="Tue Mar 29 23:14:13 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8683" docExpressionCount="802" docLength="9488" length="2" offset="9112" repeat="2" starttimestamp="1648594670066" timestamp="15383201" timestamp2="15383249">
    <text><![CDATA[aP]]></text>
  </DocumentChange>
  <Command __id="9278" _type="PauseCommand" date="Tue Mar 29 23:14:17 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15387296">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3046]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9279" _type="MoveCaretCommand" caretOffset="6048" date="Tue Mar 29 23:14:17 EDT 2022" docOffset="6048" starttimestamp="1648594670066" timestamp="15387441" />
  <Command __id="9281" _type="PauseCommand" date="Tue Mar 29 23:14:26 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15396870">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9429]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9280" _type="ShellCommand" date="Tue Mar 29 23:14:26 EDT 2022" starttimestamp="1648594670066" timestamp="15396870" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9282" _type="ShellCommand" date="Tue Mar 29 23:14:27 EDT 2022" starttimestamp="1648594670066" timestamp="15397039" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9286" _type="PauseCommand" date="Tue Mar 29 23:14:46 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15416728">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[19674]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9285" _type="SelectTextCommand" caretOffset="5259" date="Tue Mar 29 23:14:46 EDT 2022" end="5280" start="5259" starttimestamp="1648594670066" timestamp="15416728" />
  <Command __id="9287" _type="SelectTextCommand" caretOffset="5259" date="Tue Mar 29 23:14:46 EDT 2022" end="5280" start="5259" starttimestamp="1648594670066" timestamp="15416728" />
  <Command __id="9289" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:46 EDT 2022" starttimestamp="1648594670066" timestamp="15416904" />
  <Command __id="9290" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:46 EDT 2022" starttimestamp="1648594670066" timestamp="15416904" />
  <Command __id="9292" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:47 EDT 2022" starttimestamp="1648594670066" timestamp="15417170" />
  <Command __id="9293" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:47 EDT 2022" starttimestamp="1648594670066" timestamp="15417170" />
  <Command __id="9295" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:47 EDT 2022" starttimestamp="1648594670066" timestamp="15417483" />
  <Command __id="9296" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:47 EDT 2022" starttimestamp="1648594670066" timestamp="15417483" />
  <Command __id="9298" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:47 EDT 2022" starttimestamp="1648594670066" timestamp="15417773" />
  <Command __id="9299" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:47 EDT 2022" starttimestamp="1648594670066" timestamp="15417773" />
  <Command __id="9301" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:48 EDT 2022" starttimestamp="1648594670066" timestamp="15418125" />
  <Command __id="9302" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:48 EDT 2022" starttimestamp="1648594670066" timestamp="15418125" />
  <Command __id="9304" _type="InsertStringCommand" date="Tue Mar 29 23:14:48 EDT 2022" starttimestamp="1648594670066" timestamp="15418838" timestamp2="15418838">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9305" _type="InsertStringCommand" date="Tue Mar 29 23:14:48 EDT 2022" starttimestamp="1648594670066" timestamp="15418838" timestamp2="15418838">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9307" _type="PauseCommand" date="Tue Mar 29 23:14:53 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15423100">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4262]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9306" _type="SelectTextCommand" caretOffset="5274" date="Tue Mar 29 23:14:53 EDT 2022" end="5297" start="5274" starttimestamp="1648594670066" timestamp="15423100" />
  <Command __id="9308" _type="SelectTextCommand" caretOffset="5274" date="Tue Mar 29 23:14:53 EDT 2022" end="5297" start="5274" starttimestamp="1648594670066" timestamp="15423101" />
  <Command __id="9310" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:53 EDT 2022" starttimestamp="1648594670066" timestamp="15423462" />
  <Command __id="9311" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:14:53 EDT 2022" starttimestamp="1648594670066" timestamp="15423462" />
  <Command __id="9313" _type="PauseCommand" date="Tue Mar 29 23:14:55 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15425012">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1550]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9312" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:14:55 EDT 2022" starttimestamp="1648594670066" timestamp="15425012" />
  <Command __id="9314" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:14:55 EDT 2022" starttimestamp="1648594670066" timestamp="15425102" />
  <Command __id="9315" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:14:55 EDT 2022" starttimestamp="1648594670066" timestamp="15425162" />
  <Command __id="9277" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:14:17 EDT 2022" docASTNodeCount="1110" docActiveCodeLength="7944" docExpressionCount="798" docLength="8600" projectName="A5" starttimestamp="1648594670066" timestamp="15387296">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶		"), Diff(INSERT,"	System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		"), Diff(EQUAL,"}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			"), Diff(INSERT,"¶			"), Diff(EQUAL,"if (aNewCommand.charAt(0) == 'q') {¶"), Diff(INSERT,"¶"), Diff(EQUAL,"				"), Diff(DELETE,"// Need to quit¶				client.quit(0)"), Diff(INSERT,"try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue"), Diff(EQUAL,";¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			"), Diff(INSERT,"if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);"), Diff(EQUAL,"¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,¶			int aProposalNumber, boolean broadcast) throws RemoteException {¶"), Diff(INSERT,"		List<ClientRemoteInterfaceGIPC> clientList;¶		"), Diff(EQUAL,"¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶"), Diff(INSERT,"		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶"), Diff(EQUAL,"		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList"), Diff(DELETE,"GIPC"), Diff(EQUAL,") {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism, aProposalNumber);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				//if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
				//	this.quit(0);
				//}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,
			int aProposalNumber, boolean broadcast) throws RemoteException {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism, aProposalNumber);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="9283" _type="Delete" date="Tue Mar 29 23:14:27 EDT 2022" docASTNodeCount="1109" docActiveCodeLength="7927" docExpressionCount="797" docLength="8583" endLine="186" length="17" offset="6159" repeat="2" startLine="186" starttimestamp="1648594670066" timestamp="15397054" timestamp2="15397060">
    <text><![CDATA[, aProposalNumber]]></text>
  </DocumentChange>
  <DocumentChange __id="9288" _type="Delete" date="Tue Mar 29 23:14:46 EDT 2022" docASTNodeCount="1106" docActiveCodeLength="7901" docExpressionCount="796" docLength="8557" endLine="155" length="26" offset="5254" repeat="5" startLine="154" starttimestamp="1648594670066" timestamp="15416901" timestamp2="15418120">
    <text><![CDATA[
			int aProposalNumber, ]]></text>
  </DocumentChange>
  <DocumentChange __id="9303" _type="Insert" date="Tue Mar 29 23:14:48 EDT 2022" docASTNodeCount="1106" docActiveCodeLength="7902" docExpressionCount="796" docLength="8558" length="1" offset="5254" starttimestamp="1648594670066" timestamp="15418832">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="9309" _type="Delete" date="Tue Mar 29 23:14:53 EDT 2022" docASTNodeCount="1105" docActiveCodeLength="7879" docExpressionCount="795" docLength="8535" endLine="154" length="23" offset="5274" startLine="154" starttimestamp="1648594670066" timestamp="15423452">
    <text><![CDATA[throws RemoteException ]]></text>
  </DocumentChange>
  <Command __id="9317" _type="PauseCommand" date="Tue Mar 29 23:15:00 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15430327">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5165]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9318" _type="MoveCaretCommand" caretOffset="1299" date="Tue Mar 29 23:15:00 EDT 2022" docOffset="1299" starttimestamp="1648594670066" timestamp="15430467" />
  <Command __id="9320" _type="PauseCommand" date="Tue Mar 29 23:15:05 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15435607">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5140]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9319" _type="SelectTextCommand" caretOffset="1179" date="Tue Mar 29 23:15:05 EDT 2022" end="1199" start="1179" starttimestamp="1648594670066" timestamp="15435607" />
  <Command __id="9322" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:15:05 EDT 2022" starttimestamp="1648594670066" timestamp="15435891" />
  <Command __id="9323" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:15:06 EDT 2022" starttimestamp="1648594670066" timestamp="15436536" />
  <Command __id="9324" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:15:06 EDT 2022" starttimestamp="1648594670066" timestamp="15436628" />
  <Command __id="9325" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:15:06 EDT 2022" starttimestamp="1648594670066" timestamp="15436682" />
  <Command __id="9316" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:15:00 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648594670066" timestamp="15430327">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="9321" _type="Delete" date="Tue Mar 29 23:15:05 EDT 2022" docASTNodeCount="160" docActiveCodeLength="1325" docExpressionCount="93" docLength="1325" endLine="26" length="20" offset="1179" startLine="26" starttimestamp="1648594670066" timestamp="15435883">
    <text><![CDATA[int aProposalNumber,]]></text>
  </DocumentChange>
  <Command __id="9327" _type="PauseCommand" date="Tue Mar 29 23:15:08 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15438159">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1477]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9328" _type="MoveCaretCommand" caretOffset="9114" date="Tue Mar 29 23:15:08 EDT 2022" docOffset="9114" starttimestamp="1648594670066" timestamp="15438312" />
  <Command __id="9330" _type="PauseCommand" date="Tue Mar 29 23:15:19 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15449575">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11263]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9329" _type="SelectTextCommand" caretOffset="9307" date="Tue Mar 29 23:15:19 EDT 2022" end="9323" start="9307" starttimestamp="1648594670066" timestamp="15449575" />
  <Command __id="9332" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:15:20 EDT 2022" starttimestamp="1648594670066" timestamp="15450225" />
  <Command __id="9333" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:15:20 EDT 2022" starttimestamp="1648594670066" timestamp="15450786" />
  <Command __id="9334" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:15:20 EDT 2022" starttimestamp="1648594670066" timestamp="15450878" />
  <Command __id="9335" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:15:20 EDT 2022" starttimestamp="1648594670066" timestamp="15450910" />
  <Command __id="9326" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:15:08 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8683" docExpressionCount="802" docLength="9488" projectName="A5" starttimestamp="1648594670066" timestamp="15438159">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, "), Diff(DELETE,"p"), Diff(INSERT,"aP"), Diff(EQUAL,"roposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, "), Diff(DELETE,"p"), Diff(INSERT,"aP"), Diff(EQUAL,"roposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		commandProcessor.setInputString("quit");
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		aProposalNumber++;
		
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="9331" _type="Delete" date="Tue Mar 29 23:15:20 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8667" docExpressionCount="801" docLength="9472" endLine="261" length="16" offset="9307" startLine="261" starttimestamp="1648594670066" timestamp="15450217">
    <text><![CDATA[aProposalNumber,]]></text>
  </DocumentChange>
  <Command __id="9337" _type="PauseCommand" date="Tue Mar 29 23:15:24 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15454061">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3151]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9338" _type="MoveCaretCommand" caretOffset="5274" date="Tue Mar 29 23:15:24 EDT 2022" docOffset="5274" starttimestamp="1648594670066" timestamp="15454208" />
  <Command __id="9336" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:15:24 EDT 2022" docASTNodeCount="1105" docActiveCodeLength="7879" docExpressionCount="795" docLength="8535" projectName="A5" starttimestamp="1648594670066" timestamp="15454061">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,"), Diff(DELETE,"¶			int aProposalNumber, boolean broadcast) throws RemoteException"), Diff(INSERT," boolean broadcast)"), Diff(EQUAL," {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism"), Diff(DELETE,", aProposalNumber"), Diff(EQUAL,");¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				//if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
				//	this.quit(0);
				//}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				client.changeIPCMechanism(mechanism);
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="9340" _type="PauseCommand" date="Tue Mar 29 23:15:35 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15465344">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11136]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9341" _type="MoveCaretCommand" caretOffset="9307" date="Tue Mar 29 23:15:35 EDT 2022" docOffset="9307" starttimestamp="1648594670066" timestamp="15465482" />
  <Command __id="9343" _type="PauseCommand" date="Tue Mar 29 23:16:13 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="15503913">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[38431]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9342" _type="SelectTextCommand" caretOffset="9175" date="Tue Mar 29 23:16:13 EDT 2022" end="9433" start="9175" starttimestamp="1648594670066" timestamp="15503913" />
  <Command __id="9345" _type="CutCommand" date="Tue Mar 29 23:16:14 EDT 2022" starttimestamp="1648594670066" timestamp="15504526" />
  <Command __id="9347" _type="PauseCommand" date="Tue Mar 29 23:16:20 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15510228">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[5702]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9339" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:15:35 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8667" docExpressionCount="801" docLength="9472" projectName="A5" starttimestamp="1648594670066" timestamp="15465344">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, "), Diff(DELETE,"aProposalNumber,"), Diff(EQUAL," broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		aProposalNumber++;¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		commandProcessor.setInputString("quit");
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this,  broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		aProposalNumber++;
		
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="9344" _type="Delete" date="Tue Mar 29 23:16:14 EDT 2022" docASTNodeCount="1099" docActiveCodeLength="8443" docExpressionCount="783" docLength="9214" endLine="265" length="258" offset="9175" startLine="259" starttimestamp="1648594670066" timestamp="15504513">
    <text><![CDATA[ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this,  broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <Command __id="9346" _type="MoveCaretCommand" caretOffset="8331" date="Tue Mar 29 23:16:20 EDT 2022" docOffset="8331" starttimestamp="1648594670066" timestamp="15510228" />
  <DocumentChange __id="9348" _type="Insert" date="Tue Mar 29 23:16:20 EDT 2022" docASTNodeCount="1099" docActiveCodeLength="8455" docExpressionCount="783" docLength="9228" length="14" offset="8331" repeat="5" starttimestamp="1648594670066" timestamp="15510813" timestamp2="15512984">
    <text><![CDATA[
		
		//
		]]></text>
  </DocumentChange>
  <Command __id="9349" _type="InsertStringCommand" date="Tue Mar 29 23:16:20 EDT 2022" starttimestamp="1648594670066" timestamp="15510842" timestamp2="15510842">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9351" _type="InsertStringCommand" date="Tue Mar 29 23:16:21 EDT 2022" starttimestamp="1648594670066" timestamp="15510978" timestamp2="15510978">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9353" _type="InsertStringCommand" date="Tue Mar 29 23:16:21 EDT 2022" starttimestamp="1648594670066" timestamp="15511627" timestamp2="15511627">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="9355" _type="InsertStringCommand" date="Tue Mar 29 23:16:21 EDT 2022" starttimestamp="1648594670066" timestamp="15511765" timestamp2="15511765">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="9358" _type="PauseCommand" date="Tue Mar 29 23:16:23 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15512997">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1232]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="9357" _type="InsertStringCommand" date="Tue Mar 29 23:16:23 EDT 2022" starttimestamp="1648594670066" timestamp="15512997" timestamp2="15512997">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9360" _type="PasteCommand" date="Tue Mar 29 23:16:23 EDT 2022" starttimestamp="1648594670066" timestamp="15513276" />
  <Command __id="9362" _type="PauseCommand" date="Tue Mar 29 23:16:25 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15515384">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2108]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9361" _type="MoveCaretCommand" caretOffset="8341" date="Tue Mar 29 23:16:25 EDT 2022" docOffset="8341" starttimestamp="1648594670066" timestamp="15515384" />
  <DocumentChange __id="9359" _type="Replace" date="Tue Mar 29 23:16:23 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8679" docExpressionCount="801" docLength="9486" endLine="230" insertionLength="260" int_docASTNodeCount="1099" int_docActiveCodeLength="8453" int_docExpressionCount="783" int_docLength="9226" length="2" offset="8343" startLine="230" starttimestamp="1648594670066" timestamp="15513263">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this,  broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></insertedText>
  </DocumentChange>
  <Command __id="9364" _type="PauseCommand" date="Tue Mar 29 23:16:33 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15523803">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8419]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="9363" _type="Insert" date="Tue Mar 29 23:16:33 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8679" docExpressionCount="801" docLength="9506" length="20" offset="8341" repeat="20" starttimestamp="1648594670066" timestamp="15523803" timestamp2="15526801">
    <text><![CDATA[IPC Mechanism CHange]]></text>
  </DocumentChange>
  <Command __id="9365" _type="InsertStringCommand" date="Tue Mar 29 23:16:33 EDT 2022" starttimestamp="1648594670066" timestamp="15523811" timestamp2="15523811">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="9367" _type="InsertStringCommand" date="Tue Mar 29 23:16:34 EDT 2022" starttimestamp="1648594670066" timestamp="15524067" timestamp2="15524067">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9369" _type="InsertStringCommand" date="Tue Mar 29 23:16:34 EDT 2022" starttimestamp="1648594670066" timestamp="15524216" timestamp2="15524216">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="9371" _type="InsertStringCommand" date="Tue Mar 29 23:16:34 EDT 2022" starttimestamp="1648594670066" timestamp="15524464" timestamp2="15524464">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9373" _type="InsertStringCommand" date="Tue Mar 29 23:16:34 EDT 2022" starttimestamp="1648594670066" timestamp="15524707" timestamp2="15524707">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="9375" _type="InsertStringCommand" date="Tue Mar 29 23:16:34 EDT 2022" starttimestamp="1648594670066" timestamp="15524859" timestamp2="15524859">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9377" _type="InsertStringCommand" date="Tue Mar 29 23:16:35 EDT 2022" starttimestamp="1648594670066" timestamp="15525103" timestamp2="15525103">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="9379" _type="InsertStringCommand" date="Tue Mar 29 23:16:35 EDT 2022" starttimestamp="1648594670066" timestamp="15525235" timestamp2="15525235">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9381" _type="InsertStringCommand" date="Tue Mar 29 23:16:35 EDT 2022" starttimestamp="1648594670066" timestamp="15525353" timestamp2="15525353">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9383" _type="InsertStringCommand" date="Tue Mar 29 23:16:35 EDT 2022" starttimestamp="1648594670066" timestamp="15525480" timestamp2="15525480">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9385" _type="InsertStringCommand" date="Tue Mar 29 23:16:35 EDT 2022" starttimestamp="1648594670066" timestamp="15525557" timestamp2="15525557">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9387" _type="InsertStringCommand" date="Tue Mar 29 23:16:35 EDT 2022" starttimestamp="1648594670066" timestamp="15525720" timestamp2="15525720">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9389" _type="InsertStringCommand" date="Tue Mar 29 23:16:35 EDT 2022" starttimestamp="1648594670066" timestamp="15525849" timestamp2="15525849">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9391" _type="InsertStringCommand" date="Tue Mar 29 23:16:36 EDT 2022" starttimestamp="1648594670066" timestamp="15525977" timestamp2="15525977">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9393" _type="InsertStringCommand" date="Tue Mar 29 23:16:36 EDT 2022" starttimestamp="1648594670066" timestamp="15526301" timestamp2="15526301">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="9395" _type="InsertStringCommand" date="Tue Mar 29 23:16:36 EDT 2022" starttimestamp="1648594670066" timestamp="15526362" timestamp2="15526362">
    <data><![CDATA[H]]></data>
  </Command>
  <Command __id="9397" _type="InsertStringCommand" date="Tue Mar 29 23:16:36 EDT 2022" starttimestamp="1648594670066" timestamp="15526532" timestamp2="15526532">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9399" _type="InsertStringCommand" date="Tue Mar 29 23:16:36 EDT 2022" starttimestamp="1648594670066" timestamp="15526600" timestamp2="15526600">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9401" _type="InsertStringCommand" date="Tue Mar 29 23:16:36 EDT 2022" starttimestamp="1648594670066" timestamp="15526722" timestamp2="15526722">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="9403" _type="InsertStringCommand" date="Tue Mar 29 23:16:36 EDT 2022" starttimestamp="1648594670066" timestamp="15526805" timestamp2="15526805">
    <data><![CDATA[e]]></data>
  </Command>
  <DocumentChange __id="9404" _type="Delete" date="Tue Mar 29 23:16:37 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8679" docExpressionCount="801" docLength="9502" endLine="229" length="4" offset="8357" repeat="4" startLine="229" starttimestamp="1648594670066" timestamp="15527116" timestamp2="15527602">
    <text><![CDATA[ange]]></text>
  </DocumentChange>
  <Command __id="9405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:16:37 EDT 2022" starttimestamp="1648594670066" timestamp="15527123" />
  <Command __id="9407" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:16:37 EDT 2022" starttimestamp="1648594670066" timestamp="15527301" />
  <Command __id="9409" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:16:37 EDT 2022" starttimestamp="1648594670066" timestamp="15527441" />
  <Command __id="9411" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:16:37 EDT 2022" starttimestamp="1648594670066" timestamp="15527604" />
  <DocumentChange __id="9412" _type="Insert" date="Tue Mar 29 23:16:37 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8679" docExpressionCount="801" docLength="9503" length="1" offset="8357" starttimestamp="1648594670066" timestamp="15527877">
    <text><![CDATA[h]]></text>
  </DocumentChange>
  <Command __id="9413" _type="InsertStringCommand" date="Tue Mar 29 23:16:37 EDT 2022" starttimestamp="1648594670066" timestamp="15527886" timestamp2="15527886">
    <data><![CDATA[h]]></data>
  </Command>
  <DocumentChange __id="9414" _type="Delete" date="Tue Mar 29 23:16:38 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8679" docExpressionCount="801" docLength="9501" endLine="229" length="2" offset="8356" repeat="2" startLine="229" starttimestamp="1648594670066" timestamp="15528099" timestamp2="15528218">
    <text><![CDATA[Hh]]></text>
  </DocumentChange>
  <Command __id="9415" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="15528103" />
  <Command __id="9417" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="15528220" />
  <Command __id="9419" _type="InsertStringCommand" date="Tue Mar 29 23:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="15528483" timestamp2="15528483">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9421" _type="InsertStringCommand" date="Tue Mar 29 23:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="15528611" timestamp2="15528611">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9423" _type="InsertStringCommand" date="Tue Mar 29 23:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="15528693" timestamp2="15528693">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9425" _type="InsertStringCommand" date="Tue Mar 29 23:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="15528824" timestamp2="15528824">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="9427" _type="InsertStringCommand" date="Tue Mar 29 23:16:38 EDT 2022" starttimestamp="1648594670066" timestamp="15528902" timestamp2="15528902">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9428" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:16:39 EDT 2022" starttimestamp="1648594670066" timestamp="15529473" />
  <Command __id="9429" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:16:39 EDT 2022" starttimestamp="1648594670066" timestamp="15529578" />
  <Command __id="9430" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:16:39 EDT 2022" starttimestamp="1648594670066" timestamp="15529616" />
  <DocumentChange __id="9418" _type="Insert" date="Tue Mar 29 23:16:38 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8679" docExpressionCount="801" docLength="9506" length="5" offset="8356" repeat="5" starttimestamp="1648594670066" timestamp="15528471" timestamp2="15528898">
    <text><![CDATA[hange]]></text>
  </DocumentChange>
  <Command __id="9432" _type="PauseCommand" date="Tue Mar 29 23:17:08 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="15558063">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[28447]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9433" _type="MoveCaretCommand" caretOffset="5274" date="Tue Mar 29 23:17:08 EDT 2022" docOffset="5274" starttimestamp="1648594670066" timestamp="15558189" />
  <Command __id="9431" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:17:08 EDT 2022" docASTNodeCount="1105" docActiveCodeLength="7879" docExpressionCount="795" docLength="8535" projectName="A5" starttimestamp="1648594670066" timestamp="15558063">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9435" _type="PauseCommand" date="Tue Mar 29 23:17:20 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15570858">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[12669]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9436" _type="MoveCaretCommand" caretOffset="8361" date="Tue Mar 29 23:17:21 EDT 2022" docOffset="8361" starttimestamp="1648594670066" timestamp="15570980" />
  <Command __id="9438" _type="PauseCommand" date="Tue Mar 29 23:17:27 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15577925">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6945]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9437" _type="MoveCaretCommand" caretOffset="8497" date="Tue Mar 29 23:17:27 EDT 2022" docOffset="8497" starttimestamp="1648594670066" timestamp="15577925" />
  <Command __id="9434" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:17:20 EDT 2022" docASTNodeCount="1126" docActiveCodeLength="8679" docExpressionCount="801" docLength="9506" projectName="A5" starttimestamp="1648594670066" timestamp="15570858">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		"), Diff(INSERT,"¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this,  broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		"), Diff(EQUAL,"commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		"), Diff(DELETE,"ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this,  broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}"), Diff(EQUAL,"¶		aProposalNumber++;¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this,  broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		commandProcessor.setInputString("quit");
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		
		aProposalNumber++;
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="9440" _type="PauseCommand" date="Tue Mar 29 23:17:29 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15579064">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1138]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="9441" _type="InsertStringCommand" date="Tue Mar 29 23:17:29 EDT 2022" starttimestamp="1648594670066" timestamp="15579078" timestamp2="15579078">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9443" _type="InsertStringCommand" date="Tue Mar 29 23:17:29 EDT 2022" starttimestamp="1648594670066" timestamp="15579671" timestamp2="15579671">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9445" _type="InsertStringCommand" date="Tue Mar 29 23:17:29 EDT 2022" starttimestamp="1648594670066" timestamp="15579842" timestamp2="15579842">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9447" _type="InsertStringCommand" date="Tue Mar 29 23:17:30 EDT 2022" starttimestamp="1648594670066" timestamp="15579944" timestamp2="15579944">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9449" _type="InsertStringCommand" date="Tue Mar 29 23:17:30 EDT 2022" starttimestamp="1648594670066" timestamp="15580307" timestamp2="15580307">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="9451" _type="InsertStringCommand" date="Tue Mar 29 23:17:30 EDT 2022" starttimestamp="1648594670066" timestamp="15580404" timestamp2="15580404">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9453" _type="InsertStringCommand" date="Tue Mar 29 23:17:30 EDT 2022" starttimestamp="1648594670066" timestamp="15580587" timestamp2="15580587">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9455" _type="InsertStringCommand" date="Tue Mar 29 23:17:30 EDT 2022" starttimestamp="1648594670066" timestamp="15580703" timestamp2="15580703">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9457" _type="InsertStringCommand" date="Tue Mar 29 23:17:30 EDT 2022" starttimestamp="1648594670066" timestamp="15580821" timestamp2="15580821">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="9459" _type="InsertStringCommand" date="Tue Mar 29 23:17:31 EDT 2022" starttimestamp="1648594670066" timestamp="15581136" timestamp2="15581136">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="9461" _type="InsertStringCommand" date="Tue Mar 29 23:17:31 EDT 2022" starttimestamp="1648594670066" timestamp="15581328" timestamp2="15581328">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9463" _type="InsertStringCommand" date="Tue Mar 29 23:17:31 EDT 2022" starttimestamp="1648594670066" timestamp="15581541" timestamp2="15581541">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9465" _type="InsertStringCommand" date="Tue Mar 29 23:17:31 EDT 2022" starttimestamp="1648594670066" timestamp="15581603" timestamp2="15581603">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="9467" _type="InsertStringCommand" date="Tue Mar 29 23:17:31 EDT 2022" starttimestamp="1648594670066" timestamp="15581759" timestamp2="15581759">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9469" _type="InsertStringCommand" date="Tue Mar 29 23:17:31 EDT 2022" starttimestamp="1648594670066" timestamp="15581855" timestamp2="15581855">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9471" _type="InsertStringCommand" date="Tue Mar 29 23:17:32 EDT 2022" starttimestamp="1648594670066" timestamp="15582031" timestamp2="15582031">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="9473" _type="PauseCommand" date="Tue Mar 29 23:17:33 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15583300">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1269]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9472" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:17:33 EDT 2022" starttimestamp="1648594670066" timestamp="15583300" />
  <Command __id="9474" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:17:33 EDT 2022" starttimestamp="1648594670066" timestamp="15583399" />
  <Command __id="9475" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:17:33 EDT 2022" starttimestamp="1648594670066" timestamp="15583436" />
  <DocumentChange __id="9439" _type="Insert" date="Tue Mar 29 23:17:29 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8695" docExpressionCount="802" docLength="9522" length="16" offset="8497" repeat="16" starttimestamp="1648594670066" timestamp="15579063" timestamp2="15582026">
    <text><![CDATA[aProposalNumber,]]></text>
  </DocumentChange>
  <Command __id="9477" _type="PauseCommand" date="Tue Mar 29 23:17:37 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15587062">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3626]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9478" _type="MoveCaretCommand" caretOffset="1179" date="Tue Mar 29 23:17:37 EDT 2022" docOffset="1179" starttimestamp="1648594670066" timestamp="15587196" />
  <Command __id="9476" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:17:37 EDT 2022" docASTNodeCount="160" docActiveCodeLength="1325" docExpressionCount="93" docLength="1325" projectName="A5" starttimestamp="1648594670066" timestamp="15587062">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, "), Diff(DELETE,"int aProposalNumber,"), Diff(EQUAL,"¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, 
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="9480" _type="PauseCommand" date="Tue Mar 29 23:17:39 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15589165">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1969]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="9479" _type="Insert" date="Tue Mar 29 23:17:39 EDT 2022" docASTNodeCount="160" docActiveCodeLength="1330" docExpressionCount="92" docLength="1330" length="5" offset="1179" repeat="5" starttimestamp="1648594670066" timestamp="15589165" timestamp2="15589760">
    <text><![CDATA[int A]]></text>
  </DocumentChange>
  <Command __id="9481" _type="InsertStringCommand" date="Tue Mar 29 23:17:39 EDT 2022" starttimestamp="1648594670066" timestamp="15589179" timestamp2="15589179">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9483" _type="InsertStringCommand" date="Tue Mar 29 23:17:39 EDT 2022" starttimestamp="1648594670066" timestamp="15589269" timestamp2="15589269">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9485" _type="InsertStringCommand" date="Tue Mar 29 23:17:39 EDT 2022" starttimestamp="1648594670066" timestamp="15589406" timestamp2="15589406">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9487" _type="InsertStringCommand" date="Tue Mar 29 23:17:39 EDT 2022" starttimestamp="1648594670066" timestamp="15589593" timestamp2="15589593">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9489" _type="InsertStringCommand" date="Tue Mar 29 23:17:39 EDT 2022" starttimestamp="1648594670066" timestamp="15589770" timestamp2="15589770">
    <data><![CDATA[A]]></data>
  </Command>
  <DocumentChange __id="9490" _type="Delete" date="Tue Mar 29 23:17:40 EDT 2022" docASTNodeCount="157" docActiveCodeLength="1329" docExpressionCount="91" docLength="1329" endLine="26" length="1" offset="1183" startLine="26" starttimestamp="1648594670066" timestamp="15590289">
    <text><![CDATA[A]]></text>
  </DocumentChange>
  <Command __id="9491" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:17:40 EDT 2022" starttimestamp="1648594670066" timestamp="15590293" />
  <Command __id="9493" _type="InsertStringCommand" date="Tue Mar 29 23:17:40 EDT 2022" starttimestamp="1648594670066" timestamp="15590384" timestamp2="15590384">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9495" _type="InsertStringCommand" date="Tue Mar 29 23:17:40 EDT 2022" starttimestamp="1648594670066" timestamp="15590702" timestamp2="15590702">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9497" _type="InsertStringCommand" date="Tue Mar 29 23:17:41 EDT 2022" starttimestamp="1648594670066" timestamp="15590987" timestamp2="15590987">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9499" _type="InsertStringCommand" date="Tue Mar 29 23:17:41 EDT 2022" starttimestamp="1648594670066" timestamp="15591110" timestamp2="15591110">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9501" _type="InsertStringCommand" date="Tue Mar 29 23:17:41 EDT 2022" starttimestamp="1648594670066" timestamp="15591377" timestamp2="15591377">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="9503" _type="InsertStringCommand" date="Tue Mar 29 23:17:41 EDT 2022" starttimestamp="1648594670066" timestamp="15591533" timestamp2="15591533">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9505" _type="InsertStringCommand" date="Tue Mar 29 23:17:41 EDT 2022" starttimestamp="1648594670066" timestamp="15591698" timestamp2="15591698">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9507" _type="InsertStringCommand" date="Tue Mar 29 23:17:41 EDT 2022" starttimestamp="1648594670066" timestamp="15591817" timestamp2="15591817">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9509" _type="InsertStringCommand" date="Tue Mar 29 23:17:42 EDT 2022" starttimestamp="1648594670066" timestamp="15591970" timestamp2="15591970">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="9511" _type="InsertStringCommand" date="Tue Mar 29 23:17:42 EDT 2022" starttimestamp="1648594670066" timestamp="15592362" timestamp2="15592362">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="9513" _type="InsertStringCommand" date="Tue Mar 29 23:17:42 EDT 2022" starttimestamp="1648594670066" timestamp="15592525" timestamp2="15592525">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9515" _type="InsertStringCommand" date="Tue Mar 29 23:17:42 EDT 2022" starttimestamp="1648594670066" timestamp="15592736" timestamp2="15592736">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9517" _type="InsertStringCommand" date="Tue Mar 29 23:17:42 EDT 2022" starttimestamp="1648594670066" timestamp="15592830" timestamp2="15592830">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="9519" _type="InsertStringCommand" date="Tue Mar 29 23:17:43 EDT 2022" starttimestamp="1648594670066" timestamp="15593068" timestamp2="15593068">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9521" _type="InsertStringCommand" date="Tue Mar 29 23:17:43 EDT 2022" starttimestamp="1648594670066" timestamp="15593111" timestamp2="15593111">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9523" _type="InsertStringCommand" date="Tue Mar 29 23:17:43 EDT 2022" starttimestamp="1648594670066" timestamp="15593920" timestamp2="15593920">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="9525" _type="PauseCommand" date="Tue Mar 29 23:17:45 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15595230">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1310]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9524" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:17:45 EDT 2022" starttimestamp="1648594670066" timestamp="15595230" />
  <Command __id="9526" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:17:45 EDT 2022" starttimestamp="1648594670066" timestamp="15595319" />
  <Command __id="9527" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:17:45 EDT 2022" starttimestamp="1648594670066" timestamp="15595382" />
  <DocumentChange __id="9492" _type="Insert" date="Tue Mar 29 23:17:40 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" length="16" offset="1183" repeat="16" starttimestamp="1648594670066" timestamp="15590377" timestamp2="15593911">
    <text><![CDATA[aProposalNumber,]]></text>
  </DocumentChange>
  <Command __id="9529" _type="PauseCommand" date="Tue Mar 29 23:17:47 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15597097">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1715]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9530" _type="MoveCaretCommand" caretOffset="5274" date="Tue Mar 29 23:17:47 EDT 2022" docOffset="5274" starttimestamp="1648594670066" timestamp="15597246" />
  <Command __id="9532" _type="PauseCommand" date="Tue Mar 29 23:17:57 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15607639">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10393]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9528" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:17:47 EDT 2022" docASTNodeCount="1105" docActiveCodeLength="7879" docExpressionCount="795" docLength="8535" projectName="A5" starttimestamp="1648594670066" timestamp="15597097">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				client.changeIPCMechanism(mechanism);¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9531" _type="MoveCaretCommand" caretOffset="5254" date="Tue Mar 29 23:17:57 EDT 2022" docOffset="5254" starttimestamp="1648594670066" timestamp="15607639" />
  <Command __id="9533" _type="MoveCaretCommand" caretOffset="5254" date="Tue Mar 29 23:17:57 EDT 2022" docOffset="5254" starttimestamp="1648594670066" timestamp="15607639" />
  <Command __id="9535" _type="InsertStringCommand" date="Tue Mar 29 23:17:58 EDT 2022" starttimestamp="1648594670066" timestamp="15608551" timestamp2="15608551">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9536" _type="InsertStringCommand" date="Tue Mar 29 23:17:58 EDT 2022" starttimestamp="1648594670066" timestamp="15608551" timestamp2="15608551">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9539" _type="PauseCommand" date="Tue Mar 29 23:18:00 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15610330">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1779]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="9538" _type="InsertStringCommand" date="Tue Mar 29 23:18:00 EDT 2022" starttimestamp="1648594670066" timestamp="15610330" timestamp2="15610330">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9540" _type="InsertStringCommand" date="Tue Mar 29 23:18:00 EDT 2022" starttimestamp="1648594670066" timestamp="15610330" timestamp2="15610330">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9542" _type="InsertStringCommand" date="Tue Mar 29 23:18:00 EDT 2022" starttimestamp="1648594670066" timestamp="15610426" timestamp2="15610426">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9543" _type="InsertStringCommand" date="Tue Mar 29 23:18:00 EDT 2022" starttimestamp="1648594670066" timestamp="15610426" timestamp2="15610426">
    <data><![CDATA[n]]></data>
  </Command>
  <DocumentChange __id="9534" _type="Insert" date="Tue Mar 29 23:17:58 EDT 2022" docASTNodeCount="995" docActiveCodeLength="7882" docExpressionCount="720" docLength="8538" length="3" offset="5254" repeat="3" starttimestamp="1648594670066" timestamp="15608539" timestamp2="15610422">
    <text><![CDATA[ in]]></text>
  </DocumentChange>
  <Command __id="9545" _type="PauseCommand" date="Tue Mar 29 23:18:03 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15613500">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3074]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="9544" _type="Insert" date="Tue Mar 29 23:18:03 EDT 2022" docASTNodeCount="998" docActiveCodeLength="7889" docExpressionCount="721" docLength="8545" length="7" offset="5257" repeat="7" starttimestamp="1648594670066" timestamp="15613500" timestamp2="15615397">
    <text><![CDATA[t aPros]]></text>
  </DocumentChange>
  <Command __id="9546" _type="InsertStringCommand" date="Tue Mar 29 23:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="15613513" timestamp2="15613513">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9547" _type="InsertStringCommand" date="Tue Mar 29 23:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="15613513" timestamp2="15613513">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="9549" _type="InsertStringCommand" date="Tue Mar 29 23:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="15613869" timestamp2="15613869">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9550" _type="InsertStringCommand" date="Tue Mar 29 23:18:03 EDT 2022" starttimestamp="1648594670066" timestamp="15613869" timestamp2="15613869">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9552" _type="InsertStringCommand" date="Tue Mar 29 23:18:04 EDT 2022" starttimestamp="1648594670066" timestamp="15614265" timestamp2="15614265">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9553" _type="InsertStringCommand" date="Tue Mar 29 23:18:04 EDT 2022" starttimestamp="1648594670066" timestamp="15614265" timestamp2="15614265">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9555" _type="InsertStringCommand" date="Tue Mar 29 23:18:04 EDT 2022" starttimestamp="1648594670066" timestamp="15614582" timestamp2="15614582">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9556" _type="InsertStringCommand" date="Tue Mar 29 23:18:04 EDT 2022" starttimestamp="1648594670066" timestamp="15614582" timestamp2="15614582">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9558" _type="InsertStringCommand" date="Tue Mar 29 23:18:04 EDT 2022" starttimestamp="1648594670066" timestamp="15614821" timestamp2="15614821">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9559" _type="InsertStringCommand" date="Tue Mar 29 23:18:04 EDT 2022" starttimestamp="1648594670066" timestamp="15614821" timestamp2="15614821">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9561" _type="InsertStringCommand" date="Tue Mar 29 23:18:04 EDT 2022" starttimestamp="1648594670066" timestamp="15614899" timestamp2="15614899">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9562" _type="InsertStringCommand" date="Tue Mar 29 23:18:04 EDT 2022" starttimestamp="1648594670066" timestamp="15614899" timestamp2="15614899">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9564" _type="InsertStringCommand" date="Tue Mar 29 23:18:05 EDT 2022" starttimestamp="1648594670066" timestamp="15615401" timestamp2="15615401">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9565" _type="InsertStringCommand" date="Tue Mar 29 23:18:05 EDT 2022" starttimestamp="1648594670066" timestamp="15615401" timestamp2="15615401">
    <data><![CDATA[s]]></data>
  </Command>
  <DocumentChange __id="9566" _type="Delete" date="Tue Mar 29 23:18:05 EDT 2022" docASTNodeCount="998" docActiveCodeLength="7888" docExpressionCount="721" docLength="8544" endLine="154" length="1" offset="5263" startLine="154" starttimestamp="1648594670066" timestamp="15615739">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="9567" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:18:05 EDT 2022" starttimestamp="1648594670066" timestamp="15615745" />
  <Command __id="9568" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:18:05 EDT 2022" starttimestamp="1648594670066" timestamp="15615746" />
  <Command __id="9570" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616190" timestamp2="15616190">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="9571" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616191" timestamp2="15616191">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="9573" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616302" timestamp2="15616302">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9574" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616302" timestamp2="15616302">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="9576" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616516" timestamp2="15616516">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9577" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616516" timestamp2="15616516">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9579" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616584" timestamp2="15616584">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9580" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616584" timestamp2="15616584">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9582" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616737" timestamp2="15616737">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="9583" _type="InsertStringCommand" date="Tue Mar 29 23:18:06 EDT 2022" starttimestamp="1648594670066" timestamp="15616737" timestamp2="15616737">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="9585" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15616971" timestamp2="15616971">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="9586" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15616971" timestamp2="15616971">
    <data><![CDATA[N]]></data>
  </Command>
  <Command __id="9588" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617163" timestamp2="15617163">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9589" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617163" timestamp2="15617163">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="9591" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617355" timestamp2="15617355">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9592" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617355" timestamp2="15617355">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9594" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617422" timestamp2="15617422">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="9595" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617422" timestamp2="15617422">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="9597" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617608" timestamp2="15617608">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9598" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617608" timestamp2="15617608">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9600" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617737" timestamp2="15617737">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9601" _type="InsertStringCommand" date="Tue Mar 29 23:18:07 EDT 2022" starttimestamp="1648594670066" timestamp="15617737" timestamp2="15617737">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="9604" _type="PauseCommand" date="Tue Mar 29 23:18:09 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15619718">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1981]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="9603" _type="InsertStringCommand" date="Tue Mar 29 23:18:09 EDT 2022" starttimestamp="1648594670066" timestamp="15619718" timestamp2="15619718">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="9605" _type="InsertStringCommand" date="Tue Mar 29 23:18:09 EDT 2022" starttimestamp="1648594670066" timestamp="15619718" timestamp2="15619718">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="9607" _type="PauseCommand" date="Tue Mar 29 23:18:10 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15620932">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1214]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9606" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:18:10 EDT 2022" starttimestamp="1648594670066" timestamp="15620932" />
  <Command __id="9608" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="15621030" />
  <Command __id="9609" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:18:11 EDT 2022" starttimestamp="1648594670066" timestamp="15621085" />
  <Command __id="9611" _type="PauseCommand" date="Tue Mar 29 23:18:18 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15628570">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7485]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9610" _type="ShellCommand" date="Tue Mar 29 23:18:18 EDT 2022" starttimestamp="1648594670066" timestamp="15628570" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9612" _type="ShellCommand" date="Tue Mar 29 23:18:18 EDT 2022" starttimestamp="1648594670066" timestamp="15628667" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9623" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:18:19 EDT 2022" starttimestamp="1648594670066" timestamp="15629535" />
  <Command __id="9624" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:18:19 EDT 2022" starttimestamp="1648594670066" timestamp="15629630" />
  <Command __id="9625" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:18:19 EDT 2022" starttimestamp="1648594670066" timestamp="15629656" />
  <DocumentChange __id="9569" _type="Insert" date="Tue Mar 29 23:18:06 EDT 2022" docASTNodeCount="1108" docActiveCodeLength="7900" docExpressionCount="796" docLength="8556" length="12" offset="5263" repeat="12" starttimestamp="1648594670066" timestamp="15616180" timestamp2="15619712">
    <text><![CDATA[posalNumber,]]></text>
  </DocumentChange>
  <DocumentChange __id="9613" _type="Delete" date="Tue Mar 29 23:18:18 EDT 2022" docASTNodeCount="1103" docActiveCodeLength="7863" docExpressionCount="792" docLength="8519" endLine="185" length="37" offset="6097" startLine="185" starttimestamp="1648594670066" timestamp="15628684">
    <text><![CDATA[client.changeIPCMechanism(mechanism);]]></text>
  </DocumentChange>
  <DocumentChange __id="9614" _type="Insert" date="Tue Mar 29 23:18:18 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7988" docExpressionCount="801" docLength="8678" length="159" offset="6097" repeat="9" starttimestamp="1648594670066" timestamp="15628689" timestamp2="15628704">
    <text><![CDATA[try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}]]></text>
  </DocumentChange>
  <Command __id="9627" _type="PauseCommand" date="Tue Mar 29 23:18:23 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15633223">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3567]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9628" _type="MoveCaretCommand" caretOffset="8513" date="Tue Mar 29 23:18:23 EDT 2022" docOffset="8513" starttimestamp="1648594670066" timestamp="15633372" />
  <Command __id="9626" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:18:23 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8695" docExpressionCount="802" docLength="9522" projectName="A5" starttimestamp="1648594670066" timestamp="15633223">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, "), Diff(INSERT,"aProposalNumber,"), Diff(EQUAL," broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		¶		aProposalNumber++;¶		¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		commandProcessor.setInputString("quit");
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		
		aProposalNumber++;
		
	}


}
]]></snapshot>
  </Command>
  <Command __id="9630" _type="PauseCommand" date="Tue Mar 29 23:19:07 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="15677419">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[44047]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9631" _type="MoveCaretCommand" caretOffset="5275" date="Tue Mar 29 23:19:07 EDT 2022" docOffset="5275" starttimestamp="1648594670066" timestamp="15677529" />
  <Command __id="9633" _type="PauseCommand" date="Tue Mar 29 23:19:10 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15679984">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2455]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9632" _type="MoveCaretCommand" caretOffset="6091" date="Tue Mar 29 23:19:10 EDT 2022" docOffset="6091" starttimestamp="1648594670066" timestamp="15679984" />
  <Command __id="9634" _type="MoveCaretCommand" caretOffset="6091" date="Tue Mar 29 23:19:10 EDT 2022" docOffset="6091" starttimestamp="1648594670066" timestamp="15679984" />
  <Command __id="9637" _type="PauseCommand" date="Tue Mar 29 23:19:12 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15682833">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2849]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9636" _type="ShellCommand" date="Tue Mar 29 23:19:12 EDT 2022" starttimestamp="1648594670066" timestamp="15682833" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9639" _type="PauseCommand" date="Tue Mar 29 23:19:16 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15686560">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3727]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="9638" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 23:19:16 EDT 2022" forward="true" matchWord="false" offset="6091" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="15686560" wrapSearch="false">
    <searchString><![CDATA[proposed]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9640" _type="FindCommand" caseSensitive="false" date="Tue Mar 29 23:19:17 EDT 2022" forward="true" matchWord="false" offset="6091" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648594670066" timestamp="15687293" wrapSearch="false">
    <searchString><![CDATA[proposed]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="9642" _type="PauseCommand" date="Tue Mar 29 23:19:18 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15688392">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1099]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9641" _type="ShellCommand" date="Tue Mar 29 23:19:18 EDT 2022" starttimestamp="1648594670066" timestamp="15688392" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9629" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:19:07 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7988" docExpressionCount="801" docLength="8678" projectName="A5" starttimestamp="1648594670066" timestamp="15677419">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient,"), Diff(INSERT," int aProposalNumber,"), Diff(EQUAL," boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶"), Diff(INSERT,"				try {¶	"), Diff(EQUAL,"				client.changeIPCMechanism(mechanism);¶				"), Diff(INSERT,"} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				"), Diff(EQUAL,"ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				//if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
				//	this.quit(0);
				//}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
				this.quit(0);
			}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="9644" _type="PauseCommand" date="Tue Mar 29 23:19:33 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15703721">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[15329]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9645" _type="MoveCaretCommand" caretOffset="8513" date="Tue Mar 29 23:19:33 EDT 2022" docOffset="8513" starttimestamp="1648594670066" timestamp="15703854" />
  <Command __id="9647" _type="PauseCommand" date="Tue Mar 29 23:19:45 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="15715213">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11359]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9646" _type="SelectTextCommand" caretOffset="7209" date="Tue Mar 29 23:19:45 EDT 2022" end="7282" start="7209" starttimestamp="1648594670066" timestamp="15715213" />
  <Command __id="9648" _type="CopyCommand" date="Tue Mar 29 23:19:45 EDT 2022" starttimestamp="1648594670066" timestamp="15715600" />
  <Command __id="9650" _type="PauseCommand" date="Tue Mar 29 23:19:48 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15718631">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3031]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9649" _type="MoveCaretCommand" caretOffset="9505" date="Tue Mar 29 23:19:48 EDT 2022" docOffset="9505" starttimestamp="1648594670066" timestamp="15718631" />
  <Command __id="9652" _type="InsertStringCommand" date="Tue Mar 29 23:19:48 EDT 2022" starttimestamp="1648594670066" timestamp="15718875" timestamp2="15718875">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9654" _type="PasteCommand" date="Tue Mar 29 23:19:49 EDT 2022" starttimestamp="1648594670066" timestamp="15719101" />
  <Command __id="9656" _type="PauseCommand" date="Tue Mar 29 23:19:52 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15722273">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3172]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="9655" _type="MoveCaretCommand" caretOffset="9553" date="Tue Mar 29 23:19:52 EDT 2022" docOffset="9553" starttimestamp="1648594670066" timestamp="15722273" />
  <Command __id="9658" _type="InsertStringCommand" date="Tue Mar 29 23:19:52 EDT 2022" starttimestamp="1648594670066" timestamp="15722697" timestamp2="15722697">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9660" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 23:19:53 EDT 2022" starttimestamp="1648594670066" timestamp="15723070" />
  <Command __id="9662" _type="InsertStringCommand" date="Tue Mar 29 23:19:53 EDT 2022" starttimestamp="1648594670066" timestamp="15723777" timestamp2="15723777">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="9664" _type="PauseCommand" date="Tue Mar 29 23:19:58 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="15728847">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5070]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9663" _type="SelectTextCommand" caretOffset="9569" date="Tue Mar 29 23:19:58 EDT 2022" end="9581" start="9569" starttimestamp="1648594670066" timestamp="15728847" />
  <Command __id="9643" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:19:33 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8695" docExpressionCount="802" docLength="9522" projectName="A5" starttimestamp="1648594670066" timestamp="15703721">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		¶		aProposalNumber++;¶		¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="9651" _type="Insert" date="Tue Mar 29 23:19:48 EDT 2022" docASTNodeCount="1127" docActiveCodeLength="8699" docExpressionCount="802" docLength="9526" length="4" offset="9505" starttimestamp="1648594670066" timestamp="15718863">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="9653" _type="Replace" date="Tue Mar 29 23:19:49 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8772" docExpressionCount="809" docLength="9599" endLine="270" insertionLength="75" int_docASTNodeCount="1127" int_docActiveCodeLength="8697" int_docExpressionCount="802" int_docLength="9524" length="2" offset="9507" startLine="270" starttimestamp="1648594670066" timestamp="15719096">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9657" _type="Insert" date="Tue Mar 29 23:19:52 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8773" docExpressionCount="809" docLength="9600" length="1" offset="9553" starttimestamp="1648594670066" timestamp="15722690">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="9659" _type="Delete" date="Tue Mar 29 23:19:53 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8772" docExpressionCount="809" docLength="9599" endLine="270" length="1" offset="9554" startLine="270" starttimestamp="1648594670066" timestamp="15723066">
    <text><![CDATA[p]]></text>
  </DocumentChange>
  <DocumentChange __id="9661" _type="Insert" date="Tue Mar 29 23:19:53 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8773" docExpressionCount="809" docLength="9600" length="1" offset="9554" starttimestamp="1648594670066" timestamp="15723768">
    <text><![CDATA[P]]></text>
  </DocumentChange>
  <Command __id="9666" _type="PauseCommand" date="Tue Mar 29 23:20:00 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15729968">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1121]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="9665" _type="Delete" date="Tue Mar 29 23:20:00 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8761" docExpressionCount="809" docLength="9588" endLine="270" length="12" offset="9569" startLine="270" starttimestamp="1648594670066" timestamp="15729968">
    <text><![CDATA[ aNewCommand]]></text>
  </DocumentChange>
  <Command __id="9667" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:20:00 EDT 2022" starttimestamp="1648594670066" timestamp="15729975" />
  <DocumentChange __id="9668" _type="Insert" date="Tue Mar 29 23:20:00 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8770" docExpressionCount="809" docLength="9597" length="9" offset="9569" repeat="9" starttimestamp="1648594670066" timestamp="15730105" timestamp2="15731438">
    <text><![CDATA[ mechanim]]></text>
  </DocumentChange>
  <Command __id="9669" _type="InsertStringCommand" date="Tue Mar 29 23:20:00 EDT 2022" starttimestamp="1648594670066" timestamp="15730110" timestamp2="15730110">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9671" _type="InsertStringCommand" date="Tue Mar 29 23:20:00 EDT 2022" starttimestamp="1648594670066" timestamp="15730332" timestamp2="15730332">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9673" _type="InsertStringCommand" date="Tue Mar 29 23:20:00 EDT 2022" starttimestamp="1648594670066" timestamp="15730487" timestamp2="15730487">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="9675" _type="InsertStringCommand" date="Tue Mar 29 23:20:00 EDT 2022" starttimestamp="1648594670066" timestamp="15730718" timestamp2="15730718">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="9677" _type="InsertStringCommand" date="Tue Mar 29 23:20:00 EDT 2022" starttimestamp="1648594670066" timestamp="15730786" timestamp2="15730786">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="9679" _type="InsertStringCommand" date="Tue Mar 29 23:20:01 EDT 2022" starttimestamp="1648594670066" timestamp="15730986" timestamp2="15730986">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="9681" _type="InsertStringCommand" date="Tue Mar 29 23:20:01 EDT 2022" starttimestamp="1648594670066" timestamp="15731081" timestamp2="15731081">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="9683" _type="InsertStringCommand" date="Tue Mar 29 23:20:01 EDT 2022" starttimestamp="1648594670066" timestamp="15731219" timestamp2="15731219">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="9685" _type="InsertStringCommand" date="Tue Mar 29 23:20:01 EDT 2022" starttimestamp="1648594670066" timestamp="15731444" timestamp2="15731444">
    <data><![CDATA[m]]></data>
  </Command>
  <DocumentChange __id="9686" _type="Delete" date="Tue Mar 29 23:20:02 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8769" docExpressionCount="809" docLength="9596" endLine="270" length="1" offset="9577" startLine="270" starttimestamp="1648594670066" timestamp="15732112">
    <text><![CDATA[m]]></text>
  </DocumentChange>
  <Command __id="9687" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:20:02 EDT 2022" starttimestamp="1648594670066" timestamp="15732121" />
  <Command __id="9689" _type="InsertStringCommand" date="Tue Mar 29 23:20:02 EDT 2022" starttimestamp="1648594670066" timestamp="15732242" timestamp2="15732242">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="9691" _type="InsertStringCommand" date="Tue Mar 29 23:20:02 EDT 2022" starttimestamp="1648594670066" timestamp="15732341" timestamp2="15732341">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="9693" _type="PauseCommand" date="Tue Mar 29 23:20:03 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="15733518">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1177]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="9692" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:20:03 EDT 2022" starttimestamp="1648594670066" timestamp="15733518" />
  <Command __id="9694" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:20:03 EDT 2022" starttimestamp="1648594670066" timestamp="15733617" />
  <Command __id="9695" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:20:03 EDT 2022" starttimestamp="1648594670066" timestamp="15733647" />
  <Command __id="9697" _type="PauseCommand" date="Tue Mar 29 23:20:06 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15736159">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2512]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="9755" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15779272" type="Run" />
  <Command __id="9757" _type="ConsoleOutput" date="Tue Mar 29 23:20:49 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="15779510" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.8309651976309639 (Opened)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:"), Diff(INSERT,"Server0<-->"), Diff(EQUAL,"Generic Client:0.8309651976309639"), Diff(INSERT," (Opened)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9758" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15779734" type="Run" />
  <Command __id="9759" _type="ConsoleOutput" date="Tue Mar 29 23:20:49 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="15779804" type="ConsoleOutput">
    <outputString><![CDATA[Client registered GIPC
com.sun.proxy.$Proxy1@3c2ecb1c
[com.sun.proxy.$Proxy1@3c2ecb1c]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.8309651976309639 (Opened)"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@3c2ecb1c¶[com.sun.proxy.$Proxy1@3c2ecb1c]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9760" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:49 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15779907" type="Run" />
  <Command __id="9761" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15780173" type="Run" />
  <Command __id="9762" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15780537" type="Run" />
  <Command __id="9763" _type="ConsoleOutput" date="Tue Mar 29 23:20:50 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="15780741" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@3c2ecb1c¶[com.sun.proxy.$Proxy1@3c2ecb1c]"), Diff(INSERT,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9764" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15780778" type="Run" />
  <Command __id="9765" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15781079" type="Run" />
  <Command __id="9766" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15781135" type="Run" />
  <Command __id="9767" _type="ConsoleOutput" date="Tue Mar 29 23:20:51 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="15781168" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64179](remote),objID:[-3cee5b00:17fd8d71965:-7ffe, 8870494379890937894]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64179](remote),objID:[-3cee5b00:17fd8d71965:-7ffe, 8870494379890937894]]]]]]
Server0<-->Generic Client:0.8359411457761462 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@42ae6910
[com.sun.proxy.$Proxy1@3c2ecb1c, com.sun.proxy.$Proxy1@42ae6910]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener o"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRe"), Diff(EQUAL,"f "), Diff(DELETE,"c"), Diff(INSERT,"["), Diff(EQUAL,"li"), Diff(DELETE,"ent¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"veRef: [endpoint:[192.168.1.118:64179](remote),objID:[-3cee5b00:17fd8d71965:-7ffe, 8870494379890937894]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64179](remote),objID:[-3cee5b00:17fd8d71965:-7ffe, 8870494379890937894]]]]]]¶Server0<-->Generic Client:0.8359411457761462 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@42ae6910¶[com.sun.proxy.$Proxy1@3c2ecb1c, com.sun.proxy.$Proxy1@42ae6910]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9768" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:20:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15781198" type="Run" />
  <Command __id="9769" _type="ConsoleOutput" date="Tue Mar 29 23:20:51 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="15781540" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64186](remote),objID:[-79d30061:17fd8d71e49:-7ffe, -7204315481147468497]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64179](remote),objID:[-3cee5b00:17fd8d71965:-7ffe, 8870494379890937894]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64186](remote),objID:[-79d30061:17fd8d71e49:-7ffe, -7204315481147468497]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:641"), Diff(DELETE,"79"), Diff(INSERT,"86"), Diff(EQUAL,"](remote),objID:[-"), Diff(DELETE,"3cee5b00"), Diff(INSERT,"79d30061"), Diff(EQUAL,":17fd8d71"), Diff(DELETE,"965"), Diff(INSERT,"e49"), Diff(EQUAL,":-7ffe, "), Diff(DELETE,"8870494379890937894"), Diff(INSERT,"-7204315481147468497"), Diff(EQUAL,"]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64179](remote),objID:[-3cee5b00:17fd8d71965:-7ffe, 8870494379890937894]]]]]"), Diff(DELETE,"]¶Server0<-->Generic Client:0.8359411457761462 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@42ae6910¶[com.sun.proxy.$Proxy1@3c2ecb1c, com.sun.proxy.$Proxy1@42ae6910"), Diff(INSERT,", Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64186](remote),objID:[-79d30061:17fd8d71e49:-7ffe, -7204315481147468497]]]]]"), Diff(EQUAL,"]¶")]]]></diff>
  </Command>
  <Command __id="9770" _type="ConsoleOutput" date="Tue Mar 29 23:20:51 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="15781567" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64186](remote),objID:[-79d30061:17fd8d71e49:-7ffe, -7204315481147468497]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64179](remote),objID:[-3cee5b00:17fd8d71965:-7ffe, 8870494379890937894]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:64186](remote),objID:[-79d30061:17fd8d71e49:-7ffe, -7204315481147468497]]]]]]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9772" _type="PauseCommand" date="Tue Mar 29 23:20:55 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15785218">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3651]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="9771" _type="ConsoleInput" date="Tue Mar 29 23:20:55 EDT 2022" starttimestamp="1648594670066" timestamp="15785218" type="Exception">
    <outputString><![CDATA[b true
]]></outputString>
  </Command>
  <Command __id="9773" _type="ConsoleOutput" date="Tue Mar 29 23:20:55 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="15785273" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.broadcastMetaState(boolean)[true]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.broadcastMetaState(boolean)[true]"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="9775" _type="PauseCommand" date="Tue Mar 29 23:20:59 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15789162">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3889]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="9818" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Tue Mar 29 23:22:14 EDT 2022" starttimestamp="1648594670066" timestamp="15864789" />
  <Command __id="9820" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:22:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15864835" type="Debug" />
  <Command __id="9821" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 23:22:14 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="15864835" type="Run" />
  <Command __id="9822" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:22:14 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="15864835" type="Debug" />
  <Command __id="9823" _type="ProgramExecutionEvent" className="/A5/src/client/Client.java" date="Tue Mar 29 23:22:14 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="15864835" type="Run" />
  <DocumentChange __id="9688" _type="Insert" date="Tue Mar 29 23:20:02 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8771" docExpressionCount="809" docLength="9598" length="2" offset="9577" repeat="2" starttimestamp="1648594670066" timestamp="15732236" timestamp2="15732337">
    <text><![CDATA[sm]]></text>
  </DocumentChange>
  <DocumentChange __id="9698" _type="Delete" date="Tue Mar 29 23:20:06 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8753" docExpressionCount="807" docLength="9580" endLine="269" length="18" offset="9487" startLine="269" starttimestamp="1648594670066" timestamp="15736380">
    <text><![CDATA[aProposalNumber++;]]></text>
  </DocumentChange>
  <DocumentChange __id="9701" _type="Replace" date="Tue Mar 29 23:20:07 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8771" docExpressionCount="809" docLength="9598" endLine="271" insertionLength="20" int_docASTNodeCount="1132" int_docActiveCodeLength="8751" int_docExpressionCount="807" int_docLength="9578" length="2" offset="9565" startLine="271" starttimestamp="1648594670066" timestamp="15737407">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		aProposalNumber++;]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9704" _type="Delete" date="Tue Mar 29 23:20:08 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8763" docExpressionCount="809" docLength="9590" endLine="269" length="8" offset="9479" repeat="6" startLine="267" starttimestamp="1648594670066" timestamp="15738532" timestamp2="15740921">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <Command __id="9825" _type="PauseCommand" date="Tue Mar 29 23:23:10 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="15920638">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[55803]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9826" _type="MoveCaretCommand" caretOffset="1199" date="Tue Mar 29 23:23:10 EDT 2022" docOffset="1199" starttimestamp="1648594670066" timestamp="15920782" />
  <Command __id="9824" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:23:10 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648594670066" timestamp="15920638">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, "), Diff(INSERT,"int aProposalNumber,"), Diff(EQUAL,"¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="9828" _type="PauseCommand" date="Tue Mar 29 23:23:14 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="15924565">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3783]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9829" _type="MoveCaretCommand" caretOffset="6091" date="Tue Mar 29 23:23:14 EDT 2022" docOffset="6091" starttimestamp="1648594670066" timestamp="15924674" />
  <Command __id="9827" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:23:14 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7988" docExpressionCount="801" docLength="8678" projectName="A5" starttimestamp="1648594670066" timestamp="15924565">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9831" _type="PauseCommand" date="Tue Mar 29 23:24:35 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="16005758">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[81084]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9832" _type="MoveCaretCommand" caretOffset="9479" date="Tue Mar 29 23:24:35 EDT 2022" docOffset="9479" starttimestamp="1648594670066" timestamp="16005878" />
  <Command __id="9830" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:24:35 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8763" docExpressionCount="809" docLength="9590" projectName="A5" starttimestamp="1648594670066" timestamp="16005758">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		"), Diff(INSERT,"ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);"), Diff(EQUAL,"¶		aProposalNumber++;¶	"), Diff(DELETE,"	¶	"), Diff(EQUAL,"}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		commandProcessor.setInputString("quit");
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}


}
]]></snapshot>
  </Command>
  <Command __id="9834" _type="PauseCommand" date="Tue Mar 29 23:24:43 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="16013347">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[7469]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9835" _type="MoveCaretCommand" caretOffset="1199" date="Tue Mar 29 23:24:43 EDT 2022" docOffset="1199" starttimestamp="1648594670066" timestamp="16013483" />
  <Command __id="9833" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:24:43 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648594670066" timestamp="16013347">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="9837" _type="PauseCommand" date="Tue Mar 29 23:24:45 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="16015394">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1911]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="9839" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Tue Mar 29 23:27:06 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="16156394" type="Run" />
  <Command __id="9841" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Tue Mar 29 23:27:06 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="16156394" type="Run" />
  <Command __id="9842" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:27:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="16156618" type="Run" />
  <Command __id="9843" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:27:06 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="16156636" type="Run" />
  <Command __id="9844" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:27:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="16156643" type="Run" />
  <Command __id="9846" _type="PauseCommand" date="Tue Mar 29 23:27:09 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="16159322">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2679]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="9847" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:27:11 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="16161310" type="Run" />
  <Command __id="9849" _type="ConsoleOutput" date="Tue Mar 29 23:27:11 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16161474" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Tue Mar 29 23:27:11 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"AReadCommand for java.nio.channels.SocketChannel[connected local=/127.0.0.1:64176 remote=localhost/127.0.0.1:10000]:An existing connection was forcibly closed by the remote host"), Diff(INSERT,"Building symbol table and running first pass checks:Tue Mar 29 23:27:11 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9851" _type="PauseCommand" date="Tue Mar 29 23:27:14 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="16164135">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2661]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9850" _type="ConsoleOutput" date="Tue Mar 29 23:27:14 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16164135" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:79
Running second pass checks Tue Mar 29 23:27:14 EDT 2022
Start O(n2) inter- and intra class method calls:Tue Mar 29 23:27:14 EDT 2022
End O(n2) inter- and intra class method calls:Tue Mar 29 23:27:14 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:79¶Running second pass checks Tue Mar 29 23:27:14 EDT 2022¶Start O(n2) inter- and intra class method calls:Tue Mar 29 23:27:14 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Tue Mar 29 23:27:1"), Diff(DELETE,"1"), Diff(INSERT,"4"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="9853" _type="PauseCommand" date="Tue Mar 29 23:27:15 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="16165548">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1413]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9852" _type="ConsoleOutput" date="Tue Mar 29 23:27:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16165548" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Tue Mar 29 23:27:15 EDT 2022
Generating checks:Tue Mar 29 23:27:15 EDT 2022
Finished Generating checks:Tue Mar 29 23:27:15 EDT 2022
Generating externals:Tue Mar 29 23:27:15 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:79¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Tue Mar 29 23:27:1"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Tue Mar 29 23:27:15 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Tue Mar 29 23:27:1"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Tue Mar 29 23:27:1"), Diff(DELETE,"4"), Diff(INSERT,"5"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="9854" _type="ConsoleOutput" date="Tue Mar 29 23:27:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16165857" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Tue Mar 29 23:27:15 EDT 2022
Test execution time (ms):4471
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Tue Mar 29 23:27:15 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Tue Mar 29 23:27:15 EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Tue Mar 29 23:27:15 EDT 2022¶Generating externals:Tue Mar 29 23:27:15 EDT 2022"), Diff(INSERT,"Test execution time (ms):4471"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9855" _type="ConsoleOutput" date="Tue Mar 29 23:27:15 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16165919" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):25

A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074
Test execution time (ms):22
Test execution time (ms):8
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Tue Mar 29 23:27:15 EDT 20"), Diff(INSERT,"Test execution time (ms):25¶¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶Test execution time (ms):"), Diff(EQUAL,"22¶Test execution time (ms):"), Diff(DELETE,"4471"), Diff(INSERT,"8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9856" _type="ConsoleOutput" date="Tue Mar 29 23:27:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16165944" type="ConsoleOutput">
    <outputString><![CDATA[A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):9
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):25¶¶"), Diff(EQUAL,"A5Expected"), Diff(DELETE,"Call"), Diff(INSERT,"Signature"), Diff(EQUAL,"s did not pass completely:See console trace about lines failing  this check%0."), Diff(DELETE,"4074074074074074¶Test execution time (ms):22"), Diff(INSERT,"36363636363636365¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9857" _type="ConsoleOutput" date="Tue Mar 29 23:27:16 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16166045" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (274)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (280)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):9"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (274)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (280)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9859" _type="PauseCommand" date="Tue Mar 29 23:27:21 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="16171021">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4976]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9858" _type="ConsoleOutput" date="Tue Mar 29 23:27:21 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16171021" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@4002c0fc . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (274)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (280)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@4002c0fc . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="9861" _type="PauseCommand" date="Tue Mar 29 23:27:22 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="16172338">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1317]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9860" _type="ConsoleOutput" date="Tue Mar 29 23:27:22 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16172338" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@4002c0fc . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@4002c0fc . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="9863" _type="PauseCommand" date="Tue Mar 29 23:27:24 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="16174774">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2435]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9862" _type="ConsoleOutput" date="Tue Mar 29 23:27:24 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16174773" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@8a7c513 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment5.style.A5Expected"), Diff(DELETE,"Calls@4002c0fc"), Diff(INSERT,"Signatures@8a7c513"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="9865" _type="PauseCommand" date="Tue Mar 29 23:27:27 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="16177342">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2569]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9864" _type="ConsoleOutput" date="Tue Mar 29 23:27:27 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16177342" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@4002c0fc . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment5.style.A5Expected"), Diff(DELETE,"Signatures@8a7c513"), Diff(INSERT,"Calls@4002c0fc"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="9867" _type="PauseCommand" date="Tue Mar 29 23:27:35 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="16185820">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8478]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9894" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:28:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="16223536" type="Run" />
  <Command __id="9896" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:28:13 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="16223537" type="Run" />
  <Command __id="9898" _type="PauseCommand" date="Tue Mar 29 23:28:25 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="16235702">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12165]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="9908" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:28:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="16246751" type="Run" />
  <Command __id="9910" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:28:36 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="16246753" type="Run" />
  <Command __id="9912" _type="PauseCommand" date="Tue Mar 29 23:28:38 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="16248283">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1530]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10007" _type="ShellCommand" date="Tue Mar 29 23:38:24 EDT 2022" starttimestamp="1648594670066" timestamp="16834735" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10010" _type="PauseCommand" date="Tue Mar 29 23:39:19 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="16889102">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[54367]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10009" _type="ShellCommand" date="Tue Mar 29 23:39:19 EDT 2022" starttimestamp="1648594670066" timestamp="16889102" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10012" _type="MoveCaretCommand" caretOffset="5426" date="Tue Mar 29 23:39:19 EDT 2022" docOffset="5426" starttimestamp="1648594670066" timestamp="16889182" />
  <Command __id="10013" _type="MoveCaretCommand" caretOffset="5426" date="Tue Mar 29 23:39:19 EDT 2022" docOffset="5426" starttimestamp="1648594670066" timestamp="16889259" />
  <Command __id="9916" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:29:11 EDT 2022" projectName="null" starttimestamp="1648594670066" timestamp="16281779">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="10005" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:38:09 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7988" docExpressionCount="801" docLength="8678" projectName="A5" starttimestamp="1648594670066" timestamp="16819167">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="10011" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:39:19 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7988" docExpressionCount="801" docLength="8678" projectName="A5" starttimestamp="1648594670066" timestamp="16889153">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="10015" _type="PauseCommand" date="Tue Mar 29 23:39:20 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="16890657">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1398]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="10016" _type="MoveCaretCommand" caretOffset="9479" date="Tue Mar 29 23:39:20 EDT 2022" docOffset="9479" starttimestamp="1648594670066" timestamp="16890774" />
  <Command __id="10018" _type="PauseCommand" date="Tue Mar 29 23:39:37 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="16907558">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16784]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10017" _type="ShellCommand" date="Tue Mar 29 23:39:37 EDT 2022" starttimestamp="1648594670066" timestamp="16907558" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10020" _type="PauseCommand" date="Tue Mar 29 23:39:44 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="16914892">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7334]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10019" _type="ConsoleOutput" date="Tue Mar 29 23:39:44 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16914892" type="ConsoleOutput">
    <outputString><![CDATA[
GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0
Test execution time (ms):112595
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"¶"), Diff(EQUAL,"GIPCRMIServerMetaState"), Diff(DELETE,"No"), Diff(EQUAL,"Broadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶"), Diff(DELETE,"¶"), Diff(EQUAL,"Test execution time (ms):112"), Diff(DELETE,"613"), Diff(INSERT,"595"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10022" _type="PauseCommand" date="Tue Mar 29 23:39:52 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="16922808">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7916]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10021" _type="ConsoleOutput" date="Tue Mar 29 23:39:52 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16922808" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@777b7708 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶Test execution time (ms):112595"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@777b7708 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10024" _type="PauseCommand" date="Tue Mar 29 23:40:01 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="16931047">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8239]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10023" _type="ConsoleOutput" date="Tue Mar 29 23:40:01 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16931047" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateBroadcast@756a5bd3 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaState"), Diff(DELETE,"No"), Diff(EQUAL,"Broadcast@7"), Diff(DELETE,"77b7708"), Diff(INSERT,"56a5bd3"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="10026" _type="PauseCommand" date="Tue Mar 29 23:40:51 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="16981725">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[50678]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10025" _type="ConsoleOutput" date="Tue Mar 29 23:40:51 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16981725" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5AccessModifiersMatched@54a7de50 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,".assignment5."), Diff(DELETE,"testcases.GIPCRMIServerMetaStateBroadcast@756a5bd3"), Diff(INSERT,"style.A5AccessModifiersMatched@54a7de50"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="10028" _type="PauseCommand" date="Tue Mar 29 23:40:54 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="16984210">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2485]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10027" _type="ConsoleOutput" date="Tue Mar 29 23:40:54 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="16984210" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5MnemonicNames@23760d5d . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment5.style.A5"), Diff(DELETE,"AccessModifiersMatched@54a7de50"), Diff(INSERT,"MnemonicNames@23760d5d"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="10030" _type="PauseCommand" date="Tue Mar 29 23:54:09 EDT 2022" range="10m-20m" starttimestamp="1648594670066" timestamp="17779744">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[795534]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="10029" _type="ExceptionCommand" date="Tue Mar 29 23:54:09 EDT 2022" starttimestamp="1648594670066" timestamp="17779744" type="Exception">
    <exceptionString><![CDATA[Exception in thread "Output Sorter" util.trace.TooManyTracesException: Printed > 4001 messages. Suspect infinite loop or recursion.
	at util.trace.Tracer.incNumTraces(Tracer.java:642)
	at util.trace.Tracer.printInfo(Tracer.java:349)
	at util.trace.Tracer.info(Tracer.java:336)
	at grader.basics.execution.BasicRunningProject.normalOutputProcessing(BasicRunningProject.java:246)
	at grader.basics.execution.BasicRunningProject.run(BasicRunningProject.java:268)
	at java.base/java.lang.Thread.run(Thread.java:834)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="10031" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:54:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="17779901" type="Debug" />
  <Command __id="10032" _type="ProgramExecutionEvent" className="(Unknown)" date="Tue Mar 29 23:54:09 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="17779901" type="Debug" />
  <Command __id="10033" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Tue Mar 29 23:54:09 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="17779901" type="Run" />
  <Command __id="10034" _type="ShellCommand" date="Tue Mar 29 23:54:10 EDT 2022" starttimestamp="1648594670066" timestamp="17780870" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10035" _type="MoveCaretCommand" caretOffset="7758" date="Tue Mar 29 23:54:10 EDT 2022" docOffset="7758" starttimestamp="1648594670066" timestamp="17780929" />
  <Command __id="10014" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:39:20 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8763" docExpressionCount="809" docLength="9590" projectName="A5" starttimestamp="1648594670066" timestamp="16890657">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="10037" _type="PauseCommand" date="Tue Mar 29 23:54:13 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="17783696">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2767]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="10038" _type="MoveCaretCommand" caretOffset="1199" date="Tue Mar 29 23:54:13 EDT 2022" docOffset="1199" starttimestamp="1648594670066" timestamp="17783823" />
  <Command __id="10036" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:54:13 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648594670066" timestamp="17783696">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="10040" _type="PauseCommand" date="Tue Mar 29 23:54:27 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="17797352">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13529]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="10041" _type="MoveCaretCommand" caretOffset="5426" date="Tue Mar 29 23:54:27 EDT 2022" docOffset="5426" starttimestamp="1648594670066" timestamp="17797522" />
  <Command __id="10043" _type="PauseCommand" date="Tue Mar 29 23:54:37 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="17807806">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10284]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="10042" _type="MoveCaretCommand" caretOffset="4370" date="Tue Mar 29 23:54:37 EDT 2022" docOffset="4370" starttimestamp="1648594670066" timestamp="17807806" />
  <Command __id="10044" _type="MoveCaretCommand" caretOffset="4370" date="Tue Mar 29 23:54:37 EDT 2022" docOffset="4370" starttimestamp="1648594670066" timestamp="17807806" />
  <Command __id="10046" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:54:38 EDT 2022" starttimestamp="1648594670066" timestamp="17808479" />
  <Command __id="10047" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:54:38 EDT 2022" starttimestamp="1648594670066" timestamp="17808479" />
  <Command __id="10049" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:54:38 EDT 2022" starttimestamp="1648594670066" timestamp="17808631" />
  <Command __id="10050" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Tue Mar 29 23:54:38 EDT 2022" starttimestamp="1648594670066" timestamp="17808631" />
  <Command __id="10051" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:54:39 EDT 2022" starttimestamp="1648594670066" timestamp="17809210" />
  <Command __id="10052" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:54:39 EDT 2022" starttimestamp="1648594670066" timestamp="17809210" />
  <Command __id="10053" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:54:39 EDT 2022" starttimestamp="1648594670066" timestamp="17809897" />
  <Command __id="10054" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:54:39 EDT 2022" starttimestamp="1648594670066" timestamp="17809897" />
  <Command __id="10056" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 23:54:40 EDT 2022" starttimestamp="1648594670066" timestamp="17810404" />
  <Command __id="10058" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 23:54:41 EDT 2022" starttimestamp="1648594670066" timestamp="17810989" />
  <Command __id="10059" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:54:41 EDT 2022" starttimestamp="1648594670066" timestamp="17811430" />
  <Command __id="10060" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:54:41 EDT 2022" starttimestamp="1648594670066" timestamp="17811430" />
  <Command __id="10062" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 23:54:42 EDT 2022" starttimestamp="1648594670066" timestamp="17812021" />
  <Command __id="10064" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Tue Mar 29 23:54:42 EDT 2022" starttimestamp="1648594670066" timestamp="17812522" />
  <Command __id="10066" _type="PauseCommand" date="Tue Mar 29 23:54:45 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="17815144">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2622]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="10069" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:54:46 EDT 2022" starttimestamp="1648594670066" timestamp="17816303" />
  <Command __id="10071" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:54:46 EDT 2022" starttimestamp="1648594670066" timestamp="17816309" />
  <Command __id="10073" _type="PauseCommand" date="Tue Mar 29 23:54:50 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="17820495">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4186]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10072" _type="ShellCommand" date="Tue Mar 29 23:54:50 EDT 2022" starttimestamp="1648594670066" timestamp="17820495" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10075" _type="PauseCommand" date="Tue Mar 29 23:56:36 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="17926206">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[105711]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10074" _type="ShellCommand" date="Tue Mar 29 23:56:36 EDT 2022" starttimestamp="1648594670066" timestamp="17926206" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10076" _type="MoveCaretCommand" caretOffset="4368" date="Tue Mar 29 23:56:36 EDT 2022" docOffset="4368" starttimestamp="1648594670066" timestamp="17926337" />
  <Command __id="10077" _type="MoveCaretCommand" caretOffset="4368" date="Tue Mar 29 23:56:36 EDT 2022" docOffset="4368" starttimestamp="1648594670066" timestamp="17926337" />
  <Command __id="10079" _type="PauseCommand" date="Tue Mar 29 23:56:40 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="17930633">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4296]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10078" _type="ShellCommand" date="Tue Mar 29 23:56:40 EDT 2022" starttimestamp="1648594670066" timestamp="17930633" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10081" _type="PauseCommand" date="Tue Mar 29 23:56:54 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="17944108">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13475]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10080" _type="ShellCommand" date="Tue Mar 29 23:56:54 EDT 2022" starttimestamp="1648594670066" timestamp="17944108" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10082" _type="MoveCaretCommand" caretOffset="4368" date="Tue Mar 29 23:56:54 EDT 2022" docOffset="4368" starttimestamp="1648594670066" timestamp="17944196" />
  <Command __id="10083" _type="MoveCaretCommand" caretOffset="4368" date="Tue Mar 29 23:56:54 EDT 2022" docOffset="4368" starttimestamp="1648594670066" timestamp="17944196" />
  <Command __id="10085" _type="InsertStringCommand" date="Tue Mar 29 23:56:54 EDT 2022" starttimestamp="1648594670066" timestamp="17944817" timestamp2="17944817">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10086" _type="InsertStringCommand" date="Tue Mar 29 23:56:54 EDT 2022" starttimestamp="1648594670066" timestamp="17944817" timestamp2="17944817">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10088" _type="InsertStringCommand" date="Tue Mar 29 23:56:55 EDT 2022" starttimestamp="1648594670066" timestamp="17944948" timestamp2="17944948">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10089" _type="InsertStringCommand" date="Tue Mar 29 23:56:55 EDT 2022" starttimestamp="1648594670066" timestamp="17944948" timestamp2="17944948">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10090" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:56:55 EDT 2022" starttimestamp="1648594670066" timestamp="17945387" />
  <Command __id="10091" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:56:55 EDT 2022" starttimestamp="1648594670066" timestamp="17945387" />
  <Command __id="10092" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:56:55 EDT 2022" starttimestamp="1648594670066" timestamp="17945699" />
  <Command __id="10093" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:56:55 EDT 2022" starttimestamp="1648594670066" timestamp="17945699" />
  <Command __id="10094" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 23:56:56 EDT 2022" starttimestamp="1648594670066" timestamp="17946141" />
  <Command __id="10095" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 23:56:56 EDT 2022" starttimestamp="1648594670066" timestamp="17946141" />
  <Command __id="10096" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 23:56:56 EDT 2022" starttimestamp="1648594670066" timestamp="17946368" />
  <Command __id="10097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 23:56:56 EDT 2022" starttimestamp="1648594670066" timestamp="17946368" />
  <Command __id="10098" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 23:56:56 EDT 2022" starttimestamp="1648594670066" timestamp="17946799" />
  <Command __id="10099" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Tue Mar 29 23:56:56 EDT 2022" starttimestamp="1648594670066" timestamp="17946799" />
  <Command __id="10101" _type="InsertStringCommand" date="Tue Mar 29 23:56:57 EDT 2022" starttimestamp="1648594670066" timestamp="17947248" timestamp2="17947248">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10102" _type="InsertStringCommand" date="Tue Mar 29 23:56:57 EDT 2022" starttimestamp="1648594670066" timestamp="17947248" timestamp2="17947248">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10104" _type="InsertStringCommand" date="Tue Mar 29 23:56:57 EDT 2022" starttimestamp="1648594670066" timestamp="17947452" timestamp2="17947452">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10105" _type="InsertStringCommand" date="Tue Mar 29 23:56:57 EDT 2022" starttimestamp="1648594670066" timestamp="17947452" timestamp2="17947452">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10106" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:56:57 EDT 2022" starttimestamp="1648594670066" timestamp="17947816" />
  <Command __id="10107" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Tue Mar 29 23:56:57 EDT 2022" starttimestamp="1648594670066" timestamp="17947816" />
  <Command __id="10108" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 23:56:58 EDT 2022" starttimestamp="1648594670066" timestamp="17948115" />
  <Command __id="10109" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Tue Mar 29 23:56:58 EDT 2022" starttimestamp="1648594670066" timestamp="17948115" />
  <Command __id="10111" _type="InsertStringCommand" date="Tue Mar 29 23:56:58 EDT 2022" starttimestamp="1648594670066" timestamp="17948633" timestamp2="17948633">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10112" _type="InsertStringCommand" date="Tue Mar 29 23:56:58 EDT 2022" starttimestamp="1648594670066" timestamp="17948633" timestamp2="17948633">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10114" _type="InsertStringCommand" date="Tue Mar 29 23:56:58 EDT 2022" starttimestamp="1648594670066" timestamp="17948758" timestamp2="17948758">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10115" _type="InsertStringCommand" date="Tue Mar 29 23:56:58 EDT 2022" starttimestamp="1648594670066" timestamp="17948758" timestamp2="17948758">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10116" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Tue Mar 29 23:56:59 EDT 2022" starttimestamp="1648594670066" timestamp="17949565" />
  <Command __id="10117" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:56:59 EDT 2022" starttimestamp="1648594670066" timestamp="17949659" />
  <Command __id="10118" _type="EclipseCommand" commandID="" date="Tue Mar 29 23:56:59 EDT 2022" starttimestamp="1648594670066" timestamp="17949697" />
  <Command __id="10120" _type="PauseCommand" date="Tue Mar 29 23:57:50 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="18000295">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[50598]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="10119" _type="BalloonCommand" date="Tue Mar 29 23:57:50 EDT 2022" message="*******************************************
Worked 34 minutes(fixed)/39 minutes(context based) from
Tue Mar 29 22:57:50 EDT 2022 to Tue Mar 29 23:56:59 EDT 2022
Edited 1 Projects: 
	A5
Edited 4 Files: 
	C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java
	C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteInterfaceGIPC.java
	C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java
	C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java
Number of insert: 562
Number of delete: 596
" starttimestamp="1648594670066" timestamp="18000295">
    <fineGrainedWorkTime><![CDATA[39]]></fineGrainedWorkTime>
    <insert><![CDATA[562]]></insert>
    <startTime><![CDATA[1648609070354]]></startTime>
    <endTime><![CDATA[1648612619763]]></endTime>
    <workTime><![CDATA[34]]></workTime>
    <delete><![CDATA[596]]></delete>
  </Command>
  <Command __id="10122" _type="PauseCommand" date="Tue Mar 29 23:59:00 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="18070050">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BalloonCommand]]></prev>
    <pause><![CDATA[69755]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10121" _type="ShellCommand" date="Tue Mar 29 23:59:00 EDT 2022" starttimestamp="1648594670066" timestamp="18070050" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10124" _type="PauseCommand" date="Wed Mar 30 00:03:40 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="18350567">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[280517]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10123" _type="ShellCommand" date="Wed Mar 30 00:03:40 EDT 2022" starttimestamp="1648594670066" timestamp="18350567" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10126" _type="PauseCommand" date="Wed Mar 30 00:04:39 EDT 2022" range="30s-1m" starttimestamp="1648594670066" timestamp="18409047">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[58480]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="10125" _type="MoveCaretCommand" caretOffset="4964" date="Wed Mar 30 00:04:39 EDT 2022" docOffset="4964" starttimestamp="1648594670066" timestamp="18409047" />
  <Command __id="10127" _type="MoveCaretCommand" caretOffset="4964" date="Wed Mar 30 00:04:39 EDT 2022" docOffset="4964" starttimestamp="1648594670066" timestamp="18409047" />
  <Command __id="10129" _type="InsertStringCommand" date="Wed Mar 30 00:04:39 EDT 2022" starttimestamp="1648594670066" timestamp="18409741" timestamp2="18409741">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10130" _type="InsertStringCommand" date="Wed Mar 30 00:04:39 EDT 2022" starttimestamp="1648594670066" timestamp="18409741" timestamp2="18409741">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10132" _type="InsertStringCommand" date="Wed Mar 30 00:04:39 EDT 2022" starttimestamp="1648594670066" timestamp="18409870" timestamp2="18409870">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10133" _type="InsertStringCommand" date="Wed Mar 30 00:04:39 EDT 2022" starttimestamp="1648594670066" timestamp="18409870" timestamp2="18409870">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10134" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:04:40 EDT 2022" starttimestamp="1648594670066" timestamp="18410452" />
  <Command __id="10135" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:04:40 EDT 2022" starttimestamp="1648594670066" timestamp="18410452" />
  <Command __id="10136" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:04:40 EDT 2022" starttimestamp="1648594670066" timestamp="18410756" />
  <Command __id="10137" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:04:40 EDT 2022" starttimestamp="1648594670066" timestamp="18410756" />
  <Command __id="10138" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 30 00:04:41 EDT 2022" starttimestamp="1648594670066" timestamp="18411167" />
  <Command __id="10139" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 30 00:04:41 EDT 2022" starttimestamp="1648594670066" timestamp="18411167" />
  <Command __id="10140" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 30 00:04:41 EDT 2022" starttimestamp="1648594670066" timestamp="18411363" />
  <Command __id="10141" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 30 00:04:41 EDT 2022" starttimestamp="1648594670066" timestamp="18411363" />
  <Command __id="10142" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 30 00:04:41 EDT 2022" starttimestamp="1648594670066" timestamp="18411740" />
  <Command __id="10143" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 30 00:04:41 EDT 2022" starttimestamp="1648594670066" timestamp="18411740" />
  <Command __id="10039" _type="DiffBasedFileOpenCommand" date="Tue Mar 29 23:54:27 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7988" docExpressionCount="801" docLength="8678" projectName="A5" starttimestamp="1648594670066" timestamp="17797352">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶				this.quit(0);¶			}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="10045" _type="Delete" date="Tue Mar 29 23:54:38 EDT 2022" docASTNodeCount="1129" docActiveCodeLength="8023" docExpressionCount="807" docLength="8676" endLine="115" length="2" offset="4368" repeat="2" startLine="115" starttimestamp="1648594670066" timestamp="17808463" timestamp2="17808629">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10055" _type="Delete" date="Tue Mar 29 23:54:40 EDT 2022" docASTNodeCount="1134" docActiveCodeLength="8037" docExpressionCount="811" docLength="8674" endLine="117" length="2" offset="4431" repeat="2" startLine="117" starttimestamp="1648594670066" timestamp="17810392" timestamp2="17810984">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10061" _type="Delete" date="Tue Mar 29 23:54:42 EDT 2022" docASTNodeCount="1133" docActiveCodeLength="8038" docExpressionCount="811" docLength="8672" endLine="118" length="2" offset="4451" repeat="2" startLine="118" starttimestamp="1648594670066" timestamp="17812016" timestamp2="17812517">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10084" _type="Insert" date="Tue Mar 29 23:56:54 EDT 2022" docASTNodeCount="1121" docActiveCodeLength="8003" docExpressionCount="799" docLength="8674" length="2" offset="4368" repeat="2" starttimestamp="1648594670066" timestamp="17944813" timestamp2="17944937">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10100" _type="Insert" date="Tue Mar 29 23:56:57 EDT 2022" docASTNodeCount="1116" docActiveCodeLength="7989" docExpressionCount="795" docLength="8676" length="2" offset="4433" repeat="2" starttimestamp="1648594670066" timestamp="17947241" timestamp2="17947446">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10110" _type="Insert" date="Tue Mar 29 23:56:58 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7988" docExpressionCount="801" docLength="8678" length="2" offset="4455" repeat="2" starttimestamp="1648594670066" timestamp="17948627" timestamp2="17948750">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10128" _type="Insert" date="Wed Mar 30 00:04:39 EDT 2022" docASTNodeCount="1108" docActiveCodeLength="7953" docExpressionCount="789" docLength="8680" length="2" offset="4964" repeat="2" starttimestamp="1648594670066" timestamp="18409728" timestamp2="18409863">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="10145" _type="PauseCommand" date="Wed Mar 30 00:04:42 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="18412812">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1072]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="10144" _type="Insert" date="Wed Mar 30 00:04:42 EDT 2022" docASTNodeCount="1103" docActiveCodeLength="7939" docExpressionCount="785" docLength="8682" length="2" offset="5027" repeat="2" starttimestamp="1648594670066" timestamp="18412812" timestamp2="18412954">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="10146" _type="InsertStringCommand" date="Wed Mar 30 00:04:42 EDT 2022" starttimestamp="1648594670066" timestamp="18412825" timestamp2="18412825">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10147" _type="InsertStringCommand" date="Wed Mar 30 00:04:42 EDT 2022" starttimestamp="1648594670066" timestamp="18412825" timestamp2="18412825">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10149" _type="InsertStringCommand" date="Wed Mar 30 00:04:43 EDT 2022" starttimestamp="1648594670066" timestamp="18412960" timestamp2="18412960">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10150" _type="InsertStringCommand" date="Wed Mar 30 00:04:43 EDT 2022" starttimestamp="1648594670066" timestamp="18412960" timestamp2="18412960">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10151" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:04:43 EDT 2022" starttimestamp="1648594670066" timestamp="18413342" />
  <Command __id="10152" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:04:43 EDT 2022" starttimestamp="1648594670066" timestamp="18413342" />
  <Command __id="10153" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 30 00:04:43 EDT 2022" starttimestamp="1648594670066" timestamp="18413639" />
  <Command __id="10154" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 30 00:04:43 EDT 2022" starttimestamp="1648594670066" timestamp="18413639" />
  <Command __id="10156" _type="InsertStringCommand" date="Wed Mar 30 00:04:44 EDT 2022" starttimestamp="1648594670066" timestamp="18414182" timestamp2="18414182">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10157" _type="InsertStringCommand" date="Wed Mar 30 00:04:44 EDT 2022" starttimestamp="1648594670066" timestamp="18414182" timestamp2="18414182">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10159" _type="InsertStringCommand" date="Wed Mar 30 00:04:44 EDT 2022" starttimestamp="1648594670066" timestamp="18414318" timestamp2="18414318">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10160" _type="InsertStringCommand" date="Wed Mar 30 00:04:44 EDT 2022" starttimestamp="1648594670066" timestamp="18414318" timestamp2="18414318">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10162" _type="PauseCommand" date="Wed Mar 30 00:04:47 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18417823">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3505]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="10161" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 00:04:47 EDT 2022" starttimestamp="1648594670066" timestamp="18417823" />
  <Command __id="10163" _type="EclipseCommand" commandID="" date="Wed Mar 30 00:04:47 EDT 2022" starttimestamp="1648594670066" timestamp="18417918" />
  <Command __id="10164" _type="EclipseCommand" commandID="" date="Wed Mar 30 00:04:48 EDT 2022" starttimestamp="1648594670066" timestamp="18417958" />
  <Command __id="10166" _type="PauseCommand" date="Wed Mar 30 00:04:49 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="18419473">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1515]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="10165" _type="MoveCaretCommand" caretOffset="5056" date="Wed Mar 30 00:04:49 EDT 2022" docOffset="5056" starttimestamp="1648594670066" timestamp="18419473" />
  <Command __id="10167" _type="MoveCaretCommand" caretOffset="5056" date="Wed Mar 30 00:04:49 EDT 2022" docOffset="5056" starttimestamp="1648594670066" timestamp="18419473" />
  <DocumentChange __id="10155" _type="Insert" date="Wed Mar 30 00:04:44 EDT 2022" docASTNodeCount="1107" docActiveCodeLength="7938" docExpressionCount="791" docLength="8684" length="2" offset="5048" repeat="2" starttimestamp="1648594670066" timestamp="18414173" timestamp2="18414310">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="10169" _type="PauseCommand" date="Wed Mar 30 00:05:50 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="18480312">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[60839]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="10170" _type="MoveCaretCommand" caretOffset="7758" date="Wed Mar 30 00:05:50 EDT 2022" docOffset="7758" starttimestamp="1648594670066" timestamp="18480432" />
  <Command __id="10172" _type="PauseCommand" date="Wed Mar 30 00:06:13 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="18503867">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[23435]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="10168" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 00:05:50 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8763" docExpressionCount="809" docLength="9590" projectName="A5" starttimestamp="1648594670066" timestamp="18480312">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		commandProcessor.setInputString("quit");¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="10173" _type="Insert" date="Wed Mar 30 00:06:14 EDT 2022" docASTNodeCount="1139" docActiveCodeLength="8773" docExpressionCount="810" docLength="9600" length="10" offset="8828" repeat="7" starttimestamp="1648594670066" timestamp="18504132" timestamp2="18505318">
    <text><![CDATA[
		Server]]></text>
  </DocumentChange>
  <DocumentChange __id="10187" _type="Delete" date="Wed Mar 30 00:06:16 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8767" docExpressionCount="809" docLength="9594" endLine="243" length="6" offset="8832" repeat="6" startLine="243" starttimestamp="1648594670066" timestamp="18506092" timestamp2="18507175">
    <text><![CDATA[Server]]></text>
  </DocumentChange>
  <Command __id="10171" _type="MoveCaretCommand" caretOffset="8828" date="Wed Mar 30 00:06:13 EDT 2022" docOffset="8828" starttimestamp="1648594670066" timestamp="18503867" />
  <Command __id="10174" _type="InsertStringCommand" date="Wed Mar 30 00:06:14 EDT 2022" starttimestamp="1648594670066" timestamp="18504142" timestamp2="18504142">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10176" _type="InsertStringCommand" date="Wed Mar 30 00:06:14 EDT 2022" starttimestamp="1648594670066" timestamp="18504524" timestamp2="18504524">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="10178" _type="InsertStringCommand" date="Wed Mar 30 00:06:14 EDT 2022" starttimestamp="1648594670066" timestamp="18504700" timestamp2="18504700">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="10180" _type="InsertStringCommand" date="Wed Mar 30 00:06:14 EDT 2022" starttimestamp="1648594670066" timestamp="18504829" timestamp2="18504829">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="10182" _type="InsertStringCommand" date="Wed Mar 30 00:06:15 EDT 2022" starttimestamp="1648594670066" timestamp="18505059" timestamp2="18505059">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="10184" _type="InsertStringCommand" date="Wed Mar 30 00:06:15 EDT 2022" starttimestamp="1648594670066" timestamp="18505202" timestamp2="18505202">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="10186" _type="InsertStringCommand" date="Wed Mar 30 00:06:15 EDT 2022" starttimestamp="1648594670066" timestamp="18505324" timestamp2="18505324">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="10188" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:06:16 EDT 2022" starttimestamp="1648594670066" timestamp="18506095" />
  <Command __id="10190" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:06:16 EDT 2022" starttimestamp="1648594670066" timestamp="18506258" />
  <Command __id="10192" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:06:16 EDT 2022" starttimestamp="1648594670066" timestamp="18506419" />
  <Command __id="10194" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:06:16 EDT 2022" starttimestamp="1648594670066" timestamp="18506593" />
  <Command __id="10196" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:06:16 EDT 2022" starttimestamp="1648594670066" timestamp="18506753" />
  <Command __id="10198" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:06:17 EDT 2022" starttimestamp="1648594670066" timestamp="18507178" />
  <Command __id="10200" _type="InsertStringCommand" date="Wed Mar 30 00:06:17 EDT 2022" starttimestamp="1648594670066" timestamp="18507315" timestamp2="18507315">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="10202" _type="InsertStringCommand" date="Wed Mar 30 00:06:17 EDT 2022" starttimestamp="1648594670066" timestamp="18507433" timestamp2="18507433">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="10204" _type="InsertStringCommand" date="Wed Mar 30 00:06:17 EDT 2022" starttimestamp="1648594670066" timestamp="18507533" timestamp2="18507533">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="10206" _type="InsertStringCommand" date="Wed Mar 30 00:06:17 EDT 2022" starttimestamp="1648594670066" timestamp="18507791" timestamp2="18507791">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="10208" _type="InsertStringCommand" date="Wed Mar 30 00:06:18 EDT 2022" starttimestamp="1648594670066" timestamp="18507939" timestamp2="18507939">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="10210" _type="InsertStringCommand" date="Wed Mar 30 00:06:18 EDT 2022" starttimestamp="1648594670066" timestamp="18508064" timestamp2="18508064">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="10212" _type="InsertStringCommand" date="Wed Mar 30 00:06:18 EDT 2022" starttimestamp="1648594670066" timestamp="18508237" timestamp2="18508237">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="10213" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Mar 30 00:06:18 EDT 2022" start_end="START" starttimestamp="1648594670066" timestamp="18508248" />
  <DocumentChange __id="10199" _type="Insert" date="Wed Mar 30 00:06:17 EDT 2022" docASTNodeCount="1141" docActiveCodeLength="8776" docExpressionCount="812" docLength="9603" length="9" offset="8832" repeat="9" starttimestamp="1648594670066" timestamp="18507311" timestamp2="18510338">
    <text><![CDATA[server.qu]]></text>
  </DocumentChange>
  <Command __id="10217" _type="PauseCommand" date="Wed Mar 30 00:06:23 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="18513416">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[5168]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="10227" _type="PauseCommand" date="Wed Mar 30 00:06:27 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18517136">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[3720]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="10226" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Mar 30 00:06:27 EDT 2022" start_end="END" starttimestamp="1648594670066" timestamp="18517136" />
  <Command __id="10228" _type="MoveCaretCommand" caretOffset="8828" date="Wed Mar 30 00:06:27 EDT 2022" docOffset="8828" starttimestamp="1648594670066" timestamp="18517252" />
  <Command __id="10230" _type="PauseCommand" date="Wed Mar 30 00:08:44 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="18654114">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[136862]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="10229" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 00:08:44 EDT 2022" starttimestamp="1648594670066" timestamp="18654114" />
  <Command __id="10231" _type="EclipseCommand" commandID="" date="Wed Mar 30 00:08:44 EDT 2022" starttimestamp="1648594670066" timestamp="18654213" />
  <Command __id="10232" _type="EclipseCommand" commandID="" date="Wed Mar 30 00:08:44 EDT 2022" starttimestamp="1648594670066" timestamp="18654250" />
  <Command __id="10234" _type="PauseCommand" date="Wed Mar 30 00:08:45 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="18655293">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1043]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="10233" _type="MoveCaretCommand" caretOffset="8788" date="Wed Mar 30 00:08:45 EDT 2022" docOffset="8788" starttimestamp="1648594670066" timestamp="18655293" />
  <Command __id="10236" _type="InsertStringCommand" date="Wed Mar 30 00:08:45 EDT 2022" starttimestamp="1648594670066" timestamp="18655843" timestamp2="18655843">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10238" _type="InsertStringCommand" date="Wed Mar 30 00:08:46 EDT 2022" starttimestamp="1648594670066" timestamp="18655958" timestamp2="18655958">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="10239" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 00:08:46 EDT 2022" starttimestamp="1648594670066" timestamp="18656221" />
  <Command __id="10240" _type="EclipseCommand" commandID="" date="Wed Mar 30 00:08:46 EDT 2022" starttimestamp="1648594670066" timestamp="18656311" />
  <Command __id="10241" _type="EclipseCommand" commandID="" date="Wed Mar 30 00:08:46 EDT 2022" starttimestamp="1648594670066" timestamp="18656336" />
  <DocumentChange __id="10216" _type="Delete" date="Wed Mar 30 00:06:23 EDT 2022" docASTNodeCount="1135" docActiveCodeLength="8767" docExpressionCount="809" docLength="9594" endLine="243" length="9" offset="8832" repeat="9" startLine="243" starttimestamp="1648594670066" timestamp="18513416" timestamp2="18515357">
    <text><![CDATA[server.qu]]></text>
  </DocumentChange>
  <DocumentChange __id="10235" _type="Insert" date="Wed Mar 30 00:08:45 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" length="2" offset="8788" repeat="2" starttimestamp="1648594670066" timestamp="18655839" timestamp2="18655953">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="10243" _type="PauseCommand" date="Wed Mar 30 00:08:48 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18658727">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2391]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="10244" _type="MoveCaretCommand" caretOffset="1199" date="Wed Mar 30 00:08:48 EDT 2022" docOffset="1199" starttimestamp="1648594670066" timestamp="18658880" />
  <Command __id="10242" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 00:08:48 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648594670066" timestamp="18658727">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="10246" _type="PauseCommand" date="Wed Mar 30 00:08:51 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18661222">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2342]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="10247" _type="MoveCaretCommand" caretOffset="8790" date="Wed Mar 30 00:08:51 EDT 2022" docOffset="8790" starttimestamp="1648594670066" timestamp="18661344" />
  <Command __id="10245" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 00:08:51 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648594670066" timestamp="18661222">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechansim = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		"), Diff(INSERT,"//"), Diff(EQUAL,"commandProcessor.setInputString("quit");¶		"), Diff(INSERT,"¶		"), Diff(EQUAL,"System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}


}
]]></snapshot>
  </Command>
  <Command __id="10249" _type="PauseCommand" date="Wed Mar 30 00:09:01 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="18671515">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10171]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="10250" _type="MoveCaretCommand" caretOffset="5056" date="Wed Mar 30 00:09:01 EDT 2022" docOffset="5056" starttimestamp="1648594670066" timestamp="18671613" />
  <Command __id="10252" _type="PauseCommand" date="Wed Mar 30 00:09:20 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="18690561">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[18948]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="10251" _type="MoveCaretCommand" caretOffset="4370" date="Wed Mar 30 00:09:20 EDT 2022" docOffset="4370" starttimestamp="1648594670066" timestamp="18690561" />
  <Command __id="10253" _type="MoveCaretCommand" caretOffset="4370" date="Wed Mar 30 00:09:20 EDT 2022" docOffset="4370" starttimestamp="1648594670066" timestamp="18690561" />
  <Command __id="10255" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:09:21 EDT 2022" starttimestamp="1648594670066" timestamp="18691273" />
  <Command __id="10256" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:09:21 EDT 2022" starttimestamp="1648594670066" timestamp="18691273" />
  <Command __id="10258" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:09:21 EDT 2022" starttimestamp="1648594670066" timestamp="18691409" />
  <Command __id="10259" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 00:09:21 EDT 2022" starttimestamp="1648594670066" timestamp="18691409" />
  <Command __id="10260" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:09:22 EDT 2022" starttimestamp="1648594670066" timestamp="18692249" />
  <Command __id="10261" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:09:22 EDT 2022" starttimestamp="1648594670066" timestamp="18692249" />
  <Command __id="10262" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:09:22 EDT 2022" starttimestamp="1648594670066" timestamp="18692481" />
  <Command __id="10263" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:09:22 EDT 2022" starttimestamp="1648594670066" timestamp="18692481" />
  <Command __id="10265" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Mar 30 00:09:22 EDT 2022" starttimestamp="1648594670066" timestamp="18692890" />
  <Command __id="10267" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Mar 30 00:09:23 EDT 2022" starttimestamp="1648594670066" timestamp="18693075" />
  <Command __id="10268" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:09:23 EDT 2022" starttimestamp="1648594670066" timestamp="18693413" />
  <Command __id="10269" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_DOWN" date="Wed Mar 30 00:09:23 EDT 2022" starttimestamp="1648594670066" timestamp="18693413" />
  <Command __id="10271" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Mar 30 00:09:23 EDT 2022" starttimestamp="1648594670066" timestamp="18693714" />
  <Command __id="10273" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Wed Mar 30 00:09:23 EDT 2022" starttimestamp="1648594670066" timestamp="18693901" />
  <Command __id="10275" _type="PauseCommand" date="Wed Mar 30 00:09:26 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18696605">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2704]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="10274" _type="SelectTextCommand" caretOffset="4432" date="Wed Mar 30 00:09:26 EDT 2022" end="4436" start="4432" starttimestamp="1648594670066" timestamp="18696605" />
  <Command __id="10276" _type="SelectTextCommand" caretOffset="4432" date="Wed Mar 30 00:09:26 EDT 2022" end="4436" start="4432" starttimestamp="1648594670066" timestamp="18696605" />
  <Command __id="10248" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 00:09:01 EDT 2022" docASTNodeCount="1107" docActiveCodeLength="7938" docExpressionCount="791" docLength="8684" projectName="A5" starttimestamp="1648594670066" timestamp="18671515">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				//if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶				//	this.quit(0);¶				//}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			"), Diff(INSERT,"//"), Diff(EQUAL,"if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			"), Diff(INSERT,"//"), Diff(EQUAL,"	this.quit(0);¶			"), Diff(INSERT,"//"), Diff(EQUAL,"}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				//if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
				//	this.quit(0);
				//}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="10254" _type="Delete" date="Wed Mar 30 00:09:21 EDT 2022" docASTNodeCount="1116" docActiveCodeLength="7973" docExpressionCount="797" docLength="8682" endLine="115" length="2" offset="4368" repeat="2" startLine="115" starttimestamp="1648594670066" timestamp="18691257" timestamp2="18691407">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10264" _type="Delete" date="Wed Mar 30 00:09:22 EDT 2022" docASTNodeCount="1121" docActiveCodeLength="7987" docExpressionCount="801" docLength="8680" endLine="117" length="2" offset="4431" repeat="2" startLine="117" starttimestamp="1648594670066" timestamp="18692880" timestamp2="18693072">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10270" _type="Delete" date="Wed Mar 30 00:09:23 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7988" docExpressionCount="801" docLength="8678" endLine="118" length="2" offset="4451" repeat="2" startLine="118" starttimestamp="1648594670066" timestamp="18693709" timestamp2="18693896">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="10278" _type="PauseCommand" date="Wed Mar 30 00:09:32 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="18702075">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5470]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="10277" _type="Replace" date="Wed Mar 30 00:09:32 EDT 2022" docASTNodeCount="1120" docActiveCodeLength="7985" docExpressionCount="801" docLength="8675" endLine="117" insertionLength="1" int_docASTNodeCount="1119" int_docActiveCodeLength="7984" int_docExpressionCount="800" int_docLength="8674" length="4" offset="4432" startLine="117" starttimestamp="1648594670066" timestamp="18702075">
    <deletedText><![CDATA[this]]></deletedText>
    <insertedText><![CDATA[c]]></insertedText>
  </DocumentChange>
  <Command __id="10279" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702089" timestamp2="18702089">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="10280" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702089" timestamp2="18702089">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="10282" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702264" timestamp2="18702264">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="10283" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702264" timestamp2="18702264">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="10285" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702354" timestamp2="18702354">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="10286" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702354" timestamp2="18702354">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="10288" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702449" timestamp2="18702449">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="10289" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702449" timestamp2="18702449">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="10291" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702601" timestamp2="18702601">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="10292" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702601" timestamp2="18702601">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="10294" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702692" timestamp2="18702692">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="10295" _type="InsertStringCommand" date="Wed Mar 30 00:09:32 EDT 2022" starttimestamp="1648594670066" timestamp="18702692" timestamp2="18702692">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="10297" _type="PauseCommand" date="Wed Mar 30 00:09:37 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18707372">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4680]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10329" _type="RunCommand" className="/A5/src/client/Client.java" date="Wed Mar 30 00:09:54 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="18724538" type="Run" />
  <Command __id="10331" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:09:54 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18724772" type="Run" />
  <Command __id="10332" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:09:54 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18724777" type="Run" />
  <Command __id="10333" _type="ConsoleOutput" date="Wed Mar 30 00:09:55 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18725093" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.428274262654339
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry"), Diff(INSERT,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.428274262654339"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10335" _type="PauseCommand" date="Wed Mar 30 00:09:56 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="18726373">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1280]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10334" _type="ShellCommand" date="Wed Mar 30 00:09:56 EDT 2022" starttimestamp="1648594670066" timestamp="18726373" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10336" _type="ShellCommand" date="Wed Mar 30 00:09:56 EDT 2022" starttimestamp="1648594670066" timestamp="18726721" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10337" _type="RunCommand" className="/A5/src/client/Client.java" date="Wed Mar 30 00:09:57 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="18726944" type="Run" />
  <Command __id="10338" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:09:57 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18727175" type="Run" />
  <Command __id="10339" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:09:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18727179" type="Run" />
  <Command __id="10340" _type="ConsoleOutput" date="Wed Mar 30 00:09:57 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18727753" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.9011532783510701
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0."), Diff(DELETE,"428274262654339"), Diff(INSERT,"9011532783510701"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10342" _type="PauseCommand" date="Wed Mar 30 00:09:59 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="18729646">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1893]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10348" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18736644" type="Run" />
  <Command __id="10350" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18736970" type="Run" />
  <Command __id="10351" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18736970" type="Run" />
  <Command __id="10352" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18737129" type="Run" />
  <Command __id="10353" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18737205" type="Run" />
  <Command __id="10354" _type="ConsoleOutput" date="Wed Mar 30 00:10:07 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18737522" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.428274262654339 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@683ab326
[com.sun.proxy.$Proxy1@683ab326]
Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.9011532783510701"), Diff(INSERT,"Server0<-->Generic Client:0.428274262654339 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@683ab326¶[com.sun.proxy.$Proxy1@683ab326]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10355" _type="ConsoleOutput" date="Wed Mar 30 00:10:07 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18737640" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.428274262654339 (Opened)¶Client registered GIPC"), Diff(INSERT,"added server as a property change listener of client"), Diff(EQUAL,"¶"), Diff(DELETE,"c"), Diff(INSERT,"C"), Diff(EQUAL,"om"), Diff(DELETE,".sun.proxy.$Proxy1@683ab326¶[com.sun.proxy.$Proxy1@683ab326]¶Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]]]"), Diff(INSERT,"mand processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10356" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18738136" type="Run" />
  <Command __id="10357" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18738442" type="Run" />
  <Command __id="10358" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18738487" type="Run" />
  <Command __id="10359" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 00:10:08 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648594670066" timestamp="18738549" type="Run" />
  <Command __id="10360" _type="ConsoleOutput" date="Wed Mar 30 00:10:08 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18738554" type="ConsoleOutput">
    <outputString><![CDATA[Server0<-->Generic Client:0.9011532783510701 (Opened)
Client registered GIPC
com.sun.proxy.$Proxy1@1d075efe
[com.sun.proxy.$Proxy1@683ab326, com.sun.proxy.$Proxy1@1d075efe]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner o"), Diff(INSERT,"Server0<-->Generic Client:0.9011532783510701 (O"), Diff(EQUAL,"pened"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered GIPC¶com.sun.proxy.$Proxy1@1d075efe¶[com.sun.proxy.$Proxy1@683ab326, com.sun.proxy.$Proxy1@1d075efe]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10361" _type="ConsoleOutput" date="Wed Mar 30 00:10:08 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18738772" type="ConsoleOutput">
    <outputString><![CDATA[added server as a property change listener of client
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server0<-->Generic Client:0.9011532783510701 (Opened)¶Client registered GIPC¶com.sun.proxy.$Proxy1@1d075efe¶[com.sun.proxy.$Proxy1@683ab326, com.sun.proxy.$Proxy1@1d075efe]"), Diff(INSERT,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10362" _type="ConsoleOutput" date="Wed Mar 30 00:10:08 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18738805" type="ConsoleOutput">
    <outputString><![CDATA[Client registered RMI
Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50811](remote),objID:[-393138c2:17fd9043e7d:-7ffe, -1413099441300007231]]]]]
[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50811](remote),objID:[-393138c2:17fd9043e7d:-7ffe, -1413099441300007231]]]]]]
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"added server as a property change listener of client¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Client registered RMI¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50811](remote),objID:[-393138c2:17fd9043e7d:-7ffe, -1413099441300007231]]]]]¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50811](remote),objID:[-393138c2:17fd9043e7d:-7ffe, -1413099441300007231]]]]]]"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10364" _type="PauseCommand" date="Wed Mar 30 00:10:10 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="18740234">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1429]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10363" _type="ShellCommand" date="Wed Mar 30 00:10:10 EDT 2022" starttimestamp="1648594670066" timestamp="18740234" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10366" _type="PauseCommand" date="Wed Mar 30 00:10:17 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="18746942">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6708]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="10385" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Wed Mar 30 00:10:40 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="18770540" type="Run" />
  <Command __id="10387" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Wed Mar 30 00:10:40 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648594670066" timestamp="18770540" type="Run" />
  <Command __id="10389" _type="PauseCommand" date="Wed Mar 30 00:10:43 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18772974">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2434]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10388" _type="ShellCommand" date="Wed Mar 30 00:10:43 EDT 2022" starttimestamp="1648594670066" timestamp="18772974" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10391" _type="PauseCommand" date="Wed Mar 30 00:10:45 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18775203">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2229]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10390" _type="ConsoleOutput" date="Wed Mar 30 00:10:45 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18775203" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Wed Mar 30 00:10:45 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"IPC Mechanism recieved for broadcast: NIO¶USING RMI IN SERVER¶Command recieved for broadcast: quit¶USING RMI IN SERVER¶[Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]], Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50811](remote),objID:[-393138c2:17fd9043e7d:-7ffe, -1413099441300007231]]]]]]¶2¶Proxy[ClientRemoteInterfaceRMI,RemoteObjectInvocationHandler[UnicastRef [liveRef: [endpoint:[192.168.1.118:50804](remote),objID:[-3199af1e:17fd9043898:-7ffe, 5992573706923857412]]]]]"), Diff(INSERT,"Building symbol table and running first pass checks:Wed Mar 30 00:10:45 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10393" _type="PauseCommand" date="Wed Mar 30 00:10:47 EDT 2022" range="2s-5s" starttimestamp="1648594670066" timestamp="18777492">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2289]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10392" _type="ConsoleOutput" date="Wed Mar 30 00:10:47 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18777492" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:79
Running second pass checks Wed Mar 30 00:10:47 EDT 2022
Start O(n2) inter- and intra class method calls:Wed Mar 30 00:10:47 EDT 2022
End O(n2) inter- and intra class method calls:Wed Mar 30 00:10:47 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building symbol table and running first pass check"), Diff(INSERT,"Symbol table size:79¶Running second pass checks Wed Mar 30 00:10:47 EDT 2022¶Start O(n2) inter- and intra class method calls:Wed Mar 30 00:10:47 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Wed Mar 30 00:10:4"), Diff(DELETE,"5"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="10395" _type="PauseCommand" date="Wed Mar 30 00:10:48 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="18778634">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1142]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10394" _type="ConsoleOutput" date="Wed Mar 30 00:10:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18778634" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Wed Mar 30 00:10:48 EDT 2022
Generating checks:Wed Mar 30 00:10:48 EDT 2022
Finished Generating checks:Wed Mar 30 00:10:48 EDT 2022
Generating externals:Wed Mar 30 00:10:48 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:79¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Wed Mar 30 00:10:4"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Wed Mar 30 00:10:48 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Wed Mar 30 00:10:4"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Wed Mar 30 00:10:4"), Diff(DELETE,"7"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="10396" _type="ConsoleOutput" date="Wed Mar 30 00:10:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18778863" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Wed Mar 30 00:10:48 EDT 2022
Test execution time (ms):3692
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Wed Mar 30 00:10:48 EDT 2022¶Generating checks:Wed Mar 30 00:10:48 EDT 2022¶Finished Generating check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Wed Mar 30 00:10:48 EDT 2022¶"), Diff(DELETE,"Generating externals:Wed Mar 30 00:10:48 EDT 202"), Diff(INSERT,"Test execution time (ms):369"), Diff(EQUAL,"2¶")]]]></diff>
  </Command>
  <Command __id="10397" _type="ConsoleOutput" date="Wed Mar 30 00:10:48 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18778922" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):32
A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):9
Test execution time (ms):6
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Wed Mar 30 00:10:48 EDT 2022"), Diff(INSERT,"Test execution time (ms):32¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):9¶Test execution time (ms):6¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"3692"), Diff(INSERT,"6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10398" _type="ConsoleOutput" date="Wed Mar 30 00:10:49 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18778998" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (285)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):32¶A5ExpectedCalls did no"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your projec"), Diff(EQUAL,"t "), Diff(DELETE,"p"), Diff(INSERT,"w"), Diff(EQUAL,"as"), Diff(DELETE,"s completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):9¶Test execution time (ms):6¶A5ExpectedSignatures did not pass completely:See consol"), Diff(INSERT," found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (285)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to th"), Diff(EQUAL,"e "), Diff(INSERT,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"ace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):6"), Diff(INSERT,"ucture:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10400" _type="PauseCommand" date="Wed Mar 30 00:10:50 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="18780694">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1696]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10399" _type="ConsoleOutput" date="Wed Mar 30 00:10:50 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18780694" type="ConsoleOutput">
    <outputString><![CDATA[WarningsRatioTestCase) [WARN] C:\Users\mannu\COMP_533\A5\.\src\server\ServerConfigure.java:60:36: Parameter aClient should be final. [FinalParameters]

Test execution time (ms):3
Test execution time (ms):9
Test execution time (ms):8
Test execution time (ms):10
A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.997134670487106

Test execution time (ms):5
Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (285)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to th"), Diff(INSERT,"WarningsRatioTestCase) [WARN] C:\Users\mannu\COMP_533\A5\.\src\server\ServerConfigure.java:60:36: Parameter aClient should be final. [FinalParameters]¶¶Test execution time (ms):3¶Test execution time (ms):9¶Test execution time (ms):8¶Test execution time (ms):10¶A5MnemonicNames did not pass completely:See consol"), Diff(EQUAL,"e "), Diff(DELETE,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"ucture:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(INSERT,"ace about lines failing  this check%0.997134670487106¶¶Test execution time (ms):5¶Test execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10402" _type="PauseCommand" date="Wed Mar 30 00:11:13 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="18803221">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22527]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10401" _type="ConsoleOutput" date="Wed Mar 30 00:11:13 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18803221" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):18594
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"WarningsRatioTestCase) [WARN] C:\Users\mannu\COMP_533\A5\.\src\server\ServerConfigure.java:60:36: Parameter aClient should be final. [FinalParameters]¶¶Test execution time (ms):3¶Test execution time (ms):9¶Test execution time (ms):8¶Test execution time (ms):10¶A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.997134670487106¶¶Test execution time (ms):5¶Test execution time (ms):6"), Diff(INSERT,"Test execution time (ms):18594"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10404" _type="PauseCommand" date="Wed Mar 30 00:11:26 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="18816773">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13552]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10403" _type="ConsoleOutput" date="Wed Mar 30 00:11:26 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18816773" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13558
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1"), Diff(DELETE,"8594"), Diff(INSERT,"3558"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10406" _type="PauseCommand" date="Wed Mar 30 00:11:40 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="18830406">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13632]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10405" _type="ConsoleOutput" date="Wed Mar 30 00:11:40 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18830405" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13566
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):135"), Diff(DELETE,"58"), Diff(INSERT,"66"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10408" _type="PauseCommand" date="Wed Mar 30 00:13:06 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="18916863">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[86458]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10407" _type="ConsoleOutput" date="Wed Mar 30 00:13:06 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="18916863" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):67586
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1356"), Diff(INSERT,"6758"), Diff(EQUAL,"6¶")]]]></diff>
  </Command>
  <Command __id="10410" _type="PauseCommand" date="Wed Mar 30 00:14:32 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="19002497">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[85634]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10409" _type="ShellCommand" date="Wed Mar 30 00:14:32 EDT 2022" starttimestamp="1648594670066" timestamp="19002497" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10412" _type="PauseCommand" date="Wed Mar 30 00:14:34 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="19004328">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1831]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10411" _type="ShellCommand" date="Wed Mar 30 00:14:34 EDT 2022" starttimestamp="1648594670066" timestamp="19004328" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10414" _type="PauseCommand" date="Wed Mar 30 00:14:59 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="19029518">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[25190]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10413" _type="ConsoleOutput" date="Wed Mar 30 00:14:59 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="19029518" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875

Test execution time (ms):112592
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"67586"), Diff(INSERT,"112592"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10416" _type="PauseCommand" date="Wed Mar 30 00:15:22 EDT 2022" range="20s-30s" starttimestamp="1648594670066" timestamp="19052052">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22534]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10415" _type="ConsoleOutput" date="Wed Mar 30 00:15:22 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="19052052" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22573
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"112592"), Diff(INSERT,"22573"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10418" _type="PauseCommand" date="Wed Mar 30 00:15:31 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="19061795">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9743]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10417" _type="ConsoleOutput" date="Wed Mar 30 00:15:31 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="19061795" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):22573"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10420" _type="PauseCommand" date="Wed Mar 30 00:15:44 EDT 2022" range="10s-20s" starttimestamp="1648594670066" timestamp="19074671">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[12876]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10419" _type="ConsoleOutput" date="Wed Mar 30 00:15:44 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="19074671" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22564
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):22564"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10422" _type="PauseCommand" date="Wed Mar 30 00:17:37 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="19187220">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[112549]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10421" _type="ConsoleOutput" date="Wed Mar 30 00:17:37 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="19187220" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateNoBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112603
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMIServerMetaStateNoBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"22564"), Diff(INSERT,"112603"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10424" _type="PauseCommand" date="Wed Mar 30 00:19:29 EDT 2022" range="1m-2m" starttimestamp="1648594670066" timestamp="19299838">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[112618]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10423" _type="ConsoleOutput" date="Wed Mar 30 00:19:29 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="19299838" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112601
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMIServerMetaState"), Diff(DELETE,"No"), Diff(EQUAL,"Broadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):11260"), Diff(DELETE,"3"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10426" _type="PauseCommand" date="Wed Mar 30 00:19:36 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="19306485">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6647]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10425" _type="ConsoleOutput" date="Wed Mar 30 00:19:36 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="19306485" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@50ef7d6b . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):112601"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@50ef7d6b . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="10428" _type="PauseCommand" date="Wed Mar 30 00:19:44 EDT 2022" range="5s-10s" starttimestamp="1648594670066" timestamp="19314180">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7695]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10427" _type="ConsoleOutput" date="Wed Mar 30 00:19:44 EDT 2022" overflow="false" starttimestamp="1648594670066" timestamp="19314180" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@50ef7d6b . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@50ef7d6b . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="10430" _type="PauseCommand" date="Wed Mar 30 00:23:00 EDT 2022" range="2m-5m" starttimestamp="1648594670066" timestamp="19510512">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[196332]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="10429" _type="ShellCommand" date="Wed Mar 30 00:23:00 EDT 2022" starttimestamp="1648594670066" timestamp="19510512" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10431" _type="ShellCommand" date="Wed Mar 30 00:23:00 EDT 2022" starttimestamp="1648594670066" timestamp="19510600" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10432" _type="EclipseCommand" commandID="" date="Wed Mar 30 00:23:01 EDT 2022" starttimestamp="1648594670066" timestamp="19511211" />
  <Command __id="10433" _type="EclipseCommand" commandID="" date="Wed Mar 30 00:23:01 EDT 2022" starttimestamp="1648594670066" timestamp="19511215" />
  <Command __id="10435" _type="PauseCommand" date="Wed Mar 30 00:23:02 EDT 2022" range="1s-2s" starttimestamp="1648594670066" timestamp="19512366">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1151]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
