<Events startTimestamp="1648643986594" logVersion="1.0.0.202111260825">
  <Command __id="4" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 08:41:21 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="95166" type="Run" />
  <Command __id="6" _type="PauseCommand" date="Wed Mar 30 08:41:24 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="97852">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2670]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="7" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 08:41:26 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="99635" type="Run" />
  <Command __id="9" _type="ConsoleOutput" date="Wed Mar 30 08:41:26 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="99756" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Wed Mar 30 08:41:26 EDT 2022
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="11" _type="PauseCommand" date="Wed Mar 30 08:41:28 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="102082">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2326]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="10" _type="ConsoleOutput" date="Wed Mar 30 08:41:28 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="102082" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:79
Running second pass checks Wed Mar 30 08:41:28 EDT 2022
Start O(n2) inter- and intra class method calls:Wed Mar 30 08:41:28 EDT 2022
End O(n2) inter- and intra class method calls:Wed Mar 30 08:41:28 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building symbol table and running first pass check"), Diff(INSERT,"Symbol table size:79¶Running second pass checks Wed Mar 30 08:41:28 EDT 2022¶Start O(n2) inter- and intra class method calls:Wed Mar 30 08:41:28 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Wed Mar 30 08:41:2"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="13" _type="PauseCommand" date="Wed Mar 30 08:41:29 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="103226">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1144]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="12" _type="ConsoleOutput" date="Wed Mar 30 08:41:29 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="103226" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Wed Mar 30 08:41:29 EDT 2022
Generating checks:Wed Mar 30 08:41:29 EDT 2022
Finished Generating checks:Wed Mar 30 08:41:29 EDT 2022
Generating externals:Wed Mar 30 08:41:29 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:79¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Wed Mar 30 08:41:2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Wed Mar 30 08:41:29 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Wed Mar 30 08:41:2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Wed Mar 30 08:41:2"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="14" _type="ConsoleOutput" date="Wed Mar 30 08:41:30 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="103523" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Wed Mar 30 08:41:30 EDT 2022
Test execution time (ms):3804
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Wed Mar 30 08:41:29 EDT 2022¶Generating checks:Wed Mar 30 08:41:29 EDT 2022¶Finished Generating check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Wed Mar 30 08:41:"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating externals:Wed Mar 30 08:41:29 EDT 2022"), Diff(INSERT,"Test execution time (ms):3804"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="15" _type="ConsoleOutput" date="Wed Mar 30 08:41:30 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="103648" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):24

A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074
Test execution time (ms):20
Test execution time (ms):5
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):6

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (285)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Wed Mar 30 08:41:30 EDT 20"), Diff(INSERT,"Test execution time (ms):24¶¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶Test execution time (ms):20¶Test execution time (ms):5¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):6¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java ("), Diff(EQUAL,"22"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Test execution time (ms):3804"), Diff(INSERT,"  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (285)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="17" _type="PauseCommand" date="Wed Mar 30 08:41:32 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="105639">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1991]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="16" _type="ConsoleOutput" date="Wed Mar 30 08:41:32 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="105639" type="ConsoleOutput">
    <outputString><![CDATA[A5NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):7
Test execution time (ms):10
Test execution time (ms):6
Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):24¶¶A5ExpectedCall"), Diff(INSERT,"A5NoCheckstyleWarning"), Diff(EQUAL,"s did not pass completely:"), Diff(DELETE,"See console trace about l"), Diff(INSERT,"Warn"), Diff(EQUAL,"in"), Diff(DELETE,"e"), Diff(INSERT,"g"), Diff(EQUAL,"s f"), Diff(DELETE,"ailing  this check%0.4074074074074074¶Test execution time (ms):20¶Test execution time (ms):5¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):6¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (285)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)"), Diff(INSERT,"ound in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):7¶Test execution time (ms):10¶Test execution time (ms):6¶Test execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="18" _type="ConsoleOutput" date="Wed Mar 30 08:41:32 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="105651" type="ConsoleOutput">
    <outputString><![CDATA[
Test execution time (ms):10
A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.997134670487106
Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):7¶Test execution time (ms):10¶Test execution time (ms):"), Diff(INSERT,"¶Test execution time (ms):10¶A5MnemonicNames did not pass completely:See console trace about lines failing  this check%0.99713467048710"), Diff(EQUAL,"6¶Test execution time (ms):"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="20" _type="PauseCommand" date="Wed Mar 30 08:41:49 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="122989">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[17338]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="19" _type="ShellCommand" date="Wed Mar 30 08:41:49 EDT 2022" starttimestamp="1648643986594" timestamp="122989" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="22" _type="PauseCommand" date="Wed Mar 30 08:41:55 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="129031">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6042]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="21" _type="ShellCommand" date="Wed Mar 30 08:41:55 EDT 2022" starttimestamp="1648643986594" timestamp="129031" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="24" _type="PauseCommand" date="Wed Mar 30 08:42:17 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="151325">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22293]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="23" _type="ShellCommand" date="Wed Mar 30 08:42:17 EDT 2022" starttimestamp="1648643986594" timestamp="151324" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="27" _type="EclipseCommand" commandID="" date="Wed Mar 30 08:42:19 EDT 2022" starttimestamp="1648643986594" timestamp="153294" />
  <Command __id="29" _type="EclipseCommand" commandID="" date="Wed Mar 30 08:42:20 EDT 2022" starttimestamp="1648643986594" timestamp="153443" />
  <Command __id="31" _type="PauseCommand" date="Wed Mar 30 08:42:23 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="157159">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3716]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="30" _type="MoveCaretCommand" caretOffset="7657" date="Wed Mar 30 08:42:23 EDT 2022" docOffset="9262" starttimestamp="1648643986594" timestamp="157159" />
  <Command __id="33" _type="PauseCommand" date="Wed Mar 30 08:42:40 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="173954">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16795]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="32" _type="CopyCommand" date="Wed Mar 30 08:42:40 EDT 2022" starttimestamp="1648643986594" timestamp="173954" />
  <Command __id="35" _type="PauseCommand" date="Wed Mar 30 08:42:44 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="177510">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3556]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="34" _type="MoveCaretCommand" caretOffset="7695" date="Wed Mar 30 08:42:44 EDT 2022" docOffset="9300" starttimestamp="1648643986594" timestamp="177510" />
  <Command __id="37" _type="PauseCommand" date="Wed Mar 30 08:42:50 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="184135">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6625]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="36" _type="MoveCaretCommand" caretOffset="7754" date="Wed Mar 30 08:42:50 EDT 2022" docOffset="9359" starttimestamp="1648643986594" timestamp="184135" />
  <Command __id="39" _type="InsertStringCommand" date="Wed Mar 30 08:42:51 EDT 2022" starttimestamp="1648643986594" timestamp="184439" timestamp2="184439">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="25" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 08:42:18 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="151853">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechansim = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="38" _type="Insert" date="Wed Mar 30 08:42:51 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8731" docExpressionCount="805" docLength="9600" length="4" offset="9359" starttimestamp="1648643986594" timestamp="184423">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="41" _type="PauseCommand" date="Wed Mar 30 08:42:55 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="188466">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[4027]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="42" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 08:42:55 EDT 2022" starttimestamp="1648643986594" timestamp="188472" />
  <Command __id="44" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 08:42:55 EDT 2022" starttimestamp="1648643986594" timestamp="188770" />
  <DocumentChange __id="40" _type="Delete" date="Wed Mar 30 08:42:55 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8729" docExpressionCount="805" docLength="9598" endLine="267" length="2" offset="9361" repeat="2" startLine="267" starttimestamp="1648643986594" timestamp="188466" timestamp2="188767">
    <text><![CDATA[		]]></text>
  </DocumentChange>
  <Command __id="46" _type="PauseCommand" date="Wed Mar 30 08:42:58 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="191776">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3006]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="47" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 08:42:58 EDT 2022" starttimestamp="1648643986594" timestamp="191784" />
  <Command __id="50" _type="PauseCommand" date="Wed Mar 30 08:43:02 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="196304">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4520]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="49" _type="ShellCommand" date="Wed Mar 30 08:43:02 EDT 2022" starttimestamp="1648643986594" timestamp="196304" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="51" _type="MoveCaretCommand" caretOffset="7683" date="Wed Mar 30 08:43:02 EDT 2022" docOffset="9288" starttimestamp="1648643986594" timestamp="196345" />
  <Command __id="53" _type="PauseCommand" date="Wed Mar 30 08:43:06 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="199520">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3175]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="52" _type="PasteCommand" date="Wed Mar 30 08:43:06 EDT 2022" starttimestamp="1648643986594" timestamp="199520" />
  <Command __id="55" _type="PauseCommand" date="Wed Mar 30 08:43:07 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="200748">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1228]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="54" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 08:43:07 EDT 2022" forward="false" matchWord="false" offset="9288" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="200748" wrapSearch="false">
    <searchString><![CDATA[broadcastIPCMechansim]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="57" _type="PauseCommand" date="Wed Mar 30 08:43:11 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="204714">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3966]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="56" _type="ShellCommand" date="Wed Mar 30 08:43:11 EDT 2022" starttimestamp="1648643986594" timestamp="204714" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="59" _type="PauseCommand" date="Wed Mar 30 08:43:12 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="206066">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1352]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="58" _type="MoveCaretCommand" caretOffset="998" date="Wed Mar 30 08:43:12 EDT 2022" docOffset="2603" starttimestamp="1648643986594" timestamp="206066" />
  <Command __id="61" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 08:43:13 EDT 2022" starttimestamp="1648643986594" timestamp="206700" />
  <Command __id="62" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Mar 30 08:43:13 EDT 2022" starttimestamp="1648643986594" timestamp="207227" />
  <Command __id="64" _type="InsertStringCommand" date="Wed Mar 30 08:43:14 EDT 2022" starttimestamp="1648643986594" timestamp="207435" timestamp2="207435">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="66" _type="PauseCommand" date="Wed Mar 30 08:43:15 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="208569">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1134]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="65" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 08:43:15 EDT 2022" starttimestamp="1648643986594" timestamp="208569" />
  <Command __id="67" _type="EclipseCommand" commandID="" date="Wed Mar 30 08:43:15 EDT 2022" starttimestamp="1648643986594" timestamp="208657" />
  <Command __id="68" _type="EclipseCommand" commandID="" date="Wed Mar 30 08:43:15 EDT 2022" starttimestamp="1648643986594" timestamp="208812" />
  <Command __id="70" _type="PauseCommand" date="Wed Mar 30 08:43:40 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="233951">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[25139]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="69" _type="MoveCaretCommand" caretOffset="6922" date="Wed Mar 30 08:43:40 EDT 2022" docOffset="8527" starttimestamp="1648643986594" timestamp="233951" />
  <Command __id="72" _type="PauseCommand" date="Wed Mar 30 08:43:47 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="240791">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6840]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="71" _type="ShellCommand" date="Wed Mar 30 08:43:47 EDT 2022" starttimestamp="1648643986594" timestamp="240791" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="74" _type="PauseCommand" date="Wed Mar 30 08:43:49 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="242466">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1675]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="78" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Wed Mar 30 08:43:52 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="245418" type="Run" />
  <Command __id="80" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Wed Mar 30 08:43:52 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="245418" type="Run" />
  <Command __id="82" _type="PauseCommand" date="Wed Mar 30 08:43:56 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="249624">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4206]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="81" _type="ShellCommand" date="Wed Mar 30 08:43:56 EDT 2022" starttimestamp="1648643986594" timestamp="249624" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="83" _type="ConsoleOutput" date="Wed Mar 30 08:43:56 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="250078" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Wed Mar 30 08:43:56 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Test execution time (ms):10¶A5MnemonicNames did not pass completely:See cons"), Diff(INSERT,"Building symb"), Diff(EQUAL,"ol"), Diff(DELETE,"e"), Diff(EQUAL," t"), Diff(DELETE,"race about lines failing  this check%0.997134670487106¶Test execution time (ms):6"), Diff(INSERT,"able and running first pass checks:Wed Mar 30 08:43:56 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="85" _type="PauseCommand" date="Wed Mar 30 08:43:58 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="252109">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2031]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="84" _type="ConsoleOutput" date="Wed Mar 30 08:43:58 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="252109" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:79
Running second pass checks Wed Mar 30 08:43:58 EDT 2022
Start O(n2) inter- and intra class method calls:Wed Mar 30 08:43:58 EDT 2022
End O(n2) inter- and intra class method calls:Wed Mar 30 08:43:58 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building symbol table and running first pass check"), Diff(INSERT,"Symbol table size:79¶Running second pass checks Wed Mar 30 08:43:58 EDT 2022¶Start O(n2) inter- and intra class method calls:Wed Mar 30 08:43:58 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Wed Mar 30 08:43:5"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="86" _type="ConsoleOutput" date="Wed Mar 30 08:43:59 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="253001" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Wed Mar 30 08:43:59 EDT 2022
Generating checks:Wed Mar 30 08:43:59 EDT 2022
Finished Generating checks:Wed Mar 30 08:43:59 EDT 2022
Generating externals:Wed Mar 30 08:43:59 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:79¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Wed Mar 30 08:43:5"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Wed Mar 30 08:43:59 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Wed Mar 30 08:43:5"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Wed Mar 30 08:43:5"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="87" _type="ConsoleOutput" date="Wed Mar 30 08:43:59 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="253245" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Wed Mar 30 08:43:59 EDT 2022
A5NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):3145
Test execution time (ms):18
Test execution time (ms):5
Test execution time (ms):7
Test execution time (ms):5
Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Wed Mar 30 08:43:59 EDT 2022¶"), Diff(DELETE,"Generating checks:Wed Mar 30 08:43:59 EDT 2022¶Finished Generating checks:Wed Mar 30 08:43:59 EDT 2022¶Generating externals:Wed Mar 30 08:43:59 EDT 2022"), Diff(INSERT,"A5NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):3145¶Test execution time (ms):18¶Test execution time (ms):5¶Test execution time (ms):7¶Test execution time (ms):5¶Test execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="89" _type="PauseCommand" date="Wed Mar 30 08:44:03 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="257171">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3926]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="88" _type="ConsoleOutput" date="Wed Mar 30 08:44:03 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="257171" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):4
Test execution time (ms):7

A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074
Test execution time (ms):5
Test execution time (ms):5
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):5

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (285)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Wed Mar 30 08:43:59 EDT 2022¶A5NoCheckstyleWarning"), Diff(INSERT,"Test execution time (ms):4¶Test execution time (ms):7¶¶A5ExpectedCall"), Diff(EQUAL,"s did not pass completely:"), Diff(DELETE,"Warn"), Diff(INSERT,"See console trace about l"), Diff(EQUAL,"in"), Diff(DELETE,"g"), Diff(INSERT,"e"), Diff(EQUAL,"s f"), Diff(DELETE,"ound in checkstyle text, see traced console output%0.0"), Diff(INSERT,"ailing  this check%0.4074074074074074¶Test execution time (ms):5¶Test execution time (ms):5¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365"), Diff(EQUAL,"¶¶Test execution time (ms):"), Diff(DELETE,"3145¶Test execution time (ms):18¶Test execution time (ms):5¶Test execution time (ms):7¶Test execution time (ms):5¶Test execution time (ms):6"), Diff(INSERT,"5¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (285)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="91" _type="PauseCommand" date="Wed Mar 30 08:44:25 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="278678">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[21507]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="90" _type="ConsoleOutput" date="Wed Mar 30 08:44:25 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="278678" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):18593
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"4¶Test execution time (ms):7¶¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶Test execution time (ms):5¶Test execution time (ms):5¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):5¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (285)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)"), Diff(INSERT,"18593"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="93" _type="PauseCommand" date="Wed Mar 30 08:44:38 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="292291">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13613]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="92" _type="ConsoleOutput" date="Wed Mar 30 08:44:38 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="292291" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13557
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1"), Diff(DELETE,"8593"), Diff(INSERT,"3557"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="95" _type="PauseCommand" date="Wed Mar 30 08:44:52 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="305832">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13541]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="94" _type="ConsoleOutput" date="Wed Mar 30 08:44:52 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="305832" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13539
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):135"), Diff(DELETE,"57"), Diff(INSERT,"39"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="97" _type="PauseCommand" date="Wed Mar 30 08:47:35 EDT 2022" range="2m-5m" starttimestamp="1648643986594" timestamp="468554">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[162722]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="96" _type="ShellCommand" date="Wed Mar 30 08:47:35 EDT 2022" starttimestamp="1648643986594" timestamp="468554" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="98" _type="MoveCaretCommand" caretOffset="6500" date="Wed Mar 30 08:47:35 EDT 2022" docOffset="8105" starttimestamp="1648643986594" timestamp="468617" />
  <DocumentChange __id="45" _type="Delete" date="Wed Mar 30 08:42:58 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" endLine="267" length="2" offset="9359" startLine="266" starttimestamp="1648643986594" timestamp="191776">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="60" _type="Delete" date="Wed Mar 30 08:43:13 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8726" docExpressionCount="805" docLength="9595" endLine="62" length="1" offset="2602" startLine="62" starttimestamp="1648643986594" timestamp="206696">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="63" _type="Insert" date="Wed Mar 30 08:43:14 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" length="1" offset="2603" starttimestamp="1648643986594" timestamp="207428">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="100" _type="PauseCommand" date="Wed Mar 30 08:47:36 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="469690">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1073]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="101" _type="MoveCaretCommand" caretOffset="3205" date="Wed Mar 30 08:47:36 EDT 2022" docOffset="4574" starttimestamp="1648643986594" timestamp="469806" />
  <Command __id="102" _type="EclipseCommand" commandID="" date="Wed Mar 30 08:47:36 EDT 2022" starttimestamp="1648643986594" timestamp="470028" />
  <Command __id="103" _type="EclipseCommand" commandID="" date="Wed Mar 30 08:47:36 EDT 2022" starttimestamp="1648643986594" timestamp="470034" />
  <Command __id="105" _type="PauseCommand" date="Wed Mar 30 08:47:57 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="490883">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[20849]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="104" _type="SelectTextCommand" caretOffset="4400" date="Wed Mar 30 08:47:57 EDT 2022" end="4484" start="4400" starttimestamp="1648643986594" timestamp="490883" />
  <Command __id="99" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 08:47:36 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8083" docExpressionCount="806" docLength="8807" projectName="A5" starttimestamp="1648643986594" timestamp="469690">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {

			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="107" _type="PauseCommand" date="Wed Mar 30 08:48:02 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="495494">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4611]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="108" _type="CutCommand" date="Wed Mar 30 08:48:02 EDT 2022" starttimestamp="1648643986594" timestamp="495510" />
  <Command __id="110" _type="PauseCommand" date="Wed Mar 30 08:48:03 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="497031">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[CutCommand]]></prev>
    <pause><![CDATA[1521]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="109" _type="MoveCaretCommand" caretOffset="4642" date="Wed Mar 30 08:48:03 EDT 2022" docOffset="6011" starttimestamp="1648643986594" timestamp="497031" />
  <Command __id="112" _type="InsertStringCommand" date="Wed Mar 30 08:48:04 EDT 2022" starttimestamp="1648643986594" timestamp="497631" timestamp2="497631">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="114" _type="PasteCommand" date="Wed Mar 30 08:48:05 EDT 2022" starttimestamp="1648643986594" timestamp="498557" />
  <Command __id="116" _type="InsertStringCommand" date="Wed Mar 30 08:48:06 EDT 2022" starttimestamp="1648643986594" timestamp="499561" timestamp2="499561">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="117" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 08:48:07 EDT 2022" starttimestamp="1648643986594" timestamp="500409" />
  <Command __id="118" _type="EclipseCommand" commandID="" date="Wed Mar 30 08:48:07 EDT 2022" starttimestamp="1648643986594" timestamp="500547" />
  <Command __id="119" _type="EclipseCommand" commandID="" date="Wed Mar 30 08:48:07 EDT 2022" starttimestamp="1648643986594" timestamp="500591" />
  <Command __id="121" _type="PauseCommand" date="Wed Mar 30 08:48:08 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="501745">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1154]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="120" _type="ConsoleOutput" date="Wed Mar 30 08:48:08 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="501745" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):67579
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"1353"), Diff(INSERT,"6757"), Diff(EQUAL,"9¶")]]]></diff>
  </Command>
  <Command __id="123" _type="PauseCommand" date="Wed Mar 30 08:49:06 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="560001">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[58256]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="122" _type="ShellCommand" date="Wed Mar 30 08:49:06 EDT 2022" starttimestamp="1648643986594" timestamp="560001" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="125" _type="PauseCommand" date="Wed Mar 30 08:49:47 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="600467">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[40466]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="124" _type="ShellCommand" date="Wed Mar 30 08:49:47 EDT 2022" starttimestamp="1648643986594" timestamp="600467" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="126" _type="MoveCaretCommand" caretOffset="4676" date="Wed Mar 30 08:49:47 EDT 2022" docOffset="6045" starttimestamp="1648643986594" timestamp="600567" />
  <Command __id="128" _type="PauseCommand" date="Wed Mar 30 08:50:00 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="614362">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13794]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="127" _type="ConsoleOutput" date="Wed Mar 30 08:50:00 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="614361" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875

Test execution time (ms):112611
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"67579"), Diff(INSERT,"112611"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="130" _type="PauseCommand" date="Wed Mar 30 08:50:18 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="632404">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[18043]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="129" _type="SelectTextCommand" caretOffset="4688" date="Wed Mar 30 08:50:18 EDT 2022" end="4699" start="4688" starttimestamp="1648643986594" timestamp="632404" />
  <DocumentChange __id="106" _type="Delete" date="Wed Mar 30 08:48:02 EDT 2022" docASTNodeCount="1124" docActiveCodeLength="7999" docExpressionCount="799" docLength="8723" endLine="172" length="84" offset="5769" startLine="172" starttimestamp="1648643986594" timestamp="495494">
    <text><![CDATA[RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);]]></text>
  </DocumentChange>
  <DocumentChange __id="111" _type="Insert" date="Wed Mar 30 08:48:04 EDT 2022" docASTNodeCount="1124" docActiveCodeLength="8002" docExpressionCount="799" docLength="8726" length="3" offset="6011" starttimestamp="1648643986594" timestamp="497628">
    <text><![CDATA[			]]></text>
  </DocumentChange>
  <DocumentChange __id="113" _type="Replace" date="Wed Mar 30 08:48:05 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8086" docExpressionCount="806" docLength="8810" endLine="184" insertionLength="87" int_docASTNodeCount="1124" int_docActiveCodeLength="7999" int_docExpressionCount="799" int_docLength="8723" length="3" offset="6011" startLine="184" starttimestamp="1648643986594" timestamp="498549">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="115" _type="Insert" date="Wed Mar 30 08:48:06 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8091" docExpressionCount="806" docLength="8815" length="5" offset="6098" starttimestamp="1648643986594" timestamp="499548">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="132" _type="PauseCommand" date="Wed Mar 30 08:50:20 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="633525">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1121]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="131" _type="Replace" date="Wed Mar 30 08:50:20 EDT 2022" docASTNodeCount="1013" docActiveCodeLength="8081" docExpressionCount="727" docLength="8805" endLine="184" insertionLength="1" int_docASTNodeCount="1131" int_docActiveCodeLength="8080" int_docExpressionCount="805" int_docLength="8804" length="11" offset="6057" startLine="184" starttimestamp="1648643986594" timestamp="633525">
    <deletedText><![CDATA[SERVER_NAME]]></deletedText>
    <insertedText><![CDATA["]]></insertedText>
  </DocumentChange>
  <Command __id="133" _type="InsertStringCommand" date="Wed Mar 30 08:50:20 EDT 2022" starttimestamp="1648643986594" timestamp="633542" timestamp2="633542">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="135" _type="InsertStringCommand" date="Wed Mar 30 08:50:20 EDT 2022" starttimestamp="1648643986594" timestamp="634176" timestamp2="634176">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="137" _type="InsertStringCommand" date="Wed Mar 30 08:50:21 EDT 2022" starttimestamp="1648643986594" timestamp="634475" timestamp2="634475">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="139" _type="InsertStringCommand" date="Wed Mar 30 08:50:21 EDT 2022" starttimestamp="1648643986594" timestamp="634672" timestamp2="634672">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="141" _type="InsertStringCommand" date="Wed Mar 30 08:50:21 EDT 2022" starttimestamp="1648643986594" timestamp="634926" timestamp2="634926">
    <data><![CDATA[_]]></data>
  </Command>
  <Command __id="143" _type="InsertStringCommand" date="Wed Mar 30 08:50:21 EDT 2022" starttimestamp="1648643986594" timestamp="635195" timestamp2="635195">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="145" _type="InsertStringCommand" date="Wed Mar 30 08:50:21 EDT 2022" starttimestamp="1648643986594" timestamp="635306" timestamp2="635306">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="147" _type="InsertStringCommand" date="Wed Mar 30 08:50:22 EDT 2022" starttimestamp="1648643986594" timestamp="635544" timestamp2="635544">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="149" _type="InsertStringCommand" date="Wed Mar 30 08:50:22 EDT 2022" starttimestamp="1648643986594" timestamp="635659" timestamp2="635659">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="151" _type="InsertStringCommand" date="Wed Mar 30 08:50:22 EDT 2022" starttimestamp="1648643986594" timestamp="635904" timestamp2="635904">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="153" _type="InsertStringCommand" date="Wed Mar 30 08:50:22 EDT 2022" starttimestamp="1648643986594" timestamp="636047" timestamp2="636047">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="155" _type="InsertStringCommand" date="Wed Mar 30 08:50:22 EDT 2022" starttimestamp="1648643986594" timestamp="636184" timestamp2="636184">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="157" _type="InsertStringCommand" date="Wed Mar 30 08:50:22 EDT 2022" starttimestamp="1648643986594" timestamp="636309" timestamp2="636309">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="159" _type="InsertStringCommand" date="Wed Mar 30 08:50:23 EDT 2022" starttimestamp="1648643986594" timestamp="636419" timestamp2="636419">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="161" _type="InsertStringCommand" date="Wed Mar 30 08:50:23 EDT 2022" starttimestamp="1648643986594" timestamp="636663" timestamp2="636663">
    <data><![CDATA["]]></data>
  </Command>
  <Command __id="162" _type="ConsoleOutput" date="Wed Mar 30 08:50:23 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="637000" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22577
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMITwoClientReadWriteNonAtomic did not pass completely:In Server writing to client 1 via GIPC, no line found matching regex: .*?\{Asynchronous Received Call Invoker\}.*?SocketChannelWriteRequested.*%0.875¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"112611"), Diff(INSERT,"22577"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <DocumentChange __id="134" _type="Insert" date="Wed Mar 30 08:50:20 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8095" docExpressionCount="806" docLength="8819" length="14" offset="6058" repeat="14" starttimestamp="1648643986594" timestamp="634172" timestamp2="636657">
    <text><![CDATA[ipc_mechanism"]]></text>
  </DocumentChange>
  <Command __id="164" _type="PauseCommand" date="Wed Mar 30 08:50:25 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="638582">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1582]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="163" _type="Delete" date="Wed Mar 30 08:50:25 EDT 2022" docASTNodeCount="1013" docActiveCodeLength="8081" docExpressionCount="727" docLength="8805" endLine="184" length="14" offset="6058" startLine="184" starttimestamp="1648643986594" timestamp="638582">
    <text><![CDATA[ipc_mechanism"]]></text>
  </DocumentChange>
  <Command __id="165" _type="UndoCommand" date="Wed Mar 30 08:50:25 EDT 2022" starttimestamp="1648643986594" timestamp="638594" />
  <Command __id="167" _type="UndoCommand" date="Wed Mar 30 08:50:26 EDT 2022" starttimestamp="1648643986594" timestamp="639534" />
  <Command __id="169" _type="PauseCommand" date="Wed Mar 30 08:50:27 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="640988">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[UndoCommand]]></prev>
    <pause><![CDATA[1454]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="168" _type="MoveCaretCommand" caretOffset="4616" date="Wed Mar 30 08:50:27 EDT 2022" docOffset="5985" starttimestamp="1648643986594" timestamp="640988" />
  <Command __id="171" _type="PauseCommand" date="Wed Mar 30 08:50:46 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="659557">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[18569]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="170" _type="ConsoleOutput" date="Wed Mar 30 08:50:46 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="659557" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22553
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):225"), Diff(DELETE,"77"), Diff(INSERT,"53"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="173" _type="PauseCommand" date="Wed Mar 30 08:52:07 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="741105">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[81548]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="172" _type="ShellCommand" date="Wed Mar 30 08:52:07 EDT 2022" starttimestamp="1648643986594" timestamp="741105" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="175" _type="PauseCommand" date="Wed Mar 30 08:52:38 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="772084">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30979]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="174" _type="ConsoleOutput" date="Wed Mar 30 08:52:38 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="772084" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateNoBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112566
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMIServerMetaStateNoBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"22553"), Diff(INSERT,"112566"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="177" _type="PauseCommand" date="Wed Mar 30 08:54:31 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="884700">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[112616]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="176" _type="ConsoleOutput" date="Wed Mar 30 08:54:31 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="884700" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112574
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"GIPCRMIServerMetaState"), Diff(DELETE,"No"), Diff(EQUAL,"Broadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):1125"), Diff(DELETE,"66"), Diff(INSERT,"74"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="179" _type="PauseCommand" date="Wed Mar 30 08:54:49 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="902623">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[17923]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="178" _type="ConsoleOutput" date="Wed Mar 30 08:54:49 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="902623" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@2c200a33 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):112574"), Diff(INSERT,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMITwoClientReadWriteNonAtomic@2c200a33 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="181" _type="PauseCommand" date="Wed Mar 30 09:02:06 EDT 2022" range="5m-10m" starttimestamp="1648643986594" timestamp="1340277">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[437654]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="180" _type="ShellCommand" date="Wed Mar 30 09:02:06 EDT 2022" starttimestamp="1648643986594" timestamp="1340277" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="183" _type="MoveCaretCommand" caretOffset="6500" date="Wed Mar 30 09:02:07 EDT 2022" docOffset="8105" starttimestamp="1648643986594" timestamp="1340678" />
  <DocumentChange __id="166" _type="Replace" date="Wed Mar 30 08:50:26 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8091" docExpressionCount="806" docLength="8815" endLine="184" insertionLength="11" int_docASTNodeCount="1131" int_docActiveCodeLength="8080" int_docExpressionCount="805" int_docLength="8804" length="1" offset="6057" startLine="184" starttimestamp="1648643986594" timestamp="639521">
    <deletedText><![CDATA["]]></deletedText>
    <insertedText><![CDATA[SERVER_NAME]]></insertedText>
  </DocumentChange>
  <Command __id="182" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:02:07 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="1340437">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechan"), Diff(DELETE,"s"), Diff(EQUAL,"i"), Diff(INSERT,"s"), Diff(EQUAL,"m = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}


}
]]></snapshot>
  </Command>
  <Command __id="185" _type="PauseCommand" date="Wed Mar 30 09:02:31 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="1364994">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[24316]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="186" _type="MoveCaretCommand" caretOffset="4616" date="Wed Mar 30 09:02:31 EDT 2022" docOffset="5985" starttimestamp="1648643986594" timestamp="1365181" />
  <Command __id="188" _type="PauseCommand" date="Wed Mar 30 09:02:45 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="1379115">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13934]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="187" _type="SelectTextCommand" caretOffset="2600" date="Wed Mar 30 09:02:45 EDT 2022" end="2600" start="2584" starttimestamp="1648643986594" timestamp="1379115" />
  <Command __id="190" _type="PauseCommand" date="Wed Mar 30 09:02:48 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="1381826">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2711]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="189" _type="SelectTextCommand" caretOffset="2630" date="Wed Mar 30 09:02:48 EDT 2022" end="2630" start="2620" starttimestamp="1648643986594" timestamp="1381826" />
  <Command __id="184" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:02:31 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8091" docExpressionCount="806" docLength="8815" projectName="A5" starttimestamp="1648643986594" timestamp="1364994">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		"), Diff(DELETE,"RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);"), Diff(EQUAL,"¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶"), Diff(INSERT,"			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			"), Diff(EQUAL,"¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <Command __id="192" _type="PauseCommand" date="Wed Mar 30 09:03:11 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="1405059">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[23233]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="193" _type="MoveCaretCommand" caretOffset="6500" date="Wed Mar 30 09:03:11 EDT 2022" docOffset="8105" starttimestamp="1648643986594" timestamp="1405262" />
  <Command __id="191" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:03:11 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="1405059">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="195" _type="PauseCommand" date="Wed Mar 30 09:03:21 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="1414635">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[9373]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="196" _type="SelectTextCommand" caretOffset="2630" date="Wed Mar 30 09:03:21 EDT 2022" end="2630" start="2620" starttimestamp="1648643986594" timestamp="1414858" />
  <Command __id="194" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:03:21 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8091" docExpressionCount="806" docLength="8815" projectName="A5" starttimestamp="1648643986594" timestamp="1414635">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="198" _type="PauseCommand" date="Wed Mar 30 09:03:28 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="1421656">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[6798]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="199" _type="MoveCaretCommand" caretOffset="6500" date="Wed Mar 30 09:03:28 EDT 2022" docOffset="8105" starttimestamp="1648643986594" timestamp="1421866" />
  <Command __id="201" _type="PauseCommand" date="Wed Mar 30 09:03:40 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="1433423">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[11557]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="200" _type="SelectTextCommand" caretOffset="3753" date="Wed Mar 30 09:03:40 EDT 2022" end="3753" start="3735" starttimestamp="1648643986594" timestamp="1433423" />
  <Command __id="203" _type="PauseCommand" date="Wed Mar 30 09:03:53 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="1447057">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[13634]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="202" _type="SelectTextCommand" caretOffset="4845" date="Wed Mar 30 09:03:53 EDT 2022" end="4845" start="4827" starttimestamp="1648643986594" timestamp="1447057" />
  <Command __id="197" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:03:28 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="1421656">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="205" _type="PauseCommand" date="Wed Mar 30 09:06:15 EDT 2022" range="2m-5m" starttimestamp="1648643986594" timestamp="1588540">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[141483]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="206" _type="SelectTextCommand" caretOffset="2630" date="Wed Mar 30 09:06:15 EDT 2022" end="2630" start="2620" starttimestamp="1648643986594" timestamp="1588706" />
  <Command __id="208" _type="PauseCommand" date="Wed Mar 30 09:07:18 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="1651911">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[63205]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="207" _type="SelectTextCommand" caretOffset="1638" date="Wed Mar 30 09:07:18 EDT 2022" end="1638" start="1630" starttimestamp="1648643986594" timestamp="1651911" />
  <Command __id="210" _type="PauseCommand" date="Wed Mar 30 09:07:20 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="1653765">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1854]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="209" _type="SelectTextCommand" caretOffset="1890" date="Wed Mar 30 09:07:20 EDT 2022" end="1890" start="1870" starttimestamp="1648643986594" timestamp="1653765" />
  <Command __id="212" _type="PauseCommand" date="Wed Mar 30 09:07:31 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="1664606">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[10841]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="211" _type="SelectTextCommand" caretOffset="1643" date="Wed Mar 30 09:07:31 EDT 2022" end="1643" start="1624" starttimestamp="1648643986594" timestamp="1664606" />
  <Command __id="214" _type="PauseCommand" date="Wed Mar 30 09:07:45 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="1678499">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[13893]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="213" _type="SelectTextCommand" caretOffset="1814" date="Wed Mar 30 09:07:45 EDT 2022" end="1828" start="1814" starttimestamp="1648643986594" timestamp="1678499" />
  <Command __id="216" _type="PauseCommand" date="Wed Mar 30 09:08:25 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="1718552">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[40053]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="215" _type="SelectTextCommand" caretOffset="1641" date="Wed Mar 30 09:08:25 EDT 2022" end="1641" start="1623" starttimestamp="1648643986594" timestamp="1718552" />
  <Command __id="218" _type="PauseCommand" date="Wed Mar 30 09:08:39 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="1733061">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[14509]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="217" _type="SelectTextCommand" caretOffset="291" date="Wed Mar 30 09:08:39 EDT 2022" end="311" start="291" starttimestamp="1648643986594" timestamp="1733061" />
  <Command __id="220" _type="PauseCommand" date="Wed Mar 30 09:08:43 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="1736845">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3784]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="219" _type="SelectTextCommand" caretOffset="389" date="Wed Mar 30 09:08:43 EDT 2022" end="408" start="389" starttimestamp="1648643986594" timestamp="1736845" />
  <Command __id="204" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:06:15 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8091" docExpressionCount="806" docLength="8815" projectName="A5" starttimestamp="1648643986594" timestamp="1588540">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="222" _type="PauseCommand" date="Wed Mar 30 09:09:13 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="1767342">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[30497]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="223" _type="MoveCaretCommand" caretOffset="959" date="Wed Mar 30 09:09:14 EDT 2022" docOffset="1199" starttimestamp="1648643986594" timestamp="1767569" />
  <Command __id="221" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:09:13 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648643986594" timestamp="1767342">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="225" _type="PauseCommand" date="Wed Mar 30 09:09:22 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="1776291">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[8722]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="226" _type="SelectTextCommand" caretOffset="389" date="Wed Mar 30 09:09:23 EDT 2022" end="408" start="389" starttimestamp="1648643986594" timestamp="1776547" />
  <Command __id="228" _type="PauseCommand" date="Wed Mar 30 09:09:33 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="1786465">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[9918]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="227" _type="SelectTextCommand" caretOffset="2604" date="Wed Mar 30 09:09:33 EDT 2022" end="2604" start="2579" starttimestamp="1648643986594" timestamp="1786465" />
  <Command __id="224" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:09:22 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8091" docExpressionCount="806" docLength="8815" projectName="A5" starttimestamp="1648643986594" timestamp="1776291">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="230" _type="PauseCommand" date="Wed Mar 30 09:12:23 EDT 2022" range="2m-5m" starttimestamp="1648643986594" timestamp="1956493">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[170028]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="231" _type="SelectTextCommand" caretOffset="4845" date="Wed Mar 30 09:12:23 EDT 2022" end="4845" start="4827" starttimestamp="1648643986594" timestamp="1956696" />
  <Command __id="229" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:12:23 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="1956493">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="233" _type="PauseCommand" date="Wed Mar 30 09:12:30 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="1964222">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[7526]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="234" _type="SelectTextCommand" caretOffset="2604" date="Wed Mar 30 09:12:31 EDT 2022" end="2604" start="2579" starttimestamp="1648643986594" timestamp="1964412" />
  <Command __id="232" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:12:30 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8091" docExpressionCount="806" docLength="8815" projectName="A5" starttimestamp="1648643986594" timestamp="1964222">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="236" _type="PauseCommand" date="Wed Mar 30 09:14:56 EDT 2022" range="2m-5m" starttimestamp="1648643986594" timestamp="2110318">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[145906]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="237" _type="SelectTextCommand" caretOffset="4845" date="Wed Mar 30 09:14:57 EDT 2022" end="4845" start="4827" starttimestamp="1648643986594" timestamp="2110622" />
  <Command __id="239" _type="PauseCommand" date="Wed Mar 30 09:15:36 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="2150082">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[39460]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="238" _type="ShellCommand" date="Wed Mar 30 09:15:36 EDT 2022" starttimestamp="1648643986594" timestamp="2150082" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="241" _type="PauseCommand" date="Wed Mar 30 09:15:39 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2153114">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3031]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="240" _type="ConsoleOutput" date="Wed Mar 30 09:15:39 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2153113" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@7b6e2f2e . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMI"), Diff(DELETE,"TwoClientReadWriteNonAtomic@2c200a33"), Diff(INSERT,"ServerMetaStateNoBroadcast@7b6e2f2e"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="243" _type="PauseCommand" date="Wed Mar 30 09:17:47 EDT 2022" range="2m-5m" starttimestamp="1648643986594" timestamp="2280809">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[127696]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="242" _type="ShellCommand" date="Wed Mar 30 09:17:47 EDT 2022" starttimestamp="1648643986594" timestamp="2280809" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="245" _type="SelectTextCommand" caretOffset="2604" date="Wed Mar 30 09:17:47 EDT 2022" end="2604" start="2579" starttimestamp="1648643986594" timestamp="2281191" />
  <Command __id="247" _type="PauseCommand" date="Wed Mar 30 09:18:53 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="2347100">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[65909]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="246" _type="ShellCommand" date="Wed Mar 30 09:18:53 EDT 2022" starttimestamp="1648643986594" timestamp="2347100" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="249" _type="PauseCommand" date="Wed Mar 30 09:19:08 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="2361913">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[14813]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="248" _type="ShellCommand" date="Wed Mar 30 09:19:08 EDT 2022" starttimestamp="1648643986594" timestamp="2361913" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="250" _type="MoveCaretCommand" caretOffset="3622" date="Wed Mar 30 09:19:08 EDT 2022" docOffset="4991" starttimestamp="1648643986594" timestamp="2362104" />
  <Command __id="252" _type="PauseCommand" date="Wed Mar 30 09:19:11 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2364864">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2760]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="251" _type="SelectTextCommand" caretOffset="3622" date="Wed Mar 30 09:19:11 EDT 2022" end="3711" start="3622" starttimestamp="1648643986594" timestamp="2364864" />
  <Command __id="253" _type="CopyCommand" date="Wed Mar 30 09:19:11 EDT 2022" starttimestamp="1648643986594" timestamp="2365155" />
  <Command __id="254" _type="MoveCaretCommand" caretOffset="3622" date="Wed Mar 30 09:19:12 EDT 2022" docOffset="4991" starttimestamp="1648643986594" timestamp="2365585" />
  <Command __id="256" _type="InsertStringCommand" date="Wed Mar 30 09:19:12 EDT 2022" starttimestamp="1648643986594" timestamp="2366263" timestamp2="2366263">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="258" _type="InsertStringCommand" date="Wed Mar 30 09:19:12 EDT 2022" starttimestamp="1648643986594" timestamp="2366375" timestamp2="2366375">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="260" _type="PauseCommand" date="Wed Mar 30 09:19:16 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2369943">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3568]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="259" _type="MoveCaretCommand" caretOffset="2568" date="Wed Mar 30 09:19:16 EDT 2022" docOffset="3937" starttimestamp="1648643986594" timestamp="2369943" />
  <Command __id="262" _type="InsertStringCommand" date="Wed Mar 30 09:19:17 EDT 2022" starttimestamp="1648643986594" timestamp="2370469" timestamp2="2370469">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="264" _type="PasteCommand" date="Wed Mar 30 09:19:17 EDT 2022" starttimestamp="1648643986594" timestamp="2370780" />
  <Command __id="265" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 09:19:18 EDT 2022" starttimestamp="1648643986594" timestamp="2371592" />
  <Command __id="266" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:19:18 EDT 2022" starttimestamp="1648643986594" timestamp="2371674" />
  <Command __id="267" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:19:18 EDT 2022" starttimestamp="1648643986594" timestamp="2371747" />
  <Command __id="269" _type="PauseCommand" date="Wed Mar 30 09:19:32 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="2386104">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[14356]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="268" _type="ShellCommand" date="Wed Mar 30 09:19:32 EDT 2022" starttimestamp="1648643986594" timestamp="2386103" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="271" _type="PauseCommand" date="Wed Mar 30 09:19:41 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="2394753">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8650]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="270" _type="ShellCommand" date="Wed Mar 30 09:19:41 EDT 2022" starttimestamp="1648643986594" timestamp="2394753" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="273" _type="PauseCommand" date="Wed Mar 30 09:19:44 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2397592">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2839]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="274" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:19:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2399582" type="Debug" />
  <Command __id="276" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Wed Mar 30 09:19:46 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="2399583" type="Run" />
  <Command __id="277" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:19:46 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2399584" type="Debug" />
  <Command __id="278" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Wed Mar 30 09:19:46 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="2399584" type="Run" />
  <Command __id="280" _type="PauseCommand" date="Wed Mar 30 09:19:47 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="2401373">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1789]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="279" _type="ShellCommand" date="Wed Mar 30 09:19:47 EDT 2022" starttimestamp="1648643986594" timestamp="2401373" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="281" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Wed Mar 30 09:19:48 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="2401729" type="Run" />
  <Command __id="282" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Wed Mar 30 09:19:48 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="2401730" type="Run" />
  <Command __id="283" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:19:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2401954" type="Run" />
  <Command __id="284" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:19:48 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2401982" type="Run" />
  <Command __id="285" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:19:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2401988" type="Run" />
  <Command __id="287" _type="PauseCommand" date="Wed Mar 30 09:19:51 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2404918">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2930]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="288" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:19:56 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2409438" type="Run" />
  <Command __id="290" _type="ConsoleOutput" date="Wed Mar 30 09:19:56 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2409554" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Wed Mar 30 09:19:56 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s20.assignment5.testcases.GIPCRMIServerMetaStateNoBroadcast@7b6e2f2e . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Wed Mar 30 09:19:56 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="292" _type="PauseCommand" date="Wed Mar 30 09:19:58 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2412311">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2757]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="291" _type="ConsoleOutput" date="Wed Mar 30 09:19:58 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2412311" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:79
Running second pass checks Wed Mar 30 09:19:58 EDT 2022
Start O(n2) inter- and intra class method calls:Wed Mar 30 09:19:58 EDT 2022
End O(n2) inter- and intra class method calls:Wed Mar 30 09:19:58 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building symbol table and running first pass check"), Diff(INSERT,"Symbol table size:79¶Running second pass checks Wed Mar 30 09:19:58 EDT 2022¶Start O(n2) inter- and intra class method calls:Wed Mar 30 09:19:58 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Wed Mar 30 09:19:5"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="294" _type="PauseCommand" date="Wed Mar 30 09:20:00 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="2413813">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1502]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="293" _type="ConsoleOutput" date="Wed Mar 30 09:20:00 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2413813" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Wed Mar 30 09:20:00 EDT 2022
Generating checks:Wed Mar 30 09:20:00 EDT 2022
Finished Generating checks:Wed Mar 30 09:20:00 EDT 2022
Generating externals:Wed Mar 30 09:20:00 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:79¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Wed Mar 30 09:"), Diff(DELETE,"19:58"), Diff(INSERT,"20:00"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Wed Mar 30 09:20:00 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Wed Mar 30 09:"), Diff(DELETE,"19:58"), Diff(INSERT,"20:00"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Wed Mar 30 09:"), Diff(DELETE,"19:58"), Diff(INSERT,"20:00"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="295" _type="ConsoleOutput" date="Wed Mar 30 09:20:00 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2414108" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Wed Mar 30 09:20:00 EDT 2022
Test execution time (ms):4596
Test execution time (ms):24
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Wed Mar 30 09:20:00 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Wed Mar 30 09:20:00 EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Wed Mar 30 09:20:00 EDT 2022¶Generating externals:Wed Mar 30 09:20:00 EDT 2022"), Diff(INSERT,"Test execution time (ms):4596¶Test execution time (ms):24"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="296" _type="ConsoleOutput" date="Wed Mar 30 09:20:00 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2414180" type="ConsoleOutput">
    <outputString><![CDATA[A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):17
Test execution time (ms):7
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):8
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Wed Mar 30 09:20:00 EDT 2022¶Test execution time (ms):4596"), Diff(INSERT,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):17¶Test execution time (ms):7¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"24"), Diff(INSERT,"8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="297" _type="ConsoleOutput" date="Wed Mar 30 09:20:00 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2414274" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (287)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):17¶Test execution time (ms):7¶A5ExpectedSignatures did not pass completely:See consol"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (287)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to th"), Diff(EQUAL,"e "), Diff(INSERT,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"ace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):8"), Diff(INSERT,"ucture:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="299" _type="PauseCommand" date="Wed Mar 30 09:20:06 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="2420233">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5959]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="327" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:20:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2457000" type="Run" />
  <Command __id="329" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:20:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2457003" type="Run" />
  <Command __id="331" _type="PauseCommand" date="Wed Mar 30 09:20:55 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="2469106">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12103]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="341" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:21:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2483505" type="Run" />
  <Command __id="343" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:21:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2483512" type="Run" />
  <Command __id="345" _type="PauseCommand" date="Wed Mar 30 09:21:47 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="2521207">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[37695]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="344" _type="ShellCommand" date="Wed Mar 30 09:21:47 EDT 2022" starttimestamp="1648643986594" timestamp="2521207" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="347" _type="PauseCommand" date="Wed Mar 30 09:21:50 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2523627">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2420]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="358" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:22:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2551097" type="Run" />
  <Command __id="360" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:22:17 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2551099" type="Run" />
  <Command __id="362" _type="PauseCommand" date="Wed Mar 30 09:23:00 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="2593606">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[42506]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="361" _type="ShellCommand" date="Wed Mar 30 09:23:00 EDT 2022" starttimestamp="1648643986594" timestamp="2593605" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="364" _type="PauseCommand" date="Wed Mar 30 09:23:06 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="2600103">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6498]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="375" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:24:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2663694" type="Run" />
  <Command __id="377" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:24:10 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2663696" type="Run" />
  <Command __id="379" _type="PauseCommand" date="Wed Mar 30 09:24:12 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2665956">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2260]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="378" _type="ConsoleOutput" date="Wed Mar 30 09:24:12 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2665956" type="ConsoleOutput">
    <outputString><![CDATA[
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):112594"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="381" _type="PauseCommand" date="Wed Mar 30 09:24:22 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="2675667">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[9711]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="380" _type="ShellCommand" date="Wed Mar 30 09:24:22 EDT 2022" starttimestamp="1648643986594" timestamp="2675667" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="383" _type="PauseCommand" date="Wed Mar 30 09:24:24 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2677976">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2309]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="393" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:24:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2686269" type="Run" />
  <Command __id="395" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:24:32 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2686270" type="Run" />
  <Command __id="397" _type="PauseCommand" date="Wed Mar 30 09:24:34 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="2688204">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1934]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="408" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:24:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2708859" type="Run" />
  <Command __id="410" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:24:55 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2708859" type="Run" />
  <Command __id="412" _type="PauseCommand" date="Wed Mar 30 09:26:05 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="2779279">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[70420]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="420" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:26:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2816441" type="Run" />
  <Command __id="422" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:26:43 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2816443" type="Run" />
  <Command __id="424" _type="PauseCommand" date="Wed Mar 30 09:26:44 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="2817692">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1249]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="425" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:26:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2821464" type="Run" />
  <Command __id="427" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:26:48 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="2821465" type="Run" />
  <Command __id="429" _type="PauseCommand" date="Wed Mar 30 09:26:51 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="2825275">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3810]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="428" _type="ShellCommand" date="Wed Mar 30 09:26:51 EDT 2022" starttimestamp="1648643986594" timestamp="2825275" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="431" _type="PauseCommand" date="Wed Mar 30 09:28:33 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="2926620">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[101345]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="430" _type="ConsoleOutput" date="Wed Mar 30 09:28:33 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="2926620" type="ConsoleOutput">
    <outputString><![CDATA[GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;
When giving 'i gipc' as input to Server: Source server did not print state change%0.0

Test execution time (ms):112617
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):112617"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="433" _type="PauseCommand" date="Wed Mar 30 09:35:04 EDT 2022" range="5m-10m" starttimestamp="1648643986594" timestamp="3317605">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[390985]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="432" _type="ConsoleOutput" date="Wed Mar 30 09:35:04 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="3317605" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@7e9c70b3 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"GIPCRMIServerMetaStateBroadcast did not pass completely:When giving 'i rmi' as input to Server: Source server did not print state change;¶When giving 'i gipc' as input to Server: Source server did not print state change%0.0¶¶Test execution time (ms):112617"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@7e9c70b3 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="435" _type="PauseCommand" date="Wed Mar 30 09:35:05 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3318838">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1233]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="434" _type="ConsoleOutput" date="Wed Mar 30 09:35:05 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="3318838" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@7e9c70b3 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@7e9c70b3 . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="437" _type="PauseCommand" date="Wed Mar 30 09:35:06 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3320345">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1506]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="436" _type="ConsoleOutput" date="Wed Mar 30 09:35:06 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="3320344" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@74cfe14f . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment5.style.A5Expected"), Diff(DELETE,"Calls@7e9c70b3"), Diff(INSERT,"Signatures@74cfe14f"), Diff(EQUAL," . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="439" _type="PauseCommand" date="Wed Mar 30 09:35:08 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3321811">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1467]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="438" _type="ConsoleOutput" date="Wed Mar 30 09:35:08 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="3321811" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@74cfe14f . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@74cfe14f . Results may change.¶")]]]></diff>
  </Command>
  <Command __id="441" _type="PauseCommand" date="Wed Mar 30 09:36:22 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="3395625">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[73814]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="440" _type="ShellCommand" date="Wed Mar 30 09:36:22 EDT 2022" starttimestamp="1648643986594" timestamp="3395625" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="442" _type="MoveCaretCommand" caretOffset="2403" date="Wed Mar 30 09:36:22 EDT 2022" docOffset="3772" starttimestamp="1648643986594" timestamp="3395743" />
  <Command __id="235" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:14:56 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="2110318">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="244" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:17:47 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8091" docExpressionCount="806" docLength="8815" projectName="A5" starttimestamp="1648643986594" timestamp="2280955">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="255" _type="Insert" date="Wed Mar 30 09:19:12 EDT 2022" docASTNodeCount="1124" docActiveCodeLength="8002" docExpressionCount="799" docLength="8817" length="2" offset="4991" repeat="2" starttimestamp="1648643986594" timestamp="2366257" timestamp2="2366364">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="261" _type="Insert" date="Wed Mar 30 09:19:17 EDT 2022" docASTNodeCount="1124" docActiveCodeLength="8006" docExpressionCount="799" docLength="8821" length="4" offset="3937" starttimestamp="1648643986594" timestamp="2370451">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="263" _type="Replace" date="Wed Mar 30 09:19:17 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8095" docExpressionCount="806" docLength="8910" endLine="101" insertionLength="91" int_docASTNodeCount="1124" int_docActiveCodeLength="8004" int_docExpressionCount="799" int_docLength="8819" length="2" offset="3939" startLine="101" starttimestamp="1648643986594" timestamp="2370763">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);]]></insertedText>
  </DocumentChange>
  <Command __id="444" _type="PauseCommand" date="Wed Mar 30 09:36:23 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3396975">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1232]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="445" _type="SelectTextCommand" caretOffset="4845" date="Wed Mar 30 09:36:23 EDT 2022" end="4845" start="4827" starttimestamp="1648643986594" timestamp="3397117" />
  <Command __id="447" _type="PauseCommand" date="Wed Mar 30 09:36:42 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="3415459">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[18342]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="446" _type="SelectTextCommand" caretOffset="7131" date="Wed Mar 30 09:36:42 EDT 2022" end="7131" start="5826" starttimestamp="1648643986594" timestamp="3415459" />
  <Command __id="448" _type="CopyCommand" date="Wed Mar 30 09:36:42 EDT 2022" starttimestamp="1648643986594" timestamp="3416394" />
  <Command __id="443" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:36:23 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="3396975">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="450" _type="PauseCommand" date="Wed Mar 30 09:36:44 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3417753">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1359]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="451" _type="MoveCaretCommand" caretOffset="2403" date="Wed Mar 30 09:36:44 EDT 2022" docOffset="3772" starttimestamp="1648643986594" timestamp="3417866" />
  <Command __id="453" _type="PauseCommand" date="Wed Mar 30 09:36:48 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3422151">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4285]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="452" _type="MoveCaretCommand" caretOffset="7534" date="Wed Mar 30 09:36:48 EDT 2022" docOffset="8903" starttimestamp="1648643986594" timestamp="3422151" />
  <Command __id="455" _type="InsertStringCommand" date="Wed Mar 30 09:36:49 EDT 2022" starttimestamp="1648643986594" timestamp="3422466" timestamp2="3422466">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="457" _type="InsertStringCommand" date="Wed Mar 30 09:36:49 EDT 2022" starttimestamp="1648643986594" timestamp="3422621" timestamp2="3422621">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="463" _type="PasteCommand" date="Wed Mar 30 09:36:49 EDT 2022" starttimestamp="1648643986594" timestamp="3423055" />
  <Command __id="465" _type="PauseCommand" date="Wed Mar 30 09:36:56 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="3429472">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[6416]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="468" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:37:00 EDT 2022" starttimestamp="1648643986594" timestamp="3434050" />
  <Command __id="470" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:37:00 EDT 2022" starttimestamp="1648643986594" timestamp="3434057" />
  <Command __id="449" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:36:44 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8095" docExpressionCount="806" docLength="8910" projectName="A5" starttimestamp="1648643986594" timestamp="3417753">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		"), Diff(INSERT,"ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		"), Diff(EQUAL,"¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			"), Diff(INSERT,"//"), Diff(EQUAL,"ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="454" _type="Insert" date="Wed Mar 30 09:36:49 EDT 2022" docASTNodeCount="1132" docActiveCodeLength="8101" docExpressionCount="806" docLength="8916" length="6" offset="8903" repeat="2" starttimestamp="1648643986594" timestamp="3422455" timestamp2="3422614">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="458" _type="Replace" date="Wed Mar 30 09:36:49 EDT 2022" docASTNodeCount="1263" docActiveCodeLength="9223" docExpressionCount="902" docLength="10221" endLine="286" insertionLength="1306" int_docASTNodeCount="1132" int_docActiveCodeLength="8100" int_docExpressionCount="806" int_docLength="8915" length="1" offset="8908" startLine="286" starttimestamp="1648643986594" timestamp="3422900">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="459" _type="Insert" date="Wed Mar 30 09:36:49 EDT 2022" docASTNodeCount="1273" docActiveCodeLength="9275" docExpressionCount="911" docLength="10273" length="52" offset="1001" repeat="2" starttimestamp="1648643986594" timestamp="3422993" timestamp2="3422995">
    <text><![CDATA[
import util.trace.port.consensus.ProposedStateSet;]]></text>
  </DocumentChange>
  <DocumentChange __id="461" _type="Insert" date="Wed Mar 30 09:36:49 EDT 2022" docASTNodeCount="1277" docActiveCodeLength="9308" docExpressionCount="914" docLength="10306" length="33" offset="346" repeat="2" starttimestamp="1648643986594" timestamp="3423000" timestamp2="3423002">
    <text><![CDATA[
import client.ClientOutCoupler;]]></text>
  </DocumentChange>
  <DocumentChange __id="466" _type="Delete" date="Wed Mar 30 09:36:56 EDT 2022" docASTNodeCount="1160" docActiveCodeLength="8288" docExpressionCount="825" docLength="9149" endLine="319" length="1157" offset="9045" startLine="289" starttimestamp="1648643986594" timestamp="3429958">
    <text><![CDATA[	//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}]]></text>
  </DocumentChange>
  <Command __id="472" _type="PauseCommand" date="Wed Mar 30 09:38:54 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="3548131">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[114074]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="473" _type="SelectTextCommand" caretOffset="7131" date="Wed Mar 30 09:38:54 EDT 2022" end="7131" start="5826" starttimestamp="1648643986594" timestamp="3548254" />
  <Command __id="474" _type="MoveCaretCommand" caretOffset="6841" date="Wed Mar 30 09:38:55 EDT 2022" docOffset="8446" starttimestamp="1648643986594" timestamp="3549050" />
  <Command __id="477" _type="PauseCommand" date="Wed Mar 30 09:39:27 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="3580689">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[31639]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="476" _type="ShellCommand" date="Wed Mar 30 09:39:27 EDT 2022" starttimestamp="1648643986594" timestamp="3580689" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="479" _type="PauseCommand" date="Wed Mar 30 09:39:31 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3585089">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4400]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="478" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:39:31 EDT 2022" forward="false" matchWord="false" offset="8446" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3585089" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="481" _type="PauseCommand" date="Wed Mar 30 09:39:34 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3587415">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2326]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="480" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:39:34 EDT 2022" forward="false" matchWord="false" offset="9106" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3587415" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="482" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:39:34 EDT 2022" forward="false" matchWord="false" offset="9106" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3588382" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="483" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:39:35 EDT 2022" forward="false" matchWord="false" offset="9106" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3588638" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="485" _type="PauseCommand" date="Wed Mar 30 09:39:38 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3591615">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2977]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="484" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:39:38 EDT 2022" forward="true" matchWord="false" offset="9106" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3591615" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="487" _type="PauseCommand" date="Wed Mar 30 09:39:41 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3594453">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2838]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="486" _type="ShellCommand" date="Wed Mar 30 09:39:41 EDT 2022" starttimestamp="1648643986594" timestamp="3594453" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="489" _type="PauseCommand" date="Wed Mar 30 09:39:42 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3596334">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1881]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="488" _type="SelectTextCommand" caretOffset="893" date="Wed Mar 30 09:39:42 EDT 2022" end="942" start="893" starttimestamp="1648643986594" timestamp="3596334" />
  <Command __id="490" _type="CopyCommand" date="Wed Mar 30 09:39:43 EDT 2022" starttimestamp="1648643986594" timestamp="3596859" />
  <Command __id="492" _type="PauseCommand" date="Wed Mar 30 09:39:45 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3598784">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1925]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="491" _type="ShellCommand" date="Wed Mar 30 09:39:45 EDT 2022" starttimestamp="1648643986594" timestamp="3598784" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="493" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:39:45 EDT 2022" forward="true" matchWord="false" offset="942" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3598911" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="495" _type="PauseCommand" date="Wed Mar 30 09:39:47 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3601125">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2214]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="494" _type="BalloonCommand" date="Wed Mar 30 09:39:47 EDT 2022" message="*******************************************
Worked 28 minutes(fixed)/41 minutes(context based) from
Wed Mar 30 08:41:21 EDT 2022 to Wed Mar 30 09:39:45 EDT 2022
Edited 1 Projects: 
	A5
Edited 2 Files: 
	C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java
	C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java
Number of insert: 124
Number of delete: 1260
" starttimestamp="1648643986594" timestamp="3601125">
    <fineGrainedWorkTime><![CDATA[41]]></fineGrainedWorkTime>
    <insert><![CDATA[124]]></insert>
    <startTime><![CDATA[1648644081448]]></startTime>
    <endTime><![CDATA[1648647585505]]></endTime>
    <workTime><![CDATA[28]]></workTime>
    <delete><![CDATA[1260]]></delete>
  </Command>
  <Command __id="496" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:39:48 EDT 2022" forward="true" matchWord="false" offset="1918" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3602096" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="497" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:39:49 EDT 2022" forward="true" matchWord="false" offset="1935" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3602796" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="499" _type="PauseCommand" date="Wed Mar 30 09:40:05 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="3619381">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[16585]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="498" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:40:05 EDT 2022" forward="true" matchWord="false" offset="2742" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3619381" wrapSearch="false">
    <searchString><![CDATA[commandProc]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="501" _type="PauseCommand" date="Wed Mar 30 09:40:13 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="3626791">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[7410]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="500" _type="ShellCommand" date="Wed Mar 30 09:40:13 EDT 2022" starttimestamp="1648643986594" timestamp="3626791" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="503" _type="MoveCaretCommand" caretOffset="7591" date="Wed Mar 30 09:40:13 EDT 2022" docOffset="9045" starttimestamp="1648643986594" timestamp="3627093" />
  <Command __id="505" _type="PauseCommand" date="Wed Mar 30 09:40:18 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3632008">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4915]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="504" _type="ShellCommand" date="Wed Mar 30 09:40:18 EDT 2022" starttimestamp="1648643986594" timestamp="3632008" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="507" _type="PauseCommand" date="Wed Mar 30 09:40:49 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="3662645">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30637]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="506" _type="ShellCommand" date="Wed Mar 30 09:40:49 EDT 2022" starttimestamp="1648643986594" timestamp="3662645" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="471" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:38:54 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="3548131">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="502" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:40:13 EDT 2022" docASTNodeCount="1160" docActiveCodeLength="8288" docExpressionCount="825" docLength="9149" projectName="A5" starttimestamp="1648643986594" timestamp="3626952">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶"), Diff(INSERT,"import client.ClientOutCoupler;¶"), Diff(EQUAL,"import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶"), Diff(INSERT,"import util.trace.port.consensus.ProposedStateSet;¶"), Diff(EQUAL,"import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}"), Diff(INSERT,"¶	¶	public void simulationCommand(String aCommand) {¶	¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}"), Diff(EQUAL,"¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}
	
	public void simulationCommand(String aCommand) {
	
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}

}
]]></snapshot>
  </Command>
  <Command __id="509" _type="PauseCommand" date="Wed Mar 30 09:41:07 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="3680975">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[18330]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="510" _type="SelectTextCommand" caretOffset="4768" date="Wed Mar 30 09:41:07 EDT 2022" end="4768" start="4757" starttimestamp="1648643986594" timestamp="3681084" />
  <Command __id="508" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:41:07 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648643986594" timestamp="3680975">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package client;¶¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import java.beans.PropertyChangeListener;¶import java.rmi.AccessException;¶import java.rmi.NotBoundException;¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import coupledsims.Simulation;¶import coupledsims.Simulation1;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import main.BeauAndersonFinalProject;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectGIPC;¶import server.remote.ServerRemoteInterfaceGIPC;¶import stringProcessors.HalloweenCommandProcessor;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationReceived;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectLookedUp;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryLocated;¶import util.trace.port.rpc.rmi.RMIObjectLookedUp;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {¶	HalloweenCommandProcessor commandProcessor;¶	protected int NUM_EXPERIMENT_COMMANDS = 500;¶	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";¶	public static final String EXPERIMENT_COMMAND_2 = "undo";¶	protected PropertyChangeListener simulationCoupler;¶	ServerRemoteInterfaceGIPC server = null;¶	ServerRemoteInterfaceGIPC serverGIPC = null;¶	¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	private static String CLIENT_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	private static String GIPC_SERVER_NAME ;¶	private static boolean broadcastIPCMechanism = false;¶	private static int aProposalNumber;¶	¶	PropertyChangeListener clientOutCoupler;¶¶	@Override¶	public HalloweenCommandProcessor createSimulation(String aPrefix) {¶		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,¶				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,¶				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);¶	}¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		CLIENT_NAME = ClientArgsProcessor.getClientName(args);¶¶¶		//A5¶		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);¶		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);¶		¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	public void init(String[] args) {¶		setTracing();¶¶		this.processArgs(args);¶		// Ideally the prefixes should be main args¶		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);¶		¶		//Locate GIPC Server¶		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);¶		¶		//Get GIPC server here¶		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);¶		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);¶		¶		//Register Client with GIPC Proxy¶		try {¶			serverGIPC.registerClientGIPC(this);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		¶		¶		// Locate RMI Server¶		Registry rmiRegistry = null;¶		try {¶			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶		} catch (RemoteException e3) {¶			e3.printStackTrace();¶		}¶		// Get RMI server here¶		¶		try {¶			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);¶			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);¶		} catch (AccessException e2) {¶			// TODO Auto-generated catch block¶			e2.printStackTrace();¶		} catch (RemoteException e2) {¶¶			e2.printStackTrace();¶		} catch (NotBoundException e2) {¶			e2.printStackTrace();¶		}¶¶		// export client to create proxy¶		try {¶			UnicastRemoteObject.exportObject(this, 0);¶		} catch (RemoteException e1) {¶			e1.printStackTrace();¶		}¶¶		// have the server register the exported client¶		try {¶			server.registerClientRMI(this);¶		} catch (RemoteException e) {¶			e.printStackTrace();¶		}¶		¶		¶		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶		// Add propertyChangeListener¶		commandProcessor.addPropertyChangeListener(clientOutCoupler);¶		¶		System.out.println("added server as a property change listener of client");¶	}¶¶	@Override¶	public void inCoupler(String aNewCommand, int proposalNumber) {¶		//final int aProposalNumber = proposalNumber;¶		System.out.println("recieved broadcased command: "+ aNewCommand);¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		commandProcessor.processCommand(aNewCommand);¶		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);¶		System.out.println("executed command");¶		¶	}¶	¶	@Override¶	/*¶	 * You will need to delay not command input but sends(non-Javadoc)¶	 */¶	public void simulationCommand(String aCommand) {¶		//long aDelay = getDelay(); ¶		//if (aDelay > 0) {¶		//	ThreadSupport.sleep(aDelay);¶		//}¶		IPCMechanism mechanism = getIPCMechanism();¶		System.out.println("IPC Mechanism");¶		System.out.println(mechanism);¶		¶		¶		if(mechanism.toString().equals("GIPC")) {¶						¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using gipc proxy server");¶		}¶		if(mechanism.toString().equals("RMI")) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			System.out.println("using RMI proxy server");¶		}¶		¶		//IPC Mechanism Change¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		try {¶			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);¶		} catch (RemoteException e) {¶			// TODO Auto-generated catch block¶			e.printStackTrace();¶		}¶		commandProcessor.setInputString(aCommand); // all commands go to the first command window¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		//commandProcessor.setInputString("quit");¶		¶		System.exit(aCode);¶	}¶	¶	@Override¶	public void localProcessingOnly(boolean newValue) {¶		super.localProcessingOnly(newValue);¶		if (isLocalProcessingOnly()) {¶			commandProcessor.removePropertyChangeListener(clientOutCoupler);¶			¶		} else {¶			commandProcessor.addPropertyChangeListener(clientOutCoupler);¶			¶		}¶	}¶	¶	@Override¶	public void broadcastMetaState(boolean broadcast) {¶		broadcastIPCMechanism = broadcast;¶		¶	}¶	¶	@Override¶	public void changeIPCMechanism(IPCMechanism mechanism) {¶		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		setIPCMechanism(mechanism);¶		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);¶		aProposalNumber++;¶	}¶¶¶}¶")]]]></diff>
  </Command>
  <Command __id="512" _type="PauseCommand" date="Wed Mar 30 09:41:08 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3682221">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1137]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="513" _type="MoveCaretCommand" caretOffset="959" date="Wed Mar 30 09:41:08 EDT 2022" docOffset="1199" starttimestamp="1648643986594" timestamp="3682330" />
  <Command __id="511" _type="DiffBasedFileOpenCommand" date="Wed Mar 30 09:41:08 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648643986594" timestamp="3682221">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="515" _type="PauseCommand" date="Wed Mar 30 09:41:10 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3684272">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1942]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="516" _type="SelectTextCommand" caretOffset="4768" date="Wed Mar 30 09:41:10 EDT 2022" end="4768" start="4757" starttimestamp="1648643986594" timestamp="3684395" />
  <Command __id="518" _type="PauseCommand" date="Wed Mar 30 09:41:23 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="3696740">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[12345]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="517" _type="ShellCommand" date="Wed Mar 30 09:41:23 EDT 2022" starttimestamp="1648643986594" timestamp="3696740" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="520" _type="PauseCommand" date="Wed Mar 30 09:43:16 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="3810321">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[113581]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="519" _type="ShellCommand" date="Wed Mar 30 09:43:16 EDT 2022" starttimestamp="1648643986594" timestamp="3810321" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="521" _type="MoveCaretCommand" caretOffset="2782" date="Wed Mar 30 09:43:16 EDT 2022" docOffset="2782" starttimestamp="1648643986594" timestamp="3810402" />
  <Command __id="523" _type="PauseCommand" date="Wed Mar 30 09:43:55 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="3848878">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[38476]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="522" _type="MoveCaretCommand" caretOffset="4085" date="Wed Mar 30 09:43:55 EDT 2022" docOffset="4085" starttimestamp="1648643986594" timestamp="3848878" />
  <Command __id="526" _type="PauseCommand" date="Wed Mar 30 09:43:56 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3850002">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1124]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="525" _type="ShellCommand" date="Wed Mar 30 09:43:56 EDT 2022" starttimestamp="1648643986594" timestamp="3850002" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="528" _type="PauseCommand" date="Wed Mar 30 09:43:59 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3853127">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3125]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="527" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:43:59 EDT 2022" forward="true" matchWord="false" offset="4085" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3853127" wrapSearch="false">
    <searchString><![CDATA[getSimula]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="529" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:44:00 EDT 2022" forward="true" matchWord="false" offset="4085" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3853460" wrapSearch="false">
    <searchString><![CDATA[getSimula]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="530" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:44:00 EDT 2022" forward="true" matchWord="false" offset="4085" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3853689" wrapSearch="false">
    <searchString><![CDATA[getSimula]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="532" _type="PauseCommand" date="Wed Mar 30 09:44:01 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3855146">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1457]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="531" _type="ShellCommand" date="Wed Mar 30 09:44:01 EDT 2022" starttimestamp="1648643986594" timestamp="3855146" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="534" _type="PauseCommand" date="Wed Mar 30 09:44:27 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="3881363">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26217]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="533" _type="MoveCaretCommand" caretOffset="2758" date="Wed Mar 30 09:44:27 EDT 2022" docOffset="2758" starttimestamp="1648643986594" timestamp="3881363" />
  <Command __id="536" _type="PauseCommand" date="Wed Mar 30 09:44:34 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="3887675">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6312]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="535" _type="ShellCommand" date="Wed Mar 30 09:44:34 EDT 2022" starttimestamp="1648643986594" timestamp="3887675" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="538" _type="PauseCommand" date="Wed Mar 30 09:45:10 EDT 2022" range="30s-1m" starttimestamp="1648643986594" timestamp="3923474">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[35799]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="537" _type="ShellCommand" date="Wed Mar 30 09:45:10 EDT 2022" starttimestamp="1648643986594" timestamp="3923474" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="539" _type="MoveCaretCommand" caretOffset="2655" date="Wed Mar 30 09:45:10 EDT 2022" docOffset="2655" starttimestamp="1648643986594" timestamp="3923529" />
  <Command __id="542" _type="PauseCommand" date="Wed Mar 30 09:45:11 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3924910">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1381]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="541" _type="ShellCommand" date="Wed Mar 30 09:45:11 EDT 2022" starttimestamp="1648643986594" timestamp="3924910" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="544" _type="PauseCommand" date="Wed Mar 30 09:45:12 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3926120">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1209]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="543" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:45:12 EDT 2022" forward="true" matchWord="false" offset="2655" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3926119" wrapSearch="false">
    <searchString><![CDATA[start]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="546" _type="PauseCommand" date="Wed Mar 30 09:45:15 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3928800">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[2681]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="545" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:45:15 EDT 2022" forward="false" matchWord="false" offset="2655" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3928800" wrapSearch="false">
    <searchString><![CDATA[start]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="548" _type="PauseCommand" date="Wed Mar 30 09:45:16 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3930137">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1337]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="547" _type="ShellCommand" date="Wed Mar 30 09:45:16 EDT 2022" starttimestamp="1648643986594" timestamp="3930137" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="550" _type="PauseCommand" date="Wed Mar 30 09:45:42 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="3956238">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[26101]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="549" _type="ShellCommand" date="Wed Mar 30 09:45:42 EDT 2022" starttimestamp="1648643986594" timestamp="3956238" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="552" _type="PauseCommand" date="Wed Mar 30 09:46:02 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="3975635">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[19397]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="551" _type="ShellCommand" date="Wed Mar 30 09:46:02 EDT 2022" starttimestamp="1648643986594" timestamp="3975635" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="554" _type="PauseCommand" date="Wed Mar 30 09:46:05 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="3979259">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3624]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="553" _type="MoveCaretCommand" caretOffset="1552" date="Wed Mar 30 09:46:05 EDT 2022" docOffset="1552" starttimestamp="1648643986594" timestamp="3979259" />
  <Command __id="556" _type="ShellCommand" date="Wed Mar 30 09:46:06 EDT 2022" starttimestamp="1648643986594" timestamp="3980125" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="558" _type="PauseCommand" date="Wed Mar 30 09:46:08 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3981606">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1481]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="557" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:46:08 EDT 2022" forward="false" matchWord="false" offset="1552" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3981606" wrapSearch="false">
    <searchString><![CDATA[start]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="559" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:46:08 EDT 2022" forward="false" matchWord="false" offset="1552" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3982136" wrapSearch="false">
    <searchString><![CDATA[start]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="560" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:46:08 EDT 2022" forward="false" matchWord="false" offset="1552" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="3982293" wrapSearch="false">
    <searchString><![CDATA[start]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="562" _type="PauseCommand" date="Wed Mar 30 09:46:10 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="3984165">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1872]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="561" _type="ShellCommand" date="Wed Mar 30 09:46:10 EDT 2022" starttimestamp="1648643986594" timestamp="3984165" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="564" _type="PauseCommand" date="Wed Mar 30 09:46:31 EDT 2022" range="20s-30s" starttimestamp="1648643986594" timestamp="4004759">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20594]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="563" _type="ShellCommand" date="Wed Mar 30 09:46:31 EDT 2022" starttimestamp="1648643986594" timestamp="4004759" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="566" _type="PauseCommand" date="Wed Mar 30 09:46:38 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="4012130">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[7371]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="565" _type="ShellCommand" date="Wed Mar 30 09:46:38 EDT 2022" starttimestamp="1648643986594" timestamp="4012130" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="568" _type="MoveCaretCommand" caretOffset="7591" date="Wed Mar 30 09:46:38 EDT 2022" docOffset="9045" starttimestamp="1648643986594" timestamp="4012343" />
  <Command __id="570" _type="PauseCommand" date="Wed Mar 30 09:46:43 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4016431">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4088]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="569" _type="SelectTextCommand" caretOffset="7540" date="Wed Mar 30 09:46:43 EDT 2022" end="7688" start="7540" starttimestamp="1648643986594" timestamp="4016431" />
  <Command __id="572" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 09:46:43 EDT 2022" starttimestamp="1648643986594" timestamp="4016773" />
  <Command __id="574" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 09:46:44 EDT 2022" starttimestamp="1648643986594" timestamp="4017532" />
  <Command __id="576" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Mar 30 09:46:44 EDT 2022" starttimestamp="1648643986594" timestamp="4017971" />
  <Command __id="577" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 09:46:45 EDT 2022" starttimestamp="1648643986594" timestamp="4018687" />
  <Command __id="578" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:46:45 EDT 2022" starttimestamp="1648643986594" timestamp="4018774" />
  <Command __id="579" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:46:45 EDT 2022" starttimestamp="1648643986594" timestamp="4018830" />
  <Command __id="581" _type="ShellCommand" date="Wed Mar 30 09:46:45 EDT 2022" starttimestamp="1648643986594" timestamp="4019305" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="583" _type="PauseCommand" date="Wed Mar 30 09:46:47 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="4020500">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1195]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="582" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:46:47 EDT 2022" forward="false" matchWord="false" offset="8991" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="4020500" wrapSearch="false">
    <searchString><![CDATA[start]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="585" _type="PauseCommand" date="Wed Mar 30 09:46:55 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="4029196">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[8696]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="584" _type="ShellCommand" date="Wed Mar 30 09:46:55 EDT 2022" starttimestamp="1648643986594" timestamp="4029196" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="587" _type="PauseCommand" date="Wed Mar 30 09:46:59 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4032637">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3441]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="586" _type="ShellCommand" date="Wed Mar 30 09:46:59 EDT 2022" starttimestamp="1648643986594" timestamp="4032637" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="589" _type="PauseCommand" date="Wed Mar 30 09:47:07 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="4041050">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[8413]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="588" _type="ShellCommand" date="Wed Mar 30 09:47:07 EDT 2022" starttimestamp="1648643986594" timestamp="4041050" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="590" _type="MoveCaretCommand" caretOffset="6678" date="Wed Mar 30 09:47:07 EDT 2022" docOffset="8132" starttimestamp="1648643986594" timestamp="4041099" />
  <Command __id="592" _type="InsertStringCommand" date="Wed Mar 30 09:47:07 EDT 2022" starttimestamp="1648643986594" timestamp="4041371" timestamp2="4041371">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="594" _type="PasteCommand" date="Wed Mar 30 09:47:08 EDT 2022" starttimestamp="1648643986594" timestamp="4041887" />
  <Command __id="595" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 09:47:09 EDT 2022" starttimestamp="1648643986594" timestamp="4042869" />
  <Command __id="596" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:47:09 EDT 2022" starttimestamp="1648643986594" timestamp="4042958" />
  <Command __id="597" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:47:09 EDT 2022" starttimestamp="1648643986594" timestamp="4043006" />
  <Command __id="599" _type="PauseCommand" date="Wed Mar 30 09:47:12 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4045827">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2821]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="598" _type="ShellCommand" date="Wed Mar 30 09:47:12 EDT 2022" starttimestamp="1648643986594" timestamp="4045827" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="600" _type="ShellCommand" date="Wed Mar 30 09:47:12 EDT 2022" starttimestamp="1648643986594" timestamp="4045965" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="604" _type="PauseCommand" date="Wed Mar 30 09:47:17 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="4051148">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[5139]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="603" _type="MoveCaretCommand" caretOffset="6978" date="Wed Mar 30 09:47:17 EDT 2022" docOffset="8512" starttimestamp="1648643986594" timestamp="4051148" />
  <Command __id="605" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Wed Mar 30 09:47:18 EDT 2022" starttimestamp="1648643986594" timestamp="4051866" />
  <Command __id="607" _type="InsertStringCommand" date="Wed Mar 30 09:47:19 EDT 2022" starttimestamp="1648643986594" timestamp="4052594" timestamp2="4052594">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="609" _type="InsertStringCommand" date="Wed Mar 30 09:47:19 EDT 2022" starttimestamp="1648643986594" timestamp="4052733" timestamp2="4052733">
    <data><![CDATA[/]]></data>
  </Command>
  <Command __id="612" _type="PauseCommand" date="Wed Mar 30 09:47:21 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4055225">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2492]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="611" _type="ShellCommand" date="Wed Mar 30 09:47:21 EDT 2022" starttimestamp="1648643986594" timestamp="4055225" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="614" _type="PauseCommand" date="Wed Mar 30 09:47:23 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="4056899">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1674]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="613" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:47:23 EDT 2022" forward="false" matchWord="false" offset="8513" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="4056899" wrapSearch="false">
    <searchString><![CDATA[init]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="616" _type="PauseCommand" date="Wed Mar 30 09:47:24 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="4057901">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[1002]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="615" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:47:24 EDT 2022" forward="false" matchWord="false" offset="8517" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="4057901" wrapSearch="false">
    <searchString><![CDATA[init]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="617" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:47:24 EDT 2022" forward="false" matchWord="false" offset="8517" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="4058195" wrapSearch="false">
    <searchString><![CDATA[init]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="619" _type="PauseCommand" date="Wed Mar 30 09:47:27 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4061211">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3016]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[FindCommand]]></next>
  </Command>
  <Command __id="618" _type="FindCommand" caseSensitive="false" date="Wed Mar 30 09:47:27 EDT 2022" forward="true" matchWord="false" offset="8517" regexp="false" replaceAll="false" selection="Find" selectionScope="false" starttimestamp="1648643986594" timestamp="4061211" wrapSearch="false">
    <searchString><![CDATA[init]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="621" _type="PauseCommand" date="Wed Mar 30 09:47:31 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4064942">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[FindCommand]]></prev>
    <pause><![CDATA[3731]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="620" _type="ShellCommand" date="Wed Mar 30 09:47:31 EDT 2022" starttimestamp="1648643986594" timestamp="4064942" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="623" _type="PauseCommand" date="Wed Mar 30 09:47:44 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="4077545">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[12603]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="622" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Mar 30 09:47:44 EDT 2022" starttimestamp="1648643986594" timestamp="4077545" />
  <Command __id="624" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:47:44 EDT 2022" starttimestamp="1648643986594" timestamp="4077652" />
  <Command __id="625" _type="EclipseCommand" commandID="" date="Wed Mar 30 09:47:44 EDT 2022" starttimestamp="1648643986594" timestamp="4077681" />
  <Command __id="627" _type="PauseCommand" date="Wed Mar 30 09:47:56 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="4089711">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[12030]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="637" _type="RunCommand" className="/A5/src/server/Server.java" date="Wed Mar 30 09:48:06 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="4099554" type="Run" />
  <Command __id="639" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:06 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4099692" type="Run" />
  <Command __id="640" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4099695" type="Run" />
  <Command __id="641" _type="ConsoleOutput" date="Wed Mar 30 09:48:06 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4099964" type="ConsoleOutput">
    <outputString><![CDATA[Registry host:localhost
Registry port:1099
Server host:localhost
Headless:false
Client name:Generic Client:0.8273437777669022
GIPC_SERVER_PORT: 
10000
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Re"), Diff(DELETE,"-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@74cfe14f . Results may change."), Diff(INSERT,"gistry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.8273437777669022¶GIPC_SERVER_PORT: ¶10000"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="642" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:06 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4100269" type="Run" />
  <Command __id="643" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4100505" type="Run" />
  <Command __id="644" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:07 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4100600" type="Run" />
  <Command __id="645" _type="ConsoleOutput" date="Wed Mar 30 09:48:07 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4100707" type="ConsoleOutput">
    <outputString><![CDATA[Server proxy sent to RMI Registry
Command processor scanner opened
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Registry host:localhost¶Registry port:1099¶Server host:localhost¶Headless:false¶Client name:Generic Client:0.8273437777669022¶GIPC_SERVER_PORT: ¶10000"), Diff(INSERT,"Server proxy sent to RMI Registry¶Command processor scanner opened¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="647" _type="PauseCommand" date="Wed Mar 30 09:48:13 EDT 2022" range="5s-10s" starttimestamp="1648643986594" timestamp="4106654">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5947]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="646" _type="ConsoleInput" date="Wed Mar 30 09:48:13 EDT 2022" starttimestamp="1648643986594" timestamp="4106654" type="Exception">
    <outputString><![CDATA[i gipc
]]></outputString>
  </Command>
  <Command __id="648" _type="ConsoleOutput" date="Wed Mar 30 09:48:13 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4106708" type="ConsoleOutput">
    <outputString><![CDATA[public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]
Enter (prefixes of) print, quit or a method and its parameters separated by commas:
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Server proxy sent to RMI Registry¶Command processor scanner opened"), Diff(INSERT,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]"), Diff(EQUAL,"¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:¶")]]]></diff>
  </Command>
  <Command __id="650" _type="PauseCommand" date="Wed Mar 30 09:48:17 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4110633">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3925]]></pause>
    <nextType><![CDATA[Terminate]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="656" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Wed Mar 30 09:48:22 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="4115527" type="Run" />
  <Command __id="658" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Wed Mar 30 09:48:22 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648643986594" timestamp="4115527" type="Run" />
  <Command __id="659" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4115745" type="Run" />
  <Command __id="660" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:22 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4115758" type="Run" />
  <Command __id="661" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:22 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4115762" type="Run" />
  <Command __id="663" _type="PauseCommand" date="Wed Mar 30 09:48:24 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4118176">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2414]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="664" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:48:27 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4120488" type="Run" />
  <Command __id="666" _type="ConsoleOutput" date="Wed Mar 30 09:48:27 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4120645" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Wed Mar 30 09:48:27 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"public default void assignments.util.inputParameters.SimulationParametersListener.ipcMechanism(util.interactiveMethodInvocation.IPCMechanism)[GIPC]¶Enter (prefixes of) print, quit or a method and its parameters separated by commas:"), Diff(INSERT,"Building symbol table and running first pass checks:Wed Mar 30 09:48:27 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="668" _type="PauseCommand" date="Wed Mar 30 09:48:29 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4122906">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2261]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="667" _type="ConsoleOutput" date="Wed Mar 30 09:48:29 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4122906" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Wed Mar 30 09:48:29 EDT 2022
Start O(n2) inter- and intra class method calls:Wed Mar 30 09:48:29 EDT 2022
End O(n2) inter- and intra class method calls:Wed Mar 30 09:48:29 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building symbol table and running first pass check"), Diff(INSERT,"Symbol table size:80¶Running second pass checks Wed Mar 30 09:48:29 EDT 2022¶Start O(n2) inter- and intra class method calls:Wed Mar 30 09:48:29 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Wed Mar 30 09:48:2"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="670" _type="PauseCommand" date="Wed Mar 30 09:48:30 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="4124247">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1341]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="669" _type="ConsoleOutput" date="Wed Mar 30 09:48:30 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4124247" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Wed Mar 30 09:48:30 EDT 2022
Generating checks:Wed Mar 30 09:48:30 EDT 2022
Finished Generating checks:Wed Mar 30 09:48:30 EDT 2022
Generating externals:Wed Mar 30 09:48:30 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Wed Mar 30 09:48:"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Wed Mar 30 09:48:30 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Wed Mar 30 09:48:"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Wed Mar 30 09:48:"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="671" _type="ConsoleOutput" date="Wed Mar 30 09:48:31 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4124541" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Wed Mar 30 09:48:31 EDT 2022
Test execution time (ms):3980
Test execution time (ms):7
A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):12
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Wed Mar 30 09:48:3"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating checks:Wed Mar 30 09:48:30 EDT 2022¶Finished Generating checks:Wed Mar 30 09:48:30 EDT 2022¶Generating externals:Wed Mar 30 09:48:30 EDT 202"), Diff(INSERT,"Test execution time (ms):3980¶Test execution time (ms):7¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):1"), Diff(EQUAL,"2¶")]]]></diff>
  </Command>
  <Command __id="672" _type="ConsoleOutput" date="Wed Mar 30 09:48:31 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4124627" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):5
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):8

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (296)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Wed Mar 30 09:48:31 EDT 2022¶Test execution time (ms):3980¶Test execution time (ms):7¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):12"), Diff(INSERT,"Test execution time (ms):5¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):8¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (296)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="674" _type="PauseCommand" date="Wed Mar 30 09:48:35 EDT 2022" range="2s-5s" starttimestamp="1648643986594" timestamp="4129380">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4753]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="701" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:49:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4168573" type="Run" />
  <Command __id="703" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:49:15 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4168574" type="Run" />
  <Command __id="705" _type="PauseCommand" date="Wed Mar 30 09:49:27 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="4180716">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[12141]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="780" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:53:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4444799" type="Run" />
  <Command __id="782" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Mar 30 09:53:51 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648643986594" timestamp="4444801" type="Run" />
  <Command __id="784" _type="PauseCommand" date="Wed Mar 30 09:54:06 EDT 2022" range="10s-20s" starttimestamp="1648643986594" timestamp="4459881">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[15080]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="783" _type="ConsoleOutput" date="Wed Mar 30 09:54:06 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4459881" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22561
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):2256"), Diff(DELETE,"9"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="786" _type="PauseCommand" date="Wed Mar 30 09:55:37 EDT 2022" range="1m-2m" starttimestamp="1648643986594" timestamp="4550795">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[90914]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="785" _type="ConsoleOutput" date="Wed Mar 30 09:55:37 EDT 2022" overflow="false" starttimestamp="1648643986594" timestamp="4550795" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@7d5eebc7 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):22561"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@7d5eebc7 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="788" _type="PauseCommand" date="Wed Mar 30 09:55:38 EDT 2022" range="1s-2s" starttimestamp="1648643986594" timestamp="4552140">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1345]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
