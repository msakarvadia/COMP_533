<Events startTimestamp="1648737385020" logVersion="1.0.0.202111260825">
  <Command __id="2" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:36:44 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="19533" type="Run" />
  <Command __id="4" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:36:44 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="19541" type="Run" />
  <Command __id="5" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:36:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="19802" type="Run" />
  <Command __id="6" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:36:44 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="19852" type="Run" />
  <Command __id="7" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:36:44 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="19858" type="Run" />
  <Command __id="9" _type="PauseCommand" date="Thu Mar 31 10:36:49 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="24839">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4980]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="8" _type="ShellCommand" date="Thu Mar 31 10:36:49 EDT 2022" starttimestamp="1648737385020" timestamp="24838" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:36:50 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="25171" type="Run" />
  <Command __id="11" _type="ConsoleOutput" date="Thu Mar 31 10:36:50 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="25272" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Mar 31 10:36:50 EDT 2022
]]></outputString>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="13" _type="PauseCommand" date="Thu Mar 31 10:36:53 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="28021">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2749]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="12" _type="ConsoleOutput" date="Thu Mar 31 10:36:53 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="28021" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Thu Mar 31 10:36:52 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Mar 31 10:36:52 EDT 2022
End O(n2) inter- and intra class method calls:Thu Mar 31 10:36:52 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:80¶Running second pass checks Thu Mar 31 10:36:52 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Mar 31 10:36:52 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Thu Mar 31 10:36:5"), Diff(DELETE,"0"), Diff(INSERT,"2"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="15" _type="PauseCommand" date="Thu Mar 31 10:36:54 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="29253">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1232]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="14" _type="ConsoleOutput" date="Thu Mar 31 10:36:54 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="29253" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Mar 31 10:36:54 EDT 2022
Generating checks:Thu Mar 31 10:36:54 EDT 2022
Finished Generating checks:Thu Mar 31 10:36:54 EDT 2022
Generating externals:Thu Mar 31 10:36:54 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Thu Mar 31 10:36:5"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Thu Mar 31 10:36:54 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Thu Mar 31 10:36:5"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Thu Mar 31 10:36:5"), Diff(DELETE,"2"), Diff(INSERT,"4"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="16" _type="ConsoleOutput" date="Thu Mar 31 10:36:54 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="29561" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Mar 31 10:36:54 EDT 2022
Test execution time (ms):4248
Test execution time (ms):11

A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074
Test execution time (ms):13
Test execution time (ms):6
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365

Test execution time (ms):11
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Thu Mar 31 10:36:54 EDT 2022¶"), Diff(DELETE,"Generating checks:Thu Mar 31 10:36:54 EDT 2022¶Finished Generating checks:Thu Mar 31 10:36:54 EDT 2022¶Generating externals:Thu Mar 31 10:36:54 EDT 2022"), Diff(INSERT,"Test execution time (ms):4248¶Test execution time (ms):11¶¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶Test execution time (ms):13¶Test execution time (ms):6¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):11"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="17" _type="ConsoleOutput" date="Thu Mar 31 10:36:54 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="29630" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (230)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (34)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (296)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Mar 31 10:36:54 EDT 2022¶Test execution time (ms):4248¶Test execution time (ms):11¶¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶Test execution time (ms):13¶Test execution time (ms):6¶A5ExpectedSignatures did not pass completely:See consol"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (296)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to th"), Diff(EQUAL,"e "), Diff(INSERT,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"ace about lines failing  this check%0.36363636363636365¶¶Test execution time (ms):11"), Diff(INSERT,"ucture:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="19" _type="PauseCommand" date="Thu Mar 31 10:36:57 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="32552">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2922]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="18" _type="ConsoleOutput" date="Thu Mar 31 10:36:57 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="32552" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@28e72f44 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (230)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (34)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (296)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@28e72f44 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="21" _type="PauseCommand" date="Thu Mar 31 10:37:09 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="44514">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11962]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="20" _type="ShellCommand" date="Thu Mar 31 10:37:09 EDT 2022" starttimestamp="1648737385020" timestamp="44514" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:36:35 EDT 2022" docASTNodeCount="117" docActiveCodeLength="878" docExpressionCount="75" docLength="1269" projectName="A5" starttimestamp="1648737385020" timestamp="10957">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\checks\Checks.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package checks;

import grader.basics.execution.BasicProjectExecution;
import gradingTools.comp533s22.assignment5.S22Assignment5Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
import util.trace.Tracer;

public class Checks {
	public static void main(final String[] args) {
		Tracer.showInfo(true);
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		final int traces = 8000;
		Tracer.setMaxTraces(traces);
		
		// if you set this to false, grader steps will not be traced
		GraderBasicsTraceUtility.setTracerShowInfo(true);	
		// if you set this to false, all grader steps will be traced,
		// not just the ones that failed		
		
		GraderBasicsTraceUtility.setBufferTracedMessages(false);
		// Change this number if a test trace gets longer than 600 and is clipped
		
		final int length = 600;
		GraderBasicsTraceUtility.setMaxPrintedTraces(length);
		// Change this number if all traces together are longer than 600
		
		final int time = 4000;
		GraderBasicsTraceUtility.setMaxTraces(time);
		// Change this number if your process times out prematurely
		
		final int timer = 50;
		BasicProjectExecution.setProcessTimeOut(timer);
		// You need to always call such a method
		S22Assignment5Suite.main(args);
	}
}
]]></snapshot>
  </Command>
  <Command __id="23" _type="PauseCommand" date="Thu Mar 31 10:37:32 EDT 2022" range="20s-30s" starttimestamp="1648737385020" timestamp="67459">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22945]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="25" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:37:33 EDT 2022" starttimestamp="1648737385020" timestamp="68875" />
  <Command __id="27" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:37:34 EDT 2022" starttimestamp="1648737385020" timestamp="68990" />
  <Command __id="29" _type="PauseCommand" date="Thu Mar 31 10:37:37 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="72271">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3281]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="28" _type="SelectTextCommand" caretOffset="9175" date="Thu Mar 31 10:37:37 EDT 2022" end="9285" start="9175" starttimestamp="1648737385020" timestamp="72271" />
  <Command __id="30" _type="CopyCommand" date="Thu Mar 31 10:37:37 EDT 2022" starttimestamp="1648737385020" timestamp="72948" />
  <Command __id="22" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:37:32 EDT 2022" docASTNodeCount="1130" docActiveCodeLength="8727" docExpressionCount="805" docLength="9596" projectName="A5" starttimestamp="1648737385020" timestamp="67459">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientRemoteObject.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectGIPC;
import server.remote.ServerRemoteInterfaceGIPC;
import stringProcessors.HalloweenCommandProcessor;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectLookedUp;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryLocated;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({ DistributedTags.CLIENT_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ClientRemoteObject extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI, ClientRemoteInterfaceGIPC {
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceGIPC server = null;
	ServerRemoteInterfaceGIPC serverGIPC = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	private static String GIPC_SERVER_NAME ;
	private static boolean broadcastIPCMechanism = false;
	private static int aProposalNumber;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);


		//A5
		GIPC_SERVER_PORT = ClientArgsProcessor.getGIPCPort(args);
		GIPC_SERVER_NAME = ClientArgsProcessor.getServerHost(args);
		
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);
		
		//Locate GIPC Server
		gipcRegistry = GIPCLocateRegistry.getRegistry(GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		GIPCRegistryLocated.newCase(this, GIPC_SERVER_NAME, GIPC_SERVER_PORT, CLIENT_NAME);
		
		//Get GIPC server here
		serverGIPC = (ServerRemoteInterfaceGIPC) gipcRegistry.lookup(ServerRemoteObjectGIPC.class, SERVER_NAME);
		GIPCObjectLookedUp.newCase(this, serverGIPC, ServerRemoteObjectGIPC.class, SERVER_NAME, gipcRegistry);
		
		//Register Client with GIPC Proxy
		try {
			serverGIPC.registerClientGIPC(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		// Locate RMI Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			e3.printStackTrace();
		}
		// Get RMI server here
		
		try {
			server = (ServerRemoteInterfaceGIPC) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClientRMI(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
		//clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		IPCMechanism mechanism = getIPCMechanism();
		System.out.println("IPC Mechanism");
		System.out.println(mechanism);
		
		
		if(mechanism.toString().equals("GIPC")) {
						
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(serverGIPC, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using gipc proxy server");
		}
		if(mechanism.toString().equals("RMI")) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			clientOutCoupler = new ClientOutCoupler(server, this, CLIENT_NAME);
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			System.out.println("using RMI proxy server");
		}
		
		//IPC Mechanism Change
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		try {
			server.broadcastIPCMechanism(mechanism, this, aProposalNumber, broadcastIPCMechanism);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		//commandProcessor.setInputString("quit");
		
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}
	
	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}
	
	@Override
	public void changeIPCMechanism(IPCMechanism mechanism) {
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		setIPCMechanism(mechanism);
		ProposedStateSet.newCase(this, CLIENT_NAME, aProposalNumber, mechanism);
		aProposalNumber++;
	}


}
]]></snapshot>
  </Command>
  <Command __id="32" _type="PauseCommand" date="Thu Mar 31 10:37:40 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="75098">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2150]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="33" _type="MoveCaretCommand" caretOffset="0" date="Thu Mar 31 10:37:40 EDT 2022" docOffset="0" starttimestamp="1648737385020" timestamp="75343" />
  <Command __id="35" _type="PauseCommand" date="Thu Mar 31 10:37:42 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="77690">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2347]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="34" _type="MoveCaretCommand" caretOffset="6404" date="Thu Mar 31 10:37:42 EDT 2022" docOffset="7756" starttimestamp="1648737385020" timestamp="77690" />
  <Command __id="37" _type="InsertStringCommand" date="Thu Mar 31 10:37:42 EDT 2022" starttimestamp="1648737385020" timestamp="77957" timestamp2="77957">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="39" _type="PasteCommand" date="Thu Mar 31 10:37:43 EDT 2022" starttimestamp="1648737385020" timestamp="78924" />
  <Command __id="40" _type="MoveCaretCommand" caretOffset="6409" date="Thu Mar 31 10:37:44 EDT 2022" docOffset="7761" starttimestamp="1648737385020" timestamp="79325" />
  <Command __id="41" _type="MoveCaretCommand" caretOffset="6404" date="Thu Mar 31 10:37:44 EDT 2022" docOffset="7756" starttimestamp="1648737385020" timestamp="79877" />
  <Command __id="43" _type="InsertStringCommand" date="Thu Mar 31 10:37:45 EDT 2022" starttimestamp="1648737385020" timestamp="80141" timestamp2="80141">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="44" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:37:45 EDT 2022" starttimestamp="1648737385020" timestamp="80722" />
  <Command __id="45" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:37:45 EDT 2022" starttimestamp="1648737385020" timestamp="80754" />
  <Command __id="46" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:37:45 EDT 2022" starttimestamp="1648737385020" timestamp="80846" />
  <Command __id="31" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:37:40 EDT 2022" docASTNodeCount="915" docActiveCodeLength="6878" docExpressionCount="643" docLength="7765" projectName="A5" starttimestamp="1648737385020" timestamp="75098">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\client\ClientConfigure.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package client;

import java.beans.PropertyChangeListener;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

import assignments.util.mainArgs.ClientArgsProcessor;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import coupledsims.Simulation;
import coupledsims.Simulation1;
import main.BeauAndersonFinalProject;
import server.remote.ServerRemoteInterfaceGIPC;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectRMI;
import stringProcessors.HalloweenCommandProcessor;
import util.annotations.Tags;
import util.tags.DistributedTags;
import util.trace.Tracer;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PerformanceExperimentEnded;
import util.trace.port.PerformanceExperimentStarted;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationReceived;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMIObjectLookedUp;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.CLIENT_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC})
public class ClientConfigure  extends AStandAloneTwoCoupledHalloweenSimulations implements ClientRemoteInterfaceRMI {
	
	HalloweenCommandProcessor commandProcessor;
	protected int NUM_EXPERIMENT_COMMANDS = 500;
	public static final String EXPERIMENT_COMMAND_1 = "move 1 -1";
	public static final String EXPERIMENT_COMMAND_2 = "undo";
	protected PropertyChangeListener simulationCoupler;
	ServerRemoteInterfaceRMI server = null;
	

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	private static String CLIENT_NAME;
	
	PropertyChangeListener clientOutCoupler;

	@Override
	public HalloweenCommandProcessor createSimulation(String aPrefix) {
		return BeauAndersonFinalProject.createSimulation(aPrefix, Simulation1.SIMULATION1_X_OFFSET,
				Simulation.SIMULATION_Y_OFFSET, Simulation.SIMULATION_WIDTH, Simulation.SIMULATION_HEIGHT,
				Simulation1.SIMULATION1_X_OFFSET, Simulation.SIMULATION_Y_OFFSET);
	}

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ClientArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ClientArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		CLIENT_NAME = ClientArgsProcessor.getClientName(args);
	}
	
	@Override
	protected void setTracing() {
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	public void init(String[] args) {
		setTracing();

		this.processArgs(args);
		// Ideally the prefixes should be main args
		commandProcessor = createSimulation(Simulation1.SIMULATION1_PREFIX);

		// Locate Server
		Registry rmiRegistry = null;
		try {
			rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
		} catch (RemoteException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		}
		// Get server here
		
		try {
			server = (ServerRemoteInterfaceRMI) rmiRegistry.lookup(SERVER_NAME);
			RMIObjectLookedUp.newCase(this, server, SERVER_NAME, rmiRegistry);
		} catch (AccessException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} catch (RemoteException e2) {

			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		// export client to create proxy
		try {
			UnicastRemoteObject.exportObject(this, 0);
		} catch (RemoteException e1) {
			e1.printStackTrace();
		}

		// have the server register the exported client
		try {
			server.registerClient(this);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		
		//NOTE This is just a hacky way of satisfying tests
		ClientRemoteInterfaceGIPC aClient = new ClientRemoteObject();
		clientOutCoupler = new ClientOutCoupler((ServerRemoteInterfaceGIPC) server, aClient, CLIENT_NAME);
		// Add propertyChangeListener
		commandProcessor.addPropertyChangeListener(clientOutCoupler);
		
		System.out.println("added server as a property change listener of client");
	}
	
	
	@Override	
	public void trace(boolean newValue) {
		super.trace(newValue);
		Tracer.showInfo(isTrace());
	}
	
	@Override
	public void experimentInput() {
		long aStartTime = System.currentTimeMillis();
		PerformanceExperimentStarted.newCase(this, aStartTime, NUM_EXPERIMENT_COMMANDS);
		boolean anOldValue = isTrace();
		this.trace(false);
		for (int i = 0; i < NUM_EXPERIMENT_COMMANDS; i++) {
			commandProcessor.setInputString(EXPERIMENT_COMMAND_1);
		
		}
		trace(anOldValue);
		long anEndTime = System.currentTimeMillis();
		PerformanceExperimentEnded.newCase(this, aStartTime, anEndTime, anEndTime - aStartTime, NUM_EXPERIMENT_COMMANDS);
		
	}
	
	@Override
	/*
	 * This override is not really needed, provided here to show that this method
	 * exists.
	 */
	public void delaySends(int aMillisecondDelay) {
		// getDelay() can be used to determine the delay
		// in other parts of the program
		super.delaySends(aMillisecondDelay);
	}
	
	@Override
	/**
	 * Relevant in consistency assignments only 
	 */
	public void atomicBroadcast(boolean newValue) {
		super.atomicBroadcast(newValue);
		commandProcessor.setConnectedToSimulation(!isAtomicBroadcast());
	}

	@Override
	public void inCoupler(String aNewCommand, int proposalNumber) {
		//final int aProposalNumber = proposalNumber;
		System.out.println("recieved broadcased command: "+ aNewCommand);
		ProposalLearnedNotificationReceived.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		commandProcessor.processCommand(aNewCommand);
		ProposedStateSet.newCase(this, CLIENT_NAME, proposalNumber, aNewCommand);
		System.out.println("executed command");
		
	}
	
	@Override
	/*
	 * You will need to delay not command input but sends(non-Javadoc)
	 */
	public void simulationCommand(String aCommand) {
		//long aDelay = getDelay(); 
		//if (aDelay > 0) {
		//	ThreadSupport.sleep(aDelay);
		//}
		commandProcessor.setInputString(aCommand); // all commands go to the first command window
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}
	
	@Override
	public void localProcessingOnly(boolean newValue) {
		super.localProcessingOnly(newValue);
		if (isLocalProcessingOnly()) {
			commandProcessor.removePropertyChangeListener(clientOutCoupler);
			
		} else {
			commandProcessor.addPropertyChangeListener(clientOutCoupler);
			
		}
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="36" _type="Insert" date="Thu Mar 31 10:37:42 EDT 2022" docASTNodeCount="915" docActiveCodeLength="6881" docExpressionCount="643" docLength="7768" length="3" offset="7756" starttimestamp="1648737385020" timestamp="77945">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="38" _type="Replace" date="Thu Mar 31 10:37:43 EDT 2022" docASTNodeCount="929" docActiveCodeLength="6990" docExpressionCount="650" docLength="7877" endLine="227" insertionLength="110" int_docASTNodeCount="915" int_docActiveCodeLength="6880" int_docExpressionCount="643" int_docLength="7767" length="1" offset="7758" startLine="227" starttimestamp="1648737385020" timestamp="78724">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	public void broadcastMetaState(boolean broadcast) {
		broadcastIPCMechanism = broadcast;
		
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="42" _type="Insert" date="Thu Mar 31 10:37:45 EDT 2022" docASTNodeCount="929" docActiveCodeLength="6993" docExpressionCount="650" docLength="7880" length="3" offset="7756" starttimestamp="1648737385020" timestamp="80129">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="48" _type="PauseCommand" date="Thu Mar 31 10:37:58 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="93362">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[12516]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="49" _type="SelectTextCommand" caretOffset="5804" date="Thu Mar 31 10:37:58 EDT 2022" end="5804" start="5800" starttimestamp="1648737385020" timestamp="93649" />
  <Command __id="51" _type="PauseCommand" date="Thu Mar 31 10:38:28 EDT 2022" range="20s-30s" starttimestamp="1648737385020" timestamp="123595">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[29946]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="50" _type="MoveCaretCommand" caretOffset="7252" date="Thu Mar 31 10:38:28 EDT 2022" docOffset="8786" starttimestamp="1648737385020" timestamp="123595" />
  <Command __id="53" _type="PauseCommand" date="Thu Mar 31 10:38:29 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="124945">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1350]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="47" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:37:58 EDT 2022" docASTNodeCount="1165" docActiveCodeLength="8446" docExpressionCount="834" docLength="9375" projectName="A5" starttimestamp="1648737385020" timestamp="93362">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="52" _type="MoveCaretCommand" caretOffset="7256" date="Thu Mar 31 10:38:29 EDT 2022" docOffset="8790" starttimestamp="1648737385020" timestamp="124945" />
  <Command __id="55" _type="InsertStringCommand" date="Thu Mar 31 10:38:30 EDT 2022" starttimestamp="1648737385020" timestamp="125211" timestamp2="125211">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="57" _type="InsertStringCommand" date="Thu Mar 31 10:38:30 EDT 2022" starttimestamp="1648737385020" timestamp="125546" timestamp2="125546">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="59" _type="InsertStringCommand" date="Thu Mar 31 10:38:31 EDT 2022" starttimestamp="1648737385020" timestamp="126120" timestamp2="126120">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="61" _type="InsertStringCommand" date="Thu Mar 31 10:38:31 EDT 2022" starttimestamp="1648737385020" timestamp="126306" timestamp2="126306">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="63" _type="InsertStringCommand" date="Thu Mar 31 10:38:31 EDT 2022" starttimestamp="1648737385020" timestamp="126475" timestamp2="126475">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="65" _type="InsertStringCommand" date="Thu Mar 31 10:38:31 EDT 2022" starttimestamp="1648737385020" timestamp="126603" timestamp2="126603">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="67" _type="InsertStringCommand" date="Thu Mar 31 10:38:31 EDT 2022" starttimestamp="1648737385020" timestamp="126714" timestamp2="126714">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="69" _type="InsertStringCommand" date="Thu Mar 31 10:38:31 EDT 2022" starttimestamp="1648737385020" timestamp="126817" timestamp2="126817">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="71" _type="InsertStringCommand" date="Thu Mar 31 10:38:31 EDT 2022" starttimestamp="1648737385020" timestamp="126920" timestamp2="126920">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="73" _type="InsertStringCommand" date="Thu Mar 31 10:38:32 EDT 2022" starttimestamp="1648737385020" timestamp="127066" timestamp2="127066">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="75" _type="InsertStringCommand" date="Thu Mar 31 10:38:32 EDT 2022" starttimestamp="1648737385020" timestamp="127164" timestamp2="127164">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="77" _type="InsertStringCommand" date="Thu Mar 31 10:38:32 EDT 2022" starttimestamp="1648737385020" timestamp="127220" timestamp2="127220">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="79" _type="InsertStringCommand" date="Thu Mar 31 10:38:32 EDT 2022" starttimestamp="1648737385020" timestamp="127316" timestamp2="127316">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="81" _type="InsertStringCommand" date="Thu Mar 31 10:38:32 EDT 2022" starttimestamp="1648737385020" timestamp="127449" timestamp2="127449">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="84" _type="PauseCommand" date="Thu Mar 31 10:38:33 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="128495">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1046]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="83" _type="InsertStringCommand" date="Thu Mar 31 10:38:33 EDT 2022" starttimestamp="1648737385020" timestamp="128495" timestamp2="128495">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="86" _type="InsertStringCommand" date="Thu Mar 31 10:38:33 EDT 2022" starttimestamp="1648737385020" timestamp="128600" timestamp2="128600">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="88" _type="InsertStringCommand" date="Thu Mar 31 10:38:33 EDT 2022" starttimestamp="1648737385020" timestamp="128832" timestamp2="128832">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="90" _type="InsertStringCommand" date="Thu Mar 31 10:38:33 EDT 2022" starttimestamp="1648737385020" timestamp="128961" timestamp2="128961">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="92" _type="InsertStringCommand" date="Thu Mar 31 10:38:34 EDT 2022" starttimestamp="1648737385020" timestamp="129293" timestamp2="129293">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="94" _type="InsertStringCommand" date="Thu Mar 31 10:38:34 EDT 2022" starttimestamp="1648737385020" timestamp="129448" timestamp2="129448">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="96" _type="InsertStringCommand" date="Thu Mar 31 10:38:34 EDT 2022" starttimestamp="1648737385020" timestamp="129606" timestamp2="129606">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="98" _type="InsertStringCommand" date="Thu Mar 31 10:38:34 EDT 2022" starttimestamp="1648737385020" timestamp="129676" timestamp2="129676">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="100" _type="InsertStringCommand" date="Thu Mar 31 10:38:34 EDT 2022" starttimestamp="1648737385020" timestamp="129770" timestamp2="129770">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="102" _type="InsertStringCommand" date="Thu Mar 31 10:38:34 EDT 2022" starttimestamp="1648737385020" timestamp="129897" timestamp2="129897">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="104" _type="InsertStringCommand" date="Thu Mar 31 10:38:35 EDT 2022" starttimestamp="1648737385020" timestamp="130695" timestamp2="130695">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="106" _type="InsertStringCommand" date="Thu Mar 31 10:38:35 EDT 2022" starttimestamp="1648737385020" timestamp="130826" timestamp2="130826">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="108" _type="InsertStringCommand" date="Thu Mar 31 10:38:35 EDT 2022" starttimestamp="1648737385020" timestamp="130898" timestamp2="130898">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="110" _type="InsertStringCommand" date="Thu Mar 31 10:38:36 EDT 2022" starttimestamp="1648737385020" timestamp="131007" timestamp2="131007">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="112" _type="InsertStringCommand" date="Thu Mar 31 10:38:36 EDT 2022" starttimestamp="1648737385020" timestamp="131197" timestamp2="131197">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="114" _type="InsertStringCommand" date="Thu Mar 31 10:38:36 EDT 2022" starttimestamp="1648737385020" timestamp="131675" timestamp2="131675">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="117" _type="PauseCommand" date="Thu Mar 31 10:38:38 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="133558">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1883]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="116" _type="InsertStringCommand" date="Thu Mar 31 10:38:38 EDT 2022" starttimestamp="1648737385020" timestamp="133558" timestamp2="133558">
    <data><![CDATA[S]]></data>
  </Command>
  <Command __id="119" _type="InsertStringCommand" date="Thu Mar 31 10:38:38 EDT 2022" starttimestamp="1648737385020" timestamp="133771" timestamp2="133771">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="121" _type="InsertStringCommand" date="Thu Mar 31 10:38:38 EDT 2022" starttimestamp="1648737385020" timestamp="133978" timestamp2="133978">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="123" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134021" timestamp2="134021">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="125" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134114" timestamp2="134114">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="127" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134247" timestamp2="134247">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="129" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134309" timestamp2="134309">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="131" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134447" timestamp2="134447">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="133" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134663" timestamp2="134663">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="135" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134845" timestamp2="134845">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="137" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134890" timestamp2="134890">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="139" _type="InsertStringCommand" date="Thu Mar 31 10:38:39 EDT 2022" starttimestamp="1648737385020" timestamp="134957" timestamp2="134957">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="141" _type="InsertStringCommand" date="Thu Mar 31 10:38:40 EDT 2022" starttimestamp="1648737385020" timestamp="135456" timestamp2="135456">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="143" _type="InsertStringCommand" date="Thu Mar 31 10:38:40 EDT 2022" starttimestamp="1648737385020" timestamp="135762" timestamp2="135762">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="145" _type="InsertStringCommand" date="Thu Mar 31 10:38:40 EDT 2022" starttimestamp="1648737385020" timestamp="135965" timestamp2="135965">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="147" _type="InsertStringCommand" date="Thu Mar 31 10:38:41 EDT 2022" starttimestamp="1648737385020" timestamp="136050" timestamp2="136050">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="149" _type="InsertStringCommand" date="Thu Mar 31 10:38:41 EDT 2022" starttimestamp="1648737385020" timestamp="136321" timestamp2="136321">
    <data><![CDATA[,]]></data>
  </Command>
  <Command __id="151" _type="InsertStringCommand" date="Thu Mar 31 10:38:41 EDT 2022" starttimestamp="1648737385020" timestamp="136444" timestamp2="136444">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="153" _type="PauseCommand" date="Thu Mar 31 10:38:48 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="143449">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[7004]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="152" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Mar 31 10:38:48 EDT 2022" starttimestamp="1648737385020" timestamp="143448" />
  <Command __id="155" _type="InsertStringCommand" date="Thu Mar 31 10:38:49 EDT 2022" starttimestamp="1648737385020" timestamp="144160" timestamp2="144160">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="157" _type="InsertStringCommand" date="Thu Mar 31 10:38:49 EDT 2022" starttimestamp="1648737385020" timestamp="144248" timestamp2="144248">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="158" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Mar 31 10:38:49 EDT 2022" starttimestamp="1648737385020" timestamp="144437" />
  <Command __id="160" _type="InsertStringCommand" date="Thu Mar 31 10:38:49 EDT 2022" starttimestamp="1648737385020" timestamp="144650" timestamp2="144650">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="162" _type="PauseCommand" date="Thu Mar 31 10:38:51 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="146410">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1760]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="161" _type="MoveCaretCommand" caretOffset="7308" date="Thu Mar 31 10:38:51 EDT 2022" docOffset="8842" starttimestamp="1648737385020" timestamp="146410" />
  <Command __id="164" _type="PauseCommand" date="Thu Mar 31 10:39:33 EDT 2022" range="30s-1m" starttimestamp="1648737385020" timestamp="188325">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[41915]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="163" _type="SelectTextCommand" caretOffset="7122" date="Thu Mar 31 10:39:33 EDT 2022" end="7256" start="7122" starttimestamp="1648737385020" timestamp="188325" />
  <Command __id="165" _type="CopyCommand" date="Thu Mar 31 10:39:33 EDT 2022" starttimestamp="1648737385020" timestamp="188642" />
  <Command __id="167" _type="PauseCommand" date="Thu Mar 31 10:39:36 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="191460">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2818]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="166" _type="SelectTextCommand" caretOffset="7262" date="Thu Mar 31 10:39:36 EDT 2022" end="7319" start="7262" starttimestamp="1648737385020" timestamp="191460" />
  <Command __id="169" _type="PasteCommand" date="Thu Mar 31 10:39:36 EDT 2022" starttimestamp="1648737385020" timestamp="191723" />
  <Command __id="171" _type="PauseCommand" date="Thu Mar 31 10:39:38 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="193169">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1446]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="170" _type="MoveCaretCommand" caretOffset="7299" date="Thu Mar 31 10:39:38 EDT 2022" docOffset="8833" starttimestamp="1648737385020" timestamp="193169" />
  <Command __id="173" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:39:38 EDT 2022" starttimestamp="1648737385020" timestamp="193524" />
  <Command __id="175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:39:38 EDT 2022" starttimestamp="1648737385020" timestamp="193747" />
  <Command __id="177" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:39:38 EDT 2022" starttimestamp="1648737385020" timestamp="193925" />
  <Command __id="179" _type="InsertStringCommand" date="Thu Mar 31 10:39:39 EDT 2022" starttimestamp="1648737385020" timestamp="194513" timestamp2="194513">
    <data><![CDATA[T]]></data>
  </Command>
  <Command __id="181" _type="InsertStringCommand" date="Thu Mar 31 10:39:39 EDT 2022" starttimestamp="1648737385020" timestamp="194677" timestamp2="194677">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="183" _type="InsertStringCommand" date="Thu Mar 31 10:39:39 EDT 2022" starttimestamp="1648737385020" timestamp="194758" timestamp2="194758">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="185" _type="InsertStringCommand" date="Thu Mar 31 10:39:39 EDT 2022" starttimestamp="1648737385020" timestamp="194866" timestamp2="194866">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="187" _type="InsertStringCommand" date="Thu Mar 31 10:39:40 EDT 2022" starttimestamp="1648737385020" timestamp="195247" timestamp2="195247">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="189" _type="PauseCommand" date="Thu Mar 31 10:39:44 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="199087">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3840]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="188" _type="MoveCaretCommand" caretOffset="7343" date="Thu Mar 31 10:39:44 EDT 2022" docOffset="8877" starttimestamp="1648737385020" timestamp="199087" />
  <Command __id="190" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Mar 31 10:39:44 EDT 2022" starttimestamp="1648737385020" timestamp="199563" />
  <Command __id="192" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:39:44 EDT 2022" starttimestamp="1648737385020" timestamp="199965" />
  <Command __id="194" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:39:45 EDT 2022" starttimestamp="1648737385020" timestamp="200130" />
  <Command __id="196" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:39:45 EDT 2022" starttimestamp="1648737385020" timestamp="200407" />
  <Command __id="198" _type="InsertStringCommand" date="Thu Mar 31 10:39:45 EDT 2022" starttimestamp="1648737385020" timestamp="200676" timestamp2="200676">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="200" _type="InsertStringCommand" date="Thu Mar 31 10:39:45 EDT 2022" starttimestamp="1648737385020" timestamp="200786" timestamp2="200786">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="202" _type="InsertStringCommand" date="Thu Mar 31 10:39:45 EDT 2022" starttimestamp="1648737385020" timestamp="200904" timestamp2="200904">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="204" _type="InsertStringCommand" date="Thu Mar 31 10:39:46 EDT 2022" starttimestamp="1648737385020" timestamp="201057" timestamp2="201057">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="206" _type="PauseCommand" date="Thu Mar 31 10:39:47 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="202166">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1109]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="205" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:39:47 EDT 2022" starttimestamp="1648737385020" timestamp="202166" />
  <Command __id="207" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:39:47 EDT 2022" starttimestamp="1648737385020" timestamp="202306" />
  <Command __id="208" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:39:47 EDT 2022" starttimestamp="1648737385020" timestamp="202400" />
  <Command __id="210" _type="PauseCommand" date="Thu Mar 31 10:39:53 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="208553">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6153]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="209" _type="MoveCaretCommand" caretOffset="7256" date="Thu Mar 31 10:39:53 EDT 2022" docOffset="8790" starttimestamp="1648737385020" timestamp="208553" />
  <Command __id="212" _type="PauseCommand" date="Thu Mar 31 10:39:59 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="214228">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5675]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="211" _type="ShellCommand" date="Thu Mar 31 10:39:59 EDT 2022" starttimestamp="1648737385020" timestamp="214228" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="213" _type="ShellCommand" date="Thu Mar 31 10:39:59 EDT 2022" starttimestamp="1648737385020" timestamp="214402" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="221" _type="SelectTextCommand" caretOffset="1134" date="Thu Mar 31 10:39:59 EDT 2022" end="1134" start="1125" starttimestamp="1648737385020" timestamp="214855" />
  <Command __id="223" _type="PauseCommand" date="Thu Mar 31 10:40:01 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="216552">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1697]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="222" _type="MoveCaretCommand" caretOffset="1169" date="Thu Mar 31 10:40:01 EDT 2022" docOffset="1409" starttimestamp="1648737385020" timestamp="216552" />
  <Command __id="225" _type="InsertStringCommand" date="Thu Mar 31 10:40:02 EDT 2022" starttimestamp="1648737385020" timestamp="217060" timestamp2="217060">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="227" _type="InsertStringCommand" date="Thu Mar 31 10:40:02 EDT 2022" starttimestamp="1648737385020" timestamp="217196" timestamp2="217196">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="229" _type="InsertStringCommand" date="Thu Mar 31 10:40:02 EDT 2022" starttimestamp="1648737385020" timestamp="217269" timestamp2="217269">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="231" _type="InsertStringCommand" date="Thu Mar 31 10:40:02 EDT 2022" starttimestamp="1648737385020" timestamp="217416" timestamp2="217416">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="233" _type="InsertStringCommand" date="Thu Mar 31 10:40:02 EDT 2022" starttimestamp="1648737385020" timestamp="217535" timestamp2="217535">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="235" _type="InsertStringCommand" date="Thu Mar 31 10:40:02 EDT 2022" starttimestamp="1648737385020" timestamp="217618" timestamp2="217618">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="237" _type="InsertStringCommand" date="Thu Mar 31 10:40:02 EDT 2022" starttimestamp="1648737385020" timestamp="217862" timestamp2="217862">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="239" _type="InsertStringCommand" date="Thu Mar 31 10:40:02 EDT 2022" starttimestamp="1648737385020" timestamp="217966" timestamp2="217966">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="241" _type="InsertStringCommand" date="Thu Mar 31 10:40:03 EDT 2022" starttimestamp="1648737385020" timestamp="218207" timestamp2="218207">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="243" _type="InsertStringCommand" date="Thu Mar 31 10:40:03 EDT 2022" starttimestamp="1648737385020" timestamp="218365" timestamp2="218365">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="245" _type="InsertStringCommand" date="Thu Mar 31 10:40:03 EDT 2022" starttimestamp="1648737385020" timestamp="218532" timestamp2="218532">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="247" _type="InsertStringCommand" date="Thu Mar 31 10:40:03 EDT 2022" starttimestamp="1648737385020" timestamp="218606" timestamp2="218606">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="249" _type="InsertStringCommand" date="Thu Mar 31 10:40:03 EDT 2022" starttimestamp="1648737385020" timestamp="218678" timestamp2="218678">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="251" _type="InsertStringCommand" date="Thu Mar 31 10:40:03 EDT 2022" starttimestamp="1648737385020" timestamp="218859" timestamp2="218859">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="253" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:04 EDT 2022" starttimestamp="1648737385020" timestamp="219323" />
  <Command __id="255" _type="InsertStringCommand" date="Thu Mar 31 10:40:04 EDT 2022" starttimestamp="1648737385020" timestamp="219416" timestamp2="219416">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="257" _type="InsertStringCommand" date="Thu Mar 31 10:40:04 EDT 2022" starttimestamp="1648737385020" timestamp="219704" timestamp2="219704">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="259" _type="InsertStringCommand" date="Thu Mar 31 10:40:05 EDT 2022" starttimestamp="1648737385020" timestamp="219996" timestamp2="219996">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="261" _type="InsertStringCommand" date="Thu Mar 31 10:40:05 EDT 2022" starttimestamp="1648737385020" timestamp="220168" timestamp2="220168">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="263" _type="InsertStringCommand" date="Thu Mar 31 10:40:05 EDT 2022" starttimestamp="1648737385020" timestamp="220363" timestamp2="220363">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="265" _type="InsertStringCommand" date="Thu Mar 31 10:40:05 EDT 2022" starttimestamp="1648737385020" timestamp="220456" timestamp2="220456">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="267" _type="InsertStringCommand" date="Thu Mar 31 10:40:05 EDT 2022" starttimestamp="1648737385020" timestamp="220610" timestamp2="220610">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="269" _type="InsertStringCommand" date="Thu Mar 31 10:40:05 EDT 2022" starttimestamp="1648737385020" timestamp="220679" timestamp2="220679">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="271" _type="InsertStringCommand" date="Thu Mar 31 10:40:05 EDT 2022" starttimestamp="1648737385020" timestamp="220755" timestamp2="220755">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="273" _type="InsertStringCommand" date="Thu Mar 31 10:40:05 EDT 2022" starttimestamp="1648737385020" timestamp="220816" timestamp2="220816">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="275" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:06 EDT 2022" starttimestamp="1648737385020" timestamp="221100" />
  <Command __id="277" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:06 EDT 2022" starttimestamp="1648737385020" timestamp="221249" />
  <Command __id="279" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:06 EDT 2022" starttimestamp="1648737385020" timestamp="221408" />
  <Command __id="281" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:06 EDT 2022" starttimestamp="1648737385020" timestamp="221555" />
  <Command __id="283" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:06 EDT 2022" starttimestamp="1648737385020" timestamp="221719" />
  <Command __id="285" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:06 EDT 2022" starttimestamp="1648737385020" timestamp="221856" />
  <Command __id="287" _type="InsertStringCommand" date="Thu Mar 31 10:40:07 EDT 2022" starttimestamp="1648737385020" timestamp="221996" timestamp2="221996">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="289" _type="InsertStringCommand" date="Thu Mar 31 10:40:07 EDT 2022" starttimestamp="1648737385020" timestamp="222141" timestamp2="222141">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="291" _type="InsertStringCommand" date="Thu Mar 31 10:40:07 EDT 2022" starttimestamp="1648737385020" timestamp="222337" timestamp2="222337">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="293" _type="InsertStringCommand" date="Thu Mar 31 10:40:07 EDT 2022" starttimestamp="1648737385020" timestamp="222391" timestamp2="222391">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="295" _type="InsertStringCommand" date="Thu Mar 31 10:40:07 EDT 2022" starttimestamp="1648737385020" timestamp="222460" timestamp2="222460">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="297" _type="InsertStringCommand" date="Thu Mar 31 10:40:07 EDT 2022" starttimestamp="1648737385020" timestamp="222520" timestamp2="222520">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="298" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:40:07 EDT 2022" starttimestamp="1648737385020" timestamp="222922" />
  <Command __id="299" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:40:08 EDT 2022" starttimestamp="1648737385020" timestamp="223012" />
  <Command __id="300" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:40:08 EDT 2022" starttimestamp="1648737385020" timestamp="223095" />
  <Command __id="302" _type="PauseCommand" date="Thu Mar 31 10:40:10 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="225157">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2062]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="301" _type="ShellCommand" date="Thu Mar 31 10:40:10 EDT 2022" starttimestamp="1648737385020" timestamp="225157" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="304" _type="PauseCommand" date="Thu Mar 31 10:40:11 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="226394">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1237]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="308" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:40:15 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="230629" type="Run" />
  <Command __id="310" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:40:15 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="230630" type="Run" />
  <Command __id="312" _type="PauseCommand" date="Thu Mar 31 10:40:17 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="232550">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1920]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="311" _type="ShellCommand" date="Thu Mar 31 10:40:17 EDT 2022" starttimestamp="1648737385020" timestamp="232550" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="314" _type="PauseCommand" date="Thu Mar 31 10:40:20 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="235071">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2521]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="313" _type="ConsoleOutput" date="Thu Mar 31 10:40:20 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="235071" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Mar 31 10:40:20 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@28e72f44 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Thu Mar 31 10:40:20 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="316" _type="PauseCommand" date="Thu Mar 31 10:40:21 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="236908">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1837]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="315" _type="ConsoleOutput" date="Thu Mar 31 10:40:21 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="236908" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Thu Mar 31 10:40:21 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Mar 31 10:40:21 EDT 2022
End O(n2) inter- and intra class method calls:Thu Mar 31 10:40:21 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:80¶Running second pass checks Thu Mar 31 10:40:21 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Mar 31 10:40:21 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Thu Mar 31 10:40:2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="317" _type="ConsoleOutput" date="Thu Mar 31 10:40:22 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="237876" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Mar 31 10:40:22 EDT 2022
Generating checks:Thu Mar 31 10:40:22 EDT 2022
Finished Generating checks:Thu Mar 31 10:40:22 EDT 2022
Generating externals:Thu Mar 31 10:40:22 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Thu Mar 31 10:40:2"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Thu Mar 31 10:40:22 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Thu Mar 31 10:40:2"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Thu Mar 31 10:40:2"), Diff(DELETE,"1"), Diff(INSERT,"2"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="318" _type="ConsoleOutput" date="Thu Mar 31 10:40:23 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="238147" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Mar 31 10:40:23 EDT 2022
Test execution time (ms):3105
Test execution time (ms):19
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Thu Mar 31 10:40:22 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Thu Mar 31 10:40:2"), Diff(DELETE,"2"), Diff(INSERT,"3"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Thu Mar 31 10:40:22 EDT 2022¶Generating externals:Thu Mar 31 10:40:22 EDT 2022"), Diff(INSERT,"Test execution time (ms):3105¶Test execution time (ms):19"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="319" _type="ConsoleOutput" date="Thu Mar 31 10:40:23 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="238221" type="ConsoleOutput">
    <outputString><![CDATA[A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):31
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Mar 31 10:40:23 EDT 2022¶Test execution time (ms):3105"), Diff(INSERT,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(INSERT,"3"), Diff(EQUAL,"1"), Diff(DELETE,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="320" _type="ConsoleOutput" date="Thu Mar 31 10:40:23 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="238344" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):80

Test execution time (ms):9

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (236)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (36)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (302)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):31"), Diff(INSERT,"Test execution time (ms):80¶¶Test execution time (ms):9¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (36)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (302)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="322" _type="PauseCommand" date="Thu Mar 31 10:40:25 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="240048">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1704]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="321" _type="ConsoleOutput" date="Thu Mar 31 10:40:25 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="240048" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@1c6284d2 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):80¶¶Test execution time (ms):9¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ Or"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedS"), Diff(EQUAL,"ig"), Diff(DELETE,"i"), Diff(EQUAL,"na"), Diff(DELETE,"lSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (36)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (302)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)"), Diff(INSERT,"tures@1c6284d2 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="324" _type="PauseCommand" date="Thu Mar 31 10:40:33 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="248291">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8243]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="323" _type="ShellCommand" date="Thu Mar 31 10:40:33 EDT 2022" starttimestamp="1648737385020" timestamp="248291" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="54" _type="Insert" date="Thu Mar 31 10:38:30 EDT 2022" docASTNodeCount="1174" docActiveCodeLength="8499" docExpressionCount="837" docLength="9428" length="53" offset="8790" repeat="48" starttimestamp="1648737385020" timestamp="125200" timestamp2="136441">
    <text><![CDATA[
	
	public void fakeMethodThree(String stringOne, )]]></text>
  </DocumentChange>
  <DocumentChange __id="154" _type="Insert" date="Thu Mar 31 10:38:49 EDT 2022" docASTNodeCount="1174" docActiveCodeLength="8509" docExpressionCount="837" docLength="9438" length="10" offset="8843" repeat="3" starttimestamp="1648737385020" timestamp="144154" timestamp2="144641">
    <text><![CDATA[ {
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="168" _type="Replace" date="Thu Mar 31 10:39:36 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="8552" docExpressionCount="841" docLength="9515" endLine="283" insertionLength="135" int_docASTNodeCount="1165" int_docActiveCodeLength="8451" int_docExpressionCount="834" int_docLength="9380" length="58" offset="8795" startLine="281" starttimestamp="1648737385020" timestamp="191705">
    <deletedText><![CDATA[	public void fakeMethodThree(String stringOne, ) {
		
	}]]></deletedText>
    <insertedText><![CDATA[	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="172" _type="Delete" date="Thu Mar 31 10:39:38 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="8549" docExpressionCount="841" docLength="9512" endLine="282" length="3" offset="8830" repeat="3" startLine="282" starttimestamp="1648737385020" timestamp="193521" timestamp2="193922">
    <text><![CDATA[Two]]></text>
  </DocumentChange>
  <DocumentChange __id="178" _type="Insert" date="Thu Mar 31 10:39:39 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="8554" docExpressionCount="841" docLength="9517" length="5" offset="8830" repeat="5" starttimestamp="1648737385020" timestamp="194506" timestamp2="195238">
    <text><![CDATA[Three]]></text>
  </DocumentChange>
  <DocumentChange __id="191" _type="Delete" date="Thu Mar 31 10:39:44 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="8551" docExpressionCount="841" docLength="9514" endLine="282" length="3" offset="8875" repeat="3" startLine="282" starttimestamp="1648737385020" timestamp="199962" timestamp2="200404">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="197" _type="Insert" date="Thu Mar 31 10:39:45 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="8555" docExpressionCount="841" docLength="9518" length="4" offset="8875" repeat="4" starttimestamp="1648737385020" timestamp="200670" timestamp2="201053">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <Command __id="214" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:39:59 EDT 2022" docASTNodeCount="163" docActiveCodeLength="1345" docExpressionCount="94" docLength="1345" projectName="A5" starttimestamp="1648737385020" timestamp="214567">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <DocumentChange __id="215" _type="Insert" date="Thu Mar 31 10:39:59 EDT 2022" docASTNodeCount="174" docActiveCodeLength="1423" docExpressionCount="99" docLength="1423" length="78" offset="1332" repeat="6" starttimestamp="1648737385020" timestamp="214652" timestamp2="214659">
    <text><![CDATA[

	void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client);]]></text>
  </DocumentChange>
  <DocumentChange __id="224" _type="Insert" date="Thu Mar 31 10:40:02 EDT 2022" docASTNodeCount="175" docActiveCodeLength="1437" docExpressionCount="100" docLength="1437" length="14" offset="1409" repeat="14" starttimestamp="1648737385020" timestamp="217053" timestamp2="218853">
    <text><![CDATA[ throws Remotr]]></text>
  </DocumentChange>
  <DocumentChange __id="252" _type="Delete" date="Thu Mar 31 10:40:04 EDT 2022" docASTNodeCount="175" docActiveCodeLength="1436" docExpressionCount="100" docLength="1436" endLine="31" length="1" offset="1422" startLine="31" starttimestamp="1648737385020" timestamp="219318">
    <text><![CDATA[r]]></text>
  </DocumentChange>
  <DocumentChange __id="254" _type="Insert" date="Thu Mar 31 10:40:04 EDT 2022" docASTNodeCount="175" docActiveCodeLength="1446" docExpressionCount="100" docLength="1446" length="10" offset="1422" repeat="10" starttimestamp="1648737385020" timestamp="219409" timestamp2="220811">
    <text><![CDATA[eExcdption]]></text>
  </DocumentChange>
  <DocumentChange __id="274" _type="Delete" date="Thu Mar 31 10:40:06 EDT 2022" docASTNodeCount="175" docActiveCodeLength="1440" docExpressionCount="100" docLength="1440" endLine="31" length="6" offset="1426" repeat="6" startLine="31" starttimestamp="1648737385020" timestamp="221095" timestamp2="221851">
    <text><![CDATA[dption]]></text>
  </DocumentChange>
  <DocumentChange __id="286" _type="Insert" date="Thu Mar 31 10:40:07 EDT 2022" docASTNodeCount="175" docActiveCodeLength="1446" docExpressionCount="100" docLength="1446" length="6" offset="1426" repeat="6" starttimestamp="1648737385020" timestamp="221991" timestamp2="222516">
    <text><![CDATA[eption]]></text>
  </DocumentChange>
  <Command __id="326" _type="PauseCommand" date="Thu Mar 31 10:40:37 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="252591">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4300]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="327" _type="MoveCaretCommand" caretOffset="7256" date="Thu Mar 31 10:40:37 EDT 2022" docOffset="8790" starttimestamp="1648737385020" timestamp="252752" />
  <Command __id="329" _type="PauseCommand" date="Thu Mar 31 10:40:40 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="255124">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2372]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="325" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:40:37 EDT 2022" docASTNodeCount="1180" docActiveCodeLength="8555" docExpressionCount="841" docLength="9518" projectName="A5" starttimestamp="1648737385020" timestamp="252591">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶"), Diff(INSERT,"	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶"), Diff(EQUAL,"	}¶¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}

	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="328" _type="MoveCaretCommand" caretOffset="7399" date="Thu Mar 31 10:40:40 EDT 2022" docOffset="8933" starttimestamp="1648737385020" timestamp="255124" />
  <Command __id="331" _type="InsertStringCommand" date="Thu Mar 31 10:40:40 EDT 2022" starttimestamp="1648737385020" timestamp="255342" timestamp2="255342">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="333" _type="InsertStringCommand" date="Thu Mar 31 10:40:40 EDT 2022" starttimestamp="1648737385020" timestamp="255600" timestamp2="255600">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="336" _type="PauseCommand" date="Thu Mar 31 10:40:41 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="256872">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1272]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="335" _type="InsertStringCommand" date="Thu Mar 31 10:40:41 EDT 2022" starttimestamp="1648737385020" timestamp="256872" timestamp2="256872">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="338" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="256993" timestamp2="256993">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="340" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257065" timestamp2="257065">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="342" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257228" timestamp2="257228">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="344" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257282" timestamp2="257282">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="346" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257369" timestamp2="257369">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="348" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257529" timestamp2="257529">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="350" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257668" timestamp2="257668">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="352" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257751" timestamp2="257751">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="354" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257824" timestamp2="257824">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="356" _type="InsertStringCommand" date="Thu Mar 31 10:40:42 EDT 2022" starttimestamp="1648737385020" timestamp="257901" timestamp2="257901">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="358" _type="InsertStringCommand" date="Thu Mar 31 10:40:43 EDT 2022" starttimestamp="1648737385020" timestamp="258021" timestamp2="258021">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="361" _type="PauseCommand" date="Thu Mar 31 10:40:44 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="259350">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1329]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="360" _type="InsertStringCommand" date="Thu Mar 31 10:40:44 EDT 2022" starttimestamp="1648737385020" timestamp="259350" timestamp2="259350">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="363" _type="InsertStringCommand" date="Thu Mar 31 10:40:44 EDT 2022" starttimestamp="1648737385020" timestamp="259479" timestamp2="259479">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="365" _type="InsertStringCommand" date="Thu Mar 31 10:40:44 EDT 2022" starttimestamp="1648737385020" timestamp="259660" timestamp2="259660">
    <data><![CDATA[k]]></data>
  </Command>
  <Command __id="367" _type="InsertStringCommand" date="Thu Mar 31 10:40:44 EDT 2022" starttimestamp="1648737385020" timestamp="259772" timestamp2="259772">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="369" _type="InsertStringCommand" date="Thu Mar 31 10:40:45 EDT 2022" starttimestamp="1648737385020" timestamp="260113" timestamp2="260113">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="371" _type="InsertStringCommand" date="Thu Mar 31 10:40:45 EDT 2022" starttimestamp="1648737385020" timestamp="260261" timestamp2="260261">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="373" _type="InsertStringCommand" date="Thu Mar 31 10:40:45 EDT 2022" starttimestamp="1648737385020" timestamp="260433" timestamp2="260433">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="375" _type="InsertStringCommand" date="Thu Mar 31 10:40:45 EDT 2022" starttimestamp="1648737385020" timestamp="260465" timestamp2="260465">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="377" _type="InsertStringCommand" date="Thu Mar 31 10:40:45 EDT 2022" starttimestamp="1648737385020" timestamp="260571" timestamp2="260571">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="379" _type="InsertStringCommand" date="Thu Mar 31 10:40:45 EDT 2022" starttimestamp="1648737385020" timestamp="260665" timestamp2="260665">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="381" _type="PauseCommand" date="Thu Mar 31 10:40:48 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="263464">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2799]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="380" _type="SelectTextCommand" caretOffset="7262" date="Thu Mar 31 10:40:48 EDT 2022" end="7399" start="7262" starttimestamp="1648737385020" timestamp="263464" />
  <Command __id="382" _type="CopyCommand" date="Thu Mar 31 10:40:48 EDT 2022" starttimestamp="1648737385020" timestamp="263659" />
  <Command __id="384" _type="PauseCommand" date="Thu Mar 31 10:40:49 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="264973">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[1314]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="383" _type="SelectTextCommand" caretOffset="7405" date="Thu Mar 31 10:40:49 EDT 2022" end="7429" start="7405" starttimestamp="1648737385020" timestamp="264973" />
  <Command __id="386" _type="PasteCommand" date="Thu Mar 31 10:40:50 EDT 2022" starttimestamp="1648737385020" timestamp="265210" />
  <Command __id="388" _type="PauseCommand" date="Thu Mar 31 10:40:51 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="266415">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1205]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="387" _type="MoveCaretCommand" caretOffset="7444" date="Thu Mar 31 10:40:51 EDT 2022" docOffset="8978" starttimestamp="1648737385020" timestamp="266415" />
  <Command __id="390" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:51 EDT 2022" starttimestamp="1648737385020" timestamp="266674" />
  <Command __id="392" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:51 EDT 2022" starttimestamp="1648737385020" timestamp="266816" />
  <Command __id="394" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:51 EDT 2022" starttimestamp="1648737385020" timestamp="266954" />
  <Command __id="396" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:52 EDT 2022" starttimestamp="1648737385020" timestamp="267091" />
  <Command __id="398" _type="InsertStringCommand" date="Thu Mar 31 10:40:52 EDT 2022" starttimestamp="1648737385020" timestamp="267328" timestamp2="267328">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="400" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:52 EDT 2022" starttimestamp="1648737385020" timestamp="267663" />
  <Command __id="402" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:40:52 EDT 2022" starttimestamp="1648737385020" timestamp="267808" />
  <Command __id="404" _type="InsertStringCommand" date="Thu Mar 31 10:40:52 EDT 2022" starttimestamp="1648737385020" timestamp="267955" timestamp2="267955">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="406" _type="InsertStringCommand" date="Thu Mar 31 10:40:53 EDT 2022" starttimestamp="1648737385020" timestamp="268123" timestamp2="268123">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="408" _type="InsertStringCommand" date="Thu Mar 31 10:40:53 EDT 2022" starttimestamp="1648737385020" timestamp="268227" timestamp2="268227">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="410" _type="InsertStringCommand" date="Thu Mar 31 10:40:53 EDT 2022" starttimestamp="1648737385020" timestamp="268561" timestamp2="268561">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="412" _type="PauseCommand" date="Thu Mar 31 10:40:59 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="274620">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[6059]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="411" _type="SelectTextCommand" caretOffset="7462" date="Thu Mar 31 10:40:59 EDT 2022" end="7488" start="7462" starttimestamp="1648737385020" timestamp="274620" />
  <Command __id="414" _type="InsertStringCommand" date="Thu Mar 31 10:40:59 EDT 2022" starttimestamp="1648737385020" timestamp="274838" timestamp2="274838">
    <data><![CDATA[B]]></data>
  </Command>
  <Command __id="416" _type="InsertStringCommand" date="Thu Mar 31 10:41:00 EDT 2022" starttimestamp="1648737385020" timestamp="275581" timestamp2="275581">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="418" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:00 EDT 2022" starttimestamp="1648737385020" timestamp="275976" />
  <Command __id="420" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:01 EDT 2022" starttimestamp="1648737385020" timestamp="276114" />
  <Command __id="422" _type="InsertStringCommand" date="Thu Mar 31 10:41:01 EDT 2022" starttimestamp="1648737385020" timestamp="276207" timestamp2="276207">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="424" _type="InsertStringCommand" date="Thu Mar 31 10:41:01 EDT 2022" starttimestamp="1648737385020" timestamp="276305" timestamp2="276305">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="426" _type="InsertStringCommand" date="Thu Mar 31 10:41:01 EDT 2022" starttimestamp="1648737385020" timestamp="276453" timestamp2="276453">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="428" _type="InsertStringCommand" date="Thu Mar 31 10:41:01 EDT 2022" starttimestamp="1648737385020" timestamp="276636" timestamp2="276636">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="430" _type="InsertStringCommand" date="Thu Mar 31 10:41:01 EDT 2022" starttimestamp="1648737385020" timestamp="276696" timestamp2="276696">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="432" _type="InsertStringCommand" date="Thu Mar 31 10:41:01 EDT 2022" starttimestamp="1648737385020" timestamp="276834" timestamp2="276834">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="434" _type="InsertStringCommand" date="Thu Mar 31 10:41:01 EDT 2022" starttimestamp="1648737385020" timestamp="276966" timestamp2="276966">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="436" _type="InsertStringCommand" date="Thu Mar 31 10:41:02 EDT 2022" starttimestamp="1648737385020" timestamp="277258" timestamp2="277258">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="438" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Mar 31 10:41:03 EDT 2022" starttimestamp="1648737385020" timestamp="278061" />
  <Command __id="440" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Mar 31 10:41:03 EDT 2022" starttimestamp="1648737385020" timestamp="278224" />
  <Command __id="442" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Mar 31 10:41:03 EDT 2022" starttimestamp="1648737385020" timestamp="278348" />
  <Command __id="444" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Mar 31 10:41:03 EDT 2022" starttimestamp="1648737385020" timestamp="278493" />
  <Command __id="446" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Mar 31 10:41:03 EDT 2022" starttimestamp="1648737385020" timestamp="278648" />
  <Command __id="448" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Thu Mar 31 10:41:04 EDT 2022" starttimestamp="1648737385020" timestamp="279040" />
  <DocumentChange __id="330" _type="Insert" date="Thu Mar 31 10:40:40 EDT 2022" docASTNodeCount="1181" docActiveCodeLength="8583" docExpressionCount="841" docLength="9546" length="28" offset="8933" repeat="24" starttimestamp="1648737385020" timestamp="255333" timestamp2="260661">
    <text><![CDATA[
	
	public void fakeMethod]]></text>
  </DocumentChange>
  <DocumentChange __id="385" _type="Replace" date="Thu Mar 31 10:40:50 EDT 2022" docASTNodeCount="1195" docActiveCodeLength="8662" docExpressionCount="848" docLength="9659" endLine="288" insertionLength="138" int_docASTNodeCount="1180" int_docActiveCodeLength="8558" int_docExpressionCount="841" int_docLength="9521" length="25" offset="8938" startLine="287" starttimestamp="1648737385020" timestamp="265198">
    <deletedText><![CDATA[	public void fakeMethod
]]></deletedText>
    <insertedText><![CDATA[	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="389" _type="Delete" date="Thu Mar 31 10:40:51 EDT 2022" docASTNodeCount="1195" docActiveCodeLength="8658" docExpressionCount="848" docLength="9655" endLine="288" length="4" offset="8974" repeat="4" startLine="288" starttimestamp="1648737385020" timestamp="266670" timestamp2="267089">
    <text><![CDATA[hree]]></text>
  </DocumentChange>
  <DocumentChange __id="397" _type="Insert" date="Thu Mar 31 10:40:52 EDT 2022" docASTNodeCount="1195" docActiveCodeLength="8659" docExpressionCount="848" docLength="9656" length="1" offset="8974" starttimestamp="1648737385020" timestamp="267322">
    <text><![CDATA[F]]></text>
  </DocumentChange>
  <DocumentChange __id="399" _type="Delete" date="Thu Mar 31 10:40:52 EDT 2022" docASTNodeCount="1195" docActiveCodeLength="8657" docExpressionCount="848" docLength="9654" endLine="288" length="2" offset="8973" repeat="2" startLine="288" starttimestamp="1648737385020" timestamp="267660" timestamp2="267801">
    <text><![CDATA[TF]]></text>
  </DocumentChange>
  <DocumentChange __id="403" _type="Insert" date="Thu Mar 31 10:40:52 EDT 2022" docASTNodeCount="1195" docActiveCodeLength="8661" docExpressionCount="848" docLength="9658" length="4" offset="8973" repeat="4" starttimestamp="1648737385020" timestamp="267947" timestamp2="268555">
    <text><![CDATA[Four]]></text>
  </DocumentChange>
  <DocumentChange __id="413" _type="Replace" date="Thu Mar 31 10:40:59 EDT 2022" docASTNodeCount="1191" docActiveCodeLength="8636" docExpressionCount="846" docLength="9633" endLine="288" insertionLength="1" int_docASTNodeCount="1191" int_docActiveCodeLength="8635" int_docExpressionCount="846" int_docLength="9632" length="26" offset="8996" startLine="288" starttimestamp="1648737385020" timestamp="274827">
    <deletedText><![CDATA[ClientRemoteInterfaceGIPC ]]></deletedText>
    <insertedText><![CDATA[B]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="415" _type="Insert" date="Thu Mar 31 10:41:00 EDT 2022" docASTNodeCount="1191" docActiveCodeLength="8637" docExpressionCount="846" docLength="9634" length="1" offset="8997" starttimestamp="1648737385020" timestamp="275577">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="417" _type="Delete" date="Thu Mar 31 10:41:00 EDT 2022" docASTNodeCount="1191" docActiveCodeLength="8635" docExpressionCount="846" docLength="9632" endLine="288" length="2" offset="8996" repeat="2" startLine="288" starttimestamp="1648737385020" timestamp="275972" timestamp2="276111">
    <text><![CDATA[Bo]]></text>
  </DocumentChange>
  <DocumentChange __id="421" _type="Insert" date="Thu Mar 31 10:41:01 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="8643" docExpressionCount="847" docLength="9640" length="8" offset="8996" repeat="8" starttimestamp="1648737385020" timestamp="276203" timestamp2="277253">
    <text><![CDATA[boolean ]]></text>
  </DocumentChange>
  <DocumentChange __id="437" _type="Delete" date="Thu Mar 31 10:41:03 EDT 2022" docASTNodeCount="1191" docActiveCodeLength="8637" docExpressionCount="846" docLength="9634" endLine="288" length="6" offset="9004" repeat="6" startLine="288" starttimestamp="1648737385020" timestamp="278055" timestamp2="279034">
    <text><![CDATA[client]]></text>
  </DocumentChange>
  <Command __id="450" _type="PauseCommand" date="Thu Mar 31 10:41:06 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="281437">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2397]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="451" _type="InsertStringCommand" date="Thu Mar 31 10:41:06 EDT 2022" starttimestamp="1648737385020" timestamp="281446" timestamp2="281446">
    <data><![CDATA[t]]></data>
  </Command>
  <DocumentChange __id="449" _type="Insert" date="Thu Mar 31 10:41:06 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="8638" docExpressionCount="847" docLength="9635" length="1" offset="9004" starttimestamp="1648737385020" timestamp="281437">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <Command __id="453" _type="PauseCommand" date="Thu Mar 31 10:41:08 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="283848">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2401]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="454" _type="InsertStringCommand" date="Thu Mar 31 10:41:08 EDT 2022" starttimestamp="1648737385020" timestamp="283854" timestamp2="283854">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="456" _type="InsertStringCommand" date="Thu Mar 31 10:41:09 EDT 2022" starttimestamp="1648737385020" timestamp="284160" timestamp2="284160">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="458" _type="InsertStringCommand" date="Thu Mar 31 10:41:09 EDT 2022" starttimestamp="1648737385020" timestamp="284440" timestamp2="284440">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="460" _type="InsertStringCommand" date="Thu Mar 31 10:41:09 EDT 2022" starttimestamp="1648737385020" timestamp="284804" timestamp2="284804">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="462" _type="InsertStringCommand" date="Thu Mar 31 10:41:09 EDT 2022" starttimestamp="1648737385020" timestamp="284964" timestamp2="284964">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="464" _type="InsertStringCommand" date="Thu Mar 31 10:41:10 EDT 2022" starttimestamp="1648737385020" timestamp="285093" timestamp2="285093">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="466" _type="InsertStringCommand" date="Thu Mar 31 10:41:10 EDT 2022" starttimestamp="1648737385020" timestamp="285218" timestamp2="285218">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="468" _type="InsertStringCommand" date="Thu Mar 31 10:41:10 EDT 2022" starttimestamp="1648737385020" timestamp="285296" timestamp2="285296">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="470" _type="PauseCommand" date="Thu Mar 31 10:41:11 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="286725">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1429]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="473" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:41:12 EDT 2022" starttimestamp="1648737385020" timestamp="287899" />
  <Command __id="475" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:41:12 EDT 2022" starttimestamp="1648737385020" timestamp="287904" />
  <Command __id="477" _type="PauseCommand" date="Thu Mar 31 10:41:15 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="290338">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2434]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="476" _type="ShellCommand" date="Thu Mar 31 10:41:15 EDT 2022" starttimestamp="1648737385020" timestamp="290338" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="478" _type="ShellCommand" date="Thu Mar 31 10:41:15 EDT 2022" starttimestamp="1648737385020" timestamp="290491" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="486" _type="SelectTextCommand" caretOffset="1234" date="Thu Mar 31 10:41:15 EDT 2022" end="1234" start="1225" starttimestamp="1648737385020" timestamp="290724" />
  <Command __id="488" _type="PauseCommand" date="Thu Mar 31 10:41:17 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="292417">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1693]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="487" _type="MoveCaretCommand" caretOffset="1254" date="Thu Mar 31 10:41:17 EDT 2022" docOffset="1494" starttimestamp="1648737385020" timestamp="292417" />
  <Command __id="490" _type="InsertStringCommand" date="Thu Mar 31 10:41:17 EDT 2022" starttimestamp="1648737385020" timestamp="292712" timestamp2="292712">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="492" _type="InsertStringCommand" date="Thu Mar 31 10:41:18 EDT 2022" starttimestamp="1648737385020" timestamp="293006" timestamp2="293006">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="494" _type="InsertStringCommand" date="Thu Mar 31 10:41:18 EDT 2022" starttimestamp="1648737385020" timestamp="293091" timestamp2="293091">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="496" _type="InsertStringCommand" date="Thu Mar 31 10:41:18 EDT 2022" starttimestamp="1648737385020" timestamp="293227" timestamp2="293227">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="498" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:18 EDT 2022" starttimestamp="1648737385020" timestamp="293742" />
  <Command __id="500" _type="InsertStringCommand" date="Thu Mar 31 10:41:18 EDT 2022" starttimestamp="1648737385020" timestamp="293859" timestamp2="293859">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="502" _type="InsertStringCommand" date="Thu Mar 31 10:41:18 EDT 2022" starttimestamp="1648737385020" timestamp="293953" timestamp2="293953">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="504" _type="InsertStringCommand" date="Thu Mar 31 10:41:19 EDT 2022" starttimestamp="1648737385020" timestamp="294050" timestamp2="294050">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="506" _type="InsertStringCommand" date="Thu Mar 31 10:41:19 EDT 2022" starttimestamp="1648737385020" timestamp="294273" timestamp2="294273">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="508" _type="InsertStringCommand" date="Thu Mar 31 10:41:19 EDT 2022" starttimestamp="1648737385020" timestamp="294422" timestamp2="294422">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="510" _type="InsertStringCommand" date="Thu Mar 31 10:41:19 EDT 2022" starttimestamp="1648737385020" timestamp="294698" timestamp2="294698">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="512" _type="InsertStringCommand" date="Thu Mar 31 10:41:19 EDT 2022" starttimestamp="1648737385020" timestamp="294878" timestamp2="294878">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="514" _type="InsertStringCommand" date="Thu Mar 31 10:41:20 EDT 2022" starttimestamp="1648737385020" timestamp="295018" timestamp2="295018">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="516" _type="InsertStringCommand" date="Thu Mar 31 10:41:20 EDT 2022" starttimestamp="1648737385020" timestamp="295120" timestamp2="295120">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="518" _type="InsertStringCommand" date="Thu Mar 31 10:41:20 EDT 2022" starttimestamp="1648737385020" timestamp="295203" timestamp2="295203">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="520" _type="InsertStringCommand" date="Thu Mar 31 10:41:20 EDT 2022" starttimestamp="1648737385020" timestamp="295353" timestamp2="295353">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="522" _type="InsertStringCommand" date="Thu Mar 31 10:41:20 EDT 2022" starttimestamp="1648737385020" timestamp="295672" timestamp2="295672">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="524" _type="InsertStringCommand" date="Thu Mar 31 10:41:21 EDT 2022" starttimestamp="1648737385020" timestamp="296005" timestamp2="296005">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="526" _type="InsertStringCommand" date="Thu Mar 31 10:41:21 EDT 2022" starttimestamp="1648737385020" timestamp="296099" timestamp2="296099">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="528" _type="InsertStringCommand" date="Thu Mar 31 10:41:21 EDT 2022" starttimestamp="1648737385020" timestamp="296114" timestamp2="296114">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="530" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:21 EDT 2022" starttimestamp="1648737385020" timestamp="296579" />
  <Command __id="532" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:21 EDT 2022" starttimestamp="1648737385020" timestamp="296754" />
  <Command __id="534" _type="InsertStringCommand" date="Thu Mar 31 10:41:22 EDT 2022" starttimestamp="1648737385020" timestamp="297228" timestamp2="297228">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="536" _type="InsertStringCommand" date="Thu Mar 31 10:41:22 EDT 2022" starttimestamp="1648737385020" timestamp="297634" timestamp2="297634">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="538" _type="InsertStringCommand" date="Thu Mar 31 10:41:23 EDT 2022" starttimestamp="1648737385020" timestamp="297984" timestamp2="297984">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="540" _type="InsertStringCommand" date="Thu Mar 31 10:41:23 EDT 2022" starttimestamp="1648737385020" timestamp="298173" timestamp2="298173">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="542" _type="InsertStringCommand" date="Thu Mar 31 10:41:23 EDT 2022" starttimestamp="1648737385020" timestamp="298221" timestamp2="298221">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="544" _type="InsertStringCommand" date="Thu Mar 31 10:41:23 EDT 2022" starttimestamp="1648737385020" timestamp="298304" timestamp2="298304">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="546" _type="InsertStringCommand" date="Thu Mar 31 10:41:23 EDT 2022" starttimestamp="1648737385020" timestamp="298405" timestamp2="298405">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="547" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:41:23 EDT 2022" starttimestamp="1648737385020" timestamp="298902" />
  <Command __id="548" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:41:24 EDT 2022" starttimestamp="1648737385020" timestamp="298991" />
  <Command __id="549" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:41:24 EDT 2022" starttimestamp="1648737385020" timestamp="299061" />
  <DocumentChange __id="452" _type="Insert" date="Thu Mar 31 10:41:08 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="8646" docExpressionCount="847" docLength="9643" length="8" offset="9005" repeat="8" starttimestamp="1648737385020" timestamp="283847" timestamp2="285291">
    <text><![CDATA[rueFalse]]></text>
  </DocumentChange>
  <Command __id="479" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:41:15 EDT 2022" docASTNodeCount="175" docActiveCodeLength="1446" docExpressionCount="100" docLength="1446" projectName="A5" starttimestamp="1648737385020" timestamp="290554">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;"), Diff(INSERT,"¶¶	void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) throws RemoteException;"), Diff(EQUAL,"¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;

	void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <DocumentChange __id="480" _type="Insert" date="Thu Mar 31 10:41:15 EDT 2022" docASTNodeCount="185" docActiveCodeLength="1508" docExpressionCount="104" docLength="1508" length="62" offset="1433" repeat="6" starttimestamp="1648737385020" timestamp="290573" timestamp2="290578">
    <text><![CDATA[

	void fakeMethodFour(String stringOne, boolean trueFalse);]]></text>
  </DocumentChange>
  <DocumentChange __id="489" _type="Insert" date="Thu Mar 31 10:41:17 EDT 2022" docASTNodeCount="186" docActiveCodeLength="1512" docExpressionCount="104" docLength="1512" length="4" offset="1494" repeat="4" starttimestamp="1648737385020" timestamp="292705" timestamp2="293224">
    <text><![CDATA[ tho]]></text>
  </DocumentChange>
  <DocumentChange __id="497" _type="Delete" date="Thu Mar 31 10:41:18 EDT 2022" docASTNodeCount="186" docActiveCodeLength="1511" docExpressionCount="104" docLength="1511" endLine="33" length="1" offset="1497" startLine="33" starttimestamp="1648737385020" timestamp="293738">
    <text><![CDATA[o]]></text>
  </DocumentChange>
  <DocumentChange __id="499" _type="Insert" date="Thu Mar 31 10:41:18 EDT 2022" docASTNodeCount="186" docActiveCodeLength="1526" docExpressionCount="105" docLength="1526" length="15" offset="1497" repeat="15" starttimestamp="1648737385020" timestamp="293854" timestamp2="296110">
    <text><![CDATA[rows RemoteExcx]]></text>
  </DocumentChange>
  <DocumentChange __id="529" _type="Delete" date="Thu Mar 31 10:41:21 EDT 2022" docASTNodeCount="186" docActiveCodeLength="1524" docExpressionCount="105" docLength="1524" endLine="33" length="2" offset="1510" repeat="2" startLine="33" starttimestamp="1648737385020" timestamp="296574" timestamp2="296749">
    <text><![CDATA[cx]]></text>
  </DocumentChange>
  <DocumentChange __id="533" _type="Insert" date="Thu Mar 31 10:41:22 EDT 2022" docASTNodeCount="186" docActiveCodeLength="1531" docExpressionCount="105" docLength="1531" length="7" offset="1510" repeat="7" starttimestamp="1648737385020" timestamp="297222" timestamp2="298399">
    <text><![CDATA[ception]]></text>
  </DocumentChange>
  <Command __id="551" _type="PauseCommand" date="Thu Mar 31 10:41:25 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="300939">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1878]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="552" _type="MoveCaretCommand" caretOffset="7479" date="Thu Mar 31 10:41:26 EDT 2022" docOffset="9013" starttimestamp="1648737385020" timestamp="301064" />
  <Command __id="554" _type="PauseCommand" date="Thu Mar 31 10:41:31 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="306467">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5403]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="553" _type="MoveCaretCommand" caretOffset="7526" date="Thu Mar 31 10:41:31 EDT 2022" docOffset="9060" starttimestamp="1648737385020" timestamp="306467" />
  <Command __id="556" _type="InsertStringCommand" date="Thu Mar 31 10:41:31 EDT 2022" starttimestamp="1648737385020" timestamp="306731" timestamp2="306731">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="558" _type="InsertStringCommand" date="Thu Mar 31 10:41:31 EDT 2022" starttimestamp="1648737385020" timestamp="306900" timestamp2="306900">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="559" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.LINE_UP" date="Thu Mar 31 10:41:32 EDT 2022" starttimestamp="1648737385020" timestamp="307570" />
  <Command __id="561" _type="InsertStringCommand" date="Thu Mar 31 10:41:33 EDT 2022" starttimestamp="1648737385020" timestamp="308078" timestamp2="308078">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="563" _type="InsertStringCommand" date="Thu Mar 31 10:41:33 EDT 2022" starttimestamp="1648737385020" timestamp="308700" timestamp2="308700">
    <data><![CDATA[@]]></data>
  </Command>
  <Command __id="565" _type="InsertStringCommand" date="Thu Mar 31 10:41:34 EDT 2022" starttimestamp="1648737385020" timestamp="309018" timestamp2="309018">
    <data><![CDATA[O]]></data>
  </Command>
  <Command __id="567" _type="InsertStringCommand" date="Thu Mar 31 10:41:34 EDT 2022" starttimestamp="1648737385020" timestamp="309185" timestamp2="309185">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="569" _type="InsertStringCommand" date="Thu Mar 31 10:41:34 EDT 2022" starttimestamp="1648737385020" timestamp="309319" timestamp2="309319">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="571" _type="InsertStringCommand" date="Thu Mar 31 10:41:34 EDT 2022" starttimestamp="1648737385020" timestamp="309418" timestamp2="309418">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="573" _type="InsertStringCommand" date="Thu Mar 31 10:41:34 EDT 2022" starttimestamp="1648737385020" timestamp="309647" timestamp2="309647">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="575" _type="InsertStringCommand" date="Thu Mar 31 10:41:34 EDT 2022" starttimestamp="1648737385020" timestamp="309779" timestamp2="309779">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="577" _type="InsertStringCommand" date="Thu Mar 31 10:41:34 EDT 2022" starttimestamp="1648737385020" timestamp="309880" timestamp2="309880">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="579" _type="InsertStringCommand" date="Thu Mar 31 10:41:35 EDT 2022" starttimestamp="1648737385020" timestamp="310060" timestamp2="310060">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="581" _type="InsertStringCommand" date="Thu Mar 31 10:41:35 EDT 2022" starttimestamp="1648737385020" timestamp="310572" timestamp2="310572">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="583" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:36 EDT 2022" starttimestamp="1648737385020" timestamp="311171" />
  <Command __id="585" _type="PauseCommand" date="Thu Mar 31 10:41:39 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="314790">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3619]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="584" _type="SelectTextCommand" caretOffset="7405" date="Thu Mar 31 10:41:39 EDT 2022" end="7526" start="7405" starttimestamp="1648737385020" timestamp="314790" />
  <Command __id="587" _type="PauseCommand" date="Thu Mar 31 10:41:41 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="316851">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[2061]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="586" _type="CopyCommand" date="Thu Mar 31 10:41:41 EDT 2022" starttimestamp="1648737385020" timestamp="316851" />
  <Command __id="589" _type="PauseCommand" date="Thu Mar 31 10:41:45 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="320602">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[3751]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="588" _type="SelectTextCommand" caretOffset="7532" date="Thu Mar 31 10:41:45 EDT 2022" end="7541" start="7532" starttimestamp="1648737385020" timestamp="320602" />
  <Command __id="591" _type="PasteCommand" date="Thu Mar 31 10:41:45 EDT 2022" starttimestamp="1648737385020" timestamp="320885" />
  <Command __id="593" _type="PauseCommand" date="Thu Mar 31 10:41:47 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="322702">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1817]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="592" _type="MoveCaretCommand" caretOffset="7570" date="Thu Mar 31 10:41:47 EDT 2022" docOffset="9104" starttimestamp="1648737385020" timestamp="322702" />
  <Command __id="595" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:47 EDT 2022" starttimestamp="1648737385020" timestamp="322953" />
  <Command __id="597" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:48 EDT 2022" starttimestamp="1648737385020" timestamp="323105" />
  <Command __id="599" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:41:48 EDT 2022" starttimestamp="1648737385020" timestamp="323740" />
  <Command __id="601" _type="InsertStringCommand" date="Thu Mar 31 10:41:49 EDT 2022" starttimestamp="1648737385020" timestamp="324219" timestamp2="324219">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="603" _type="InsertStringCommand" date="Thu Mar 31 10:41:49 EDT 2022" starttimestamp="1648737385020" timestamp="324313" timestamp2="324313">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="605" _type="InsertStringCommand" date="Thu Mar 31 10:41:49 EDT 2022" starttimestamp="1648737385020" timestamp="324401" timestamp2="324401">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="607" _type="PauseCommand" date="Thu Mar 31 10:41:55 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="330667">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[6266]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="606" _type="MoveCaretCommand" caretOffset="7607" date="Thu Mar 31 10:41:55 EDT 2022" docOffset="9141" starttimestamp="1648737385020" timestamp="330667" />
  <Command __id="609" _type="PauseCommand" date="Thu Mar 31 10:41:58 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="333939">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3272]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="608" _type="SelectTextCommand" caretOffset="7589" date="Thu Mar 31 10:41:58 EDT 2022" end="7607" start="7589" starttimestamp="1648737385020" timestamp="333939" />
  <Command __id="550" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:41:25 EDT 2022" docASTNodeCount="1194" docActiveCodeLength="8646" docExpressionCount="847" docLength="9643" projectName="A5" starttimestamp="1648737385020" timestamp="300939">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶"), Diff(INSERT,"	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}"), Diff(EQUAL,"¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}
	

}
]]></snapshot>
  </Command>
  <DocumentChange __id="555" _type="Insert" date="Thu Mar 31 10:41:31 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="8665" docExpressionCount="849" docLength="9662" length="19" offset="9060" repeat="13" starttimestamp="1648737385020" timestamp="306720" timestamp2="310561">
    <text><![CDATA[
	
	@Override 
	]]></text>
  </DocumentChange>
  <DocumentChange __id="582" _type="Delete" date="Thu Mar 31 10:41:36 EDT 2022" docASTNodeCount="1196" docActiveCodeLength="8664" docExpressionCount="849" docLength="9661" endLine="293" length="1" offset="9075" startLine="293" starttimestamp="1648737385020" timestamp="311167">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="590" _type="Replace" date="Thu Mar 31 10:41:45 EDT 2022" docASTNodeCount="1208" docActiveCodeLength="8742" docExpressionCount="853" docLength="9773" endLine="293" insertionLength="122" int_docASTNodeCount="1194" int_docActiveCodeLength="8654" int_docExpressionCount="847" int_docLength="9651" length="10" offset="9065" startLine="293" starttimestamp="1648737385020" timestamp="320874">
    <deletedText><![CDATA[	@Override]]></deletedText>
    <insertedText><![CDATA[	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="594" _type="Delete" date="Thu Mar 31 10:41:47 EDT 2022" docASTNodeCount="1208" docActiveCodeLength="8739" docExpressionCount="853" docLength="9770" endLine="294" length="3" offset="9101" repeat="3" startLine="294" starttimestamp="1648737385020" timestamp="322950" timestamp2="323736">
    <text><![CDATA[our]]></text>
  </DocumentChange>
  <DocumentChange __id="600" _type="Insert" date="Thu Mar 31 10:41:49 EDT 2022" docASTNodeCount="1208" docActiveCodeLength="8742" docExpressionCount="853" docLength="9773" length="3" offset="9101" repeat="3" starttimestamp="1648737385020" timestamp="324209" timestamp2="324393">
    <text><![CDATA[ive]]></text>
  </DocumentChange>
  <Command __id="611" _type="PauseCommand" date="Thu Mar 31 10:42:00 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="335724">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1785]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <DocumentChange __id="610" _type="Replace" date="Thu Mar 31 10:42:00 EDT 2022" docASTNodeCount="1205" docActiveCodeLength="8725" docExpressionCount="852" docLength="9756" endLine="294" insertionLength="1" int_docASTNodeCount="1205" int_docActiveCodeLength="8724" int_docExpressionCount="852" int_docLength="9755" length="18" offset="9123" startLine="294" starttimestamp="1648737385020" timestamp="335724">
    <deletedText><![CDATA[boolean trueFalse)]]></deletedText>
    <insertedText><![CDATA[I]]></insertedText>
  </DocumentChange>
  <Command __id="612" _type="InsertStringCommand" date="Thu Mar 31 10:42:00 EDT 2022" starttimestamp="1648737385020" timestamp="335734" timestamp2="335734">
    <data><![CDATA[I]]></data>
  </Command>
  <DocumentChange __id="613" _type="Insert" date="Thu Mar 31 10:42:01 EDT 2022" docASTNodeCount="1209" docActiveCodeLength="8738" docExpressionCount="854" docLength="9769" length="13" offset="9124" repeat="13" starttimestamp="1648737385020" timestamp="336194" timestamp2="340243">
    <text><![CDATA[PCMechanism _]]></text>
  </DocumentChange>
  <Command __id="614" _type="InsertStringCommand" date="Thu Mar 31 10:42:01 EDT 2022" starttimestamp="1648737385020" timestamp="336198" timestamp2="336198">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="616" _type="InsertStringCommand" date="Thu Mar 31 10:42:01 EDT 2022" starttimestamp="1648737385020" timestamp="336497" timestamp2="336497">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="618" _type="InsertStringCommand" date="Thu Mar 31 10:42:02 EDT 2022" starttimestamp="1648737385020" timestamp="337051" timestamp2="337051">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="620" _type="InsertStringCommand" date="Thu Mar 31 10:42:02 EDT 2022" starttimestamp="1648737385020" timestamp="337330" timestamp2="337330">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="622" _type="InsertStringCommand" date="Thu Mar 31 10:42:02 EDT 2022" starttimestamp="1648737385020" timestamp="337581" timestamp2="337581">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="624" _type="InsertStringCommand" date="Thu Mar 31 10:42:02 EDT 2022" starttimestamp="1648737385020" timestamp="337766" timestamp2="337766">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="626" _type="InsertStringCommand" date="Thu Mar 31 10:42:02 EDT 2022" starttimestamp="1648737385020" timestamp="337825" timestamp2="337825">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="628" _type="InsertStringCommand" date="Thu Mar 31 10:42:03 EDT 2022" starttimestamp="1648737385020" timestamp="338048" timestamp2="338048">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="630" _type="InsertStringCommand" date="Thu Mar 31 10:42:03 EDT 2022" starttimestamp="1648737385020" timestamp="338684" timestamp2="338684">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="632" _type="InsertStringCommand" date="Thu Mar 31 10:42:03 EDT 2022" starttimestamp="1648737385020" timestamp="338770" timestamp2="338770">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="634" _type="InsertStringCommand" date="Thu Mar 31 10:42:03 EDT 2022" starttimestamp="1648737385020" timestamp="338921" timestamp2="338921">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="636" _type="InsertStringCommand" date="Thu Mar 31 10:42:04 EDT 2022" starttimestamp="1648737385020" timestamp="339074" timestamp2="339074">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="639" _type="PauseCommand" date="Thu Mar 31 10:42:05 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="340247">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1173]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="638" _type="InsertStringCommand" date="Thu Mar 31 10:42:05 EDT 2022" starttimestamp="1648737385020" timestamp="340247" timestamp2="340247">
    <data><![CDATA[_]]></data>
  </Command>
  <DocumentChange __id="640" _type="Delete" date="Thu Mar 31 10:42:05 EDT 2022" docASTNodeCount="1205" docActiveCodeLength="8737" docExpressionCount="852" docLength="9768" endLine="294" length="1" offset="9136" startLine="294" starttimestamp="1648737385020" timestamp="340808">
    <text><![CDATA[_]]></text>
  </DocumentChange>
  <Command __id="641" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:42:05 EDT 2022" starttimestamp="1648737385020" timestamp="340813" />
  <Command __id="643" _type="InsertStringCommand" date="Thu Mar 31 10:42:06 EDT 2022" starttimestamp="1648737385020" timestamp="341509" timestamp2="341509">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="644" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Mar 31 10:42:06 EDT 2022" starttimestamp="1648737385020" timestamp="341902" />
  <Command __id="646" _type="InsertStringCommand" date="Thu Mar 31 10:42:07 EDT 2022" starttimestamp="1648737385020" timestamp="342301" timestamp2="342301">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="648" _type="InsertStringCommand" date="Thu Mar 31 10:42:07 EDT 2022" starttimestamp="1648737385020" timestamp="342385" timestamp2="342385">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="650" _type="InsertStringCommand" date="Thu Mar 31 10:42:07 EDT 2022" starttimestamp="1648737385020" timestamp="342591" timestamp2="342591">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="652" _type="InsertStringCommand" date="Thu Mar 31 10:42:07 EDT 2022" starttimestamp="1648737385020" timestamp="342710" timestamp2="342710">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="655" _type="PauseCommand" date="Thu Mar 31 10:42:09 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="344108">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1398]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="654" _type="InsertStringCommand" date="Thu Mar 31 10:42:09 EDT 2022" starttimestamp="1648737385020" timestamp="344108" timestamp2="344108">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="657" _type="InsertStringCommand" date="Thu Mar 31 10:42:09 EDT 2022" starttimestamp="1648737385020" timestamp="344443" timestamp2="344443">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="659" _type="InsertStringCommand" date="Thu Mar 31 10:42:09 EDT 2022" starttimestamp="1648737385020" timestamp="344604" timestamp2="344604">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="661" _type="InsertStringCommand" date="Thu Mar 31 10:42:09 EDT 2022" starttimestamp="1648737385020" timestamp="344751" timestamp2="344751">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="663" _type="InsertStringCommand" date="Thu Mar 31 10:42:09 EDT 2022" starttimestamp="1648737385020" timestamp="344889" timestamp2="344889">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="664" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:42:10 EDT 2022" starttimestamp="1648737385020" timestamp="345773" />
  <Command __id="665" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:42:10 EDT 2022" starttimestamp="1648737385020" timestamp="345863" />
  <Command __id="666" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:42:10 EDT 2022" starttimestamp="1648737385020" timestamp="345931" />
  <Command __id="668" _type="PauseCommand" date="Thu Mar 31 10:42:13 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="348813">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2882]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="667" _type="ShellCommand" date="Thu Mar 31 10:42:13 EDT 2022" starttimestamp="1648737385020" timestamp="348813" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="669" _type="ShellCommand" date="Thu Mar 31 10:42:14 EDT 2022" starttimestamp="1648737385020" timestamp="348984" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="677" _type="SelectTextCommand" caretOffset="1319" date="Thu Mar 31 10:42:14 EDT 2022" end="1319" start="1310" starttimestamp="1648737385020" timestamp="349234" />
  <Command __id="679" _type="PauseCommand" date="Thu Mar 31 10:42:15 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="350970">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1736]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="678" _type="MoveCaretCommand" caretOffset="1344" date="Thu Mar 31 10:42:15 EDT 2022" docOffset="1584" starttimestamp="1648737385020" timestamp="350970" />
  <Command __id="681" _type="InsertStringCommand" date="Thu Mar 31 10:42:16 EDT 2022" starttimestamp="1648737385020" timestamp="351310" timestamp2="351310">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="683" _type="InsertStringCommand" date="Thu Mar 31 10:42:16 EDT 2022" starttimestamp="1648737385020" timestamp="351470" timestamp2="351470">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="685" _type="InsertStringCommand" date="Thu Mar 31 10:42:16 EDT 2022" starttimestamp="1648737385020" timestamp="351569" timestamp2="351569">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="687" _type="InsertStringCommand" date="Thu Mar 31 10:42:16 EDT 2022" starttimestamp="1648737385020" timestamp="351700" timestamp2="351700">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="689" _type="InsertStringCommand" date="Thu Mar 31 10:42:16 EDT 2022" starttimestamp="1648737385020" timestamp="351874" timestamp2="351874">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="691" _type="InsertStringCommand" date="Thu Mar 31 10:42:17 EDT 2022" starttimestamp="1648737385020" timestamp="352032" timestamp2="352032">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="693" _type="InsertStringCommand" date="Thu Mar 31 10:42:17 EDT 2022" starttimestamp="1648737385020" timestamp="352244" timestamp2="352244">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="695" _type="InsertStringCommand" date="Thu Mar 31 10:42:17 EDT 2022" starttimestamp="1648737385020" timestamp="352387" timestamp2="352387">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="697" _type="InsertStringCommand" date="Thu Mar 31 10:42:17 EDT 2022" starttimestamp="1648737385020" timestamp="352652" timestamp2="352652">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="699" _type="InsertStringCommand" date="Thu Mar 31 10:42:17 EDT 2022" starttimestamp="1648737385020" timestamp="352832" timestamp2="352832">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="701" _type="InsertStringCommand" date="Thu Mar 31 10:42:17 EDT 2022" starttimestamp="1648737385020" timestamp="352966" timestamp2="352966">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="703" _type="InsertStringCommand" date="Thu Mar 31 10:42:18 EDT 2022" starttimestamp="1648737385020" timestamp="353020" timestamp2="353020">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="705" _type="InsertStringCommand" date="Thu Mar 31 10:42:18 EDT 2022" starttimestamp="1648737385020" timestamp="353113" timestamp2="353113">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="707" _type="InsertStringCommand" date="Thu Mar 31 10:42:18 EDT 2022" starttimestamp="1648737385020" timestamp="353279" timestamp2="353279">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="709" _type="InsertStringCommand" date="Thu Mar 31 10:42:18 EDT 2022" starttimestamp="1648737385020" timestamp="353826" timestamp2="353826">
    <data><![CDATA[E]]></data>
  </Command>
  <Command __id="711" _type="InsertStringCommand" date="Thu Mar 31 10:42:19 EDT 2022" starttimestamp="1648737385020" timestamp="354101" timestamp2="354101">
    <data><![CDATA[x]]></data>
  </Command>
  <Command __id="713" _type="InsertStringCommand" date="Thu Mar 31 10:42:19 EDT 2022" starttimestamp="1648737385020" timestamp="354253" timestamp2="354253">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="715" _type="InsertStringCommand" date="Thu Mar 31 10:42:19 EDT 2022" starttimestamp="1648737385020" timestamp="354477" timestamp2="354477">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="717" _type="InsertStringCommand" date="Thu Mar 31 10:42:19 EDT 2022" starttimestamp="1648737385020" timestamp="354603" timestamp2="354603">
    <data><![CDATA[p]]></data>
  </Command>
  <Command __id="719" _type="InsertStringCommand" date="Thu Mar 31 10:42:19 EDT 2022" starttimestamp="1648737385020" timestamp="354763" timestamp2="354763">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="721" _type="InsertStringCommand" date="Thu Mar 31 10:42:19 EDT 2022" starttimestamp="1648737385020" timestamp="354839" timestamp2="354839">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="723" _type="InsertStringCommand" date="Thu Mar 31 10:42:19 EDT 2022" starttimestamp="1648737385020" timestamp="354908" timestamp2="354908">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="725" _type="InsertStringCommand" date="Thu Mar 31 10:42:20 EDT 2022" starttimestamp="1648737385020" timestamp="355005" timestamp2="355005">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="729" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:42:30 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="365299" type="Run" />
  <Command __id="731" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:42:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="365402" type="Run" />
  <Command __id="732" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:42:30 EDT 2022" kind="StepInto" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="365418" type="Run" />
  <Command __id="733" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:42:30 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="365421" type="Run" />
  <Command __id="735" _type="PauseCommand" date="Thu Mar 31 10:42:32 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="367556">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2135]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="736" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:42:34 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="369310" type="Run" />
  <Command __id="738" _type="ConsoleOutput" date="Thu Mar 31 10:42:34 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="369454" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Mar 31 10:42:34 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@1c6284d2 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Thu Mar 31 10:42:34 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="740" _type="PauseCommand" date="Thu Mar 31 10:42:36 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="371466">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2012]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="739" _type="ConsoleOutput" date="Thu Mar 31 10:42:36 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="371466" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Thu Mar 31 10:42:36 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Mar 31 10:42:36 EDT 2022
End O(n2) inter- and intra class method calls:Thu Mar 31 10:42:36 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:80¶Running second pass checks Thu Mar 31 10:42:36 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Mar 31 10:42:36 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Thu Mar 31 10:42:3"), Diff(DELETE,"4"), Diff(INSERT,"6"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="742" _type="PauseCommand" date="Thu Mar 31 10:42:37 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="372626">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1160]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="741" _type="ConsoleOutput" date="Thu Mar 31 10:42:37 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="372626" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Mar 31 10:42:37 EDT 2022
Generating checks:Thu Mar 31 10:42:37 EDT 2022
Finished Generating checks:Thu Mar 31 10:42:37 EDT 2022
Generating externals:Thu Mar 31 10:42:37 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Thu Mar 31 10:42:3"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Thu Mar 31 10:42:37 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Thu Mar 31 10:42:3"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Thu Mar 31 10:42:3"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="743" _type="ConsoleOutput" date="Thu Mar 31 10:42:37 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="372905" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Mar 31 10:42:37 EDT 2022
Test execution time (ms):3480
Test execution time (ms):12
A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):12
Test execution time (ms):5

A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.7272727272727273
Test execution time (ms):7
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Thu Mar 31 10:42:37 EDT 2022¶"), Diff(DELETE,"Generating checks:Thu Mar 31 10:42:37 EDT 2022¶Finished Generating checks:Thu Mar 31 10:42:37 EDT 2022¶Generating externals:Thu Mar 31 10:42:37 EDT 2022"), Diff(INSERT,"Test execution time (ms):3480¶Test execution time (ms):12¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):12¶Test execution time (ms):5¶¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.7272727272727273¶Test execution time (ms):7"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="744" _type="ConsoleOutput" date="Thu Mar 31 10:42:38 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="373022" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (236)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (165)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (40)
   |~ ServerRemoteInterfaceRMI.java (21)
   |~ ServerRemoteObjectGIPC.java (314)
   |~ ServerRemoteObjectRMI.java (182)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Mar 31 10:42:37 EDT 2022¶Test execution time (ms):3480¶Test execution time (ms):12¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):12¶Test execution time (ms):5¶¶A5ExpectedSignatures did not pass completely:See consol"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to th"), Diff(EQUAL,"e "), Diff(INSERT,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"ace about lines failing  this check%0.7272727272727273¶Test execution time (ms):7"), Diff(INSERT,"ucture:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="746" _type="PauseCommand" date="Thu Mar 31 10:42:40 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="375275">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2253]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="745" _type="ConsoleOutput" date="Thu Mar 31 10:42:40 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="375275" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@2d58653b . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ Or"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedS"), Diff(EQUAL,"ig"), Diff(DELETE,"i"), Diff(EQUAL,"na"), Diff(DELETE,"lSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (165)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (21)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (182)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(INSERT,"tures@2d58653b . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="748" _type="PauseCommand" date="Thu Mar 31 10:42:45 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="380286">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5011]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="747" _type="ShellCommand" date="Thu Mar 31 10:42:45 EDT 2022" starttimestamp="1648737385020" timestamp="380286" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="749" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:42:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="380971" type="Debug" />
  <Command __id="750" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:42:45 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="380971" type="Debug" />
  <Command __id="751" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:42:45 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="380971" type="Run" />
  <DocumentChange __id="642" _type="Insert" date="Thu Mar 31 10:42:06 EDT 2022" docASTNodeCount="1209" docActiveCodeLength="8747" docExpressionCount="854" docLength="9778" length="10" offset="9136" repeat="10" starttimestamp="1648737385020" timestamp="341503" timestamp2="344884">
    <text><![CDATA[mechanism)]]></text>
  </DocumentChange>
  <Command __id="670" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:42:14 EDT 2022" docASTNodeCount="186" docActiveCodeLength="1531" docExpressionCount="105" docLength="1531" projectName="A5" starttimestamp="1648737385020" timestamp="349039">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶¶	void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) throws RemoteException;"), Diff(INSERT,"¶¶	void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException;"), Diff(EQUAL,"¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;

	void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) throws RemoteException;

	void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <DocumentChange __id="671" _type="Insert" date="Thu Mar 31 10:42:14 EDT 2022" docASTNodeCount="197" docActiveCodeLength="1598" docExpressionCount="110" docLength="1598" length="67" offset="1518" repeat="6" starttimestamp="1648737385020" timestamp="349063" timestamp2="349070">
    <text><![CDATA[

	void fakeMethodFive(String stringOne, IPCMechanism mechanism);]]></text>
  </DocumentChange>
  <DocumentChange __id="680" _type="Insert" date="Thu Mar 31 10:42:16 EDT 2022" docASTNodeCount="198" docActiveCodeLength="1621" docExpressionCount="111" docLength="1621" length="23" offset="1584" repeat="23" starttimestamp="1648737385020" timestamp="351298" timestamp2="355000">
    <text><![CDATA[ throws RemoteException]]></text>
  </DocumentChange>
  <Command __id="753" _type="PauseCommand" date="Thu Mar 31 10:42:47 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="381984">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1013]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="754" _type="MoveCaretCommand" caretOffset="7611" date="Thu Mar 31 10:42:47 EDT 2022" docOffset="9145" starttimestamp="1648737385020" timestamp="382131" />
  <Command __id="756" _type="PauseCommand" date="Thu Mar 31 10:42:52 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="387604">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5473]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="755" _type="SelectTextCommand" caretOffset="7261" date="Thu Mar 31 10:42:52 EDT 2022" end="7658" start="7261" starttimestamp="1648737385020" timestamp="387604" />
  <Command __id="757" _type="CopyCommand" date="Thu Mar 31 10:42:53 EDT 2022" starttimestamp="1648737385020" timestamp="388233" />
  <Command __id="752" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:42:47 EDT 2022" docASTNodeCount="1209" docActiveCodeLength="8747" docExpressionCount="854" docLength="9778" projectName="A5" starttimestamp="1648737385020" timestamp="381984">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	"), Diff(INSERT,"¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	"), Diff(EQUAL,"@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientOutCoupler;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.interactiveMethodInvocation.SimulationParametersControllerFactory;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;

import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.ProposedStateSet;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCObjectRegistered;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })
public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {

	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();
	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();

	private static String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;

	// A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;

	// int aProposalNumber = 0;

	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
		// ClientArgsProcessor.getServerHost(args);

	}

	@Override
	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {
		
		clientListGIPC.add(aClient);
		System.out.println("Client registered GIPC");
		System.out.println(aClient);
		System.out.println(clientListGIPC);
	}
	
	@Override
	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {
		
		clientListRMI.add(aClient);
		System.out.println("Client registered RMI");
		System.out.println(aClient);
		System.out.println(clientListRMI);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){
		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("Command recieved for broadcast: " + aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		System.out.println(clientList);
		System.out.println(clientList.size());
		for (ClientRemoteInterfaceGIPC client : clientList) {
			System.out.println(client);
			if (client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					// Need to quit
					try {
						client.quit(0);
					} catch (RemoteException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				continue;
			}
			
			if (aNewCommand.charAt(0) == 'q') {

				try {
					client.quit(0);
				} catch (RemoteException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				continue;
			}

			try {
				client.inCoupler(aNewCommand, aProposalNumber);
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);

			//if (aNewCommand.charAt(0) == 'q') {
				// Need to quit
			//	this.quit(0);
			//}
		}
		if (aNewCommand.charAt(0) == 'q') {
			// Need to quit
			this.quit(0);
		}

	}

	@Override
	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {
		List<ClientRemoteInterfaceGIPC> clientList;
		
		// TODO Check is this is where delay is needed
		long aDelay = getDelay();
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}

		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
		

		if(clientListGIPC.isEmpty()) {
			clientList = clientListRMI;
			System.out.println("USING RMI IN SERVER");
		}
		else {
			clientList = clientListGIPC;
			System.out.println("USING GIPC IN SERVER");
		}
		
		if (broadcast) {
			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			
			for (ClientRemoteInterfaceGIPC client : clientList) {
				if (client.equals(originalClient)) {
					continue;
				}

				try {
					client.changeIPCMechanism(mechanism);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);
			}
		}

	}

	@Override
	protected void setTracing() {
		// A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();

		// A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {

		setTracing();

		this.processArgs(args);
		createGIPCRegistry();

		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			// Create remote server object

			// create proxy of remote server object
			// UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			// send server to RMI server
			// rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);

			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);

			System.out.println("Server proxy sent to RMI Registry");

		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void start(String[] args) {
		init(args);
		// register a callback to process actions denoted by the user commands
		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);
		// use the calling back library
		SimulationParametersControllerFactory.getSingleton().processCommands();		
		//init(args);

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo) {
		// TODO Auto-generated method stub

	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void createGIPCRegistry() {
		System.out.println("GIPC_SERVER_PORT: ");
		System.out.println(GIPC_SERVER_PORT);
		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);
		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);

		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();
		gipcRegistry.rebind(SERVER_NAME, server);
		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);
		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="759" _type="PauseCommand" date="Thu Mar 31 10:42:55 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="390387">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2154]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="761" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:42:56 EDT 2022" starttimestamp="1648737385020" timestamp="391674" />
  <Command __id="763" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:42:56 EDT 2022" starttimestamp="1648737385020" timestamp="391680" />
  <Command __id="758" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:42:55 EDT 2022" docASTNodeCount="115" docActiveCodeLength="846" docExpressionCount="68" docLength="846" projectName="A5" starttimestamp="1648737385020" timestamp="390387">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceRMI.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})
public interface ServerRemoteInterfaceRMI  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="765" _type="PauseCommand" date="Thu Mar 31 10:42:58 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="393719">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2039]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="766" _type="MoveCaretCommand" caretOffset="0" date="Thu Mar 31 10:42:58 EDT 2022" docOffset="0" starttimestamp="1648737385020" timestamp="393920" />
  <Command __id="768" _type="PauseCommand" date="Thu Mar 31 10:43:01 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="396291">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2371]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="767" _type="MoveCaretCommand" caretOffset="4471" date="Thu Mar 31 10:43:01 EDT 2022" docOffset="5750" starttimestamp="1648737385020" timestamp="396291" />
  <Command __id="770" _type="InsertStringCommand" date="Thu Mar 31 10:43:01 EDT 2022" starttimestamp="1648737385020" timestamp="396554" timestamp2="396554">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="772" _type="InsertStringCommand" date="Thu Mar 31 10:43:01 EDT 2022" starttimestamp="1648737385020" timestamp="396686" timestamp2="396686">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="778" _type="PasteCommand" date="Thu Mar 31 10:43:02 EDT 2022" starttimestamp="1648737385020" timestamp="397143" />
  <Command __id="780" _type="PauseCommand" date="Thu Mar 31 10:43:05 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="400112">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2969]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="779" _type="MoveCaretCommand" caretOffset="4560" date="Thu Mar 31 10:43:05 EDT 2022" docOffset="5936" starttimestamp="1648737385020" timestamp="400112" />
  <Command __id="782" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:43:05 EDT 2022" starttimestamp="1648737385020" timestamp="400608" />
  <Command __id="784" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:43:05 EDT 2022" starttimestamp="1648737385020" timestamp="400759" />
  <Command __id="786" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:43:06 EDT 2022" starttimestamp="1648737385020" timestamp="401113" />
  <Command __id="788" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:43:06 EDT 2022" starttimestamp="1648737385020" timestamp="401733" />
  <Command __id="790" _type="InsertStringCommand" date="Thu Mar 31 10:43:06 EDT 2022" starttimestamp="1648737385020" timestamp="401926" timestamp2="401926">
    <data><![CDATA[R]]></data>
  </Command>
  <Command __id="792" _type="InsertStringCommand" date="Thu Mar 31 10:43:07 EDT 2022" starttimestamp="1648737385020" timestamp="402105" timestamp2="402105">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="794" _type="InsertStringCommand" date="Thu Mar 31 10:43:07 EDT 2022" starttimestamp="1648737385020" timestamp="402216" timestamp2="402216">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="795" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:43:08 EDT 2022" starttimestamp="1648737385020" timestamp="403009" />
  <Command __id="796" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:43:08 EDT 2022" starttimestamp="1648737385020" timestamp="403101" />
  <Command __id="797" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:43:08 EDT 2022" starttimestamp="1648737385020" timestamp="403167" />
  <Command __id="799" _type="PauseCommand" date="Thu Mar 31 10:43:13 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="408422">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5255]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="798" _type="ShellCommand" date="Thu Mar 31 10:43:13 EDT 2022" starttimestamp="1648737385020" timestamp="408422" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="800" _type="ShellCommand" date="Thu Mar 31 10:43:13 EDT 2022" starttimestamp="1648737385020" timestamp="408591" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="808" _type="SelectTextCommand" caretOffset="730" date="Thu Mar 31 10:43:13 EDT 2022" end="730" start="721" starttimestamp="1648737385020" timestamp="408819" />
  <Command __id="764" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:42:58 EDT 2022" docASTNodeCount="738" docActiveCodeLength="5265" docExpressionCount="539" docLength="5757" projectName="A5" starttimestamp="1648737385020" timestamp="393719">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="769" _type="Insert" date="Thu Mar 31 10:43:01 EDT 2022" docASTNodeCount="738" docActiveCodeLength="5271" docExpressionCount="539" docLength="5763" length="6" offset="5750" repeat="2" starttimestamp="1648737385020" timestamp="396542" timestamp2="396677">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="773" _type="Replace" date="Thu Mar 31 10:43:02 EDT 2022" docASTNodeCount="782" docActiveCodeLength="5565" docExpressionCount="559" docLength="6159" endLine="181" insertionLength="397" int_docASTNodeCount="738" int_docActiveCodeLength="5270" int_docExpressionCount="539" int_docLength="5762" length="1" offset="5755" startLine="181" starttimestamp="1648737385020" timestamp="397033">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="774" _type="Insert" date="Thu Mar 31 10:43:02 EDT 2022" docASTNodeCount="788" docActiveCodeLength="5620" docExpressionCount="564" docLength="6214" length="55" offset="418" repeat="2" starttimestamp="1648737385020" timestamp="397093" timestamp2="397095">
    <text><![CDATA[
import util.interactiveMethodInvocation.IPCMechanism;]]></text>
  </DocumentChange>
  <DocumentChange __id="776" _type="Insert" date="Thu Mar 31 10:43:02 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5662" docExpressionCount="567" docLength="6256" length="42" offset="346" repeat="2" starttimestamp="1648737385020" timestamp="397096" timestamp2="397098">
    <text><![CDATA[
import client.ClientRemoteInterfaceGIPC;]]></text>
  </DocumentChange>
  <DocumentChange __id="781" _type="Delete" date="Thu Mar 31 10:43:05 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5658" docExpressionCount="567" docLength="6252" endLine="184" length="4" offset="5932" repeat="4" startLine="184" starttimestamp="1648737385020" timestamp="400601" timestamp2="401729">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="789" _type="Insert" date="Thu Mar 31 10:43:06 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5661" docExpressionCount="567" docLength="6255" length="3" offset="5932" repeat="3" starttimestamp="1648737385020" timestamp="401915" timestamp2="402212">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <Command __id="801" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:43:13 EDT 2022" docASTNodeCount="115" docActiveCodeLength="846" docExpressionCount="68" docLength="846" projectName="A5" starttimestamp="1648737385020" timestamp="408647">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})¶public interface ServerRemoteInterfaceRMI  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="802" _type="Insert" date="Thu Mar 31 10:43:13 EDT 2022" docASTNodeCount="126" docActiveCodeLength="921" docExpressionCount="73" docLength="921" length="75" offset="833" repeat="6" starttimestamp="1648737385020" timestamp="408660" timestamp2="408664">
    <text><![CDATA[
	void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client);]]></text>
  </DocumentChange>
  <Command __id="810" _type="PauseCommand" date="Thu Mar 31 10:43:17 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="412340">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3521]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="811" _type="MoveCaretCommand" caretOffset="4559" date="Thu Mar 31 10:43:17 EDT 2022" docOffset="5935" starttimestamp="1648737385020" timestamp="412544" />
  <Command __id="813" _type="PauseCommand" date="Thu Mar 31 10:43:21 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="416506">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3962]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="812" _type="ShellCommand" date="Thu Mar 31 10:43:21 EDT 2022" starttimestamp="1648737385020" timestamp="416506" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="814" _type="ShellCommand" date="Thu Mar 31 10:43:21 EDT 2022" starttimestamp="1648737385020" timestamp="416669" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="822" _type="SelectTextCommand" caretOffset="804" date="Thu Mar 31 10:43:21 EDT 2022" end="804" start="795" starttimestamp="1648737385020" timestamp="416928" />
  <Command __id="809" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:43:17 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5661" docExpressionCount="567" docLength="6255" projectName="A5" starttimestamp="1648737385020" timestamp="412340">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterface"), Diff(DELETE,"RMI;¶import util.annotations.Tags"), Diff(INSERT,"GIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism"), Diff(EQUAL,";¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}"), Diff(INSERT,"¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}"), Diff(EQUAL,"¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}

}
]]></snapshot>
  </Command>
  <Command __id="815" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:43:21 EDT 2022" docASTNodeCount="126" docActiveCodeLength="921" docExpressionCount="73" docLength="921" projectName="A5" starttimestamp="1648737385020" timestamp="416730">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})¶public interface ServerRemoteInterfaceRMI  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶	"), Diff(INSERT,"void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client);¶	"), Diff(EQUAL,"¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})
public interface ServerRemoteInterfaceRMI  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;
	void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client);
	
	

}
]]></snapshot>
  </Command>
  <DocumentChange __id="816" _type="Insert" date="Thu Mar 31 10:43:21 EDT 2022" docASTNodeCount="136" docActiveCodeLength="981" docExpressionCount="77" docLength="981" length="60" offset="908" repeat="6" starttimestamp="1648737385020" timestamp="416744" timestamp2="416749">
    <text><![CDATA[
	void fakeMethodFour(String stringOne, boolean trueFalse);]]></text>
  </DocumentChange>
  <Command __id="824" _type="PauseCommand" date="Thu Mar 31 10:43:23 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="418463">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1535]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="825" _type="MoveCaretCommand" caretOffset="4559" date="Thu Mar 31 10:43:23 EDT 2022" docOffset="5935" starttimestamp="1648737385020" timestamp="418671" />
  <Command __id="827" _type="PauseCommand" date="Thu Mar 31 10:43:26 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="421497">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2826]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="826" _type="MoveCaretCommand" caretOffset="4743" date="Thu Mar 31 10:43:26 EDT 2022" docOffset="6119" starttimestamp="1648737385020" timestamp="421497" />
  <Command __id="829" _type="PauseCommand" date="Thu Mar 31 10:43:29 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="424281">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2784]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="828" _type="ShellCommand" date="Thu Mar 31 10:43:29 EDT 2022" starttimestamp="1648737385020" timestamp="424281" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="830" _type="ShellCommand" date="Thu Mar 31 10:43:29 EDT 2022" starttimestamp="1648737385020" timestamp="424365" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="840" _type="SelectTextCommand" caretOffset="864" date="Thu Mar 31 10:43:29 EDT 2022" end="864" start="855" starttimestamp="1648737385020" timestamp="424646" />
  <Command __id="842" _type="PauseCommand" date="Thu Mar 31 10:43:33 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="428844">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[4198]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="841" _type="SelectTextCommand" caretOffset="667" date="Thu Mar 31 10:43:33 EDT 2022" end="689" start="667" starttimestamp="1648737385020" timestamp="428844" />
  <Command __id="843" _type="CopyCommand" date="Thu Mar 31 10:43:34 EDT 2022" starttimestamp="1648737385020" timestamp="429035" />
  <Command __id="844" _type="MoveCaretCommand" caretOffset="764" date="Thu Mar 31 10:43:34 EDT 2022" docOffset="962" starttimestamp="1648737385020" timestamp="429878" />
  <Command __id="846" _type="InsertStringCommand" date="Thu Mar 31 10:43:35 EDT 2022" starttimestamp="1648737385020" timestamp="430422" timestamp2="430422">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="848" _type="PasteCommand" date="Thu Mar 31 10:43:35 EDT 2022" starttimestamp="1648737385020" timestamp="430660" />
  <Command __id="850" _type="PauseCommand" date="Thu Mar 31 10:43:37 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="432059">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1399]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="849" _type="MoveCaretCommand" caretOffset="846" date="Thu Mar 31 10:43:37 EDT 2022" docOffset="1044" starttimestamp="1648737385020" timestamp="432059" />
  <Command __id="851" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Mar 31 10:43:37 EDT 2022" starttimestamp="1648737385020" timestamp="432698" />
  <Command __id="853" _type="InsertStringCommand" date="Thu Mar 31 10:43:38 EDT 2022" starttimestamp="1648737385020" timestamp="433074" timestamp2="433074">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="855" _type="PasteCommand" date="Thu Mar 31 10:43:38 EDT 2022" starttimestamp="1648737385020" timestamp="433306" />
  <Command __id="857" _type="PauseCommand" date="Thu Mar 31 10:43:39 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="434499">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1193]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="856" _type="MoveCaretCommand" caretOffset="935" date="Thu Mar 31 10:43:39 EDT 2022" docOffset="1133" starttimestamp="1648737385020" timestamp="434499" />
  <Command __id="859" _type="InsertStringCommand" date="Thu Mar 31 10:43:39 EDT 2022" starttimestamp="1648737385020" timestamp="434718" timestamp2="434718">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="861" _type="PasteCommand" date="Thu Mar 31 10:43:39 EDT 2022" starttimestamp="1648737385020" timestamp="434927" />
  <Command __id="862" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:43:40 EDT 2022" starttimestamp="1648737385020" timestamp="435416" />
  <Command __id="863" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:43:40 EDT 2022" starttimestamp="1648737385020" timestamp="435559" />
  <Command __id="864" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:43:40 EDT 2022" starttimestamp="1648737385020" timestamp="435644" />
  <Command __id="823" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:43:23 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5661" docExpressionCount="567" docLength="6255" projectName="A5" starttimestamp="1648737385020" timestamp="418463">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="831" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:43:29 EDT 2022" docASTNodeCount="136" docActiveCodeLength="981" docExpressionCount="77" docLength="981" projectName="A5" starttimestamp="1648737385020" timestamp="424429">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})¶public interface ServerRemoteInterfaceRMI  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶	void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client);¶	"), Diff(INSERT,"void fakeMethodFour(String stringOne, boolean trueFalse);¶	"), Diff(EQUAL,"¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})
public interface ServerRemoteInterfaceRMI  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;
	void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client);
	void fakeMethodFour(String stringOne, boolean trueFalse);
	
	

}
]]></snapshot>
  </Command>
  <DocumentChange __id="832" _type="Insert" date="Thu Mar 31 10:43:29 EDT 2022" docASTNodeCount="147" docActiveCodeLength="1046" docExpressionCount="82" docLength="1046" length="65" offset="968" repeat="6" starttimestamp="1648737385020" timestamp="424441" timestamp2="424445">
    <text><![CDATA[
	void fakeMethodFive(String stringOne, IPCMechanism mechanism);]]></text>
  </DocumentChange>
  <DocumentChange __id="838" _type="Insert" date="Thu Mar 31 10:43:29 EDT 2022" docASTNodeCount="153" docActiveCodeLength="1101" docExpressionCount="87" docLength="1101" length="55" offset="157" repeat="2" starttimestamp="1648737385020" timestamp="424446" timestamp2="424447">
    <text><![CDATA[
import util.interactiveMethodInvocation.IPCMechanism;]]></text>
  </DocumentChange>
  <DocumentChange __id="845" _type="Insert" date="Thu Mar 31 10:43:35 EDT 2022" docASTNodeCount="154" docActiveCodeLength="1124" docExpressionCount="88" docLength="1124" length="23" offset="962" repeat="2" starttimestamp="1648737385020" timestamp="430415" timestamp2="430654">
    <text><![CDATA[ throws RemoteException]]></text>
  </DocumentChange>
  <DocumentChange __id="852" _type="Insert" date="Thu Mar 31 10:43:38 EDT 2022" docASTNodeCount="155" docActiveCodeLength="1147" docExpressionCount="89" docLength="1147" length="23" offset="1045" repeat="2" starttimestamp="1648737385020" timestamp="433064" timestamp2="433301">
    <text><![CDATA[ throws RemoteException]]></text>
  </DocumentChange>
  <DocumentChange __id="858" _type="Insert" date="Thu Mar 31 10:43:39 EDT 2022" docASTNodeCount="156" docActiveCodeLength="1170" docExpressionCount="90" docLength="1170" length="23" offset="1133" repeat="2" starttimestamp="1648737385020" timestamp="434712" timestamp2="434922">
    <text><![CDATA[ throws RemoteException]]></text>
  </DocumentChange>
  <Command __id="866" _type="PauseCommand" date="Thu Mar 31 10:43:52 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="447110">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[11466]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="867" _type="MoveCaretCommand" caretOffset="0" date="Thu Mar 31 10:43:52 EDT 2022" docOffset="0" starttimestamp="1648737385020" timestamp="447320" />
  <Command __id="869" _type="PauseCommand" date="Thu Mar 31 10:43:56 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="451268">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3948]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="868" _type="ShellCommand" date="Thu Mar 31 10:43:56 EDT 2022" starttimestamp="1648737385020" timestamp="451268" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="870" _type="ShellCommand" date="Thu Mar 31 10:43:56 EDT 2022" starttimestamp="1648737385020" timestamp="451413" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="886" _type="PauseCommand" date="Thu Mar 31 10:43:57 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="452727">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[1193]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="885" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:43:57 EDT 2022" starttimestamp="1648737385020" timestamp="452727" />
  <Command __id="887" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:43:57 EDT 2022" starttimestamp="1648737385020" timestamp="452817" />
  <Command __id="888" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:43:57 EDT 2022" starttimestamp="1648737385020" timestamp="452855" />
  <Command __id="890" _type="PauseCommand" date="Thu Mar 31 10:44:03 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="458736">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5881]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="891" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:44:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="460285" type="Debug" />
  <Command __id="893" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:44:05 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="460285" type="Debug" />
  <Command __id="894" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:44:05 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="460285" type="Run" />
  <Command __id="896" _type="PauseCommand" date="Thu Mar 31 10:44:06 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="461901">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1616]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="897" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:44:09 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="464784" type="Run" />
  <Command __id="899" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:44:09 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="464784" type="Run" />
  <Command __id="901" _type="PauseCommand" date="Thu Mar 31 10:44:11 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="466835">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2051]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="900" _type="ShellCommand" date="Thu Mar 31 10:44:11 EDT 2022" starttimestamp="1648737385020" timestamp="466835" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="903" _type="PauseCommand" date="Thu Mar 31 10:44:17 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="472805">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5970]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="902" _type="ConsoleOutput" date="Thu Mar 31 10:44:17 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="472805" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Mar 31 10:44:17 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@2d58653b . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Thu Mar 31 10:44:17 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="905" _type="PauseCommand" date="Thu Mar 31 10:44:20 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="475004">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2199]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="904" _type="ConsoleOutput" date="Thu Mar 31 10:44:20 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="475004" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Thu Mar 31 10:44:19 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Mar 31 10:44:19 EDT 2022
End O(n2) inter- and intra class method calls:Thu Mar 31 10:44:19 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:80¶Running second pass checks Thu Mar 31 10:44:19 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Mar 31 10:44:19 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Thu Mar 31 10:44:1"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="907" _type="PauseCommand" date="Thu Mar 31 10:44:21 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="476011">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1007]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="906" _type="ConsoleOutput" date="Thu Mar 31 10:44:21 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="476011" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Mar 31 10:44:20 EDT 2022
Generating checks:Thu Mar 31 10:44:20 EDT 2022
Finished Generating checks:Thu Mar 31 10:44:20 EDT 2022
Generating externals:Thu Mar 31 10:44:20 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Thu Mar 31 10:44:"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Thu Mar 31 10:44:20 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Thu Mar 31 10:44:"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Thu Mar 31 10:44:"), Diff(DELETE,"19"), Diff(INSERT,"20"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="908" _type="ConsoleOutput" date="Thu Mar 31 10:44:21 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="476354" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Mar 31 10:44:21 EDT 2022
Test execution time (ms):3578
Test execution time (ms):21
A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):10
Test execution time (ms):6
A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.9090909090909091

Test execution time (ms):6
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Thu Mar 31 10:44:2"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Generating checks:Thu Mar 31 10:44:20 EDT 2022¶Finished Generating checks:Thu Mar 31 10:44:20 EDT 2022¶Generating externals:Thu Mar 31 10:44:20 EDT 2022"), Diff(INSERT,"Test execution time (ms):3578¶Test execution time (ms):21¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):10¶Test execution time (ms):6¶A5ExpectedSignatures did not pass completely:See console trace about lines failing  this check%0.9090909090909091¶¶Test execution time (ms):6"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="909" _type="ConsoleOutput" date="Thu Mar 31 10:44:21 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="476395" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (236)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (184)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (40)
   |~ ServerRemoteInterfaceRMI.java (25)
   |~ ServerRemoteObjectGIPC.java (314)
   |~ ServerRemoteObjectRMI.java (202)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Mar 31 10:44:21 EDT 2022¶Test execution time (ms):3578¶Test execution time (ms):21¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):10¶Test execution time (ms):6¶A5ExpectedSignatures did not pass completely:See consol"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (184)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (25)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (202)¶¶Attempting to match to th"), Diff(EQUAL,"e "), Diff(INSERT,"s"), Diff(EQUAL,"tr"), Diff(DELETE,"ace about lines failing  this check%0.9090909090909091¶¶Test execution time (ms):6"), Diff(INSERT,"ucture:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="911" _type="PauseCommand" date="Thu Mar 31 10:44:24 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="479210">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2815]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="910" _type="ConsoleOutput" date="Thu Mar 31 10:44:24 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="479210" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@391c41b8 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (184)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (25)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (202)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@391c41b8 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="913" _type="PauseCommand" date="Thu Mar 31 10:44:28 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="483125">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3915]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="912" _type="ShellCommand" date="Thu Mar 31 10:44:28 EDT 2022" starttimestamp="1648737385020" timestamp="483125" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="865" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:43:52 EDT 2022" docASTNodeCount="667" docActiveCodeLength="4721" docExpressionCount="483" docLength="5201" projectName="A5" starttimestamp="1648737385020" timestamp="447110">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\ServerConfigure.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package server;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceRMI;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectRMI;
import util.annotations.Tags;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMIObjectRegistered;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.SERVER_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerConfigure extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//int aProposalNumber = 0;
	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="871" _type="Insert" date="Thu Mar 31 10:43:56 EDT 2022" docASTNodeCount="714" docActiveCodeLength="5092" docExpressionCount="506" docLength="5674" length="473" offset="5194" repeat="12" starttimestamp="1648737385020" timestamp="451508" timestamp2="451532">
    <text><![CDATA[

	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException {
		// TODO Auto-generated method stub
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="883" _type="Insert" date="Thu Mar 31 10:43:56 EDT 2022" docASTNodeCount="720" docActiveCodeLength="5147" docExpressionCount="511" docLength="5729" length="55" offset="567" repeat="2" starttimestamp="1648737385020" timestamp="451534" timestamp2="451536">
    <text><![CDATA[
import util.interactiveMethodInvocation.IPCMechanism;]]></text>
  </DocumentChange>
  <Command __id="915" _type="PauseCommand" date="Thu Mar 31 10:44:41 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="496326">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[13201]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="916" _type="MoveCaretCommand" caretOffset="4743" date="Thu Mar 31 10:44:41 EDT 2022" docOffset="6119" starttimestamp="1648737385020" timestamp="496530" />
  <Command __id="918" _type="PauseCommand" date="Thu Mar 31 10:44:43 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="498857">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2327]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="936" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:44:47 EDT 2022" starttimestamp="1648737385020" timestamp="502299" />
  <Command __id="938" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:44:47 EDT 2022" starttimestamp="1648737385020" timestamp="502307" />
  <Command __id="914" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:44:41 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5661" docExpressionCount="567" docLength="6255" projectName="A5" starttimestamp="1648737385020" timestamp="496326">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="919" _type="Delete" date="Thu Mar 31 10:44:44 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5658" docExpressionCount="567" docLength="6252" endLine="184" length="3" offset="5932" repeat="3" startLine="184" starttimestamp="1648737385020" timestamp="499189" timestamp2="499478">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="925" _type="Insert" date="Thu Mar 31 10:44:44 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5662" docExpressionCount="567" docLength="6256" length="4" offset="5932" repeat="4" starttimestamp="1648737385020" timestamp="499918" timestamp2="500220">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <Command __id="940" _type="PauseCommand" date="Thu Mar 31 10:44:50 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="505694">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3387]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="941" _type="MoveCaretCommand" caretOffset="958" date="Thu Mar 31 10:44:50 EDT 2022" docOffset="1156" starttimestamp="1648737385020" timestamp="505870" />
  <Command __id="943" _type="PauseCommand" date="Thu Mar 31 10:44:53 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="508248">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2378]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="942" _type="MoveCaretCommand" caretOffset="756" date="Thu Mar 31 10:44:53 EDT 2022" docOffset="954" starttimestamp="1648737385020" timestamp="508248" />
  <Command __id="939" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:44:50 EDT 2022" docASTNodeCount="156" docActiveCodeLength="1170" docExpressionCount="90" docLength="1170" projectName="A5" starttimestamp="1648737385020" timestamp="505694">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶"), Diff(INSERT,"import util.interactiveMethodInvocation.IPCMechanism;¶"), Diff(EQUAL,"import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})¶public interface ServerRemoteInterfaceRMI  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶	void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client)"), Diff(INSERT," throws RemoteException"), Diff(EQUAL,";¶	void fakeMethodFour(String stringOne, boolean trueFalse)"), Diff(INSERT," throws RemoteException;¶	void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException"), Diff(EQUAL,";¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})
public interface ServerRemoteInterfaceRMI  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;
	void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;
	void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException;
	void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="945" _type="PauseCommand" date="Thu Mar 31 10:44:55 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="510071">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1823]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <DocumentChange __id="944" _type="Delete" date="Thu Mar 31 10:44:55 EDT 2022" docASTNodeCount="156" docActiveCodeLength="1167" docExpressionCount="90" docLength="1167" endLine="18" length="3" offset="951" repeat="3" startLine="18" starttimestamp="1648737385020" timestamp="510071" timestamp2="510721">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <Command __id="946" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:44:55 EDT 2022" starttimestamp="1648737385020" timestamp="510077" />
  <Command __id="948" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:44:55 EDT 2022" starttimestamp="1648737385020" timestamp="510360" />
  <Command __id="950" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:44:55 EDT 2022" starttimestamp="1648737385020" timestamp="510724" />
  <Command __id="952" _type="InsertStringCommand" date="Thu Mar 31 10:44:56 EDT 2022" starttimestamp="1648737385020" timestamp="511182" timestamp2="511182">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="954" _type="InsertStringCommand" date="Thu Mar 31 10:44:56 EDT 2022" starttimestamp="1648737385020" timestamp="511252" timestamp2="511252">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="956" _type="InsertStringCommand" date="Thu Mar 31 10:44:56 EDT 2022" starttimestamp="1648737385020" timestamp="511357" timestamp2="511357">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="958" _type="InsertStringCommand" date="Thu Mar 31 10:44:56 EDT 2022" starttimestamp="1648737385020" timestamp="511579" timestamp2="511579">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="959" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:44:57 EDT 2022" starttimestamp="1648737385020" timestamp="512086" />
  <Command __id="960" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:44:57 EDT 2022" starttimestamp="1648737385020" timestamp="512177" />
  <Command __id="961" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:44:57 EDT 2022" starttimestamp="1648737385020" timestamp="512251" />
  <Command __id="963" _type="PauseCommand" date="Thu Mar 31 10:45:02 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="517839">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[5588]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="962" _type="ShellCommand" date="Thu Mar 31 10:45:02 EDT 2022" starttimestamp="1648737385020" timestamp="517839" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="964" _type="ShellCommand" date="Thu Mar 31 10:45:03 EDT 2022" starttimestamp="1648737385020" timestamp="518025" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="969" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:45:03 EDT 2022" starttimestamp="1648737385020" timestamp="518787" />
  <Command __id="970" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:45:03 EDT 2022" starttimestamp="1648737385020" timestamp="518864" />
  <Command __id="971" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:45:03 EDT 2022" starttimestamp="1648737385020" timestamp="518953" />
  <DocumentChange __id="951" _type="Insert" date="Thu Mar 31 10:44:56 EDT 2022" docASTNodeCount="156" docActiveCodeLength="1171" docExpressionCount="90" docLength="1171" length="4" offset="951" repeat="4" starttimestamp="1648737385020" timestamp="511177" timestamp2="511572">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="965" _type="Delete" date="Thu Mar 31 10:45:03 EDT 2022" docASTNodeCount="156" docActiveCodeLength="1167" docExpressionCount="90" docLength="1167" endLine="5" length="4" offset="83" startLine="3" starttimestamp="1648737385020" timestamp="518038">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="966" _type="Insert" date="Thu Mar 31 10:45:03 EDT 2022" docASTNodeCount="160" docActiveCodeLength="1213" docExpressionCount="93" docLength="1213" length="46" offset="83" repeat="3" starttimestamp="1648737385020" timestamp="518043" timestamp2="518044">
    <text><![CDATA[

import client.ClientRemoteInterfaceGIPC;
]]></text>
  </DocumentChange>
  <Command __id="973" _type="PauseCommand" date="Thu Mar 31 10:45:06 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="521050">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2097]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="974" _type="MoveCaretCommand" caretOffset="0" date="Thu Mar 31 10:45:06 EDT 2022" docOffset="0" starttimestamp="1648737385020" timestamp="521146" />
  <Command __id="976" _type="PauseCommand" date="Thu Mar 31 10:45:10 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="525045">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3899]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="975" _type="MoveCaretCommand" caretOffset="4179" date="Thu Mar 31 10:45:10 EDT 2022" docOffset="5336" starttimestamp="1648737385020" timestamp="525045" />
  <Command __id="978" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:45:10 EDT 2022" starttimestamp="1648737385020" timestamp="525307" />
  <Command __id="980" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:45:10 EDT 2022" starttimestamp="1648737385020" timestamp="525445" />
  <Command __id="982" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:45:11 EDT 2022" starttimestamp="1648737385020" timestamp="526271" />
  <Command __id="984" _type="InsertStringCommand" date="Thu Mar 31 10:45:11 EDT 2022" starttimestamp="1648737385020" timestamp="526285" timestamp2="526285">
    <data><![CDATA[G]]></data>
  </Command>
  <Command __id="986" _type="InsertStringCommand" date="Thu Mar 31 10:45:11 EDT 2022" starttimestamp="1648737385020" timestamp="526294" timestamp2="526294">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="988" _type="InsertStringCommand" date="Thu Mar 31 10:45:11 EDT 2022" starttimestamp="1648737385020" timestamp="526304" timestamp2="526304">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="990" _type="InsertStringCommand" date="Thu Mar 31 10:45:11 EDT 2022" starttimestamp="1648737385020" timestamp="526619" timestamp2="526619">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="991" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:45:12 EDT 2022" starttimestamp="1648737385020" timestamp="527553" />
  <Command __id="992" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:45:12 EDT 2022" starttimestamp="1648737385020" timestamp="527644" />
  <Command __id="993" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:45:12 EDT 2022" starttimestamp="1648737385020" timestamp="527679" />
  <Command __id="995" _type="PauseCommand" date="Thu Mar 31 10:45:17 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="532261">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4582]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1002" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:45:23 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="538517" type="Run" />
  <Command __id="1005" _type="PauseCommand" date="Thu Mar 31 10:45:25 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="540551">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2034]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1004" _type="ShellCommand" date="Thu Mar 31 10:45:25 EDT 2022" starttimestamp="1648737385020" timestamp="540551" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1007" _type="PauseCommand" date="Thu Mar 31 10:45:27 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="542592">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2041]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1006" _type="ConsoleOutput" date="Thu Mar 31 10:45:27 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="542592" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Mar 31 10:45:27 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedSignatures@391c41b8 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Thu Mar 31 10:45:27 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1009" _type="PauseCommand" date="Thu Mar 31 10:45:29 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="544640">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2048]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1008" _type="ConsoleOutput" date="Thu Mar 31 10:45:29 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="544640" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Thu Mar 31 10:45:29 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Mar 31 10:45:29 EDT 2022
End O(n2) inter- and intra class method calls:Thu Mar 31 10:45:29 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:80¶Running second pass checks Thu Mar 31 10:45:29 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Mar 31 10:45:29 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Thu Mar 31 10:45:2"), Diff(DELETE,"7"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="1010" _type="ConsoleOutput" date="Thu Mar 31 10:45:30 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="545585" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Mar 31 10:45:30 EDT 2022
Generating checks:Thu Mar 31 10:45:30 EDT 2022
Finished Generating checks:Thu Mar 31 10:45:30 EDT 2022
Generating externals:Thu Mar 31 10:45:30 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Thu Mar 31 10:45:"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Thu Mar 31 10:45:30 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Thu Mar 31 10:45:"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Thu Mar 31 10:45:"), Diff(DELETE,"29"), Diff(INSERT,"30"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="1011" _type="ConsoleOutput" date="Thu Mar 31 10:45:30 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="545848" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Mar 31 10:45:30 EDT 2022
Test execution time (ms):3286
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Thu Mar 31 10:45:30 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Thu Mar 31 10:45:30 EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Thu Mar 31 10:45:30 EDT 2022¶Generating externals:Thu Mar 31 10:45:30 EDT 2022"), Diff(INSERT,"Test execution time (ms):3286"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1012" _type="ConsoleOutput" date="Thu Mar 31 10:45:30 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="545965" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):33
A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074

Test execution time (ms):10
Test execution time (ms):10
Test execution time (ms):5

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (236)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (185)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (40)
   |~ ServerRemoteInterfaceRMI.java (26)
   |~ ServerRemoteObjectGIPC.java (314)
   |~ ServerRemoteObjectRMI.java (202)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Mar 31 10:45:30 EDT 20"), Diff(INSERT,"Test execution time (ms):33¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):10¶Test execution time (ms):10¶Test execution time (ms):5¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java ("), Diff(EQUAL,"22"), Diff(INSERT,")"), Diff(EQUAL,"¶"), Diff(DELETE,"Test execution time (ms):3286"), Diff(INSERT,"  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (185)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (26)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (202)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1014" _type="PauseCommand" date="Thu Mar 31 10:45:33 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="548877">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2912]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1013" _type="ConsoleOutput" date="Thu Mar 31 10:45:33 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="548877" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@44e097d4 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):33¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.4074074074074074¶¶Test execution time (ms):10¶Test execution time (ms):10¶Test execution time (ms):5¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (185)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (26)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (202)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@44e097d4 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1016" _type="PauseCommand" date="Thu Mar 31 10:45:47 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="562128">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13251]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1015" _type="ShellCommand" date="Thu Mar 31 10:45:47 EDT 2022" starttimestamp="1648737385020" timestamp="562128" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="972" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:45:06 EDT 2022" docASTNodeCount="720" docActiveCodeLength="5147" docExpressionCount="511" docLength="5729" projectName="A5" starttimestamp="1648737385020" timestamp="521050">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\ServerConfigure.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceRMI;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectRMI;¶import util.annotations.Tags;¶"), Diff(INSERT,"import util.interactiveMethodInvocation.IPCMechanism;¶"), Diff(EQUAL,"import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({DistributedTags.SERVER_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerConfigure extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//int aProposalNumber = 0;¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶¶"), Diff(INSERT,"	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶"), Diff(EQUAL,"}¶")]]]></diff>
    <snapshot><![CDATA[package server;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceRMI;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMIObjectRegistered;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.SERVER_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerConfigure extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//int aProposalNumber = 0;
	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="977" _type="Delete" date="Thu Mar 31 10:45:10 EDT 2022" docASTNodeCount="720" docActiveCodeLength="5144" docExpressionCount="511" docLength="5726" endLine="166" length="3" offset="5333" repeat="3" startLine="166" starttimestamp="1648737385020" timestamp="525301" timestamp2="526265">
    <text><![CDATA[RMI]]></text>
  </DocumentChange>
  <DocumentChange __id="983" _type="Insert" date="Thu Mar 31 10:45:11 EDT 2022" docASTNodeCount="720" docActiveCodeLength="5148" docExpressionCount="511" docLength="5730" length="4" offset="5333" repeat="4" starttimestamp="1648737385020" timestamp="526276" timestamp2="526613">
    <text><![CDATA[GIPC]]></text>
  </DocumentChange>
  <DocumentChange __id="997" _type="Insert" date="Thu Mar 31 10:45:17 EDT 2022" docASTNodeCount="724" docActiveCodeLength="5190" docExpressionCount="514" docLength="5772" length="42" offset="339" repeat="2" starttimestamp="1648737385020" timestamp="532409" timestamp2="532410">
    <text><![CDATA[
import client.ClientRemoteInterfaceGIPC;]]></text>
  </DocumentChange>
  <Command __id="1018" _type="PauseCommand" date="Thu Mar 31 10:47:10 EDT 2022" range="1m-2m" starttimestamp="1648737385020" timestamp="645012">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[82884]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1019" _type="MoveCaretCommand" caretOffset="1367" date="Thu Mar 31 10:47:10 EDT 2022" docOffset="1607" starttimestamp="1648737385020" timestamp="645140" />
  <Command __id="1017" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:47:10 EDT 2022" docASTNodeCount="198" docActiveCodeLength="1621" docExpressionCount="111" docLength="1621" projectName="A5" starttimestamp="1648737385020" timestamp="645012">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})¶public interface ServerRemoteInterfaceGIPC  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	¶	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶	¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;¶	¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶¶	void createGIPCRegistry() throws RemoteException;¶¶	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,¶			boolean broadcast) throws RemoteException;¶¶	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;¶¶	void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) throws RemoteException;¶¶	void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException;"), Diff(INSERT,"¶¶	void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException;"), Diff(EQUAL,"¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.GIPC})
public interface ServerRemoteInterfaceGIPC  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	
	void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) throws RemoteException;
	
	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber) throws RemoteException;
	
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;

	void createGIPCRegistry() throws RemoteException;

	void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber,
			boolean broadcast) throws RemoteException;

	void registerClientRMI(ClientRemoteInterfaceGIPC aClient) throws RemoteException;

	void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) throws RemoteException;

	void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException;

	void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="1021" _type="PauseCommand" date="Thu Mar 31 10:47:12 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="647198">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2058]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1020" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:47:12 EDT 2022" docASTNodeCount="724" docActiveCodeLength="5190" docExpressionCount="514" docLength="5772" projectName="A5" starttimestamp="1648737385020" timestamp="647198">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\ServerConfigure.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶"), Diff(INSERT,"import client.ClientRemoteInterfaceGIPC;¶"), Diff(EQUAL,"import client.ClientRemoteInterfaceRMI;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import server.remote.ServerRemoteInterfaceRMI;¶import server.remote.ServerRemoteObjectRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶¶@Tags({DistributedTags.SERVER_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerConfigure extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//int aProposalNumber = 0;¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶	¶	@Override	¶	public void quit(int aCode) {¶		System.exit(aCode);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterface"), Diff(DELETE,"RMI"), Diff(INSERT,"GIPC"), Diff(EQUAL," client) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException {¶		// TODO Auto-generated method stub¶		¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import server.remote.ServerRemoteInterfaceRMI;
import server.remote.ServerRemoteObjectRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMIObjectRegistered;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.rpc.rmi.RMITraceUtility;

@Tags({DistributedTags.SERVER_CONFIGURER, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerConfigure extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//int aProposalNumber = 0;
	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}
	
	@Override	
	public void quit(int aCode) {
		System.exit(aCode);
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException {
		// TODO Auto-generated method stub
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1022" _type="MoveCaretCommand" caretOffset="4180" date="Thu Mar 31 10:47:12 EDT 2022" docOffset="5379" starttimestamp="1648737385020" timestamp="647337" />
  <Command __id="1024" _type="SelectTextCommand" caretOffset="7261" date="Thu Mar 31 10:47:13 EDT 2022" end="7658" start="7261" starttimestamp="1648737385020" timestamp="648236" />
  <Command __id="1025" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:47:13 EDT 2022" starttimestamp="1648737385020" timestamp="648830" />
  <Command __id="1026" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:47:13 EDT 2022" starttimestamp="1648737385020" timestamp="648835" />
  <Command __id="1027" _type="MoveCaretCommand" caretOffset="7414" date="Thu Mar 31 10:47:13 EDT 2022" docOffset="8948" starttimestamp="1648737385020" timestamp="648876" />
  <Command __id="1029" _type="PauseCommand" date="Thu Mar 31 10:47:24 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="659158">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10282]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1028" _type="SelectTextCommand" caretOffset="4423" date="Thu Mar 31 10:47:24 EDT 2022" end="4487" start="4423" starttimestamp="1648737385020" timestamp="659158" />
  <Command __id="1030" _type="CopyCommand" date="Thu Mar 31 10:47:24 EDT 2022" starttimestamp="1648737385020" timestamp="659495" />
  <Command __id="1023" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:47:13 EDT 2022" docASTNodeCount="1209" docActiveCodeLength="8747" docExpressionCount="854" docLength="9778" projectName="A5" starttimestamp="1648737385020" timestamp="648145">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1032" _type="PauseCommand" date="Thu Mar 31 10:47:56 EDT 2022" range="30s-1m" starttimestamp="1648737385020" timestamp="691193">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[31698]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1033" _type="MoveCaretCommand" caretOffset="757" date="Thu Mar 31 10:47:56 EDT 2022" docOffset="997" starttimestamp="1648737385020" timestamp="691380" />
  <Command __id="1031" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:47:56 EDT 2022" docASTNodeCount="160" docActiveCodeLength="1213" docExpressionCount="93" docLength="1213" projectName="A5" starttimestamp="1648737385020" timestamp="691193">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteInterfaceRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.Remote;¶import java.rmi.RemoteException;¶¶"), Diff(INSERT,"import client.ClientRemoteInterfaceGIPC;¶"), Diff(EQUAL,"import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.tags.DistributedTags;¶¶@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})¶public interface ServerRemoteInterfaceRMI  extends Remote{¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;¶	void processArgs(String[] args) throws RemoteException;¶	public void start(String[] args) throws RemoteException;¶	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;¶	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;¶	void fakeMethodThree(String stringOne, ClientRemoteInterface"), Diff(DELETE,"RMI"), Diff(INSERT,"GIPC"), Diff(EQUAL," client) throws RemoteException;¶	void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException;¶	void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException;¶	¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;

import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.tags.DistributedTags;

@Tags({DistributedTags.SERVER_REMOTE_INTERFACE, DistributedTags.RMI})
public interface ServerRemoteInterfaceRMI  extends Remote{
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException;
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException;
	void processArgs(String[] args) throws RemoteException;
	public void start(String[] args) throws RemoteException;
	void fakeMethod(String stringOne, String stringTwo) throws RemoteException;
	void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) throws RemoteException;
	void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) throws RemoteException;
	void fakeMethodFour(String stringOne, boolean trueFalse) throws RemoteException;
	void fakeMethodFive(String stringOne, IPCMechanism mechanism) throws RemoteException;
	
	

}
]]></snapshot>
  </Command>
  <Command __id="1035" _type="PauseCommand" date="Thu Mar 31 10:48:00 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="695014">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3634]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1036" _type="MoveCaretCommand" caretOffset="4560" date="Thu Mar 31 10:48:00 EDT 2022" docOffset="5936" starttimestamp="1648737385020" timestamp="695216" />
  <Command __id="1038" _type="PauseCommand" date="Thu Mar 31 10:48:06 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="701229">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[6013]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1037" _type="MoveCaretCommand" caretOffset="4322" date="Thu Mar 31 10:48:06 EDT 2022" docOffset="5698" starttimestamp="1648737385020" timestamp="701229" />
  <Command __id="1034" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:48:00 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5662" docExpressionCount="567" docLength="6256" projectName="A5" starttimestamp="1648737385020" timestamp="695014">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterface"), Diff(DELETE,"RMI"), Diff(INSERT,"GIPC"), Diff(EQUAL," client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}

}
]]></snapshot>
  </Command>
  <Command __id="1040" _type="PauseCommand" date="Thu Mar 31 10:48:07 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="702614">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1385]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1039" _type="Insert" date="Thu Mar 31 10:48:07 EDT 2022" docASTNodeCount="792" docActiveCodeLength="5666" docExpressionCount="567" docLength="6260" length="4" offset="5698" starttimestamp="1648737385020" timestamp="702614">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="1041" _type="InsertStringCommand" date="Thu Mar 31 10:48:07 EDT 2022" starttimestamp="1648737385020" timestamp="702635" timestamp2="702635">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1043" _type="PasteCommand" date="Thu Mar 31 10:48:07 EDT 2022" starttimestamp="1648737385020" timestamp="702903" />
  <Command __id="1045" _type="PauseCommand" date="Thu Mar 31 10:48:10 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="705695">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2792]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1044" _type="MoveCaretCommand" caretOffset="4322" date="Thu Mar 31 10:48:10 EDT 2022" docOffset="5698" starttimestamp="1648737385020" timestamp="705695" />
  <DocumentChange __id="1042" _type="Replace" date="Thu Mar 31 10:48:07 EDT 2022" docASTNodeCount="800" docActiveCodeLength="5730" docExpressionCount="573" docLength="6324" endLine="174" insertionLength="66" int_docASTNodeCount="792" int_docActiveCodeLength="5664" int_docExpressionCount="567" int_docLength="6258" length="2" offset="5700" startLine="174" starttimestamp="1648737385020" timestamp="702896">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);]]></insertedText>
  </DocumentChange>
  <Command __id="1047" _type="PauseCommand" date="Thu Mar 31 10:48:13 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="708657">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2962]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1048" _type="SelectTextCommand" caretOffset="4423" date="Thu Mar 31 10:48:13 EDT 2022" end="4487" start="4423" starttimestamp="1648737385020" timestamp="708863" />
  <Command __id="1046" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:48:13 EDT 2022" docASTNodeCount="1209" docActiveCodeLength="8747" docExpressionCount="854" docLength="9778" projectName="A5" starttimestamp="1648737385020" timestamp="708657">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectGIPC.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientOutCoupler;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.interactiveMethodInvocation.SimulationParametersControllerFactory;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.ProposedStateSet;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCObjectRegistered;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({ DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC })¶public class ServerRemoteObjectGIPC extends ServerRemoteObjectRMI implements ServerRemoteInterfaceGIPC {¶¶	List<ClientRemoteInterfaceGIPC> clientListGIPC = new ArrayList<ClientRemoteInterfaceGIPC>();¶	List<ClientRemoteInterfaceGIPC> clientListRMI = new ArrayList<ClientRemoteInterfaceGIPC>();¶¶	private static String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶¶	// A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶¶	// int aProposalNumber = 0;¶¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶		// ClientArgsProcessor.getServerHost(args);¶¶	}¶¶	@Override¶	public void registerClientGIPC(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListGIPC.add(aClient);¶		System.out.println("Client registered GIPC");¶		System.out.println(aClient);¶		System.out.println(clientListGIPC);¶	}¶	¶	@Override¶	public void registerClientRMI(ClientRemoteInterfaceGIPC aClient) {¶		¶		clientListRMI.add(aClient);¶		System.out.println("Client registered RMI");¶		System.out.println(aClient);¶		System.out.println(clientListRMI);¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber){¶		List<ClientRemoteInterfaceGIPC> clientList = clientListGIPC;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("Command recieved for broadcast: " + aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		System.out.println(clientList);¶		System.out.println(clientList.size());¶		for (ClientRemoteInterfaceGIPC client : clientList) {¶			System.out.println(client);¶			if (client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					// Need to quit¶					try {¶						client.quit(0);¶					} catch (RemoteException e) {¶						// TODO Auto-generated catch block¶						e.printStackTrace();¶					}¶				}¶				continue;¶			}¶			¶			if (aNewCommand.charAt(0) == 'q') {¶¶				try {¶					client.quit(0);¶				} catch (RemoteException e1) {¶					// TODO Auto-generated catch block¶					e1.printStackTrace();¶				}¶				continue;¶			}¶¶			try {¶				client.inCoupler(aNewCommand, aProposalNumber);¶			} catch (RemoteException e) {¶				// TODO Auto-generated catch block¶				e.printStackTrace();¶			}¶			//ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶¶			//if (aNewCommand.charAt(0) == 'q') {¶				// Need to quit¶			//	this.quit(0);¶			//}¶		}¶		if (aNewCommand.charAt(0) == 'q') {¶			// Need to quit¶			this.quit(0);¶		}¶¶	}¶¶	@Override¶	public void broadcastIPCMechanism(IPCMechanism mechanism, ClientRemoteInterfaceGIPC originalClient, int aProposalNumber, boolean broadcast) {¶		List<ClientRemoteInterfaceGIPC> clientList;¶		¶		// TODO Check is this is where delay is needed¶		long aDelay = getDelay();¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶¶		System.out.println("IPC Mechanism recieved for broadcast: " + mechanism);¶		setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		¶		¶¶		if(clientListGIPC.isEmpty()) {¶			clientList = clientListRMI;¶			System.out.println("USING RMI IN SERVER");¶		}¶		else {¶			clientList = clientListGIPC;¶			System.out.println("USING GIPC IN SERVER");¶		}¶		¶		if (broadcast) {¶			RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			¶			for (ClientRemoteInterfaceGIPC client : clientList) {¶				if (client.equals(originalClient)) {¶					continue;¶				}¶¶				try {¶					client.changeIPCMechanism(mechanism);¶				} catch (RemoteException e) {¶					// TODO Auto-generated catch block¶					e.printStackTrace();¶				}¶				ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, mechanism);¶			}¶		}¶¶	}¶¶	@Override¶	protected void setTracing() {¶		// A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶¶		// A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶¶		setTracing();¶¶		this.processArgs(args);¶		createGIPCRegistry();¶¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			// Create remote server object¶¶			// create proxy of remote server object¶			// UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			// send server to RMI server¶			// rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶¶			System.out.println("Server proxy sent to RMI Registry");¶¶		} catch (Exception e) {¶			e.printStackTrace();¶		}¶¶	}¶¶	@Override¶	public void start(String[] args) {¶		init(args);¶		// register a callback to process actions denoted by the user commands¶		SimulationParametersControllerFactory.getSingleton().addSimulationParameterListener(this);¶		// use the calling back library¶		SimulationParametersControllerFactory.getSingleton().processCommands();		¶		//init(args);¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo) {¶		// TODO Auto-generated method stub¶¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void createGIPCRegistry() {¶		System.out.println("GIPC_SERVER_PORT: ");¶		System.out.println(GIPC_SERVER_PORT);¶		gipcRegistry = GIPCLocateRegistry.createRegistry(GIPC_SERVER_PORT);¶		GIPCRegistryCreated.newCase(this, GIPC_SERVER_PORT);¶¶		final ServerRemoteInterfaceRMI server = new ServerRemoteObjectGIPC();¶		gipcRegistry.rebind(SERVER_NAME, server);¶		GIPCObjectRegistered.newCase(this, SERVER_NAME, this, gipcRegistry);¶		gipcRegistry.getInputPort().addConnectionListener(new ATracingConnectionListener(gipcRegistry.getInputPort()));¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1050" _type="PauseCommand" date="Thu Mar 31 10:48:19 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="714666">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5803]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1051" _type="MoveCaretCommand" caretOffset="4322" date="Thu Mar 31 10:48:19 EDT 2022" docOffset="5698" starttimestamp="1648737385020" timestamp="714851" />
  <Command __id="1049" _type="DiffBasedFileOpenCommand" date="Thu Mar 31 10:48:19 EDT 2022" docASTNodeCount="800" docActiveCodeLength="5730" docExpressionCount="573" docLength="6324" projectName="A5" starttimestamp="1648737385020" timestamp="714666">
    <filePath><![CDATA[C:\Users\mannu\COMP_533\A5\src\server\remote\ServerRemoteObjectRMI.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package server.remote;¶¶import java.rmi.RemoteException;¶import java.rmi.registry.LocateRegistry;¶import java.rmi.registry.Registry;¶import java.rmi.server.UnicastRemoteObject;¶import java.util.ArrayList;¶import java.util.List;¶¶import assignments.util.mainArgs.ClientArgsProcessor;¶import assignments.util.mainArgs.ServerArgsProcessor;¶import client.ClientRemoteInterfaceGIPC;¶import client.ClientRemoteInterfaceRMI;¶import util.annotations.Tags;¶import util.interactiveMethodInvocation.IPCMechanism;¶import util.misc.ThreadSupport;¶import util.tags.DistributedTags;¶import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;¶import inputport.rpc.GIPCLocateRegistry;¶import inputport.rpc.GIPCRegistry;¶import port.ATracingConnectionListener;¶import util.trace.bean.BeanTraceUtility;¶import util.trace.factories.FactoryTraceUtility;¶import util.trace.misc.ThreadDelayed;¶import util.trace.port.PortTraceUtility;¶import util.trace.port.consensus.ConsensusTraceUtility;¶import util.trace.port.consensus.ProposalLearnedNotificationSent;¶import util.trace.port.consensus.RemoteProposeRequestReceived;¶import util.trace.port.rpc.rmi.RMIRegistryLocated;¶import util.trace.port.nio.NIOTraceUtility;¶import util.trace.port.rpc.rmi.RMITraceUtility;¶import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;¶import util.trace.port.rpc.gipc.GIPCRegistryCreated;¶import 	util.trace.port.rpc.rmi.RMIObjectRegistered;¶¶@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})¶public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{¶	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();¶	¶	private static  String RMI_SERVER_HOST_NAME;¶	private static int RMI_SERVER_PORT;¶	private static String SERVER_NAME;¶	¶	//A5¶	private static int GIPC_SERVER_PORT;¶	protected static GIPCRegistry gipcRegistry;¶	¶	//int aProposalNumber = 0;¶	¶¶	¶	@Override¶	public void processArgs(String[] args) {¶		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));¶		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));¶		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));¶		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));¶		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));¶¶		// Make sure you set this property when processing args¶		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));¶¶		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);¶		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);¶		SERVER_NAME = "SERVER";¶		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);¶				//ClientArgsProcessor.getServerHost(args);¶		¶		¶	}¶	¶	@Override¶	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {¶		// TODO Auto-generated method stub¶		clientList.add(aClient);¶		System.out.println("Client registered");¶		¶	}¶¶	@Override¶	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {¶		¶		//TODO Check is this is where delay is needed¶		long aDelay = getDelay(); ¶		if (aDelay > 0) {¶			ThreadSupport.sleep(aDelay);¶		}¶		¶		System.out.println("Command recieved for broadcast: "+ aNewCommand);¶		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶		¶		for (ClientRemoteInterfaceRMI client : clientList) {¶			if(client.equals(originalClient)) {¶				if (aNewCommand.charAt(0) == 'q') {¶					//Need to quit¶					this.quit(0);¶				}¶				continue;¶			}¶			¶			client.inCoupler(aNewCommand, aProposalNumber);¶			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);¶			¶			if (aNewCommand.charAt(0) == 'q') {¶				//Need to quit¶				this.quit(0);¶			}¶		}¶				¶	}¶	¶	@Override¶	protected void setTracing() {¶		//A5¶		FactoryTraceUtility.setTracing();¶		BeanTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		GIPCRPCTraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶				¶		//A4¶		PortTraceUtility.setTracing();¶		RMITraceUtility.setTracing();¶		NIOTraceUtility.setTracing();¶		FactoryTraceUtility.setTracing();		¶		ConsensusTraceUtility.setTracing();¶		ThreadDelayed.enablePrint();¶		trace(true);¶	}¶¶	@Override¶	protected void init(String[] args) {¶		¶		setTracing();¶¶		this.processArgs(args);¶		¶		¶		try {¶			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);¶			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);¶			//Create remote server object¶			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();¶			//create proxy of remote server object¶			//UnicastRemoteObject.exportObject(server, 0);¶			UnicastRemoteObject.exportObject(this, 0);¶			//send server to RMI server¶			//rmiRegistry.rebind(SERVER_NAME, server);¶			rmiRegistry.rebind(SERVER_NAME, this);¶			¶			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);¶			¶			System.out.println("Server proxy sent to RMI Registry");¶			¶			¶			¶		} catch(Exception e){¶			e.printStackTrace();¶		}¶		¶	}¶	¶	@Override¶	public void  start (String[] args) {¶		init(args);¶		¶¶	}¶¶	@Override¶	public void fakeMethod(String stringOne, String stringTwo){¶		// TODO Auto-generated method stub¶		"), Diff(INSERT,"setIPCMechanism(mechanism);¶		setBroadcastMetaState(broadcast);¶		"), Diff(EQUAL,"¶	}¶¶	@Override¶	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {¶		// TODO Auto-generated method stub¶		¶	}¶	¶	@Override¶	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFour(String stringOne, boolean trueFalse) {¶		// TODO Auto-generated method stub¶¶	}¶	¶	@Override¶	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {¶		// TODO Auto-generated method stub¶¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package server.remote;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import assignments.util.mainArgs.ClientArgsProcessor;
import assignments.util.mainArgs.ServerArgsProcessor;
import client.ClientRemoteInterfaceGIPC;
import client.ClientRemoteInterfaceRMI;
import util.annotations.Tags;
import util.interactiveMethodInvocation.IPCMechanism;
import util.misc.ThreadSupport;
import util.tags.DistributedTags;
import coupledsims.AStandAloneTwoCoupledHalloweenSimulations;
import inputport.rpc.GIPCLocateRegistry;
import inputport.rpc.GIPCRegistry;
import port.ATracingConnectionListener;
import util.trace.bean.BeanTraceUtility;
import util.trace.factories.FactoryTraceUtility;
import util.trace.misc.ThreadDelayed;
import util.trace.port.PortTraceUtility;
import util.trace.port.consensus.ConsensusTraceUtility;
import util.trace.port.consensus.ProposalLearnedNotificationSent;
import util.trace.port.consensus.RemoteProposeRequestReceived;
import util.trace.port.rpc.rmi.RMIRegistryLocated;
import util.trace.port.nio.NIOTraceUtility;
import util.trace.port.rpc.rmi.RMITraceUtility;
import util.trace.port.rpc.gipc.GIPCRPCTraceUtility;
import util.trace.port.rpc.gipc.GIPCRegistryCreated;
import 	util.trace.port.rpc.rmi.RMIObjectRegistered;

@Tags({DistributedTags.SERVER_REMOTE_OBJECT, DistributedTags.RMI, DistributedTags.GIPC})
public class ServerRemoteObjectRMI extends AStandAloneTwoCoupledHalloweenSimulations implements ServerRemoteInterfaceRMI{
	List<ClientRemoteInterfaceRMI> clientList = new ArrayList<ClientRemoteInterfaceRMI>();
	
	private static  String RMI_SERVER_HOST_NAME;
	private static int RMI_SERVER_PORT;
	private static String SERVER_NAME;
	
	//A5
	private static int GIPC_SERVER_PORT;
	protected static GIPCRegistry gipcRegistry;
	
	//int aProposalNumber = 0;
	

	
	@Override
	public void processArgs(String[] args) {
		System.out.println("Registry host:" + ClientArgsProcessor.getRegistryHost(args));
		System.out.println("Registry port:" + ClientArgsProcessor.getRegistryPort(args));
		System.out.println("Server host:" + ClientArgsProcessor.getServerHost(args));
		System.out.println("Headless:" + ClientArgsProcessor.getHeadless(args));
		System.out.println("Client name:" + ClientArgsProcessor.getClientName(args));

		// Make sure you set this property when processing args
		System.setProperty("java.awt.headless", ClientArgsProcessor.getHeadless(args));

		RMI_SERVER_HOST_NAME = ServerArgsProcessor.getRegistryHost(args);
		RMI_SERVER_PORT = ServerArgsProcessor.getRegistryPort(args);
		SERVER_NAME = "SERVER";
		GIPC_SERVER_PORT = ServerArgsProcessor.getGIPCServerPort(args);
				//ClientArgsProcessor.getServerHost(args);
		
		
	}
	
	@Override
	public void registerClient(ClientRemoteInterfaceRMI aClient) throws RemoteException {
		// TODO Auto-generated method stub
		clientList.add(aClient);
		System.out.println("Client registered");
		
	}

	@Override
	public void broadcast(String aNewCommand, ClientRemoteInterfaceRMI originalClient, int aProposalNumber) throws RemoteException {
		
		//TODO Check is this is where delay is needed
		long aDelay = getDelay(); 
		if (aDelay > 0) {
			ThreadSupport.sleep(aDelay);
		}
		
		System.out.println("Command recieved for broadcast: "+ aNewCommand);
		RemoteProposeRequestReceived.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
		
		for (ClientRemoteInterfaceRMI client : clientList) {
			if(client.equals(originalClient)) {
				if (aNewCommand.charAt(0) == 'q') {
					//Need to quit
					this.quit(0);
				}
				continue;
			}
			
			client.inCoupler(aNewCommand, aProposalNumber);
			ProposalLearnedNotificationSent.newCase(this, SERVER_NAME, aProposalNumber, aNewCommand);
			
			if (aNewCommand.charAt(0) == 'q') {
				//Need to quit
				this.quit(0);
			}
		}
				
	}
	
	@Override
	protected void setTracing() {
		//A5
		FactoryTraceUtility.setTracing();
		BeanTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		GIPCRPCTraceUtility.setTracing();
		NIOTraceUtility.setTracing();
				
		//A4
		PortTraceUtility.setTracing();
		RMITraceUtility.setTracing();
		NIOTraceUtility.setTracing();
		FactoryTraceUtility.setTracing();		
		ConsensusTraceUtility.setTracing();
		ThreadDelayed.enablePrint();
		trace(true);
	}

	@Override
	protected void init(String[] args) {
		
		setTracing();

		this.processArgs(args);
		
		
		try {
			final Registry rmiRegistry = LocateRegistry.getRegistry(RMI_SERVER_HOST_NAME, RMI_SERVER_PORT);
			RMIRegistryLocated.newCase(this, RMI_SERVER_HOST_NAME, RMI_SERVER_PORT, rmiRegistry);
			//Create remote server object
			final ServerRemoteInterfaceRMI server = new ServerRemoteObjectRMI();
			//create proxy of remote server object
			//UnicastRemoteObject.exportObject(server, 0);
			UnicastRemoteObject.exportObject(this, 0);
			//send server to RMI server
			//rmiRegistry.rebind(SERVER_NAME, server);
			rmiRegistry.rebind(SERVER_NAME, this);
			
			RMIObjectRegistered.newCase(this, SERVER_NAME, (ServerRemoteInterfaceRMI) this, rmiRegistry);
			
			System.out.println("Server proxy sent to RMI Registry");
			
			
			
		} catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	@Override
	public void  start (String[] args) {
		init(args);
		

	}

	@Override
	public void fakeMethod(String stringOne, String stringTwo){
		// TODO Auto-generated method stub
		setIPCMechanism(mechanism);
		setBroadcastMetaState(broadcast);
		
	}

	@Override
	public void fakeMethodTwo(String stringOne, ClientRemoteInterfaceRMI client) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public void fakeMethodThree(String stringOne, ClientRemoteInterfaceGIPC client) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFour(String stringOne, boolean trueFalse) {
		// TODO Auto-generated method stub

	}
	
	@Override
	public void fakeMethodFive(String stringOne, IPCMechanism mechanism) {
		// TODO Auto-generated method stub

	}

}
]]></snapshot>
  </Command>
  <Command __id="1053" _type="PauseCommand" date="Thu Mar 31 10:48:21 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="716401">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1550]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <DocumentChange __id="1052" _type="Insert" date="Thu Mar 31 10:48:21 EDT 2022" docASTNodeCount="802" docActiveCodeLength="5749" docExpressionCount="575" docLength="6343" length="19" offset="5698" repeat="16" starttimestamp="1648737385020" timestamp="716401" timestamp2="720049">
    <text><![CDATA[
		IPCMechanism = ]]></text>
  </DocumentChange>
  <Command __id="1054" _type="InsertStringCommand" date="Thu Mar 31 10:48:21 EDT 2022" starttimestamp="1648737385020" timestamp="716412" timestamp2="716412">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1057" _type="PauseCommand" date="Thu Mar 31 10:48:22 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="717488">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1076]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1056" _type="InsertStringCommand" date="Thu Mar 31 10:48:22 EDT 2022" starttimestamp="1648737385020" timestamp="717488" timestamp2="717488">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1059" _type="InsertStringCommand" date="Thu Mar 31 10:48:22 EDT 2022" starttimestamp="1648737385020" timestamp="717657" timestamp2="717657">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="1061" _type="InsertStringCommand" date="Thu Mar 31 10:48:22 EDT 2022" starttimestamp="1648737385020" timestamp="717836" timestamp2="717836">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1063" _type="InsertStringCommand" date="Thu Mar 31 10:48:23 EDT 2022" starttimestamp="1648737385020" timestamp="718233" timestamp2="718233">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="1065" _type="InsertStringCommand" date="Thu Mar 31 10:48:23 EDT 2022" starttimestamp="1648737385020" timestamp="718502" timestamp2="718502">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1067" _type="InsertStringCommand" date="Thu Mar 31 10:48:23 EDT 2022" starttimestamp="1648737385020" timestamp="718707" timestamp2="718707">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1069" _type="InsertStringCommand" date="Thu Mar 31 10:48:23 EDT 2022" starttimestamp="1648737385020" timestamp="718821" timestamp2="718821">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1071" _type="InsertStringCommand" date="Thu Mar 31 10:48:23 EDT 2022" starttimestamp="1648737385020" timestamp="718889" timestamp2="718889">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1073" _type="InsertStringCommand" date="Thu Mar 31 10:48:24 EDT 2022" starttimestamp="1648737385020" timestamp="719031" timestamp2="719031">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1075" _type="InsertStringCommand" date="Thu Mar 31 10:48:24 EDT 2022" starttimestamp="1648737385020" timestamp="719115" timestamp2="719115">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1077" _type="InsertStringCommand" date="Thu Mar 31 10:48:24 EDT 2022" starttimestamp="1648737385020" timestamp="719222" timestamp2="719222">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1079" _type="InsertStringCommand" date="Thu Mar 31 10:48:24 EDT 2022" starttimestamp="1648737385020" timestamp="719376" timestamp2="719376">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1081" _type="InsertStringCommand" date="Thu Mar 31 10:48:24 EDT 2022" starttimestamp="1648737385020" timestamp="719498" timestamp2="719498">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1083" _type="InsertStringCommand" date="Thu Mar 31 10:48:24 EDT 2022" starttimestamp="1648737385020" timestamp="719879" timestamp2="719879">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1085" _type="InsertStringCommand" date="Thu Mar 31 10:48:25 EDT 2022" starttimestamp="1648737385020" timestamp="720053" timestamp2="720053">
    <data><![CDATA[ ]]></data>
  </Command>
  <DocumentChange __id="1086" _type="Delete" date="Thu Mar 31 10:48:26 EDT 2022" docASTNodeCount="803" docActiveCodeLength="5747" docExpressionCount="574" docLength="6341" endLine="174" length="2" offset="5715" repeat="2" startLine="174" starttimestamp="1648737385020" timestamp="720981" timestamp2="721140">
    <text><![CDATA[= ]]></text>
  </DocumentChange>
  <Command __id="1087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:48:26 EDT 2022" starttimestamp="1648737385020" timestamp="720984" />
  <Command __id="1089" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:48:26 EDT 2022" starttimestamp="1648737385020" timestamp="721143" />
  <Command __id="1091" _type="InsertStringCommand" date="Thu Mar 31 10:48:26 EDT 2022" starttimestamp="1648737385020" timestamp="721484" timestamp2="721484">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1093" _type="InsertStringCommand" date="Thu Mar 31 10:48:26 EDT 2022" starttimestamp="1648737385020" timestamp="721556" timestamp2="721556">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1095" _type="InsertStringCommand" date="Thu Mar 31 10:48:26 EDT 2022" starttimestamp="1648737385020" timestamp="721765" timestamp2="721765">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1097" _type="InsertStringCommand" date="Thu Mar 31 10:48:26 EDT 2022" starttimestamp="1648737385020" timestamp="721855" timestamp2="721855">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1099" _type="InsertStringCommand" date="Thu Mar 31 10:48:26 EDT 2022" starttimestamp="1648737385020" timestamp="721926" timestamp2="721926">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1101" _type="InsertStringCommand" date="Thu Mar 31 10:48:27 EDT 2022" starttimestamp="1648737385020" timestamp="722049" timestamp2="722049">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1103" _type="InsertStringCommand" date="Thu Mar 31 10:48:27 EDT 2022" starttimestamp="1648737385020" timestamp="722133" timestamp2="722133">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1105" _type="InsertStringCommand" date="Thu Mar 31 10:48:27 EDT 2022" starttimestamp="1648737385020" timestamp="722267" timestamp2="722267">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1107" _type="InsertStringCommand" date="Thu Mar 31 10:48:27 EDT 2022" starttimestamp="1648737385020" timestamp="722378" timestamp2="722378">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1109" _type="InsertStringCommand" date="Thu Mar 31 10:48:27 EDT 2022" starttimestamp="1648737385020" timestamp="722580" timestamp2="722580">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1111" _type="InsertStringCommand" date="Thu Mar 31 10:48:27 EDT 2022" starttimestamp="1648737385020" timestamp="722849" timestamp2="722849">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1113" _type="InsertStringCommand" date="Thu Mar 31 10:48:28 EDT 2022" starttimestamp="1648737385020" timestamp="723028" timestamp2="723028">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1116" _type="PauseCommand" date="Thu Mar 31 10:48:29 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="724747">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1719]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1115" _type="InsertStringCommand" date="Thu Mar 31 10:48:29 EDT 2022" starttimestamp="1648737385020" timestamp="724747" timestamp2="724747">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="1118" _type="InsertStringCommand" date="Thu Mar 31 10:48:29 EDT 2022" starttimestamp="1648737385020" timestamp="724964" timestamp2="724964">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1120" _type="InsertStringCommand" date="Thu Mar 31 10:48:30 EDT 2022" starttimestamp="1648737385020" timestamp="725151" timestamp2="725151">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1122" _type="InsertStringCommand" date="Thu Mar 31 10:48:30 EDT 2022" starttimestamp="1648737385020" timestamp="725743" timestamp2="725743">
    <data><![CDATA[I]]></data>
  </Command>
  <Command __id="1124" _type="InsertStringCommand" date="Thu Mar 31 10:48:30 EDT 2022" starttimestamp="1648737385020" timestamp="725915" timestamp2="725915">
    <data><![CDATA[P]]></data>
  </Command>
  <Command __id="1126" _type="InsertStringCommand" date="Thu Mar 31 10:48:31 EDT 2022" starttimestamp="1648737385020" timestamp="726063" timestamp2="726063">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="1128" _type="InsertStringCommand" date="Thu Mar 31 10:48:31 EDT 2022" starttimestamp="1648737385020" timestamp="726543" timestamp2="726543">
    <data><![CDATA[M]]></data>
  </Command>
  <Command __id="1130" _type="InsertStringCommand" date="Thu Mar 31 10:48:31 EDT 2022" starttimestamp="1648737385020" timestamp="726675" timestamp2="726675">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1132" _type="InsertStringCommand" date="Thu Mar 31 10:48:31 EDT 2022" starttimestamp="1648737385020" timestamp="726900" timestamp2="726900">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1134" _type="InsertStringCommand" date="Thu Mar 31 10:48:32 EDT 2022" starttimestamp="1648737385020" timestamp="727021" timestamp2="727021">
    <data><![CDATA[h]]></data>
  </Command>
  <Command __id="1136" _type="InsertStringCommand" date="Thu Mar 31 10:48:32 EDT 2022" starttimestamp="1648737385020" timestamp="727064" timestamp2="727064">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1138" _type="InsertStringCommand" date="Thu Mar 31 10:48:32 EDT 2022" starttimestamp="1648737385020" timestamp="727322" timestamp2="727322">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1140" _type="InsertStringCommand" date="Thu Mar 31 10:48:32 EDT 2022" starttimestamp="1648737385020" timestamp="727395" timestamp2="727395">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1142" _type="InsertStringCommand" date="Thu Mar 31 10:48:32 EDT 2022" starttimestamp="1648737385020" timestamp="727565" timestamp2="727565">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="1144" _type="InsertStringCommand" date="Thu Mar 31 10:48:32 EDT 2022" starttimestamp="1648737385020" timestamp="727739" timestamp2="727739">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="1146" _type="InsertStringCommand" date="Thu Mar 31 10:48:33 EDT 2022" starttimestamp="1648737385020" timestamp="728336" timestamp2="728336">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1147" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Mar 31 10:48:34 EDT 2022" starttimestamp="1648737385020" timestamp="729227" />
  <Command __id="1148" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_PREVIOUS" date="Thu Mar 31 10:48:34 EDT 2022" starttimestamp="1648737385020" timestamp="729354" />
  <Command __id="1149" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Thu Mar 31 10:48:34 EDT 2022" starttimestamp="1648737385020" timestamp="729891" />
  <Command __id="1151" _type="InsertStringCommand" date="Thu Mar 31 10:48:35 EDT 2022" starttimestamp="1648737385020" timestamp="730195" timestamp2="730195">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1152" _type="InsertStringCommand" date="Thu Mar 31 10:48:35 EDT 2022" starttimestamp="1648737385020" timestamp="730256" timestamp2="730256">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1154" _type="PauseCommand" date="Thu Mar 31 10:48:40 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="735344">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5088]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1153" _type="ShellCommand" date="Thu Mar 31 10:48:40 EDT 2022" starttimestamp="1648737385020" timestamp="735344" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1155" _type="ShellCommand" date="Thu Mar 31 10:48:40 EDT 2022" starttimestamp="1648737385020" timestamp="735486" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1158" _type="PauseCommand" date="Thu Mar 31 10:48:43 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="738548">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Replace]]></prev>
    <pause><![CDATA[3039]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <DocumentChange __id="1090" _type="Insert" date="Thu Mar 31 10:48:26 EDT 2022" docASTNodeCount="807" docActiveCodeLength="5777" docExpressionCount="577" docLength="6371" length="30" offset="5715" repeat="29" starttimestamp="1648737385020" timestamp="721477" timestamp2="730191">
    <text><![CDATA[mechanism = getIPCMechansim();]]></text>
  </DocumentChange>
  <DocumentChange __id="1156" _type="Replace" date="Thu Mar 31 10:48:40 EDT 2022" docASTNodeCount="807" docActiveCodeLength="5777" docExpressionCount="577" docLength="6371" endLine="174" insertionLength="15" int_docASTNodeCount="797" int_docActiveCodeLength="5762" int_docExpressionCount="569" int_docLength="6356" length="15" offset="5727" startLine="174" starttimestamp="1648737385020" timestamp="735509">
    <deletedText><![CDATA[getIPCMechansim]]></deletedText>
    <insertedText><![CDATA[getIPCMechanism]]></insertedText>
  </DocumentChange>
  <Command __id="1157" _type="MoveCaretCommand" caretOffset="4400" date="Thu Mar 31 10:48:43 EDT 2022" docOffset="5776" starttimestamp="1648737385020" timestamp="738548" />
  <DocumentChange __id="1159" _type="Insert" date="Thu Mar 31 10:48:43 EDT 2022" docASTNodeCount="810" docActiveCodeLength="5782" docExpressionCount="578" docLength="6376" length="5" offset="5776" repeat="2" starttimestamp="1648737385020" timestamp="738874" timestamp2="739981">
    <text><![CDATA[
		B]]></text>
  </DocumentChange>
  <Command __id="1160" _type="InsertStringCommand" date="Thu Mar 31 10:48:43 EDT 2022" starttimestamp="1648737385020" timestamp="738881" timestamp2="738881">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1163" _type="PauseCommand" date="Thu Mar 31 10:48:45 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="739986">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1105]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="1162" _type="InsertStringCommand" date="Thu Mar 31 10:48:45 EDT 2022" starttimestamp="1648737385020" timestamp="739986" timestamp2="739986">
    <data><![CDATA[B]]></data>
  </Command>
  <DocumentChange __id="1164" _type="Delete" date="Thu Mar 31 10:48:45 EDT 2022" docASTNodeCount="807" docActiveCodeLength="5781" docExpressionCount="577" docLength="6375" endLine="176" length="1" offset="5780" startLine="176" starttimestamp="1648737385020" timestamp="740387">
    <text><![CDATA[B]]></text>
  </DocumentChange>
  <Command __id="1165" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Thu Mar 31 10:48:45 EDT 2022" starttimestamp="1648737385020" timestamp="740395" />
  <Command __id="1167" _type="InsertStringCommand" date="Thu Mar 31 10:48:45 EDT 2022" starttimestamp="1648737385020" timestamp="740466" timestamp2="740466">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1169" _type="InsertStringCommand" date="Thu Mar 31 10:48:45 EDT 2022" starttimestamp="1648737385020" timestamp="740764" timestamp2="740764">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1171" _type="InsertStringCommand" date="Thu Mar 31 10:48:45 EDT 2022" starttimestamp="1648737385020" timestamp="740903" timestamp2="740903">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1173" _type="InsertStringCommand" date="Thu Mar 31 10:48:46 EDT 2022" starttimestamp="1648737385020" timestamp="741083" timestamp2="741083">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="1175" _type="InsertStringCommand" date="Thu Mar 31 10:48:46 EDT 2022" starttimestamp="1648737385020" timestamp="741125" timestamp2="741125">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1177" _type="InsertStringCommand" date="Thu Mar 31 10:48:46 EDT 2022" starttimestamp="1648737385020" timestamp="741182" timestamp2="741182">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1179" _type="InsertStringCommand" date="Thu Mar 31 10:48:46 EDT 2022" starttimestamp="1648737385020" timestamp="741287" timestamp2="741287">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="1181" _type="InsertStringCommand" date="Thu Mar 31 10:48:46 EDT 2022" starttimestamp="1648737385020" timestamp="741380" timestamp2="741380">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1183" _type="InsertStringCommand" date="Thu Mar 31 10:48:46 EDT 2022" starttimestamp="1648737385020" timestamp="741818" timestamp2="741818">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1185" _type="InsertStringCommand" date="Thu Mar 31 10:48:47 EDT 2022" starttimestamp="1648737385020" timestamp="742049" timestamp2="742049">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1187" _type="InsertStringCommand" date="Thu Mar 31 10:48:47 EDT 2022" starttimestamp="1648737385020" timestamp="742156" timestamp2="742156">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1189" _type="InsertStringCommand" date="Thu Mar 31 10:48:47 EDT 2022" starttimestamp="1648737385020" timestamp="742234" timestamp2="742234">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1191" _type="InsertStringCommand" date="Thu Mar 31 10:48:47 EDT 2022" starttimestamp="1648737385020" timestamp="742390" timestamp2="742390">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1193" _type="InsertStringCommand" date="Thu Mar 31 10:48:47 EDT 2022" starttimestamp="1648737385020" timestamp="742708" timestamp2="742708">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1195" _type="InsertStringCommand" date="Thu Mar 31 10:48:47 EDT 2022" starttimestamp="1648737385020" timestamp="742870" timestamp2="742870">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1197" _type="InsertStringCommand" date="Thu Mar 31 10:48:47 EDT 2022" starttimestamp="1648737385020" timestamp="742939" timestamp2="742939">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1199" _type="InsertStringCommand" date="Thu Mar 31 10:48:48 EDT 2022" starttimestamp="1648737385020" timestamp="743161" timestamp2="743161">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1201" _type="InsertStringCommand" date="Thu Mar 31 10:48:49 EDT 2022" starttimestamp="1648737385020" timestamp="744028" timestamp2="744028">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1203" _type="InsertStringCommand" date="Thu Mar 31 10:48:49 EDT 2022" starttimestamp="1648737385020" timestamp="744262" timestamp2="744262">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="1205" _type="InsertStringCommand" date="Thu Mar 31 10:48:49 EDT 2022" starttimestamp="1648737385020" timestamp="744403" timestamp2="744403">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="1207" _type="InsertStringCommand" date="Thu Mar 31 10:48:49 EDT 2022" starttimestamp="1648737385020" timestamp="744813" timestamp2="744813">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1209" _type="InsertStringCommand" date="Thu Mar 31 10:48:50 EDT 2022" starttimestamp="1648737385020" timestamp="744987" timestamp2="744987">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1211" _type="InsertStringCommand" date="Thu Mar 31 10:48:50 EDT 2022" starttimestamp="1648737385020" timestamp="745101" timestamp2="745101">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="1213" _type="InsertStringCommand" date="Thu Mar 31 10:48:50 EDT 2022" starttimestamp="1648737385020" timestamp="745180" timestamp2="745180">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="1215" _type="InsertStringCommand" date="Thu Mar 31 10:48:50 EDT 2022" starttimestamp="1648737385020" timestamp="745325" timestamp2="745325">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1217" _type="PauseCommand" date="Thu Mar 31 10:48:52 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="747347">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2022]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1216" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:48:52 EDT 2022" starttimestamp="1648737385020" timestamp="747347" />
  <Command __id="1218" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:48:52 EDT 2022" starttimestamp="1648737385020" timestamp="747437" />
  <Command __id="1219" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:48:52 EDT 2022" starttimestamp="1648737385020" timestamp="747468" />
  <Command __id="1221" _type="PauseCommand" date="Thu Mar 31 10:48:55 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="750084">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2616]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1227" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:48:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="752935" type="Debug" />
  <Command __id="1229" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:48:57 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="752935" type="Run" />
  <Command __id="1230" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:48:57 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="752935" type="Debug" />
  <Command __id="1231" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:48:57 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="752935" type="Run" />
  <Command __id="1233" _type="PauseCommand" date="Thu Mar 31 10:49:01 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="756644">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3709]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1234" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:49:09 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="764429" type="Run" />
  <Command __id="1236" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:49:09 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="764429" type="Run" />
  <Command __id="1238" _type="PauseCommand" date="Thu Mar 31 10:49:11 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="766453">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2023]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1237" _type="ShellCommand" date="Thu Mar 31 10:49:11 EDT 2022" starttimestamp="1648737385020" timestamp="766452" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1240" _type="PauseCommand" date="Thu Mar 31 10:49:13 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="768385">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1933]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1239" _type="ConsoleOutput" date="Thu Mar 31 10:49:13 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="768385" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Mar 31 10:49:13 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@44e097d4 . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Thu Mar 31 10:49:13 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1242" _type="PauseCommand" date="Thu Mar 31 10:49:15 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="770382">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1997]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1241" _type="ConsoleOutput" date="Thu Mar 31 10:49:15 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="770382" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Thu Mar 31 10:49:15 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Mar 31 10:49:15 EDT 2022
End O(n2) inter- and intra class method calls:Thu Mar 31 10:49:15 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:80¶Running second pass checks Thu Mar 31 10:49:15 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Mar 31 10:49:15 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Thu Mar 31 10:49:1"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="1243" _type="ConsoleOutput" date="Thu Mar 31 10:49:16 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="771348" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Mar 31 10:49:16 EDT 2022
Generating checks:Thu Mar 31 10:49:16 EDT 2022
Finished Generating checks:Thu Mar 31 10:49:16 EDT 2022
Generating externals:Thu Mar 31 10:49:16 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Thu Mar 31 10:49:1"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Thu Mar 31 10:49:16 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Thu Mar 31 10:49:1"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Thu Mar 31 10:49:1"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="1244" _type="ConsoleOutput" date="Thu Mar 31 10:49:16 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="771588" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Mar 31 10:49:16 EDT 2022
Test execution time (ms):3231
Test execution time (ms):28

A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.48148148148148145
Test execution time (ms):6
Test execution time (ms):4
Test execution time (ms):5
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Thu Mar 31 10:49:16 EDT 2022¶"), Diff(DELETE,"Generating checks:Thu Mar 31 10:49:16 EDT 2022¶Finished Generating checks:Thu Mar 31 10:49:16 EDT 2022¶Generating externals:Thu Mar 31 10:49:16 EDT 2022"), Diff(INSERT,"Test execution time (ms):3231¶Test execution time (ms):28¶¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.48148148148148145¶Test execution time (ms):6¶Test execution time (ms):4¶Test execution time (ms):5"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1245" _type="ConsoleOutput" date="Thu Mar 31 10:49:16 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="771669" type="ConsoleOutput">
    <outputString><![CDATA[
Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (236)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (275)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (185)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (40)
   |~ ServerRemoteInterfaceRMI.java (26)
   |~ ServerRemoteObjectGIPC.java (314)
   |~ ServerRemoteObjectRMI.java (206)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Mar 31 10:49:16 EDT 2022¶Test execution time (ms):3231¶Test execution time (ms):28¶¶A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.48148148148148145¶Test execution time (ms):6¶Test execution time (ms):4¶Test execution time (ms):5"), Diff(INSERT,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (185)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (26)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (206)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1247" _type="PauseCommand" date="Thu Mar 31 10:49:18 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="773760">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2091]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1246" _type="ConsoleOutput" date="Thu Mar 31 10:49:18 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="773760" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@5acbe0e . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (275)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (185)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (26)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (206)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)"), Diff(INSERT,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@5acbe0e . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1249" _type="PauseCommand" date="Thu Mar 31 10:49:24 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="779955">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6195]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1248" _type="ShellCommand" date="Thu Mar 31 10:49:24 EDT 2022" starttimestamp="1648737385020" timestamp="779955" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1251" _type="PauseCommand" date="Thu Mar 31 10:49:46 EDT 2022" range="20s-30s" starttimestamp="1648737385020" timestamp="800989">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[21034]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="1250" _type="CopyCommand" date="Thu Mar 31 10:49:46 EDT 2022" starttimestamp="1648737385020" timestamp="800989" />
  <DocumentChange __id="1166" _type="Insert" date="Thu Mar 31 10:48:45 EDT 2022" docASTNodeCount="812" docActiveCodeLength="5806" docExpressionCount="579" docLength="6400" length="25" offset="5780" repeat="25" starttimestamp="1648737385020" timestamp="740462" timestamp2="745318">
    <text><![CDATA[boolean broadcast = true;]]></text>
  </DocumentChange>
  <Command __id="1253" _type="PauseCommand" date="Thu Mar 31 10:49:57 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="812213">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[11224]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1254" _type="SelectTextCommand" caretOffset="9175" date="Thu Mar 31 10:49:57 EDT 2022" end="9285" start="9175" starttimestamp="1648737385020" timestamp="812411" />
  <Command __id="1256" _type="PauseCommand" date="Thu Mar 31 10:49:58 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="813640">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1229]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1255" _type="MoveCaretCommand" caretOffset="9285" date="Thu Mar 31 10:49:58 EDT 2022" docOffset="9285" starttimestamp="1648737385020" timestamp="813640" />
  <Command __id="1258" _type="PauseCommand" date="Thu Mar 31 10:50:00 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="815237">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1597]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1257" _type="MoveCaretCommand" caretOffset="9277" date="Thu Mar 31 10:50:00 EDT 2022" docOffset="9277" starttimestamp="1648737385020" timestamp="815237" />
  <Command __id="1260" _type="InsertStringCommand" date="Thu Mar 31 10:50:00 EDT 2022" starttimestamp="1648737385020" timestamp="815663" timestamp2="815663">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1262" _type="PasteCommand" date="Thu Mar 31 10:50:01 EDT 2022" starttimestamp="1648737385020" timestamp="816242" />
  <Command __id="1264" _type="InsertStringCommand" date="Thu Mar 31 10:50:02 EDT 2022" starttimestamp="1648737385020" timestamp="817036" timestamp2="817036">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="1265" _type="InsertStringCommand" date="Thu Mar 31 10:50:02 EDT 2022" starttimestamp="1648737385020" timestamp="817089" timestamp2="817089">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="1267" _type="InsertStringCommand" date="Thu Mar 31 10:50:02 EDT 2022" starttimestamp="1648737385020" timestamp="817351" timestamp2="817351">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="1269" _type="PauseCommand" date="Thu Mar 31 10:50:03 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="818430">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1079]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1272" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:50:04 EDT 2022" starttimestamp="1648737385020" timestamp="819615" />
  <Command __id="1274" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:50:04 EDT 2022" starttimestamp="1648737385020" timestamp="819619" />
  <Command __id="1276" _type="PauseCommand" date="Thu Mar 31 10:50:17 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="832715">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[13096]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1275" _type="MoveCaretCommand" caretOffset="9303" date="Thu Mar 31 10:50:17 EDT 2022" docOffset="9303" starttimestamp="1648737385020" timestamp="832715" />
  <Command __id="1278" _type="InsertStringCommand" date="Thu Mar 31 10:50:18 EDT 2022" starttimestamp="1648737385020" timestamp="833446" timestamp2="833446">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="1280" _type="InsertStringCommand" date="Thu Mar 31 10:50:18 EDT 2022" starttimestamp="1648737385020" timestamp="833716" timestamp2="833716">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="1282" _type="InsertStringCommand" date="Thu Mar 31 10:50:18 EDT 2022" starttimestamp="1648737385020" timestamp="833812" timestamp2="833812">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="1284" _type="InsertStringCommand" date="Thu Mar 31 10:50:18 EDT 2022" starttimestamp="1648737385020" timestamp="833880" timestamp2="833880">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1286" _type="InsertStringCommand" date="Thu Mar 31 10:50:19 EDT 2022" starttimestamp="1648737385020" timestamp="834060" timestamp2="834060">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="1288" _type="InsertStringCommand" date="Thu Mar 31 10:50:19 EDT 2022" starttimestamp="1648737385020" timestamp="834489" timestamp2="834489">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="1290" _type="InsertStringCommand" date="Thu Mar 31 10:50:19 EDT 2022" starttimestamp="1648737385020" timestamp="834617" timestamp2="834617">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="1292" _type="InsertStringCommand" date="Thu Mar 31 10:50:19 EDT 2022" starttimestamp="1648737385020" timestamp="834718" timestamp2="834718">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="1294" _type="InsertStringCommand" date="Thu Mar 31 10:50:19 EDT 2022" starttimestamp="1648737385020" timestamp="834895" timestamp2="834895">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="1296" _type="PauseCommand" date="Thu Mar 31 10:50:21 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="836021">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1126]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1295" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Thu Mar 31 10:50:21 EDT 2022" starttimestamp="1648737385020" timestamp="836021" />
  <Command __id="1297" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:50:21 EDT 2022" starttimestamp="1648737385020" timestamp="836122" />
  <Command __id="1298" _type="EclipseCommand" commandID="" date="Thu Mar 31 10:50:21 EDT 2022" starttimestamp="1648737385020" timestamp="836157" />
  <Command __id="1300" _type="PauseCommand" date="Thu Mar 31 10:50:36 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="851328">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[15171]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1301" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:50:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="852552" type="Debug" />
  <Command __id="1303" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:50:37 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="852552" type="Run" />
  <Command __id="1304" _type="ProgramExecutionEvent" className="(Unknown)" date="Thu Mar 31 10:50:37 EDT 2022" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1648737385020" timestamp="852552" type="Debug" />
  <Command __id="1305" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:50:37 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="852552" type="Run" />
  <Command __id="1307" _type="PauseCommand" date="Thu Mar 31 10:50:40 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="855868">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3316]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1308" _type="ProgramExecutionEvent" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:50:42 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="857711" type="Run" />
  <Command __id="1310" _type="RunCommand" className="/A5/src/checks/Checks.java" date="Thu Mar 31 10:50:42 EDT 2022" kind="HitBreakPoint" projectName="A5" starttimestamp="1648737385020" timestamp="857711" type="Run" />
  <Command __id="1312" _type="PauseCommand" date="Thu Mar 31 10:50:44 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="859726">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2015]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1311" _type="ShellCommand" date="Thu Mar 31 10:50:44 EDT 2022" starttimestamp="1648737385020" timestamp="859726" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1314" _type="PauseCommand" date="Thu Mar 31 10:50:46 EDT 2022" range="1s-2s" starttimestamp="1648737385020" timestamp="861488">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1762]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1313" _type="ConsoleOutput" date="Thu Mar 31 10:50:46 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="861488" type="ConsoleOutput">
    <outputString><![CDATA[Building symbol table and running first pass checks:Thu Mar 31 10:50:46 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp533s21.assignment5.style.A5ExpectedCalls@5acbe0e . Results may change."), Diff(INSERT,"Building symbol table and running first pass checks:Thu Mar 31 10:50:46 EDT 2022"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1316" _type="PauseCommand" date="Thu Mar 31 10:50:48 EDT 2022" range="2s-5s" starttimestamp="1648737385020" timestamp="863495">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2007]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1315" _type="ConsoleOutput" date="Thu Mar 31 10:50:48 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="863495" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:80
Running second pass checks Thu Mar 31 10:50:48 EDT 2022
Start O(n2) inter- and intra class method calls:Thu Mar 31 10:50:48 EDT 2022
End O(n2) inter- and intra class method calls:Thu Mar 31 10:50:48 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Building s"), Diff(INSERT,"S"), Diff(EQUAL,"ymbol table "), Diff(DELETE,"and running first pass check"), Diff(INSERT,"size:80¶Running second pass checks Thu Mar 31 10:50:48 EDT 2022¶Start O(n2) inter- and intra class method calls:Thu Mar 31 10:50:48 EDT 2022¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Thu Mar 31 10:50:4"), Diff(DELETE,"6"), Diff(INSERT,"8"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="1317" _type="ConsoleOutput" date="Thu Mar 31 10:50:49 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="864433" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Thu Mar 31 10:50:49 EDT 2022
Generating checks:Thu Mar 31 10:50:49 EDT 2022
Finished Generating checks:Thu Mar 31 10:50:49 EDT 2022
Generating externals:Thu Mar 31 10:50:49 EDT 2022
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:80¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Thu Mar 31 10:50:4"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating checks:Thu Mar 31 10:50:49 EDT 2022¶Finished Generating check"), Diff(EQUAL,"s:Thu Mar 31 10:50:4"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Generating externa"), Diff(EQUAL,"ls:Thu Mar 31 10:50:4"), Diff(DELETE,"8"), Diff(INSERT,"9"), Diff(EQUAL," EDT 2022¶")]]]></diff>
  </Command>
  <Command __id="1318" _type="ConsoleOutput" date="Thu Mar 31 10:50:49 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="864787" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Thu Mar 31 10:50:49 EDT 2022
Test execution time (ms):3331
Test execution time (ms):16
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Thu Mar 31 10:50:49 EDT 2022¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Thu Mar 31 10:50:49 EDT 2022¶"), Diff(DELETE,"Finished Generating checks:Thu Mar 31 10:50:49 EDT 2022¶Generating externals:Thu Mar 31 10:50:49 EDT 2022"), Diff(INSERT,"Test execution time (ms):3331¶Test execution time (ms):16"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1319" _type="ConsoleOutput" date="Thu Mar 31 10:50:49 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="864909" type="ConsoleOutput">
    <outputString><![CDATA[A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.5185185185185185

Test execution time (ms):8
Test execution time (ms):8
Test execution time (ms):4

Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238
|- represents a package, |~ represents a file

The structure of your project was found to be:
|- src (20)
 |- checks (1)
  |~ Checks.java (36)
 |- client (6)
  |~ Client.java (22)
  |~ ClientConfigure.java (236)
  |~ ClientOutCoupler.java (51)
  |~ ClientRemoteInterfaceGIPC.java (30)
  |~ ClientRemoteInterfaceRMI.java (23)
  |~ ClientRemoteObject.java (276)
 |- registry (1)
  |~ TrickOrTreatRegistry.java (33)
 |- server (8)
  |~ OriginalSimulation.java (9)
  |~ Server.java (32)
  |~ ServerConfigure.java (185)
  |- remote (4)
   |~ ServerRemoteInterfaceGIPC.java (40)
   |~ ServerRemoteInterfaceRMI.java (26)
   |~ ServerRemoteObjectGIPC.java (314)
   |~ ServerRemoteObjectRMI.java (206)

Attempting to match to the structure:
|- .* (21)
 |- [a-z]?.*[Cc]lient.* (9)
  |~ .*Client.*.java (0)
  |~ .*Client.*.java (0)
  |~ Client.*Simulation.*.java (0)
  |~ Client.*Listener.*.java (0)
  |- [a-z]?.*[Rr]emote.* (4)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Pp]roxy.*.java (0)
   |~ .*[Rr][Mm][Ii].*.java (0)
   |~ .*[Gg][Ii][Pp][Cc].*.java (0)
 |- [a-z]?.*[Rr]egistry.* (1)
  |~ .*Registry.*.java (0)
 |- [a-z]?.*[Ss]erver.* (8)
  |~ .*Server.*.java (0)
  |~ .*Server.*.java (0)
  |~ .*Server.*Simulation.*.java (0)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Thu Mar 31 10:50:49 EDT 2022¶Test execution time (ms):3331¶Test execution time (ms):16"), Diff(INSERT,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.5185185185185185¶¶Test execution time (ms):8¶Test execution time (ms):8¶Test execution time (ms):4¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (276)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (185)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (26)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (206)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1321" _type="PauseCommand" date="Thu Mar 31 10:51:14 EDT 2022" range="20s-30s" starttimestamp="1648737385020" timestamp="889255">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[24346]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1320" _type="ConsoleOutput" date="Thu Mar 31 10:51:14 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="889255" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):20771
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A5ExpectedCalls did not pass completely:See console trace about lines failing  this check%0.5185185185185185¶¶Test execution time (ms):8¶Test execution time (ms):8¶Test execution time (ms):4¶¶Your project does not meet the required similarity percent of: 0.95 your similarity: 0.5238095238095238¶|- represents a package, |~ represents a file¶¶The structure of your project was found to be:¶|- src (20)¶ |- checks (1)¶  |~ Checks.java (36)¶ |- client (6)¶  |~ Client.java (22)¶  |~ ClientConfigure.java (236)¶  |~ ClientOutCoupler.java (51)¶  |~ ClientRemoteInterfaceGIPC.java (30)¶  |~ ClientRemoteInterfaceRMI.java (23)¶  |~ ClientRemoteObject.java (276)¶ |- registry (1)¶  |~ TrickOrTreatRegistry.java (33)¶ |- server (8)¶  |~ OriginalSimulation.java (9)¶  |~ Server.java (32)¶  |~ ServerConfigure.java (185)¶  |- remote (4)¶   |~ ServerRemoteInterfaceGIPC.java (40)¶   |~ ServerRemoteInterfaceRMI.java (26)¶   |~ ServerRemoteObjectGIPC.java (314)¶   |~ ServerRemoteObjectRMI.java (206)¶¶Attempting to match to the structure:¶|- .* (21)¶ |- [a-z]?.*[Cc]lient.* (9)¶  |~ .*Client.*.java (0)¶  |~ .*Client.*.java (0)¶  |~ Client.*Simulation.*.java (0)¶  |~ Client.*Listener.*.java (0)¶  |- [a-z]?.*[Rr]emote.* (4)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Pp]roxy.*.java (0)¶   |~ .*[Rr][Mm][Ii].*.java (0)¶   |~ .*[Gg][Ii][Pp][Cc].*.java (0)¶ |- [a-z]?.*[Rr]egistry.* (1)¶  |~ .*Registry.*.java (0)¶ |- [a-z]?.*[Ss]erver.* (8)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*.java (0)¶  |~ .*Server.*Simulation.*.java (0)"), Diff(INSERT,"Test execution time (ms):20771"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1323" _type="PauseCommand" date="Thu Mar 31 10:51:27 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="902843">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13588]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1322" _type="ConsoleOutput" date="Thu Mar 31 10:51:27 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="902843" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13580
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"20771"), Diff(INSERT,"13580"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1325" _type="PauseCommand" date="Thu Mar 31 10:51:41 EDT 2022" range="10s-20s" starttimestamp="1648737385020" timestamp="916334">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[13491]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1324" _type="ConsoleOutput" date="Thu Mar 31 10:51:41 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="916334" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13538
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):135"), Diff(INSERT,"3"), Diff(EQUAL,"8"), Diff(DELETE,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1327" _type="PauseCommand" date="Thu Mar 31 10:52:52 EDT 2022" range="1m-2m" starttimestamp="1648737385020" timestamp="987396">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[71062]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1326" _type="ConsoleOutput" date="Thu Mar 31 10:52:52 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="987396" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):67575
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"13538"), Diff(INSERT,"67575"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1329" _type="PauseCommand" date="Thu Mar 31 10:54:44 EDT 2022" range="1m-2m" starttimestamp="1648737385020" timestamp="1099975">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[112579]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1328" _type="ConsoleOutput" date="Thu Mar 31 10:54:44 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="1099975" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):112575
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"67"), Diff(INSERT,"112"), Diff(EQUAL,"575¶")]]]></diff>
  </Command>
  <Command __id="1331" _type="PauseCommand" date="Thu Mar 31 10:55:07 EDT 2022" range="20s-30s" starttimestamp="1648737385020" timestamp="1122510">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22535]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1330" _type="ConsoleOutput" date="Thu Mar 31 10:55:07 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="1122510" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22579
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"11"), Diff(INSERT,"2"), Diff(EQUAL,"257"), Diff(DELETE,"5"), Diff(INSERT,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1333" _type="PauseCommand" date="Thu Mar 31 10:55:30 EDT 2022" range="20s-30s" starttimestamp="1648737385020" timestamp="1145084">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22574]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1332" _type="ConsoleOutput" date="Thu Mar 31 10:55:30 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="1145084" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22557
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):225"), Diff(INSERT,"5"), Diff(EQUAL,"7"), Diff(DELETE,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1335" _type="PauseCommand" date="Thu Mar 31 10:55:52 EDT 2022" range="20s-30s" starttimestamp="1648737385020" timestamp="1167659">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22575]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1334" _type="ConsoleOutput" date="Thu Mar 31 10:55:52 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="1167659" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22567
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):225"), Diff(DELETE,"5"), Diff(INSERT,"6"), Diff(EQUAL,"7¶")]]]></diff>
  </Command>
  <Command __id="1337" _type="PauseCommand" date="Thu Mar 31 10:56:15 EDT 2022" range="20s-30s" starttimestamp="1648737385020" timestamp="1190242">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[22583]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1336" _type="ConsoleOutput" date="Thu Mar 31 10:56:15 EDT 2022" overflow="false" starttimestamp="1648737385020" timestamp="1190242" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):22574
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):225"), Diff(DELETE,"6"), Diff(EQUAL,"7"), Diff(INSERT,"4"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1339" _type="PauseCommand" date="Thu Mar 31 10:57:52 EDT 2022" range="1m-2m" starttimestamp="1648737385020" timestamp="1287890">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[97648]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1338" _type="ShellCommand" date="Thu Mar 31 10:57:52 EDT 2022" starttimestamp="1648737385020" timestamp="1287890" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1341" _type="PauseCommand" date="Thu Mar 31 10:58:52 EDT 2022" range="30s-1m" starttimestamp="1648737385020" timestamp="1347038">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[59148]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1340" _type="ShellCommand" date="Thu Mar 31 10:58:52 EDT 2022" starttimestamp="1648737385020" timestamp="1347038" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1343" _type="PauseCommand" date="Thu Mar 31 10:58:57 EDT 2022" range="5s-10s" starttimestamp="1648737385020" timestamp="1352325">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5287]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
